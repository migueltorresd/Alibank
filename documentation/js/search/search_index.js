var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.9","fields":["title","body"],"fieldVectors":[["title/controllers/AccountController.html",[0,1.712,1,2.666]],["body/controllers/AccountController.html",[0,1.378,1,3.128,2,1.728,3,0.121,4,0.121,5,0.105,6,2.626,7,1.981,8,2.371,9,0.091,10,0.807,11,2.841,12,4.519,13,5.238,14,4.519,15,4.519,16,3.829,17,3.829,18,3.829,19,4.966,20,3.829,21,4.438,22,3.829,23,3.829,24,3.044,25,0.744,26,4.556,27,4.937,28,0.226,29,2.042,30,0.017,31,3.044,32,0.597,33,3.044,34,1.291,35,0.86,36,0.766,37,1.362,38,1.187,39,2.004,40,3.044,41,4.438,42,3.044,43,3.044,44,4.438,45,3.044,46,3.044,47,3.829,48,3.044,49,2.626,50,3.488,51,2.626,52,3.044,53,3.044,54,3.128,55,3.044,56,3.044,57,3.044,58,3.044,59,3.044,60,3.044,61,3.044,62,4.438,63,3.044,64,3.044,65,3.044,66,3.044,67,3.044,68,4.438,69,3.044,70,3.044,71,3.044,72,3.044,73,1.157,74,0.422,75,1.378,76,0.759,77,2.889,78,2.626,79,2.351,80,0.727,81,1.728,82,1.845,83,2.351,84,2.973,85,1.981,86,2.973,87,2.626,88,1.188,89,1.534,90,3.044,91,0.121,92,0.168,93,1.188,94,1.91,95,1.508,96,3.044,97,1.993,98,2.986,99,3.044,100,3.044,101,4.446,102,3.044,103,3.044,104,3.044,105,3.044,106,3.044,107,3.044,108,4.966,109,2.37,110,1.379,111,4.438,112,3.044,113,3.044,114,0.989,115,3.044,116,3.044,117,1.247,118,3.044,119,3.044,120,3.044,121,1.981,122,3.044,123,3.044,124,1.157,125,3.044,126,3.044,127,3.044,128,3.044,129,0.01,130,0.01]],["title/classes/AccountDTO.html",[50,2.292,92,0.209]],["body/classes/AccountDTO.html",[3,0.196,4,0.196,5,0.171,9,0.147,25,0.702,28,0.209,29,1.753,30,0.017,32,0.512,50,4.384,74,0.326,91,0.244,92,0.37,121,4.37,124,1.832,129,0.013,130,0.013,131,2.234,132,4.258,133,0.501,134,3.288,135,2.65,136,3.104,137,0.788,138,4.009,139,1.914,140,1.536,141,4.37,142,5.78,143,4.935,144,2.879,145,3.354,146,1.536,147,2.093,148,0.586,149,4.935,150,2.65,151,4.935,152,4.258,153,2.801,154,2.488,155,1.174,156,3.288]],["title/entities/AccountEntity.html",[88,1.477,157,1.125]],["body/entities/AccountEntity.html",[3,0.136,4,0.136,5,0.119,8,1.558,9,0.102,25,0.534,28,0.226,29,1.894,30,0.018,32,0.553,35,0.777,36,0.523,37,1.211,38,0.569,73,1.462,74,0.37,88,2.772,91,0.192,92,0.267,97,0.979,110,1.994,114,2.085,117,1.985,124,1.955,129,0.011,130,0.011,133,0.349,137,0.718,140,1.209,144,2.297,145,2.676,146,1.058,147,1.647,148,0.665,150,2.62,155,1.269,157,1.441,158,1.023,159,2.657,160,2.193,161,1.638,162,3.953,163,4.956,164,2.827,165,2.413,166,3.234,167,3.742,168,3.441,169,3.183,170,2.994,171,1.892,172,3.689,173,3.742,174,3.441,175,4.845,176,2.905,177,3.441,178,3.742,179,2.19,180,3.415,181,2.936,182,3.415,183,2.48,184,3.415,185,2.587,186,3.441,187,2.442,188,1.805,189,3.415,190,1.723,191,1.32,192,2.085,193,3.415,194,3.154,195,4.332,196,3.154,197,2.936,198,3.441,199,3.441,200,3.742,201,3.889,202,3.953,203,3.953,204,1.282,205,3.183,206,2.085,207,1.441,208,2.085,209,2.085,210,2.968,211,0.786,212,2.968,213,2.968,214,1.409,215,4.845,216,3.441,217,3.441,218,3.441,219,3.441]],["title/interfaces/AccountModel.html",[205,2.147,220,0.688]],["body/interfaces/AccountModel.html",[3,0.199,4,0.199,5,0.174,9,0.15,25,0.645,28,0.221,30,0.017,36,0.672,37,1.288,73,1.765,74,0.411,91,0.247,110,2.304,114,2.3,124,1.625,129,0.014,130,0.014,133,0.511,137,0.798,140,1.555,148,0.593,162,4.988,163,5.466,164,3.567,165,3.045,179,2.644,205,3.843,220,1.134,221,1.37,222,4.341,223,2.118,224,1.188,225,3.328,226,4.607,227,4.289]],["title/injectables/AccountRepository.html",[228,0.656,229,1.907]],["body/injectables/AccountRepository.html",[3,0.083,4,0.083,5,0.073,8,1.513,9,0.062,10,0.608,11,2.056,25,0.701,28,0.189,30,0.018,32,0.539,34,1.155,35,0.769,36,0.685,37,1.366,38,1.157,39,1.959,73,1.567,74,0.342,75,1.513,76,1.545,80,0.501,88,2.478,91,0.132,92,0.184,93,1.305,94,2.491,95,0.714,97,1.762,98,0.951,114,1.353,117,1.945,121,2.71,124,1.946,129,0.007,130,0.007,133,0.61,137,0.428,139,1.868,141,2.71,146,1.132,147,1.614,148,0.717,150,2.043,155,1.146,157,1.722,158,0.625,160,2.149,161,1.58,162,2.356,164,1.059,165,2.731,171,0.82,178,3.667,190,1.189,191,1.847,204,0.782,207,0.994,211,1.373,214,2.261,221,0.572,223,0.714,224,0.988,228,0.58,229,3.266,230,0.747,231,1.812,232,2.099,233,2.265,234,2.884,235,2.884,236,1.785,237,1.785,238,2.356,239,1.897,240,2.356,241,1.897,242,1.812,243,2.694,244,2.1,245,2.884,246,1.897,247,3.593,248,2.1,249,1.785,250,1.785,251,1.192,252,2.356,253,1.685,254,2.582,255,1.513,256,1.897,257,2.176,258,2.356,259,3.343,260,1.897,261,1.768,262,2.1,263,2.731,264,3.346,265,3.847,266,5.125,267,2.778,268,2.778,269,2.919,270,2.586,271,2.884,272,2.1,273,2.462,274,3.209,275,5.521,276,2.884,277,2.1,278,1.785,279,2.1,280,2.694,281,1.785,282,2.1,283,2.356,284,2.356,285,2.1,286,1.897,287,2.1,288,1.897,289,2.582,290,1.785,291,2.582,292,2.356,293,2.1,294,1.897,295,2.1,296,1.897,297,1.897,298,1.685,299,1.897,300,1.945,301,2.582,302,1.685,303,1.273,304,1.059,305,2.935,306,2.1,307,1.812,308,1.812,309,1.273,310,1.273,311,1.595,312,1.706,313,1.273,314,1.785,315,1.245,316,3.593,317,1.812,318,1.273,319,1.273,320,2.026,321,2.176,322,1.48,323,1.48,324,2.1,325,3.346,326,2.1,327,2.1,328,1.192,329,2.1,330,4.096,331,1.622]],["title/interfaces/AccountRepositoryInterface.html",[220,0.688,305,2.666]],["body/interfaces/AccountRepositoryInterface.html",[3,0.142,4,0.142,5,0.124,9,0.107,10,0.907,25,0.672,28,0.171,30,0.017,32,0.477,34,1.043,35,0.694,36,0.618,38,1.115,39,1.951,73,1.615,74,0.329,76,1.43,88,1.399,91,0.198,114,1.62,117,2.762,121,3.245,124,1.839,129,0.011,130,0.011,133,0.629,137,0.834,141,3.245,144,2.538,146,1.354,147,2.292,148,0.73,150,2.902,155,1.093,158,1.066,161,1.354,178,3.85,188,1.857,191,1.976,211,1.54,220,0.907,221,0.976,223,2.214,224,1.285,232,3.283,234,4.301,235,4.301,236,2.662,263,2.902,265,3.755,266,5.405,267,2.762,268,2.762,269,3.036,270,2.902,271,4.301,273,2.762,276,4.301,278,2.662,280,2.829,305,4.753,315,2.308,332,4.786,333,2.034,334,3.021,335,2.829,336,2.662,337,3.021,338,3.021,339,3.474,340,3.123,341,3.583,342,3.85,343,4.087,344,2.768,345,4.985,346,2.829,347,2.526,348,3.85]],["title/injectables/AccountService.html",[84,2.147,228,0.656]],["body/injectables/AccountService.html",[3,0.088,4,0.088,5,0.077,8,1.582,9,0.066,10,0.636,11,2.827,12,3.015,14,3.727,15,3.015,16,3.015,17,3.015,18,3.015,20,3.015,22,3.015,23,3.015,25,0.733,28,0.202,30,0.018,32,0.571,34,1.235,35,0.822,36,0.732,37,0.636,38,1.122,39,1.909,49,3.015,50,2.968,73,1.542,74,0.351,76,1.693,80,0.53,81,1.261,84,3.663,88,2.569,89,1.12,91,0.088,92,0.122,93,1.364,94,1.859,95,1.468,97,1.904,98,3.174,109,3.668,110,2.109,114,1.731,117,1.769,121,3.467,124,1.902,129,0.008,130,0.008,139,2.214,141,1.446,147,1.665,148,0.654,155,1.168,161,0.763,162,3.045,163,4.114,166,2.982,171,0.867,190,1.243,205,1.261,211,0.798,214,2.006,224,1.168,228,0.606,229,2.851,230,0.79,233,2.337,261,1.302,311,2.823,312,2.844,325,5.056,349,1.916,350,3.494,351,3.494,352,4.32,353,2.221,354,3.358,355,3.159,356,2.221,357,3.494,358,2.221,359,3.015,360,3.399,361,2.221,362,2.221,363,4.898,364,3.494,365,2.221,366,2.221,367,2.118,368,3.494,369,2.221,370,3.494,371,2.221,372,2.699,373,2.221,374,3.494,375,2.221,376,3.494,377,2.221,378,3.452,379,2.221,380,2.221,381,2.221,382,2.221,383,3.494,384,2.221,385,3.494,386,2.221,387,2.221,388,3.494,389,3.494,390,2.274,391,3.494,392,2.221,393,2.221,394,1.346,395,2.221,396,2.221,397,2.221,398,4.32,399,3.494,400,2.221,401,2.221,402,1.715,403,2.221,404,1.715,405,2.221,406,2.221,407,2.221,408,5.917,409,5.917,410,5.917,411,5.917,412,4.226,413,2.221,414,2.221,415,4.898,416,2.221,417,2.221,418,2.221,419,2.221,420,2.221]],["title/entities/AccountTypeEntity.html",[157,1.125,166,1.907]],["body/entities/AccountTypeEntity.html",[3,0.17,4,0.17,5,0.148,9,0.127,25,0.635,28,0.223,29,1.787,30,0.017,32,0.522,35,0.901,37,1.26,73,1.637,74,0.414,91,0.223,92,0.31,114,2.25,117,2.304,124,1.916,129,0.012,130,0.012,133,0.435,137,0.72,140,1.403,144,2.304,145,2.683,146,1.553,147,2.498,148,0.7,155,1.197,157,1.672,158,1.274,160,2.546,166,3.583,169,3.192,170,3.003,172,3.805,183,2.484,196,3.661,197,3.408,200,4.344,201,4.041,204,1.595,206,2.596,207,1.672,208,2.596,209,2.596,224,1.072,226,4.087,421,5.753,422,3.308,423,4.626,424,3.695,425,3.408,426,4.852,427,3.695,428,2.683,429,3.695,430,2.788,431,4.283]],["title/interfaces/AccountTypeModel.html",[220,0.688,226,2.462]],["body/interfaces/AccountTypeModel.html",[3,0.222,4,0.222,5,0.194,9,0.166,25,0.724,28,0.211,30,0.017,35,0.889,37,1.335,73,1.849,91,0.222,114,2.384,124,1.458,129,0.014,130,0.014,133,0.568,137,0.716,140,1.658,147,1.901,148,0.633,220,1.018,221,1.524,223,1.901,224,1.066,225,2.987,226,4.326,432,4.826,433,4.826]],["title/injectables/AccountTypeRepository.html",[228,0.656,354,2.147]],["body/injectables/AccountTypeRepository.html",[3,0.09,4,0.09,5,0.079,9,0.068,10,0.648,11,2.128,25,0.671,28,0.178,30,0.017,32,0.514,34,1.087,35,0.815,36,0.644,37,1.344,38,1.129,39,1.949,73,1.294,74,0.356,75,1.613,76,1.49,80,0.543,91,0.141,92,0.196,93,1.391,94,0.979,95,0.774,97,1.759,114,1.751,117,2.033,124,2.02,129,0.008,130,0.008,133,0.606,137,0.456,146,1.447,147,2.511,148,0.748,155,1.138,157,1.776,160,2.247,161,1.177,166,3.203,171,1.391,183,1.327,190,1.561,191,1.833,192,0.979,204,0.848,207,1.059,211,1.577,221,0.62,223,0.774,224,1.178,228,0.618,230,0.81,232,2.502,233,2.369,236,1.902,237,1.902,239,2.022,241,2.491,242,1.964,243,2.818,245,3.073,246,2.022,249,1.902,250,1.902,261,1.327,263,2.66,267,2.757,268,2.757,269,2.896,270,2.459,273,2.446,274,3.051,278,1.902,280,3.243,281,1.902,286,2.022,288,2.022,290,1.902,294,1.292,296,2.022,297,2.022,298,1.795,299,2.022,300,2.207,302,1.795,303,1.379,304,1.147,307,1.964,308,1.964,309,1.379,310,2.159,311,2.094,312,1.798,313,2.159,314,2.343,315,1.635,317,1.964,318,1.379,319,1.379,320,2.159,330,3.786,346,1.292,354,3.689,428,2.369,434,5.482,435,1.758,436,5.107,437,2.511,438,2.276,439,2.276,440,2.276,441,3.499,442,2.302,443,2.511,444,2.276,445,4.283,446,2.276,447,2.276,448,2.318,449,2.276,450,2.318,451,2.511,452,2.276,453,2.318,454,2.276,455,2.276,456,3.093,457,2.276,458,2.276,459,2.276,460,1.758,461,1.964,462,3.562,463,1.758,464,1.758,465,1.758,466,1.758,467,1.758,468,2.276,469,2.276,470,2.276,471,2.276,472,2.276,473,2.276,474,2.276,475,2.276]],["title/interfaces/AccountTypeRepositoryInterface.html",[220,0.688,456,2.666]],["body/interfaces/AccountTypeRepositoryInterface.html",[3,0.153,4,0.153,5,0.134,9,0.115,10,0.954,25,0.609,28,0.199,30,0.017,32,0.436,34,0.954,35,0.774,36,0.565,38,1.057,39,1.878,73,1.666,74,0.346,76,1.308,91,0.208,114,1.703,117,2.825,124,2.002,129,0.011,130,0.011,133,0.604,137,0.856,146,1.396,147,2.172,148,0.747,155,0.999,158,1.146,161,1.145,166,1.943,188,1.952,191,1.955,211,1.46,220,0.954,221,1.05,223,2.272,224,1.314,232,3.369,236,2.799,263,2.75,267,2.618,268,2.618,269,2.967,270,2.75,273,2.618,278,2.799,280,2.975,315,2.381,332,4.6,333,2.188,334,3.176,335,2.975,336,2.799,337,3.176,338,3.176,339,3.609,340,3.222,342,4.048,343,3.873,344,2.977,347,2.717,348,4.048,428,3.29,436,5.311,437,3.694,442,1.952,443,3.694,456,4.711]],["title/modules/AppModule.html",[476,2.921,477,2.666]],["body/modules/AppModule.html",[1,4.198,2,2.975,3,0.153,4,0.153,5,0.134,10,0.701,28,0.156,30,0.017,32,0.32,34,0.701,35,0.467,36,0.416,38,0.638,74,0.494,80,0.92,84,3.914,85,3.412,86,3.914,88,2.046,89,1.943,91,0.153,92,0.212,129,0.011,130,0.011,166,2.642,176,2.373,183,1.952,207,1.146,229,3.476,261,1.436,304,1.943,354,3.914,355,3.682,394,2.336,476,4.6,477,5.532,478,2.977,479,2.717,480,3.326,481,3.326,482,2.717,483,5.138,484,3.326,485,3.326,486,3.326,487,3.914,488,4.179,489,4.179,490,4.179,491,4.179,492,4.179,493,4.522,494,3.326,495,3.326,496,3.855,497,4.198,498,4.198,499,4.198,500,4.198,501,3.855,502,5.242,503,6.391,504,3.855,505,3.855,506,5.242,507,3.855,508,2.977,509,5.242,510,3.326,511,3.855,512,2.717,513,3.855,514,2.977,515,2.642,516,2.642,517,2.642,518,3.694,519,3.855,520,2.977,521,3.855,522,3.855,523,2.717,524,3.855,525,3.855,526,3.855,527,3.855,528,3.326,529,3.855,530,3.855,531,2.977,532,2.717,533,3.855,534,3.326,535,3.855,536,3.326,537,3.855,538,1.943,539,3.855,540,3.326,541,3.855,542,3.326,543,3.855,544,3.855,545,3.855,546,3.855,547,2.717,548,3.855]],["title/interfaces/BaseRepositoryInterface.html",[220,0.688,340,1.907]],["body/interfaces/BaseRepositoryInterface.html",[3,0.126,4,0.126,5,0.11,9,0.095,10,0.834,25,0.689,28,0.175,30,0.017,32,0.518,34,1.069,35,0.712,36,0.634,37,1.18,38,1.153,39,1.972,73,1.532,75,2.075,76,1.619,91,0.126,129,0.01,130,0.01,133,0.632,137,0.587,139,2.127,144,2.803,145,2.187,148,0.733,155,1.187,157,1.929,160,3.479,161,1.683,190,2.479,191,1.898,192,1.973,194,2.984,211,1.047,220,0.579,221,0.867,223,1.082,233,2.804,237,2.448,239,2.602,241,2.602,246,2.602,247,3.826,249,2.448,250,2.448,251,1.807,253,2.311,254,3.541,257,2.984,260,2.602,261,1.708,263,1.973,264,4.143,265,3.562,267,2.803,268,2.803,269,2.944,270,1.973,273,1.878,274,2.448,280,2.602,281,2.448,283,3.231,286,2.602,288,2.602,289,3.541,290,2.448,291,3.541,294,2.602,296,2.602,297,2.602,298,2.311,300,2.992,301,3.541,315,2.697,335,1.807,336,1.7,340,3.37,442,1.186,549,5.597,550,2.746,551,3.183,552,3.183,553,6.229,554,3.183,555,2.244,556,3.183,557,3.183,558,3.183,559,4.584,560,3.183,561,4.584,562,4.584,563,3.183,564,4.584,565,4.584,566,6.843,567,3.183,568,3.183,569,4.584]],["title/classes/CustomerDTO.html",[92,0.209,570,2.147]],["body/classes/CustomerDTO.html",[3,0.146,4,0.146,5,0.128,9,0.11,25,0.73,28,0.221,29,1.937,30,0.018,32,0.566,74,0.244,91,0.202,92,0.321,129,0.011,130,0.011,131,1.673,133,0.375,134,2.719,135,2.191,136,2.566,137,0.652,138,3.314,139,1.952,140,1.27,142,4.849,144,2.086,145,2.43,146,1.624,147,1.731,148,0.648,150,3.141,153,3.864,154,1.862,155,1.298,156,3.851,188,1.897,211,1.555,255,2.305,346,2.89,428,2.43,538,2.937,570,4.094,571,3.188,572,3.531,573,4.5,574,2.937,575,3.531,576,3.531,577,3.695,578,3.635,579,3.352,580,3.695,581,5.417,582,3.695,583,3.314,584,3.314,585,2.854,586,3.695,587,3.589,588,4.393,589,3.188,590,3.695,591,3.314,592,4.393,593,4.393,594,5.417,595,4.393,596,4.393,597,4.393,598,4.393,599,4.393,600,3.933,601,3.188,602,3.695,603,3.589,604,4.106,605,4.393,606,4.5,607,4.393,608,2.854,609,3.188,610,3.188,611,4.393,612,3.188,613,3.188,614,3.188]],["title/entities/CustomerEntity.html",[157,1.125,176,1.712]],["body/entities/CustomerEntity.html",[3,0.114,4,0.114,5,0.1,9,0.085,25,0.71,28,0.232,29,1.966,30,0.018,32,0.574,35,0.837,36,0.604,37,1.087,73,1.32,74,0.369,91,0.168,92,0.234,110,1.574,114,1.942,117,1.742,129,0.009,130,0.009,133,0.291,137,0.544,140,1.061,144,1.742,145,2.029,146,1.637,147,1.445,148,0.596,150,3.25,155,1.317,157,1.265,158,0.854,160,1.925,161,0.929,164,1.448,165,2.179,169,2.414,170,2.271,172,4.115,176,3.245,179,1.977,180,2.997,181,2.577,182,3.945,183,2.477,184,2.997,185,2.704,187,2.143,188,1.584,189,2.997,190,1.513,191,1.158,192,1.83,193,2.997,194,3.644,196,4.617,197,2.577,200,3.284,201,4.187,202,2.997,203,2.997,204,1.07,206,1.741,207,1.265,208,1.741,209,1.741,224,1.067,227,3.069,423,4.073,425,4.299,428,2.029,430,1.87,516,3.012,538,3.012,572,3.621,574,3.012,575,3.069,576,3.621,578,2.989,579,2.989,583,2.768,584,2.768,587,2.997,591,2.768,603,2.997,615,2.478,616,4.369,617,3.569,618,4.253,619,4.253,620,2.872,621,4.253,622,4.253,623,2.872,624,4.829,625,2.872,626,2.872,627,4.253,628,2.872,629,2.872,630,4.833,631,2.872,632,4.253,633,2.872,634,2.872,635,2.872,636,2.872,637,2.872]],["title/interfaces/CustomerModel.html",[220,0.688,227,2.292]],["body/interfaces/CustomerModel.html",[3,0.188,4,0.188,5,0.165,9,0.141,25,0.754,28,0.227,30,0.017,36,0.748,37,1.262,73,1.72,74,0.314,91,0.238,110,2.051,114,2.254,129,0.013,130,0.013,133,0.482,137,0.77,140,1.501,148,0.573,150,2.589,165,2.984,179,2.576,220,1.095,221,1.295,223,2.045,224,1.147,225,3.212,227,3.999,538,3.496,572,4.203,574,3.496,575,4.203,576,4.203,616,5.984,617,4.888,638,4.102,639,4.514]],["title/injectables/CustomerRepository.html",[228,0.656,355,2.02]],["body/injectables/CustomerRepository.html",[3,0.084,4,0.084,5,0.074,9,0.063,10,0.615,11,2.727,25,0.727,28,0.203,30,0.018,32,0.578,34,1.238,35,0.824,36,0.734,37,1.312,38,1.16,39,1.994,73,1.448,74,0.344,75,2.166,76,1.302,80,0.508,91,0.084,92,0.117,93,1.32,94,2.505,95,0.724,97,2.04,98,1.903,114,1.098,129,0.007,130,0.007,133,0.426,139,1.487,146,1.319,148,0.648,150,3.064,157,1.731,158,0.633,161,1.213,164,2.631,165,2.799,171,1.641,176,2.734,183,1.259,185,1.805,190,2.421,191,1.303,192,1.455,204,0.793,207,0.633,211,1.38,214,1.96,221,0.58,224,1.215,228,0.587,230,0.758,233,2.283,236,1.805,237,1.805,238,2.383,239,1.919,240,2.383,241,1.919,243,2.716,246,1.919,247,3.932,249,1.805,250,1.805,251,1.209,252,2.383,253,2.118,255,1.53,257,2.2,258,2.383,261,1.566,267,1.96,268,1.96,278,1.805,281,1.805,284,2.383,286,1.919,288,1.919,290,1.805,292,2.383,294,1.919,296,1.919,297,1.919,298,1.704,299,1.919,300,2.848,302,2.118,303,1.291,304,1.074,309,1.291,310,1.291,311,2.65,312,2.385,313,2.049,314,3.109,315,2.465,316,4.234,318,2.547,319,3.163,320,3.77,321,1.386,322,1.501,323,1.501,328,1.209,355,2.555,442,1.782,450,2.2,451,2.383,453,2.2,538,2.412,555,2.383,572,2.9,573,3.246,574,2.935,575,2.049,576,2.049,617,1.501,640,1.838,641,3.38,642,4.128,643,2.916,644,3.626,645,2.916,646,3.626,647,2.916,648,1.645,649,2.13,650,2.13,651,3.38,652,2.13,653,2.13,654,2.13,655,2.916,656,2.13,657,2.13,658,1.838,659,2.13,660,2.916,661,2.13,662,1.838,663,2.13,664,2.13,665,2.916,666,2.13,667,2.13,668,2.13,669,2.13,670,2.13,671,2.383,672,2.13,673,2.13,674,2.13,675,1.501,676,1.838,677,1.838,678,3.696,679,5.219,680,1.838,681,2.13,682,2.13,683,4.785,684,3.38,685,3.38,686,3.38,687,4.203]],["title/interfaces/CustomerRepositoryInterface.html",[220,0.688,671,2.666]],["body/interfaces/CustomerRepositoryInterface.html",[3,0.107,4,0.107,5,0.093,9,0.08,10,0.739,25,0.727,28,0.182,30,0.017,32,0.508,34,1.113,35,0.741,36,0.66,37,0.739,38,1.158,39,2.004,73,1.415,74,0.268,76,1.628,91,0.161,114,1.319,117,2.505,129,0.009,130,0.009,133,0.644,137,0.745,146,1.607,147,1.845,148,0.711,150,3.313,155,1.166,158,0.802,161,0.887,176,1.222,188,2.278,191,1.978,192,1.747,211,1.633,220,0.739,221,0.735,223,1.978,224,1.363,232,2.933,236,2.167,253,2.046,263,3.012,267,2.868,268,2.868,269,3.076,270,2.335,273,2.868,278,2.167,280,2.304,315,2.022,333,1.531,334,2.46,335,2.304,336,2.167,337,2.46,338,2.46,339,2.957,340,2.736,342,3.135,343,3.289,348,3.135,428,2.917,442,1.512,448,3.98,538,2.736,572,3.289,573,3.768,574,3.082,575,2.46,576,2.46,578,3.485,579,3.485,583,3.98,584,3.98,587,4.31,591,3.533,603,3.825,643,3.502,644,4.209,645,3.502,646,3.502,647,3.502,655,3.502,658,2.328,660,3.502,662,3.502,665,3.502,671,4.707,688,5.473,689,6.108,690,2.698,691,2.698,692,2.698,693,2.698,694,2.698,695,4.059,696,4.059,697,4.059,698,4.059,699,2.698]],["title/injectables/CustomerService.html",[86,2.147,228,0.656]],["body/injectables/CustomerService.html",[3,0.082,4,0.082,5,0.071,8,1.49,9,0.061,10,0.599,11,2.671,25,0.679,28,0.178,30,0.018,32,0.525,34,1.086,35,0.723,36,0.644,37,1.268,38,1.018,39,2.04,74,0.339,76,1.489,80,0.492,81,1.169,86,3.657,88,1.285,89,1.038,91,0.082,92,0.114,93,1.285,94,1.769,95,1.397,97,2.041,98,2.97,124,0.858,129,0.007,130,0.007,133,0.583,141,2.142,146,1.627,148,0.683,150,3.309,155,1.173,160,2.856,161,0.45,164,3.248,176,2.785,183,2.223,185,3.067,188,1.226,190,1.826,192,2.02,193,2.319,211,1.498,214,2.585,224,1.173,228,0.571,229,2.896,230,0.732,233,2.24,250,2.507,253,2.366,269,2.02,273,1.923,274,2.507,290,1.757,298,2.366,299,1.868,300,2.52,302,1.659,311,0.983,312,2.444,314,1.099,315,0.767,316,2.142,328,1.169,354,3.261,355,2.922,378,4.206,394,1.248,441,3.309,442,1.749,448,3.056,450,3.056,453,2.142,463,1.59,464,1.59,465,1.59,466,1.59,467,1.59,516,2.072,570,3.492,574,2.072,583,3.056,584,3.056,617,3.309,642,4.05,648,1.59,676,2.839,677,1.777,678,5.067,689,5.148,700,1.777,701,3.291,702,3.291,703,3.291,704,2.839,705,3.291,706,4.11,707,2.059,708,3.291,709,2.059,710,4.722,711,4.695,712,4.695,713,4.695,714,2.059,715,4.695,716,4.05,717,2.059,718,4.695,719,3.291,720,2.059,721,4.722,722,3.291,723,2.059,724,3.291,725,2.059,726,3.291,727,3.291,728,2.059,729,3.291,730,3.291,731,3.291,732,2.059,733,4.695,734,5.473,735,3.291,736,2.059,737,3.341,738,2.059,739,1.451,740,1.777,741,2.059,742,2.059,743,2.059,744,1.59,745,2.059,746,2.059,747,3.291,748,3.291,749,2.839,750,3.546,751,4.11,752,3.546,753,4.11,754,2.839,755,3.546,756,3.546,757,4.11,758,3.546,759,4.11,760,2.059,761,1.777,762,2.059,763,2.059,764,2.059,765,2.059,766,1.777,767,2.059,768,3.291,769,3.291,770,2.059,771,2.059,772,2.059,773,2.059]],["title/classes/CustomerUpdateDTO.html",[92,0.209,737,2.462]],["body/classes/CustomerUpdateDTO.html",[3,0.145,4,0.145,5,0.127,9,0.109,25,0.707,28,0.211,29,1.778,30,0.017,32,0.519,74,0.241,91,0.2,92,0.319,129,0.011,130,0.011,131,1.653,133,0.371,134,2.697,135,2.174,136,2.546,137,0.647,139,2.264,140,1.26,142,2.821,146,1.591,148,0.693,150,3.134,153,3.85,154,1.841,155,1.191,156,3.713,188,1.882,191,1.702,211,1.695,255,3.208,256,3.85,269,2.688,298,2.546,346,2.867,428,2.41,538,2.919,572,3.509,575,3.509,576,3.509,578,3.889,579,2.697,581,3.151,585,2.821,587,3.56,588,4.358,589,3.151,591,3.288,592,4.358,593,4.358,594,5.39,595,4.358,596,4.358,597,4.358,598,4.358,599,4.358,600,5.239,601,3.151,603,3.56,604,4.081,605,4.358,606,4.472,607,4.358,608,2.821,609,3.151,610,3.151,611,4.358,612,3.151,613,3.151,614,3.151,721,4.358,737,4.526,739,4.623,774,3.151,775,3.652,776,4.111,777,3.786,778,3.652,779,5.39,780,3.901,781,3.652,782,3.652,783,5.051]],["title/classes/DataRangeDTO.html",[92,0.209,784,2.292]],["body/classes/DataRangeDTO.html",[3,0.15,4,0.15,5,0.131,9,0.113,28,0.213,29,1.806,30,0.017,32,0.528,36,0.771,74,0.25,91,0.205,92,0.325,110,2.32,129,0.011,130,0.011,131,1.715,133,0.384,134,2.766,135,2.229,136,2.611,137,0.663,138,3.371,139,1.972,140,1.292,146,1.562,148,0.698,152,6.059,153,3.986,154,1.909,155,1.21,156,3.388,179,2.864,181,3.845,187,3.198,191,1.728,211,1.727,255,2.872,256,4.058,260,3.601,300,2.122,578,3.817,776,3.845,777,3.845,784,4.256,785,5.732,786,3.268,787,4.163,788,5.092,789,5.092,790,5.092,791,5.092,792,3.788,793,6.345,794,4.472,795,3.788,796,6.345,797,6.345,798,3.788,799,4.13,800,3.788]],["title/interfaces/DataRangeModel.html",[220,0.688,801,2.666]],["body/interfaces/DataRangeModel.html",[3,0.21,4,0.21,5,0.183,9,0.158,28,0.214,30,0.017,36,0.827,91,0.21,110,2.434,129,0.014,130,0.014,133,0.537,137,0.678,140,1.604,148,0.612,179,2.93,220,0.963,221,1.442,223,1.799,224,1.009,225,2.826,300,2.168,787,3.004,788,6.214,789,6.214,790,6.214,791,6.214,801,4.531,802,4.566,803,4.566]],["title/controllers/DepositController.html",[0,1.712,500,2.666]],["body/controllers/DepositController.html",[0,2.107,2,2.641,3,0.184,4,0.184,5,0.161,7,3.029,8,2.686,9,0.138,10,1.08,11,2.707,19,5.637,25,0.655,26,4.17,27,4.183,28,0.212,29,1.859,30,0.017,32,0.543,34,1.189,35,0.791,36,0.705,37,1.08,38,1.081,39,1.874,54,4.183,74,0.454,75,2.107,76,1.161,77,4.253,80,1.111,81,2.641,85,3.029,89,2.346,91,0.184,92,0.257,95,1.582,97,1.689,98,2.686,129,0.013,130,0.013,261,2.21,360,2.22,488,3.959,500,4.183,515,2.346,784,3.596,804,4.015,805,3.594,806,5.12,807,5.12,808,4.654,809,4.479,810,4.654,811,4.654,812,4.654,813,4.654,814,5.934,815,4.654,816,3.596,817,4.654,818,2.82,819,4.654,820,4.654,821,3.28,822,3.28,823,4.654,824,4.015,825,4.015,826,4.015,827,4.654,828,4.654]],["title/classes/DepositDTO.html",[92,0.209,809,2.462]],["body/classes/DepositDTO.html",[3,0.187,4,0.187,5,0.163,9,0.14,25,0.694,28,0.206,29,1.703,30,0.017,32,0.498,74,0.311,91,0.237,92,0.362,109,3.51,124,1.56,129,0.013,130,0.013,131,2.135,133,0.478,134,3.195,135,2.575,136,3.016,137,0.766,138,3.895,139,2.149,140,1.493,144,2.451,146,1.307,148,0.57,153,4.205,154,2.377,155,1.141,156,3.195,161,1.307,191,1.883,211,1.666,255,3.13,256,3.924,360,3.137,390,3.895,578,3.692,776,4.19,777,4.19,809,4.645,829,4.068,830,4.501,831,4.715,832,4.715]],["title/entities/DepositEntity.html",[157,1.125,515,1.907]],["body/entities/DepositEntity.html",[3,0.148,4,0.148,5,0.13,8,2.654,9,0.111,25,0.356,28,0.228,29,1.882,30,0.018,32,0.55,35,0.801,36,0.554,37,1.203,74,0.416,88,2.582,91,0.203,92,0.283,109,3.531,110,2.215,124,1.338,129,0.011,130,0.011,133,0.379,137,0.657,140,1.281,144,2.103,145,2.449,146,1.492,155,1.261,157,1.526,158,1.112,160,2.324,161,1.121,165,2.522,167,2.887,169,2.913,170,2.741,171,2.004,172,3.824,173,4.874,179,2.667,180,3.618,181,3.111,182,3.618,183,2.35,184,3.618,185,2.741,187,3.181,188,2.35,189,4.447,190,1.826,191,1.398,192,2.209,193,3.618,194,3.341,197,3.111,201,4.008,202,3.618,203,3.618,204,1.393,206,2.265,207,1.526,208,2.265,209,2.265,224,1.203,346,2.913,390,3.341,423,4.447,430,2.433,515,3.592,805,2.887,830,4.848,833,3.225,834,3.552,835,3.738,836,3.964,837,3.738,838,4.429,839,3.738,840,3.738,841,3.738,842,4.132]],["title/interfaces/DepositModel.html",[220,0.688,842,2.666]],["body/interfaces/DepositModel.html",[3,0.202,4,0.202,5,0.177,8,3.22,9,0.152,25,0.649,28,0.217,30,0.017,36,0.678,37,1.294,74,0.337,91,0.249,109,3.798,110,2.385,129,0.014,130,0.014,133,0.518,137,0.805,140,1.569,148,0.599,165,3.061,179,2.904,205,4.037,220,1.144,221,1.39,223,2.137,224,1.199,225,3.357,830,4.093,834,4.31,842,4.803,843,4.403]],["title/injectables/DepositRepository.html",[228,0.656,487,2.147]],["body/injectables/DepositRepository.html",[3,0.082,4,0.082,5,0.072,8,2.332,9,0.062,10,0.602,11,1.538,25,0.67,28,0.184,30,0.017,32,0.526,34,1.122,35,0.747,36,0.665,37,1.352,38,1.132,39,1.79,73,1.077,74,0.34,75,2.486,76,1.539,80,0.495,91,0.082,92,0.114,93,1.292,94,2.479,95,0.705,97,1.703,110,1.706,124,1.431,129,0.007,130,0.007,133,0.557,137,0.266,139,2.102,146,1.51,148,0.722,157,1.713,158,0.617,161,1.585,165,1.777,171,0.81,179,2.144,187,2.376,190,2.626,191,1.79,192,1.424,204,0.773,207,0.617,211,1.607,221,0.565,224,1.341,228,0.574,230,0.738,233,2.249,237,1.767,238,2.333,239,1.878,240,2.333,241,1.878,243,2.675,246,1.878,247,4.014,249,1.767,250,1.767,251,1.177,252,2.333,253,2.376,255,1.498,257,2.688,258,3.322,260,1.177,261,1.756,263,2.575,267,2.692,268,2.692,270,2.363,273,1.356,274,1.767,281,1.767,284,2.333,286,1.878,288,1.878,290,1.767,292,2.333,294,1.878,296,1.878,297,1.878,298,1.668,299,1.878,300,2.941,302,2.596,303,1.257,304,1.045,309,1.257,310,1.257,311,1.971,312,1.931,313,1.257,314,2.75,315,2.599,316,3.068,318,2.006,319,2.006,320,2.857,321,1.35,322,1.462,323,1.462,328,1.177,331,3.641,336,1.107,360,1.971,441,4.633,442,2.621,448,2.154,450,2.154,451,2.333,453,2.154,487,2.675,515,3.016,555,2.911,675,2.333,787,3.396,794,2.333,799,2.154,830,4.787,834,1.257,836,2.556,844,1.789,845,2.856,846,3.19,847,1.789,848,2.074,849,2.074,850,2.074,851,5.224,852,2.856,853,2.074,854,4.067,855,1.602,856,3.631,857,2.074,858,3.641,859,3.068,860,2.911,861,2.074,862,2.556,863,2.074,864,2.074,865,2.074,866,2.074,867,1.789,868,2.333,869,2.074,870,2.074,871,2.074,872,2.074,873,4.714,874,3.31,875,2.074,876,2.074,877,2.074,878,2.074,879,2.074,880,2.074,881,4.13,882,1.789]],["title/interfaces/DepositRepositoryInterface.html",[220,0.688,868,2.666]],["body/interfaces/DepositRepositoryInterface.html",[3,0.149,4,0.149,5,0.13,9,0.112,10,0.936,25,0.602,28,0.153,30,0.017,32,0.428,34,0.936,35,0.623,36,0.555,37,1.149,38,1.045,39,1.862,74,0.339,76,1.464,91,0.204,110,2.217,124,1.782,129,0.011,130,0.011,133,0.596,137,0.847,146,1.494,148,0.741,155,0.98,158,1.115,161,1.494,179,2.784,187,3.184,188,1.915,191,1.721,211,1.562,220,0.936,221,1.021,223,2.25,224,0.98,232,3.336,263,2.718,267,2.588,268,2.588,269,2.718,270,2.718,273,2.106,315,2.353,333,2.127,334,3.116,335,2.919,336,2.746,337,3.116,338,3.116,339,3.557,340,3.184,343,3.116,347,2.642,360,2.454,442,2.353,515,1.889,787,4.048,794,3.624,799,3.347,836,3.972,845,4.437,846,4.534,851,5.861,852,4.437,854,4.437,855,2.895,856,4.452,858,4.879,859,4.112,860,4.137,868,4.666,883,5.064,884,5.142,885,3.748]],["title/injectables/DepositService.html",[228,0.656,488,2.292]],["body/injectables/DepositService.html",[3,0.138,4,0.138,5,0.121,9,0.104,10,0.888,11,2.488,25,0.667,28,0.182,30,0.017,32,0.509,34,1.113,35,0.741,36,0.66,37,1.113,38,0.933,39,1.907,74,0.404,76,1.607,80,0.83,81,1.974,88,1.906,89,1.753,91,0.138,92,0.192,93,1.906,94,2.101,95,1.66,97,1.741,98,2.554,124,1.595,129,0.011,130,0.011,133,0.572,137,0.625,139,1.518,146,1.459,148,0.687,155,1.075,160,2.21,161,1.067,171,1.906,188,1.819,190,1.737,211,1.397,214,2.311,224,0.931,228,0.847,229,3.458,230,1.237,251,1.974,261,1.819,300,2,312,2,325,3.976,328,2.771,360,3.074,367,2.959,372,4.725,378,3.441,394,2.108,402,3.771,412,3.001,487,3.791,488,3.905,515,2.844,716,4.212,744,2.687,784,3.905,787,2.771,805,3.771,806,4.212,807,4.212,809,4.194,816,3.905,821,4.311,822,4.541,830,4.694,847,3.001,851,4.725,859,3.178,886,3.001,887,4.357,888,3.478,889,4.883,890,3.478,891,4.883,892,4.883,893,3.478,894,4.883,895,3.001,896,3.478,897,4.212,898,4.212,899,3.771,900,4.883,901,4.883,902,3.478,903,3.001,904,3.478,905,3.478,906,4.883,907,3.478,908,3.478,909,3.478,910,3.478,911,3.478,912,3.478,913,3.001,914,3.478,915,3.001,916,3.001,917,3.001,918,4.883,919,4.212,920,3.001,921,3.001,922,3.001]],["title/entities/DocumentTypeEntity.html",[157,1.125,516,1.907]],["body/entities/DocumentTypeEntity.html",[3,0.17,4,0.17,5,0.149,9,0.128,25,0.636,28,0.223,29,1.79,30,0.017,32,0.523,35,0.901,37,1.261,73,1.639,74,0.415,91,0.223,92,0.311,114,2.252,117,2.308,129,0.012,130,0.012,133,0.436,137,0.721,140,1.406,144,2.308,145,2.689,146,1.554,147,2.5,148,0.7,155,1.199,157,1.676,158,1.277,160,2.551,169,3.198,170,3.009,172,3.811,183,2.487,196,3.668,197,3.415,201,4.046,204,1.6,206,2.603,207,1.676,208,2.603,209,2.603,224,1.074,422,3.318,423,4.63,424,3.706,425,3.415,426,4.862,427,3.706,428,2.689,429,3.706,430,2.796,516,3.586,579,3.927,639,4.093,923,5.759,924,4.296]],["title/interfaces/DocumentTypeModel.html",[220,0.688,639,2.462]],["body/interfaces/DocumentTypeModel.html",[3,0.222,4,0.222,5,0.194,9,0.166,25,0.724,28,0.211,30,0.017,35,0.889,37,1.335,73,1.849,91,0.222,114,2.384,129,0.014,130,0.014,133,0.568,137,0.716,140,1.658,147,1.901,148,0.633,220,1.018,221,1.524,223,1.901,224,1.066,225,2.987,579,2.987,639,4.326,925,4.826,926,4.826]],["title/injectables/DocumentTypeRepository.html",[228,0.656,489,2.292]],["body/injectables/DocumentTypeRepository.html",[3,0.087,4,0.087,5,0.076,9,0.065,10,0.631,25,0.636,28,0.175,30,0.017,32,0.508,34,1.073,35,0.809,36,0.636,37,1.332,38,1.12,39,1.818,73,1.119,74,0.35,75,1.57,76,1.471,80,0.525,91,0.087,92,0.121,93,1.354,94,0.947,95,0.748,97,1.739,114,1.723,117,1.996,129,0.008,130,0.008,133,0.572,139,2.074,146,1.406,147,2.519,148,0.752,157,1.753,158,0.654,161,1.542,171,1.354,183,1.292,190,2.646,191,1.818,192,0.947,204,0.82,207,0.654,211,1.566,221,0.599,224,1.365,228,0.602,230,0.783,232,1.109,233,2.325,236,1.852,237,1.852,239,1.969,241,1.969,243,2.766,246,1.969,249,1.852,250,1.852,253,1.748,261,1.292,263,2.629,267,2.734,268,2.734,270,2.424,273,2.415,274,3.008,278,1.852,281,1.852,286,1.969,288,1.969,290,1.852,294,1.969,296,1.969,297,1.969,298,1.748,299,1.969,300,2.969,302,2.164,303,1.334,304,1.109,309,1.334,310,2.102,311,2.049,312,1.759,313,2.602,314,2.831,315,2.629,318,1.334,319,1.334,320,2.102,321,1.432,346,1.249,428,2.325,435,1.7,436,4.975,437,2.445,441,4.704,442,2.685,443,2.445,445,4.204,448,2.258,450,2.258,451,2.445,453,2.258,460,1.7,461,1.899,489,2.953,516,2.972,579,4.111,675,2.445,862,4.351,927,5.424,928,2.201,929,2.201,930,2.201,931,2.201,932,2.201,933,2.201,934,2.201,935,2.201,936,2.201,937,2.445,938,2.201,939,2.201,940,3.469,941,2.201,942,2.201,943,2.201,944,2.201,945,2.201,946,3.469,947,2.201,948,2.201,949,2.201,950,2.201,951,2.201,952,2.201,953,2.201,954,2.201,955,2.201,956,2.201,957,4.294,958,2.201]],["title/interfaces/DocumentTypeRepositoryInterface.html",[220,0.688,937,2.666]],["body/interfaces/DocumentTypeRepositoryInterface.html",[3,0.154,4,0.154,5,0.135,9,0.116,10,0.961,25,0.611,28,0.2,30,0.017,32,0.439,34,0.961,35,0.778,36,0.57,38,1.062,39,1.884,73,1.674,74,0.348,76,1.317,91,0.209,114,1.716,117,2.834,129,0.011,130,0.011,133,0.608,137,0.859,146,1.402,147,2.182,148,0.748,155,1.007,158,1.159,161,1.153,188,1.967,191,1.749,211,1.466,220,0.961,221,1.061,223,2.281,224,1.319,232,3.382,236,2.819,263,2.763,267,2.63,268,2.63,269,3.097,270,2.763,273,2.63,278,2.819,315,2.392,333,2.212,334,3.2,335,2.997,336,2.819,337,3.2,338,3.2,339,3.63,340,3.236,343,3.891,344,3.01,347,2.746,428,3.301,436,5.32,437,3.722,442,1.967,443,3.722,516,1.964,579,4.106,937,4.729,959,5.167]],["title/classes/ExceptionFiltersFilter.html",[92,0.209,960,2.921]],["body/classes/ExceptionFiltersFilter.html",[3,0.196,4,0.196,5,0.171,9,0.147,10,1.121,28,0.147,30,0.017,32,0.41,34,0.898,35,0.598,36,0.532,38,0.816,74,0.326,76,1.536,80,1.178,91,0.244,92,0.339,129,0.013,130,0.013,131,2.234,133,0.625,137,0.788,147,1.677,148,0.689,155,0.941,161,1.078,207,1.996,261,1.838,442,2.294,532,4.955,960,5.429,961,5.313,962,5.313,963,4.258,964,5.313,965,6.065,966,6.159,967,6.065,968,5.429,969,5.313,970,7.234,971,6.241,972,4.935,973,4.341,974,5.313,975,5.313,976,5.792,977,5.313,978,5.313,979,5.313,980,4.935]],["title/guards/GuardsGuard.html",[82,2.292,981,2.921]],["body/guards/GuardsGuard.html",[3,0.198,4,0.198,5,0.173,9,0.148,10,1.128,11,2.512,28,0.184,30,0.017,32,0.515,34,1.128,35,0.751,36,0.669,38,0.825,39,1.688,74,0.445,80,1.191,82,3.756,91,0.198,92,0.275,93,1.947,97,1.919,129,0.013,130,0.013,183,1.858,185,3.31,207,1.483,214,2.89,228,1.076,512,3.515,818,3.022,968,3.852,982,4.987,983,4.303,984,7.056,985,4.987,986,6.381,987,4.987,988,6.199,989,6.087,990,4.987,991,4.303,992,4.303,993,3.852,994,4.303,995,4.987,996,5.348,997,4.987,998,4.303,999,4.303,1000,4.987,1001,3.852,1002,4.987,1003,5.348,1004,4.987,1005,4.987,1006,4.987]],["title/injectables/InterceptorsInterceptor.html",[228,0.656,1007,2.921]],["body/injectables/InterceptorsInterceptor.html",[3,0.218,4,0.218,5,0.191,9,0.164,10,1.198,28,0.164,30,0.017,32,0.458,34,1.002,35,0.667,36,0.594,38,0.911,74,0.435,80,1.315,91,0.218,92,0.304,97,1.567,129,0.014,130,0.014,207,1.638,228,1.143,230,1.959,989,6.298,991,4.752,992,6.078,993,4.254,1007,5.086,1008,4.752,1009,6.585,1010,6.585,1011,6.078,1012,7.3,1013,5.507,1014,6.585,1015,5.507]],["title/injectables/MiddlewaresMiddleware.html",[228,0.656,523,2.666]],["body/injectables/MiddlewaresMiddleware.html",[3,0.209,4,0.209,5,0.183,9,0.157,10,1.168,28,0.157,30,0.017,32,0.439,34,0.961,35,0.64,36,0.57,38,0.874,74,0.424,80,1.261,91,0.209,92,0.291,129,0.014,130,0.014,207,1.571,214,2.631,228,1.115,230,1.879,261,1.968,523,4.526,994,6.21,996,5.541,998,4.558,999,5.541,1011,6.21,1016,4.558,1017,5.541,1018,6.422,1019,6.92,1020,6.21,1021,7.198,1022,5.283,1023,5.283,1024,6.422,1025,4.558,1026,5.283,1027,5.283,1028,5.283,1029,4.558]],["title/classes/PaginationDTO.html",[92,0.209,816,2.292]],["body/classes/PaginationDTO.html",[3,0.186,4,0.186,5,0.162,9,0.139,28,0.205,29,1.696,30,0.017,32,0.495,74,0.309,91,0.236,92,0.361,110,2.263,129,0.013,130,0.013,131,2.12,133,0.475,134,3.182,135,2.564,136,3.004,137,0.763,139,2.263,140,1.487,148,0.657,153,4.198,154,2.361,155,1.136,156,3.182,161,1.302,190,2.12,191,1.879,211,1.575,255,3.123,256,3.915,425,3.972,442,2.22,578,3.887,776,4.18,777,4.18,816,4.316,899,4.602,1030,4.041,1031,5.654,1032,4.684,1033,5.959,1034,5.959,1035,6.898,1036,4.684]],["title/interfaces/PaginationModel.html",[220,0.688,1037,2.666]],["body/interfaces/PaginationModel.html",[3,0.227,4,0.227,5,0.198,9,0.17,28,0.201,30,0.017,91,0.227,110,2.375,129,0.015,130,0.015,133,0.581,137,0.733,140,1.682,148,0.545,220,1.042,221,1.56,223,1.947,224,1.092,225,3.059,425,4.481,899,4.425,1031,6.379,1037,4.751,1038,4.942]],["title/injectables/PipesPipe.html",[228,0.656,1039,2.921]],["body/injectables/PipesPipe.html",[3,0.223,4,0.223,5,0.195,9,0.167,10,1.214,28,0.167,30,0.017,32,0.468,34,1.024,35,0.682,36,0.607,38,0.931,74,0.371,80,1.343,91,0.223,92,0.31,97,1.601,129,0.015,130,0.015,170,3.561,207,1.673,228,1.158,230,2.001,704,5.755,1039,5.151,1040,4.855,1041,6.67,1042,6.133,1043,7.351,1044,5.627,1045,6.67]],["title/controllers/SecurityController.html",[0,1.712,499,2.666]],["body/controllers/SecurityController.html",[0,2.204,2,2.763,3,0.193,4,0.193,5,0.169,7,3.169,9,0.145,10,1.111,25,0.464,26,4.043,27,4.303,28,0.214,29,1.898,30,0.017,32,0.555,34,1.214,35,0.808,36,0.72,38,1.103,73,1.592,74,0.44,77,3.169,80,1.162,85,3.169,91,0.193,92,0.268,95,1.655,97,1.898,129,0.013,130,0.013,164,3.526,490,4.043,499,4.303,570,3.97,818,2.95,1046,4.2,1047,4.868,1048,6.106,1049,5.268,1050,5.268,1051,4.868,1052,6.106,1053,4.868,1054,4.868,1055,4.553,1056,6.995,1057,4.868,1058,4.868,1059,6.106,1060,4.868,1061,4.2,1062,4.868,1063,4.868,1064,4.868,1065,4.868,1066,4.868,1067,4.868,1068,3.76,1069,4.868]],["title/injectables/SecurityService.html",[228,0.656,490,2.292]],["body/injectables/SecurityService.html",[3,0.135,4,0.135,5,0.118,8,2.895,9,0.101,10,0.876,11,2.472,25,0.663,28,0.18,30,0.018,32,0.504,34,1.103,35,0.734,36,0.654,37,0.62,38,0.923,50,2.916,73,1.254,74,0.438,76,1.392,80,0.814,84,3.871,89,1.718,91,0.135,92,0.188,93,1.879,94,2.608,95,1.896,97,1.888,98,3.004,129,0.01,130,0.01,146,1.051,148,0.531,155,1.063,158,1.013,164,2.812,171,1.33,176,2.179,183,1.269,185,1.819,190,2.274,214,2.853,224,1.219,227,2.916,228,0.835,230,1.212,300,1.396,302,2.426,311,2.892,312,2.718,314,1.819,315,1.269,325,2.402,355,3.543,367,2.916,394,2.065,404,4.682,463,2.632,464,2.632,465,2.632,466,2.632,467,2.632,489,4.133,490,3.875,512,2.402,570,3.44,574,2.812,648,2.632,678,2.632,680,5.23,710,5.725,749,2.94,750,2.94,752,2.94,754,2.94,755,4.152,756,2.94,758,2.94,761,2.94,766,2.94,986,5.885,1003,4.152,1029,4.152,1049,4.152,1050,4.152,1055,3.946,1068,2.632,1070,2.94,1071,4.813,1072,3.408,1073,4.813,1074,3.408,1075,4.813,1076,4.813,1077,4.813,1078,3.408,1079,4.813,1080,4.813,1081,3.408,1082,4.152,1083,4.813,1084,3.408,1085,3.408,1086,3.408,1087,3.408,1088,4.813,1089,3.408,1090,5.579,1091,4.813,1092,3.408,1093,4.813,1094,4.813,1095,4.813,1096,4.813,1097,4.813,1098,3.408,1099,3.408,1100,3.408,1101,3.408,1102,3.408,1103,3.408,1104,3.408,1105,3.408,1106,3.408,1107,3.408,1108,3.408,1109,3.408]],["title/classes/SignDTO.html",[92,0.209,1055,2.462]],["body/classes/SignDTO.html",[3,0.19,4,0.19,5,0.166,9,0.143,25,0.697,28,0.207,29,1.721,30,0.017,32,0.503,74,0.316,91,0.24,92,0.365,129,0.013,130,0.013,131,2.17,133,0.486,134,3.229,135,2.602,136,3.048,137,0.774,139,2.162,140,1.509,146,1.52,148,0.662,154,2.417,155,1.153,156,3.229,255,3.149,256,3.948,300,2.477,442,2.253,538,3.339,574,3.339,583,3.936,584,3.936,591,3.936,604,5.241,776,4.216,799,3.936,1055,4.668,1082,6.002,1110,4.136,1111,6.048,1112,4.794,1113,4.794]],["title/controllers/TransferController.html",[0,1.712,498,2.666]],["body/controllers/TransferController.html",[0,1.717,2,2.153,3,0.15,4,0.15,5,0.131,7,2.469,9,0.113,10,0.943,11,2.831,25,0.691,26,4.447,27,4.837,28,0.222,29,1.953,30,0.017,32,0.571,34,1.249,35,0.831,36,0.74,37,1.155,38,1.135,39,2.034,51,3.272,54,3.654,74,0.439,75,1.717,76,0.946,77,3.374,79,2.93,80,0.906,81,2.153,82,2.299,83,2.93,85,2.469,89,1.912,91,0.15,92,0.209,95,1.289,97,1.953,98,1.717,101,5.134,129,0.011,130,0.011,135,2.86,214,1.554,360,2.818,492,3.579,498,3.654,517,1.912,784,3.847,816,3.847,818,2.299,821,4.163,822,4.163,824,5.096,825,5.096,826,5.096,887,4.562,1114,3.272,1115,4.473,1116,4.473,1117,5.096,1118,5.096,1119,4.473,1120,3.272,1121,4.132,1122,3.793,1123,3.793,1124,3.793,1125,3.793,1126,3.793,1127,3.793,1128,3.793,1129,3.793,1130,3.793,1131,3.793,1132,3.793,1133,3.793,1134,3.793,1135,3.793,1136,3.793,1137,3.793,1138,3.793,1139,3.793,1140,3.793,1141,3.793,1142,5.184,1143,3.793,1144,3.793,1145,3.793,1146,3.793,1147,3.793,1148,3.793,1149,3.793,1150,3.793]],["title/classes/TransferDTO.html",[92,0.209,1121,2.462]],["body/classes/TransferDTO.html",[3,0.154,4,0.154,5,0.135,9,0.116,25,0.714,28,0.214,29,1.826,30,0.017,32,0.533,74,0.257,91,0.209,92,0.33,109,3.196,124,1.673,129,0.011,130,0.011,131,1.762,133,0.395,134,2.817,135,2.27,136,2.659,137,0.675,138,3.434,139,2.292,140,1.316,144,2.628,148,0.723,153,4.185,154,1.961,155,1.223,156,3.581,161,1.572,191,1.883,211,1.643,255,3.257,256,4.083,260,2.994,269,2.27,390,3.434,578,3.692,585,3.005,600,4.074,604,4.218,606,4.074,608,3.005,776,4.36,777,4.191,779,4.551,780,4.074,1121,4.603,1151,3.357,1152,4.191,1153,5.985,1154,5.985,1155,4.623,1156,3.891,1157,3.891,1158,5.276,1159,3.891,1160,5.276,1161,3.891,1162,5.276,1163,4.551]],["title/entities/TransferEntity.html",[157,1.125,517,1.907]],["body/entities/TransferEntity.html",[3,0.132,4,0.132,5,0.115,9,0.099,25,0.571,28,0.229,29,1.929,30,0.018,32,0.563,35,0.798,36,0.511,37,1.154,74,0.396,88,2.751,91,0.188,92,0.261,109,3.385,110,2.153,124,1.564,129,0.01,130,0.01,133,0.338,135,1.434,137,0.606,140,1.182,144,1.94,145,2.26,148,0.715,155,1.292,157,1.409,158,0.991,160,2.144,161,1.595,165,2.371,167,3.658,169,2.688,170,2.529,171,1.849,172,3.842,173,4.635,179,2.572,180,3.338,181,2.87,182,3.338,183,2.235,184,3.338,185,2.529,187,3.025,188,1.764,189,3.338,192,2.038,196,3.083,197,2.87,201,3.992,202,3.884,203,3.884,204,1.241,206,2.019,207,1.409,208,2.019,209,2.019,224,1.144,249,2.529,253,2.387,254,3.658,266,3.338,390,3.083,423,4.288,425,2.87,430,2.169,517,3.602,630,3.658,834,3.34,838,4.086,1152,4.424,1155,4.897,1163,4.086,1164,2.875,1165,4.737,1166,4.086,1167,3.884,1168,3.884,1169,3.332,1170,3.332,1171,3.332,1172,3.332,1173,3.332,1174,6.001,1175,4.737,1176,6.001,1177,3.332,1178,4.737,1179,3.332,1180,3.587]],["title/interfaces/TransferModel.html",[220,0.688,1180,2.462]],["body/interfaces/TransferModel.html",[3,0.196,4,0.196,5,0.171,9,0.147,25,0.703,28,0.223,30,0.017,36,0.665,37,1.28,74,0.326,91,0.244,109,3.756,110,2.372,129,0.013,130,0.013,133,0.502,137,0.789,140,1.538,148,0.587,165,3.027,179,2.881,205,4.249,220,1.122,221,1.347,223,2.095,224,1.175,225,3.292,834,4.263,1152,3.736,1155,5.433,1167,4.958,1168,4.958,1180,4.373,1181,4.265]],["title/injectables/TransferRepository.html",[228,0.656,491,2.292]],["body/injectables/TransferRepository.html",[3,0.074,4,0.074,5,0.065,9,0.056,10,0.556,11,1.956,25,0.672,28,0.182,30,0.017,32,0.522,34,1.115,35,0.743,36,0.661,37,1.348,38,1.12,39,1.799,73,1.007,74,0.323,75,1.384,76,1.596,80,0.449,91,0.074,92,0.104,93,1.194,94,2.382,95,0.639,97,1.745,98,0.851,110,2.145,124,1.504,129,0.007,130,0.007,133,0.533,135,1.316,139,2.179,146,1.26,148,0.74,157,1.646,158,0.559,161,1.669,165,1.316,171,0.734,179,2.694,183,1.139,187,2.907,188,1.659,190,2.59,191,1.743,192,1.316,194,1.99,204,0.7,207,0.559,211,1.317,214,0.77,221,0.512,224,1.169,228,0.531,230,0.669,233,2.125,237,1.633,238,2.155,239,1.735,240,2.155,241,1.735,243,2.527,246,1.735,247,3.418,249,1.633,250,1.633,251,1.067,252,2.155,253,2.244,255,1.384,257,1.99,258,2.155,260,1.735,261,1.139,263,2.482,264,3.138,265,3.496,267,2.621,268,2.621,270,2.26,273,2.363,274,1.633,281,1.633,283,2.155,284,2.155,286,1.735,288,1.735,289,2.362,290,1.633,291,2.362,292,2.155,294,1.735,296,1.735,297,1.735,298,1.541,299,1.735,300,2.892,301,2.362,302,1.948,303,1.139,304,0.948,309,1.139,310,1.139,311,1.844,312,1.824,313,2.342,314,2.616,315,2.547,316,2.516,318,1.853,319,1.853,320,2.698,321,1.224,322,1.325,323,1.325,328,1.067,331,3.784,360,2.752,442,1.659,460,2.362,491,2.698,517,2.907,555,2.155,675,2.155,787,3.632,794,3.138,799,2.898,834,2.342,846,2.985,855,1.452,856,4.655,859,2.898,860,4.321,862,2.362,867,1.622,882,3.334,1152,4.395,1167,3.701,1168,3.701,1182,1.622,1183,3.334,1184,3.334,1185,1.622,1186,1.88,1187,1.88,1188,3.058,1189,1.88,1190,5.52,1191,1.88,1192,1.622,1193,1.88,1194,4.056,1195,1.88,1196,1.622,1197,1.88,1198,4.056,1199,1.88,1200,1.88,1201,1.88,1202,1.88,1203,2.155,1204,1.88,1205,1.88,1206,1.88,1207,1.88,1208,3.842,1209,3.058,1210,1.88,1211,1.88,1212,1.88,1213,4.453]],["title/interfaces/TransferRepositoryInterface.html",[220,0.688,1203,2.666]],["body/interfaces/TransferRepositoryInterface.html",[3,0.115,4,0.115,5,0.101,9,0.086,10,0.78,25,0.677,28,0.152,30,0.017,32,0.468,34,0.927,35,0.617,36,0.549,37,1.26,38,1.103,39,1.936,74,0.283,76,1.621,91,0.17,110,2.285,124,1.738,129,0.009,130,0.009,133,0.571,137,0.872,139,1.952,146,1.553,148,0.743,155,1.072,158,0.863,161,1.513,179,2.87,187,3.361,188,1.596,191,1.816,211,1.582,220,0.78,221,0.79,223,2.04,224,0.817,232,3.025,233,2.684,237,2.288,263,2.87,264,3.965,265,4.197,267,2.732,268,2.732,269,2.87,270,2.702,273,1.755,274,2.288,280,2.432,281,2.288,283,3.02,315,2.095,333,1.647,334,2.596,335,2.432,336,2.288,337,2.596,338,2.596,339,3.087,340,2.835,343,3.409,360,2.997,517,1.462,787,4.172,856,4.7,858,5.151,859,4.341,860,4.7,1152,3.806,1183,4.395,1184,4.395,1190,6.38,1192,2.503,1194,4.345,1196,2.503,1198,4.345,1203,4.579,1214,5.177,1215,2.901,1216,2.901,1217,5.625,1218,5.625,1219,2.901,1220,2.901]],["title/injectables/TransferService.html",[228,0.656,492,2.292]],["body/injectables/TransferService.html",[3,0.115,4,0.115,5,0.101,9,0.087,10,0.781,11,2.677,25,0.696,28,0.194,30,0.018,32,0.541,34,1.183,35,0.788,36,0.701,38,1.04,39,1.818,74,0.396,76,1.499,80,0.695,81,1.652,89,1.467,91,0.115,92,0.16,93,1.677,94,2.196,95,1.734,97,1.71,98,2.846,124,1.469,129,0.009,130,0.009,135,1.848,139,2.075,146,0.938,148,0.66,155,0.973,171,2.455,190,1.035,214,2.664,228,0.745,229,3.278,230,1.035,251,2.896,261,1.6,266,3.027,302,1.467,311,1.389,312,1.759,328,3.197,360,3.428,367,2.602,372,3.317,378,3.971,394,1.764,402,4.351,487,3.691,491,3.81,492,3.641,517,3.364,744,3.941,801,4.803,821,4.704,822,4.954,887,3.317,895,2.511,897,4.861,903,2.511,913,2.511,915,4.403,916,4.403,917,2.511,919,5.425,920,2.511,921,2.511,922,2.511,1037,4.803,1115,3.705,1116,3.705,1117,3.705,1118,4.403,1119,3.705,1120,3.705,1121,3.667,1152,2.602,1166,3.705,1167,3.597,1168,3.971,1180,2.795,1185,2.511,1194,2.248,1198,3.317,1208,2.511,1221,2.511,1222,2.91,1223,2.91,1224,4.294,1225,4.294,1226,2.91,1227,4.294,1228,5.103,1229,2.91,1230,5.634,1231,2.91,1232,2.91,1233,2.91,1234,2.91,1235,4.294,1236,2.91,1237,2.91,1238,2.91,1239,2.91,1240,4.294,1241,5.634,1242,2.91,1243,2.91,1244,2.91,1245,2.91,1246,2.91,1247,2.91,1248,4.294,1249,2.91,1250,2.91,1251,2.91,1252,2.91,1253,2.91,1254,2.91,1255,2.91,1256,2.91,1257,4.294,1258,5.103,1259,4.294,1260,2.91,1261,5.103,1262,2.91,1263,2.91,1264,2.91]],["title/classes/TypeOrmExceptionFilter.html",[92,0.209,518,2.666]],["body/classes/TypeOrmExceptionFilter.html",[3,0.172,4,0.172,5,0.151,9,0.129,10,1.033,28,0.169,30,0.017,32,0.362,34,0.791,35,0.527,36,0.469,38,0.719,74,0.375,76,1.417,80,1.038,91,0.172,92,0.24,110,1.352,129,0.012,130,0.012,131,1.969,133,0.576,137,0.891,139,1.352,148,0.722,150,1.871,161,1.588,181,2.635,191,1.547,204,2.659,207,1.689,211,1.445,214,2.85,224,1.206,261,1.62,312,1.781,346,2.468,367,2.635,442,2.116,518,4.003,520,4.387,532,4.727,777,3.442,780,3.358,964,4.901,965,4.901,967,5.458,968,4.886,969,4.901,971,5.787,973,4.003,974,4.901,975,5.787,976,5.787,977,4.901,978,4.901,979,4.901,1020,3.752,1265,4.901,1266,3.752,1267,5.68,1268,5.68,1269,6.707,1270,4.348,1271,5.68,1272,4.348,1273,4.348,1274,5.787,1275,4.348,1276,5.68,1277,4.348,1278,5.68,1279,4.348,1280,5.68,1281,5.68,1282,6.326,1283,4.348,1284,4.348,1285,4.348,1286,4.348,1287,3.752,1288,4.348,1289,4.348,1290,4.348,1291,4.348,1292,4.348,1293,4.348]],["title/injectables/TypesOrmPostgresConfigService.html",[228,0.656,547,2.666]],["body/injectables/TypesOrmPostgresConfigService.html",[3,0.175,4,0.175,5,0.153,9,0.132,10,1.046,28,0.171,30,0.017,32,0.478,34,0.806,35,0.537,36,0.478,38,0.951,74,0.446,80,1.057,88,2.244,91,0.228,92,0.317,93,1.729,95,1.506,97,1.261,129,0.013,130,0.013,133,0.449,137,0.948,148,0.728,155,0.844,158,1.71,161,1.256,166,2.898,176,2.602,183,2.141,204,2.672,207,1.71,228,0.998,230,1.576,265,3.484,304,2.233,367,3.484,508,3.421,515,2.898,516,2.898,517,2.898,531,5.217,532,3.122,534,3.821,536,3.821,538,2.233,540,3.821,542,3.821,547,4.761,818,2.684,898,6.189,973,4.052,1294,5.507,1295,5.507,1296,3.821,1297,5.749,1298,7.173,1299,6.755,1300,6.755,1301,4.429,1302,7.173,1303,4.429,1304,4.429,1305,6.755,1306,6.383,1307,4.429,1308,4.429,1309,4.429,1310,4.429,1311,4.429,1312,4.429]],["title/controllers/UserController.html",[0,1.712,497,2.666]],["body/controllers/UserController.html",[0,1.688,2,2.116,3,0.148,4,0.148,5,0.129,7,2.427,9,0.111,10,0.932,11,2.905,25,0.722,26,3.105,28,0.203,29,2.027,30,0.017,32,0.592,34,1.242,35,0.827,36,0.736,37,1.296,38,1.178,39,2.075,47,4.421,54,3.611,74,0.461,75,1.688,76,0.93,77,3.81,78,3.217,79,2.88,80,0.89,82,2.26,83,2.88,86,3.322,87,3.217,88,1.456,91,0.148,92,0.206,95,1.267,97,2.027,101,3.957,108,3.217,129,0.011,130,0.011,164,3.441,176,1.688,404,2.88,497,3.611,570,3.577,574,2.583,737,4.103,739,2.628,740,3.217,818,2.26,1061,3.217,1313,3.217,1314,5.124,1315,6.303,1316,6.303,1317,5.124,1318,5.854,1319,5.124,1320,5.124,1321,5.854,1322,3.729,1323,3.729,1324,3.729,1325,5.124,1326,3.729,1327,3.729,1328,5.124,1329,3.729,1330,3.729,1331,5.124,1332,3.729,1333,3.729,1334,3.729,1335,3.729,1336,5.124,1337,3.729,1338,3.729,1339,3.729,1340,3.729,1341,3.729,1342,3.729,1343,3.729,1344,3.729,1345,3.729,1346,3.729,1347,3.729,1348,3.729,1349,3.729,1350,3.729,1351,3.729,1352,3.729,1353,3.729,1354,3.729,1355,3.729]],["title/coverage.html",[1356,4.464]],["body/coverage.html",[0,2.905,1,2.425,5,0.119,6,2.968,28,0.167,29,0.979,30,0.017,50,2.085,82,2.085,84,1.953,86,1.953,88,1.343,92,0.397,129,0.011,130,0.011,132,2.968,157,1.98,159,3.742,166,1.734,171,2.84,176,1.558,195,2.657,205,1.953,213,4.18,220,1.364,222,2.968,226,2.239,227,2.085,228,1.301,229,1.734,231,2.968,305,2.425,312,1.409,332,3.742,333,3.778,340,1.734,349,2.968,354,1.953,355,1.837,421,2.968,422,3.742,432,2.968,433,2.968,434,2.968,435,3.742,456,2.425,482,2.425,487,1.953,488,2.085,489,2.085,490,2.085,491,2.085,492,2.085,497,2.425,498,2.425,499,2.425,500,2.425,514,2.657,515,1.734,516,1.734,517,1.734,518,2.425,520,2.657,523,2.425,531,2.657,547,2.425,549,2.968,550,2.968,570,1.953,571,2.968,615,2.968,624,2.968,630,5.993,638,2.968,639,2.239,640,2.968,671,2.425,688,2.968,700,2.968,737,2.239,739,2.425,774,2.968,784,2.085,785,2.968,786,2.968,801,2.425,802,2.968,803,2.968,804,2.968,809,2.239,816,2.085,829,2.968,833,2.968,842,2.425,843,2.968,844,2.968,868,2.425,883,2.968,886,2.968,923,2.968,925,2.968,926,2.968,927,2.968,937,2.425,959,2.968,960,2.657,961,2.968,962,2.968,963,2.968,981,2.657,983,2.968,1007,2.657,1008,2.968,1016,2.968,1030,2.968,1037,2.425,1038,2.968,1039,2.657,1040,2.968,1046,2.968,1055,2.239,1070,2.968,1110,2.968,1114,2.968,1121,2.239,1151,2.968,1164,2.968,1180,2.239,1181,2.968,1182,2.968,1203,2.425,1214,2.968,1221,2.968,1265,2.968,1266,2.968,1294,2.968,1295,2.968,1296,2.968,1313,2.968,1356,2.968,1357,2.968,1358,3.441,1359,3.441,1360,6.84,1361,4.845,1362,6.088,1363,4.845,1364,3.441,1365,3.441,1366,3.441,1367,4.845,1368,4.845,1369,2.968,1370,4.845,1371,4.845,1372,3.441,1373,3.441,1374,2.968,1375,6.983,1376,4.845,1377,4.845,1378,4.845,1379,3.441,1380,3.441,1381,3.441,1382,3.441,1383,3.441,1384,3.441,1385,3.441,1386,3.441,1387,3.441,1388,3.441,1389,3.441,1390,3.441,1391,3.441,1392,3.441,1393,3.441,1394,3.441,1395,3.441,1396,3.441,1397,3.441,1398,3.441,1399,3.441,1400,3.441,1401,3.441,1402,3.441,1403,3.441,1404,3.441,1405,2.968,1406,3.441,1407,4.845,1408,3.441,1409,3.441,1410,3.441,1411,5.608,1412,3.441,1413,3.441]],["title/dependencies.html",[479,3.209,1414,2.72]],["body/dependencies.html",[30,0.017,80,1.351,92,0.369,129,0.015,130,0.015,154,2.853,204,2.109,304,2.853,479,3.99,508,4.372,510,4.884,512,3.99,993,4.372,1025,4.884,1042,4.884,1068,4.372,1415,7.127,1416,5.661,1417,5.661,1418,5.661,1419,5.661,1420,5.661,1421,5.661,1422,5.661,1423,5.661,1424,5.661,1425,5.661,1426,5.661,1427,5.661,1428,5.661,1429,5.661,1430,5.661]],["title/miscellaneous/functions.html",[1431,2.222,1432,3.928]],["body/miscellaneous/functions.html",[9,0.175,25,0.561,30,0.016,37,1.073,38,0.975,124,1.537,129,0.015,130,0.015,137,0.755,144,2.414,145,2.813,159,4.553,161,1.288,195,5.598,210,5.086,211,1.346,212,5.086,482,5.108,1405,5.086,1431,4.155,1432,5.086,1433,5.895,1434,5.895]],["title/index.html",[9,0.094,1435,3.153,1436,3.153]],["body/index.html",[8,2.254,26,3.752,30,0.017,129,0.013,130,0.013,133,0.505,148,0.474,243,2.826,1001,4.782,1017,5.342,1274,4.295,1287,4.295,1357,5.342,1437,4.979,1438,4.979,1439,6.192,1440,4.979,1441,4.979,1442,4.979,1443,4.979,1444,4.979,1445,7.051,1446,4.979,1447,4.979,1448,4.979,1449,6.74,1450,7.051,1451,4.979,1452,4.979,1453,6.192,1454,6.74,1455,4.979,1456,4.979,1457,6.192,1458,4.979,1459,4.979,1460,4.979,1461,4.979,1462,7.051,1463,6.192,1464,6.192,1465,4.979,1466,4.979,1467,4.979,1468,4.979,1469,4.979,1470,4.979,1471,6.74,1472,4.979,1473,4.979,1474,4.979,1475,6.192,1476,6.74,1477,6.74,1478,6.74,1479,6.192,1480,6.192,1481,6.192,1482,6.192,1483,6.192,1484,4.979,1485,4.979,1486,4.979,1487,4.979,1488,4.979,1489,4.979,1490,4.979,1491,4.979,1492,4.979,1493,4.979,1494,4.979,1495,4.979]],["title/modules.html",[478,3.997]],["body/modules.html",[30,0.015,129,0.015,130,0.015,477,4.324,478,4.739,1496,6.136,1497,6.136,1498,6.136,1499,6.136]],["title/overview.html",[1500,4.464]],["body/overview.html",[2,2.917,30,0.017,84,3.88,86,3.88,129,0.014,130,0.014,131,2.327,158,1.529,221,1.4,229,3.446,230,1.828,354,3.88,355,3.65,476,4.878,477,5.632,479,3.623,480,4.435,481,4.435,482,3.623,483,4.435,484,4.435,485,4.435,486,4.435,487,3.88,488,4.143,489,4.143,490,4.143,491,4.143,492,4.143,493,5.449,494,4.435,495,4.435,981,3.97,1001,4.878,1500,4.435,1501,5.14,1502,5.14,1503,6.315,1504,5.14]],["title/properties.html",[140,1.136,1414,2.72]],["body/properties.html",[30,0.017,129,0.015,130,0.015,133,0.616,140,1.514,1505,6.07,1506,6.07,1507,6.07,1508,6.07,1509,6.07]],["title/miscellaneous/variables.html",[1431,2.222,1510,3.928]],["body/miscellaneous/variables.html",[9,0.17,25,0.545,28,0.17,29,1.918,30,0.017,129,0.015,130,0.015,136,2.887,137,0.733,169,3.826,170,3.599,211,1.308,260,3.251,359,4.942,514,5.206,528,4.942,973,4.038,1369,4.942,1374,4.942,1431,4.038,1510,4.942,1511,5.729,1512,5.729,1513,6.741,1514,5.729,1515,5.729,1516,5.729,1517,5.729,1518,5.729,1519,5.729]]],"invertedIndex":[["",{"_index":30,"title":{},"body":{"controllers/AccountController.html":{},"classes/AccountDTO.html":{},"entities/AccountEntity.html":{},"interfaces/AccountModel.html":{},"injectables/AccountRepository.html":{},"interfaces/AccountRepositoryInterface.html":{},"injectables/AccountService.html":{},"entities/AccountTypeEntity.html":{},"interfaces/AccountTypeModel.html":{},"injectables/AccountTypeRepository.html":{},"interfaces/AccountTypeRepositoryInterface.html":{},"modules/AppModule.html":{},"interfaces/BaseRepositoryInterface.html":{},"classes/CustomerDTO.html":{},"entities/CustomerEntity.html":{},"interfaces/CustomerModel.html":{},"injectables/CustomerRepository.html":{},"interfaces/CustomerRepositoryInterface.html":{},"injectables/CustomerService.html":{},"classes/CustomerUpdateDTO.html":{},"classes/DataRangeDTO.html":{},"interfaces/DataRangeModel.html":{},"controllers/DepositController.html":{},"classes/DepositDTO.html":{},"entities/DepositEntity.html":{},"interfaces/DepositModel.html":{},"injectables/DepositRepository.html":{},"interfaces/DepositRepositoryInterface.html":{},"injectables/DepositService.html":{},"entities/DocumentTypeEntity.html":{},"interfaces/DocumentTypeModel.html":{},"injectables/DocumentTypeRepository.html":{},"interfaces/DocumentTypeRepositoryInterface.html":{},"classes/ExceptionFiltersFilter.html":{},"guards/GuardsGuard.html":{},"injectables/InterceptorsInterceptor.html":{},"injectables/MiddlewaresMiddleware.html":{},"classes/PaginationDTO.html":{},"interfaces/PaginationModel.html":{},"injectables/PipesPipe.html":{},"controllers/SecurityController.html":{},"injectables/SecurityService.html":{},"classes/SignDTO.html":{},"controllers/TransferController.html":{},"classes/TransferDTO.html":{},"entities/TransferEntity.html":{},"interfaces/TransferModel.html":{},"injectables/TransferRepository.html":{},"interfaces/TransferRepositoryInterface.html":{},"injectables/TransferService.html":{},"classes/TypeOrmExceptionFilter.html":{},"injectables/TypesOrmPostgresConfigService.html":{},"controllers/UserController.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/variables.html":{}}}],["0",{"_index":171,"title":{},"body":{"entities/AccountEntity.html":{},"injectables/AccountRepository.html":{},"injectables/AccountService.html":{},"injectables/AccountTypeRepository.html":{},"injectables/CustomerRepository.html":{},"entities/DepositEntity.html":{},"injectables/DepositRepository.html":{},"injectables/DepositService.html":{},"injectables/DocumentTypeRepository.html":{},"injectables/SecurityService.html":{},"entities/TransferEntity.html":{},"injectables/TransferRepository.html":{},"injectables/TransferService.html":{},"coverage.html":{}}}],["0.0.1",{"_index":1506,"title":{},"body":{"properties.html":{}}}],["0.14.1",{"_index":1422,"title":{},"body":{"dependencies.html":{}}}],["0.2.2",{"_index":1428,"title":{},"body":{"dependencies.html":{}}}],["0.3.20",{"_index":1430,"title":{},"body":{"dependencies.html":{}}}],["0.5.1",{"_index":1421,"title":{},"body":{"dependencies.html":{}}}],["0/1",{"_index":1371,"title":{},"body":{"coverage.html":{}}}],["0/13",{"_index":1406,"title":{},"body":{"coverage.html":{}}}],["0/2",{"_index":1411,"title":{},"body":{"coverage.html":{}}}],["0/3",{"_index":1410,"title":{},"body":{"coverage.html":{}}}],["0/4",{"_index":1407,"title":{},"body":{"coverage.html":{}}}],["0/7",{"_index":1408,"title":{},"body":{"coverage.html":{}}}],["0/9",{"_index":1409,"title":{},"body":{"coverage.html":{}}}],["1",{"_index":1001,"title":{},"body":{"guards/GuardsGuard.html":{},"index.html":{},"overview.html":{}}}],["1/1",{"_index":1375,"title":{},"body":{"coverage.html":{}}}],["1/11",{"_index":1382,"title":{},"body":{"coverage.html":{}}}],["1/3",{"_index":1387,"title":{},"body":{"coverage.html":{}}}],["1/4",{"_index":1378,"title":{},"body":{"coverage.html":{}}}],["1/5",{"_index":1383,"title":{},"body":{"coverage.html":{}}}],["1/6",{"_index":1385,"title":{},"body":{"coverage.html":{}}}],["1/7",{"_index":1380,"title":{},"body":{"coverage.html":{}}}],["1/8",{"_index":1389,"title":{},"body":{"coverage.html":{}}}],["10",{"_index":1504,"title":{},"body":{"overview.html":{}}}],["10.0.2",{"_index":1419,"title":{},"body":{"dependencies.html":{}}}],["10.2.0",{"_index":1417,"title":{},"body":{"dependencies.html":{}}}],["10.3.8",{"_index":1415,"title":{},"body":{"dependencies.html":{}}}],["10/15",{"_index":1364,"title":{},"body":{"coverage.html":{}}}],["100",{"_index":630,"title":{},"body":{"entities/CustomerEntity.html":{},"entities/TransferEntity.html":{},"coverage.html":{}}}],["10000",{"_index":219,"title":{},"body":{"entities/AccountEntity.html":{}}}],["10b6c590",{"_index":469,"title":{},"body":{"injectables/AccountTypeRepository.html":{}}}],["12",{"_index":1388,"title":{},"body":{"coverage.html":{}}}],["14",{"_index":1379,"title":{},"body":{"coverage.html":{}}}],["15",{"_index":1503,"title":{},"body":{"overview.html":{}}}],["16",{"_index":1384,"title":{},"body":{"coverage.html":{}}}],["17",{"_index":1395,"title":{},"body":{"coverage.html":{}}}],["2",{"_index":1492,"title":{},"body":{"index.html":{}}}],["2/2",{"_index":1376,"title":{},"body":{"coverage.html":{}}}],["2/3",{"_index":1390,"title":{},"body":{"coverage.html":{}}}],["20",{"_index":624,"title":{},"body":{"entities/CustomerEntity.html":{},"coverage.html":{}}}],["20000",{"_index":217,"title":{},"body":{"entities/AccountEntity.html":{}}}],["25",{"_index":1377,"title":{},"body":{"coverage.html":{}}}],["255",{"_index":619,"title":{},"body":{"entities/CustomerEntity.html":{}}}],["283f",{"_index":949,"title":{},"body":{"injectables/DocumentTypeRepository.html":{}}}],["3.2.2",{"_index":1416,"title":{},"body":{"dependencies.html":{}}}],["3/17",{"_index":1396,"title":{},"body":{"coverage.html":{}}}],["3/3",{"_index":1360,"title":{},"body":{"coverage.html":{}}}],["3/5",{"_index":1368,"title":{},"body":{"coverage.html":{}}}],["30",{"_index":783,"title":{},"body":{"classes/CustomerUpdateDTO.html":{}}}],["33",{"_index":1386,"title":{},"body":{"coverage.html":{}}}],["4.0.1",{"_index":1424,"title":{},"body":{"dependencies.html":{}}}],["4/4",{"_index":1401,"title":{},"body":{"coverage.html":{}}}],["4021e882c080",{"_index":473,"title":{},"body":{"injectables/AccountTypeRepository.html":{}}}],["4621",{"_index":471,"title":{},"body":{"injectables/AccountTypeRepository.html":{}}}],["4a49",{"_index":943,"title":{},"body":{"injectables/DocumentTypeRepository.html":{}}}],["4c22",{"_index":465,"title":{},"body":{"injectables/AccountTypeRepository.html":{},"injectables/CustomerService.html":{},"injectables/SecurityService.html":{}}}],["4e71",{"_index":950,"title":{},"body":{"injectables/DocumentTypeRepository.html":{}}}],["5",{"_index":1501,"title":{},"body":{"overview.html":{}}}],["5/5",{"_index":1362,"title":{},"body":{"coverage.html":{}}}],["5/8",{"_index":1373,"title":{},"body":{"coverage.html":{}}}],["50",{"_index":426,"title":{},"body":{"entities/AccountTypeEntity.html":{},"entities/DocumentTypeEntity.html":{}}}],["500",{"_index":780,"title":{},"body":{"classes/CustomerUpdateDTO.html":{},"classes/TransferDTO.html":{},"classes/TypeOrmExceptionFilter.html":{}}}],["50ce60b300b1",{"_index":945,"title":{},"body":{"injectables/DocumentTypeRepository.html":{}}}],["5432",{"_index":535,"title":{},"body":{"modules/AppModule.html":{}}}],["58",{"_index":1403,"title":{},"body":{"coverage.html":{}}}],["5e89",{"_index":942,"title":{},"body":{"injectables/DocumentTypeRepository.html":{}}}],["6",{"_index":1502,"title":{},"body":{"overview.html":{}}}],["6/6",{"_index":1402,"title":{},"body":{"coverage.html":{}}}],["60",{"_index":1367,"title":{},"body":{"coverage.html":{}}}],["62",{"_index":1372,"title":{},"body":{"coverage.html":{}}}],["63",{"_index":1397,"title":{},"body":{"coverage.html":{}}}],["64911806",{"_index":948,"title":{},"body":{"injectables/DocumentTypeRepository.html":{}}}],["66",{"_index":1363,"title":{},"body":{"coverage.html":{}}}],["7.8.1",{"_index":1429,"title":{},"body":{"dependencies.html":{}}}],["7/11",{"_index":1398,"title":{},"body":{"coverage.html":{}}}],["7/12",{"_index":1404,"title":{},"body":{"coverage.html":{}}}],["7/7",{"_index":1361,"title":{},"body":{"coverage.html":{}}}],["7/9",{"_index":1400,"title":{},"body":{"coverage.html":{}}}],["75",{"_index":1393,"title":{},"body":{"coverage.html":{}}}],["77",{"_index":1399,"title":{},"body":{"coverage.html":{}}}],["8",{"_index":599,"title":{},"body":{"classes/CustomerDTO.html":{},"classes/CustomerUpdateDTO.html":{}}}],["8.11.5",{"_index":1426,"title":{},"body":{"dependencies.html":{}}}],["8/9",{"_index":1392,"title":{},"body":{"coverage.html":{}}}],["81",{"_index":1365,"title":{},"body":{"coverage.html":{}}}],["85fa",{"_index":470,"title":{},"body":{"injectables/AccountTypeRepository.html":{}}}],["88",{"_index":1391,"title":{},"body":{"coverage.html":{}}}],["9",{"_index":1381,"title":{},"body":{"coverage.html":{}}}],["9/11",{"_index":1366,"title":{},"body":{"coverage.html":{}}}],["9/12",{"_index":1394,"title":{},"body":{"coverage.html":{}}}],["98d5",{"_index":944,"title":{},"body":{"injectables/DocumentTypeRepository.html":{}}}],["a01c",{"_index":464,"title":{},"body":{"injectables/AccountTypeRepository.html":{},"injectables/CustomerService.html":{},"injectables/SecurityService.html":{}}}],["a6d6",{"_index":466,"title":{},"body":{"injectables/AccountTypeRepository.html":{},"injectables/CustomerService.html":{},"injectables/SecurityService.html":{}}}],["ab27c9ac",{"_index":463,"title":{},"body":{"injectables/AccountTypeRepository.html":{},"injectables/CustomerService.html":{},"injectables/SecurityService.html":{}}}],["ab94",{"_index":951,"title":{},"body":{"injectables/DocumentTypeRepository.html":{}}}],["access_token",{"_index":1029,"title":{},"body":{"injectables/MiddlewaresMiddleware.html":{},"injectables/SecurityService.html":{}}}],["account",{"_index":8,"title":{},"body":{"controllers/AccountController.html":{},"entities/AccountEntity.html":{},"injectables/AccountRepository.html":{},"injectables/AccountService.html":{},"injectables/CustomerService.html":{},"controllers/DepositController.html":{},"entities/DepositEntity.html":{},"interfaces/DepositModel.html":{},"injectables/DepositRepository.html":{},"injectables/SecurityService.html":{},"index.html":{}}}],["account.accounttype",{"_index":763,"title":{},"body":{"injectables/CustomerService.html":{}}}],["account.accounttypeid",{"_index":400,"title":{},"body":{"injectables/AccountService.html":{}}}],["account.balance",{"_index":1107,"title":{},"body":{"injectables/SecurityService.html":{}}}],["account.customer",{"_index":765,"title":{},"body":{"injectables/CustomerService.html":{}}}],["account.customerid",{"_index":397,"title":{},"body":{"injectables/AccountService.html":{}}}],["account.id",{"_index":326,"title":{},"body":{"injectables/AccountRepository.html":{}}}],["account_type",{"_index":431,"title":{},"body":{"entities/AccountTypeEntity.html":{}}}],["accountcontroller",{"_index":1,"title":{"controllers/AccountController.html":{}},"body":{"controllers/AccountController.html":{},"modules/AppModule.html":{},"coverage.html":{}}}],["accountdto",{"_index":50,"title":{"classes/AccountDTO.html":{}},"body":{"controllers/AccountController.html":{},"classes/AccountDTO.html":{},"injectables/AccountService.html":{},"injectables/SecurityService.html":{},"coverage.html":{}}}],["accountentity",{"_index":88,"title":{"entities/AccountEntity.html":{}},"body":{"controllers/AccountController.html":{},"entities/AccountEntity.html":{},"injectables/AccountRepository.html":{},"interfaces/AccountRepositoryInterface.html":{},"injectables/AccountService.html":{},"modules/AppModule.html":{},"injectables/CustomerService.html":{},"entities/DepositEntity.html":{},"injectables/DepositService.html":{},"entities/TransferEntity.html":{},"injectables/TypesOrmPostgresConfigService.html":{},"controllers/UserController.html":{},"coverage.html":{}}}],["accountid",{"_index":360,"title":{},"body":{"injectables/AccountService.html":{},"controllers/DepositController.html":{},"classes/DepositDTO.html":{},"injectables/DepositRepository.html":{},"interfaces/DepositRepositoryInterface.html":{},"injectables/DepositService.html":{},"controllers/TransferController.html":{},"injectables/TransferRepository.html":{},"interfaces/TransferRepositoryInterface.html":{},"injectables/TransferService.html":{}}}],["accountmodel",{"_index":205,"title":{"interfaces/AccountModel.html":{}},"body":{"entities/AccountEntity.html":{},"interfaces/AccountModel.html":{},"injectables/AccountService.html":{},"interfaces/DepositModel.html":{},"interfaces/TransferModel.html":{},"coverage.html":{}}}],["accountrepository",{"_index":229,"title":{"injectables/AccountRepository.html":{}},"body":{"injectables/AccountRepository.html":{},"injectables/AccountService.html":{},"modules/AppModule.html":{},"injectables/CustomerService.html":{},"injectables/DepositService.html":{},"injectables/TransferService.html":{},"coverage.html":{},"overview.html":{}}}],["accountrepositoryinterface",{"_index":305,"title":{"interfaces/AccountRepositoryInterface.html":{}},"body":{"injectables/AccountRepository.html":{},"interfaces/AccountRepositoryInterface.html":{},"coverage.html":{}}}],["accountservice",{"_index":84,"title":{"injectables/AccountService.html":{}},"body":{"controllers/AccountController.html":{},"injectables/AccountService.html":{},"modules/AppModule.html":{},"injectables/SecurityService.html":{},"coverage.html":{},"overview.html":{}}}],["accounttype",{"_index":162,"title":{},"body":{"entities/AccountEntity.html":{},"interfaces/AccountModel.html":{},"injectables/AccountRepository.html":{},"injectables/AccountService.html":{}}}],["accounttypeentity",{"_index":166,"title":{"entities/AccountTypeEntity.html":{}},"body":{"entities/AccountEntity.html":{},"injectables/AccountService.html":{},"entities/AccountTypeEntity.html":{},"injectables/AccountTypeRepository.html":{},"interfaces/AccountTypeRepositoryInterface.html":{},"modules/AppModule.html":{},"injectables/TypesOrmPostgresConfigService.html":{},"coverage.html":{}}}],["accounttypeid",{"_index":121,"title":{},"body":{"controllers/AccountController.html":{},"classes/AccountDTO.html":{},"injectables/AccountRepository.html":{},"interfaces/AccountRepositoryInterface.html":{},"injectables/AccountService.html":{}}}],["accounttypemodel",{"_index":226,"title":{"interfaces/AccountTypeModel.html":{}},"body":{"interfaces/AccountModel.html":{},"entities/AccountTypeEntity.html":{},"interfaces/AccountTypeModel.html":{},"coverage.html":{}}}],["accounttyperepository",{"_index":354,"title":{"injectables/AccountTypeRepository.html":{}},"body":{"injectables/AccountService.html":{},"injectables/AccountTypeRepository.html":{},"modules/AppModule.html":{},"injectables/CustomerService.html":{},"coverage.html":{},"overview.html":{}}}],["accounttyperepositoryinterface",{"_index":456,"title":{"interfaces/AccountTypeRepositoryInterface.html":{}},"body":{"injectables/AccountTypeRepository.html":{},"interfaces/AccountTypeRepositoryInterface.html":{},"coverage.html":{}}}],["activo/inactivo",{"_index":200,"title":{},"body":{"entities/AccountEntity.html":{},"entities/AccountTypeEntity.html":{},"entities/CustomerEntity.html":{}}}],["activos",{"_index":715,"title":{},"body":{"injectables/CustomerService.html":{}}}],["actualiza",{"_index":296,"title":{},"body":{"injectables/AccountRepository.html":{},"injectables/AccountTypeRepository.html":{},"interfaces/BaseRepositoryInterface.html":{},"injectables/CustomerRepository.html":{},"injectables/DepositRepository.html":{},"injectables/DocumentTypeRepository.html":{},"injectables/TransferRepository.html":{}}}],["actualizada",{"_index":301,"title":{},"body":{"injectables/AccountRepository.html":{},"interfaces/BaseRepositoryInterface.html":{},"injectables/TransferRepository.html":{}}}],["actualizado",{"_index":453,"title":{},"body":{"injectables/AccountTypeRepository.html":{},"injectables/CustomerRepository.html":{},"injectables/CustomerService.html":{},"injectables/DepositRepository.html":{},"injectables/DocumentTypeRepository.html":{}}}],["actualizados",{"_index":569,"title":{},"body":{"interfaces/BaseRepositoryInterface.html":{}}}],["actualizar",{"_index":298,"title":{},"body":{"injectables/AccountRepository.html":{},"injectables/AccountTypeRepository.html":{},"interfaces/BaseRepositoryInterface.html":{},"injectables/CustomerRepository.html":{},"injectables/CustomerService.html":{},"classes/CustomerUpdateDTO.html":{},"injectables/DepositRepository.html":{},"injectables/DocumentTypeRepository.html":{},"injectables/TransferRepository.html":{}}}],["addbalance",{"_index":12,"title":{},"body":{"controllers/AccountController.html":{},"injectables/AccountService.html":{}}}],["addbalance(accountid",{"_index":357,"title":{},"body":{"injectables/AccountService.html":{}}}],["addbalance(id",{"_index":24,"title":{},"body":{"controllers/AccountController.html":{}}}],["adicionales",{"_index":337,"title":{},"body":{"interfaces/AccountRepositoryInterface.html":{},"interfaces/AccountTypeRepositoryInterface.html":{},"interfaces/CustomerRepositoryInterface.html":{},"interfaces/DepositRepositoryInterface.html":{},"interfaces/DocumentTypeRepositoryInterface.html":{},"interfaces/TransferRepositoryInterface.html":{}}}],["aditional",{"_index":1278,"title":{},"body":{"classes/TypeOrmExceptionFilter.html":{}}}],["agregar",{"_index":359,"title":{},"body":{"injectables/AccountService.html":{},"miscellaneous/variables.html":{}}}],["ahorros",{"_index":468,"title":{},"body":{"injectables/AccountTypeRepository.html":{}}}],["al",{"_index":346,"title":{},"body":{"interfaces/AccountRepositoryInterface.html":{},"injectables/AccountTypeRepository.html":{},"classes/CustomerDTO.html":{},"classes/CustomerUpdateDTO.html":{},"entities/DepositEntity.html":{},"injectables/DocumentTypeRepository.html":{},"classes/TypeOrmExceptionFilter.html":{}}}],["algunos",{"_index":459,"title":{},"body":{"injectables/AccountTypeRepository.html":{}}}],["almacenadas",{"_index":562,"title":{},"body":{"interfaces/BaseRepositoryInterface.html":{}}}],["amount",{"_index":109,"title":{},"body":{"controllers/AccountController.html":{},"injectables/AccountService.html":{},"classes/DepositDTO.html":{},"entities/DepositEntity.html":{},"interfaces/DepositModel.html":{},"classes/TransferDTO.html":{},"entities/TransferEntity.html":{},"interfaces/TransferModel.html":{}}}],["amountbalance",{"_index":13,"title":{},"body":{"controllers/AccountController.html":{}}}],["amountbalance(id",{"_index":40,"title":{},"body":{"controllers/AccountController.html":{}}}],["answer",{"_index":1088,"title":{},"body":{"injectables/SecurityService.html":{}}}],["any).code",{"_index":1277,"title":{},"body":{"classes/TypeOrmExceptionFilter.html":{}}}],["any).detail",{"_index":1279,"title":{},"body":{"classes/TypeOrmExceptionFilter.html":{}}}],["app",{"_index":1452,"title":{},"body":{"index.html":{}}}],["app_filter",{"_index":509,"title":{},"body":{"modules/AppModule.html":{}}}],["applications",{"_index":1444,"title":{},"body":{"index.html":{}}}],["appmodule",{"_index":477,"title":{"modules/AppModule.html":{}},"body":{"modules/AppModule.html":{},"modules.html":{},"overview.html":{}}}],["args",{"_index":1513,"title":{},"body":{"miscellaneous/variables.html":{}}}],["argumentmetadata",{"_index":1043,"title":{},"body":{"injectables/PipesPipe.html":{}}}],["argumentos",{"_index":979,"title":{},"body":{"classes/ExceptionFiltersFilter.html":{},"classes/TypeOrmExceptionFilter.html":{}}}],["argumentshost",{"_index":971,"title":{},"body":{"classes/ExceptionFiltersFilter.html":{},"classes/TypeOrmExceptionFilter.html":{}}}],["array",{"_index":402,"title":{},"body":{"injectables/AccountService.html":{},"injectables/DepositService.html":{},"injectables/TransferService.html":{}}}],["array.length",{"_index":407,"title":{},"body":{"injectables/AccountService.html":{}}}],["arreglo",{"_index":270,"title":{},"body":{"injectables/AccountRepository.html":{},"interfaces/AccountRepositoryInterface.html":{},"injectables/AccountTypeRepository.html":{},"interfaces/AccountTypeRepositoryInterface.html":{},"interfaces/BaseRepositoryInterface.html":{},"interfaces/CustomerRepositoryInterface.html":{},"injectables/DepositRepository.html":{},"interfaces/DepositRepositoryInterface.html":{},"injectables/DocumentTypeRepository.html":{},"interfaces/DocumentTypeRepositoryInterface.html":{},"injectables/TransferRepository.html":{},"interfaces/TransferRepositoryInterface.html":{}}}],["asociada",{"_index":836,"title":{},"body":{"entities/DepositEntity.html":{},"injectables/DepositRepository.html":{},"interfaces/DepositRepositoryInterface.html":{}}}],["asociadas",{"_index":345,"title":{},"body":{"interfaces/AccountRepositoryInterface.html":{}}}],["asociado",{"_index":178,"title":{},"body":{"entities/AccountEntity.html":{},"injectables/AccountRepository.html":{},"interfaces/AccountRepositoryInterface.html":{}}}],["asociados",{"_index":854,"title":{},"body":{"injectables/DepositRepository.html":{},"interfaces/DepositRepositoryInterface.html":{}}}],["async",{"_index":11,"title":{},"body":{"controllers/AccountController.html":{},"injectables/AccountRepository.html":{},"injectables/AccountService.html":{},"injectables/AccountTypeRepository.html":{},"injectables/CustomerRepository.html":{},"injectables/CustomerService.html":{},"controllers/DepositController.html":{},"injectables/DepositRepository.html":{},"injectables/DepositService.html":{},"guards/GuardsGuard.html":{},"injectables/SecurityService.html":{},"controllers/TransferController.html":{},"injectables/TransferRepository.html":{},"injectables/TransferService.html":{},"controllers/UserController.html":{}}}],["authheader",{"_index":996,"title":{},"body":{"guards/GuardsGuard.html":{},"injectables/MiddlewaresMiddleware.html":{}}}],["authheader.split",{"_index":1000,"title":{},"body":{"guards/GuardsGuard.html":{}}}],["authheader.startswith('access_token",{"_index":998,"title":{},"body":{"guards/GuardsGuard.html":{},"injectables/MiddlewaresMiddleware.html":{}}}],["authheader.substring(7",{"_index":1027,"title":{},"body":{"injectables/MiddlewaresMiddleware.html":{}}}],["author",{"_index":1509,"title":{},"body":{"properties.html":{}}}],["autoloadentities",{"_index":543,"title":{},"body":{"modules/AppModule.html":{}}}],["avatar",{"_index":622,"title":{},"body":{"entities/CustomerEntity.html":{}}}],["avatar_url",{"_index":618,"title":{},"body":{"entities/CustomerEntity.html":{}}}],["avatarurl",{"_index":616,"title":{},"body":{"entities/CustomerEntity.html":{},"interfaces/CustomerModel.html":{}}}],["await",{"_index":98,"title":{},"body":{"controllers/AccountController.html":{},"injectables/AccountRepository.html":{},"injectables/AccountService.html":{},"injectables/CustomerRepository.html":{},"injectables/CustomerService.html":{},"controllers/DepositController.html":{},"injectables/DepositService.html":{},"injectables/SecurityService.html":{},"controllers/TransferController.html":{},"injectables/TransferRepository.html":{},"injectables/TransferService.html":{}}}],["b85a",{"_index":472,"title":{},"body":{"injectables/AccountTypeRepository.html":{}}}],["baja",{"_index":734,"title":{},"body":{"injectables/CustomerService.html":{}}}],["balance",{"_index":163,"title":{},"body":{"entities/AccountEntity.html":{},"interfaces/AccountModel.html":{},"injectables/AccountService.html":{}}}],["banco",{"_index":1224,"title":{},"body":{"injectables/TransferService.html":{}}}],["bank",{"_index":215,"title":{},"body":{"entities/AccountEntity.html":{}}}],["base",{"_index":315,"title":{},"body":{"injectables/AccountRepository.html":{},"interfaces/AccountRepositoryInterface.html":{},"injectables/AccountTypeRepository.html":{},"interfaces/AccountTypeRepositoryInterface.html":{},"interfaces/BaseRepositoryInterface.html":{},"injectables/CustomerRepository.html":{},"interfaces/CustomerRepositoryInterface.html":{},"injectables/CustomerService.html":{},"injectables/DepositRepository.html":{},"interfaces/DepositRepositoryInterface.html":{},"injectables/DocumentTypeRepository.html":{},"interfaces/DocumentTypeRepositoryInterface.html":{},"injectables/SecurityService.html":{},"injectables/TransferRepository.html":{},"interfaces/TransferRepositoryInterface.html":{}}}],["baserepositoryinterface",{"_index":340,"title":{"interfaces/BaseRepositoryInterface.html":{}},"body":{"interfaces/AccountRepositoryInterface.html":{},"interfaces/AccountTypeRepositoryInterface.html":{},"interfaces/BaseRepositoryInterface.html":{},"interfaces/CustomerRepositoryInterface.html":{},"interfaces/DepositRepositoryInterface.html":{},"interfaces/DocumentTypeRepositoryInterface.html":{},"interfaces/TransferRepositoryInterface.html":{},"coverage.html":{}}}],["between",{"_index":867,"title":{},"body":{"injectables/DepositRepository.html":{},"injectables/TransferRepository.html":{}}}],["between(dateinit",{"_index":882,"title":{},"body":{"injectables/DepositRepository.html":{},"injectables/TransferRepository.html":{}}}],["body",{"_index":26,"title":{},"body":{"controllers/AccountController.html":{},"controllers/DepositController.html":{},"controllers/SecurityController.html":{},"controllers/TransferController.html":{},"controllers/UserController.html":{},"index.html":{}}}],["body.accountid",{"_index":824,"title":{},"body":{"controllers/DepositController.html":{},"controllers/TransferController.html":{}}}],["body.accounttypeid",{"_index":123,"title":{},"body":{"controllers/AccountController.html":{}}}],["body.amount",{"_index":111,"title":{},"body":{"controllers/AccountController.html":{}}}],["body.datarange",{"_index":826,"title":{},"body":{"controllers/DepositController.html":{},"controllers/TransferController.html":{}}}],["body.pagination",{"_index":825,"title":{},"body":{"controllers/DepositController.html":{},"controllers/TransferController.html":{}}}],["body.state",{"_index":116,"title":{},"body":{"controllers/AccountController.html":{}}}],["boolean",{"_index":73,"title":{},"body":{"controllers/AccountController.html":{},"entities/AccountEntity.html":{},"interfaces/AccountModel.html":{},"injectables/AccountRepository.html":{},"interfaces/AccountRepositoryInterface.html":{},"injectables/AccountService.html":{},"entities/AccountTypeEntity.html":{},"interfaces/AccountTypeModel.html":{},"injectables/AccountTypeRepository.html":{},"interfaces/AccountTypeRepositoryInterface.html":{},"interfaces/BaseRepositoryInterface.html":{},"entities/CustomerEntity.html":{},"interfaces/CustomerModel.html":{},"injectables/CustomerRepository.html":{},"interfaces/CustomerRepositoryInterface.html":{},"injectables/DepositRepository.html":{},"entities/DocumentTypeEntity.html":{},"interfaces/DocumentTypeModel.html":{},"injectables/DocumentTypeRepository.html":{},"interfaces/DocumentTypeRepositoryInterface.html":{},"controllers/SecurityController.html":{},"injectables/SecurityService.html":{},"injectables/TransferRepository.html":{}}}],["booleano",{"_index":696,"title":{},"body":{"interfaces/CustomerRepositoryInterface.html":{}}}],["bootstrap",{"_index":482,"title":{},"body":{"modules/AppModule.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"overview.html":{}}}],["borrado",{"_index":258,"title":{},"body":{"injectables/AccountRepository.html":{},"injectables/CustomerRepository.html":{},"injectables/DepositRepository.html":{},"injectables/TransferRepository.html":{}}}],["borrar",{"_index":372,"title":{},"body":{"injectables/AccountService.html":{},"injectables/DepositService.html":{},"injectables/TransferService.html":{}}}],["browse",{"_index":1499,"title":{},"body":{"modules.html":{}}}],["browser",{"_index":1496,"title":{},"body":{"modules.html":{}}}],["building",{"_index":1440,"title":{},"body":{"index.html":{}}}],["busca",{"_index":564,"title":{},"body":{"interfaces/BaseRepositoryInterface.html":{}}}],["buscar",{"_index":280,"title":{},"body":{"injectables/AccountRepository.html":{},"interfaces/AccountRepositoryInterface.html":{},"injectables/AccountTypeRepository.html":{},"interfaces/AccountTypeRepositoryInterface.html":{},"interfaces/BaseRepositoryInterface.html":{},"interfaces/CustomerRepositoryInterface.html":{},"interfaces/TransferRepositoryInterface.html":{}}}],["business/dtos",{"_index":1061,"title":{},"body":{"controllers/SecurityController.html":{},"controllers/UserController.html":{}}}],["business/services",{"_index":85,"title":{},"body":{"controllers/AccountController.html":{},"modules/AppModule.html":{},"controllers/DepositController.html":{},"controllers/SecurityController.html":{},"controllers/TransferController.html":{}}}],["business/services/customer/customer.service",{"_index":87,"title":{},"body":{"controllers/AccountController.html":{},"controllers/UserController.html":{}}}],["c822487e",{"_index":941,"title":{},"body":{"injectables/DocumentTypeRepository.html":{}}}],["cadena",{"_index":776,"title":{},"body":{"classes/CustomerUpdateDTO.html":{},"classes/DataRangeDTO.html":{},"classes/DepositDTO.html":{},"classes/PaginationDTO.html":{},"classes/SignDTO.html":{},"classes/TransferDTO.html":{}}}],["callhandler",{"_index":1012,"title":{},"body":{"injectables/InterceptorsInterceptor.html":{}}}],["cambiada",{"_index":125,"title":{},"body":{"controllers/AccountController.html":{}}}],["cambiado",{"_index":118,"title":{},"body":{"controllers/AccountController.html":{}}}],["cambiar",{"_index":363,"title":{},"body":{"injectables/AccountService.html":{}}}],["canactivate",{"_index":984,"title":{},"body":{"guards/GuardsGuard.html":{}}}],["canactivate(context",{"_index":988,"title":{},"body":{"guards/GuardsGuard.html":{}}}],["cantidad",{"_index":793,"title":{},"body":{"classes/DataRangeDTO.html":{}}}],["capturada",{"_index":977,"title":{},"body":{"classes/ExceptionFiltersFilter.html":{},"classes/TypeOrmExceptionFilter.html":{}}}],["caracteres",{"_index":600,"title":{},"body":{"classes/CustomerDTO.html":{},"classes/CustomerUpdateDTO.html":{},"classes/TransferDTO.html":{}}}],["cascade",{"_index":627,"title":{},"body":{"entities/CustomerEntity.html":{}}}],["catch",{"_index":968,"title":{},"body":{"classes/ExceptionFiltersFilter.html":{},"guards/GuardsGuard.html":{},"classes/TypeOrmExceptionFilter.html":{}}}],["catch(exception",{"_index":969,"title":{},"body":{"classes/ExceptionFiltersFilter.html":{},"classes/TypeOrmExceptionFilter.html":{}}}],["catch(typeormerror",{"_index":1272,"title":{},"body":{"classes/TypeOrmExceptionFilter.html":{}}}],["ce5ab3b79185",{"_index":467,"title":{},"body":{"injectables/AccountTypeRepository.html":{},"injectables/CustomerService.html":{},"injectables/SecurityService.html":{}}}],["changeaccounttype",{"_index":14,"title":{},"body":{"controllers/AccountController.html":{},"injectables/AccountService.html":{}}}],["changeaccounttype(accountid",{"_index":361,"title":{},"body":{"injectables/AccountService.html":{}}}],["changeaccounttype(id",{"_index":43,"title":{},"body":{"controllers/AccountController.html":{}}}],["changestate",{"_index":15,"title":{},"body":{"controllers/AccountController.html":{},"injectables/AccountService.html":{}}}],["changestate(accountid",{"_index":364,"title":{},"body":{"injectables/AccountService.html":{}}}],["changestate(id",{"_index":46,"title":{},"body":{"controllers/AccountController.html":{}}}],["ciudadanía",{"_index":947,"title":{},"body":{"injectables/DocumentTypeRepository.html":{}}}],["clase",{"_index":1267,"title":{},"body":{"classes/TypeOrmExceptionFilter.html":{}}}],["class",{"_index":92,"title":{"classes/AccountDTO.html":{},"classes/CustomerDTO.html":{},"classes/CustomerUpdateDTO.html":{},"classes/DataRangeDTO.html":{},"classes/DepositDTO.html":{},"classes/ExceptionFiltersFilter.html":{},"classes/PaginationDTO.html":{},"classes/SignDTO.html":{},"classes/TransferDTO.html":{},"classes/TypeOrmExceptionFilter.html":{}},"body":{"controllers/AccountController.html":{},"classes/AccountDTO.html":{},"entities/AccountEntity.html":{},"injectables/AccountRepository.html":{},"injectables/AccountService.html":{},"entities/AccountTypeEntity.html":{},"injectables/AccountTypeRepository.html":{},"modules/AppModule.html":{},"classes/CustomerDTO.html":{},"entities/CustomerEntity.html":{},"injectables/CustomerRepository.html":{},"injectables/CustomerService.html":{},"classes/CustomerUpdateDTO.html":{},"classes/DataRangeDTO.html":{},"controllers/DepositController.html":{},"classes/DepositDTO.html":{},"entities/DepositEntity.html":{},"injectables/DepositRepository.html":{},"injectables/DepositService.html":{},"entities/DocumentTypeEntity.html":{},"injectables/DocumentTypeRepository.html":{},"classes/ExceptionFiltersFilter.html":{},"guards/GuardsGuard.html":{},"injectables/InterceptorsInterceptor.html":{},"injectables/MiddlewaresMiddleware.html":{},"classes/PaginationDTO.html":{},"injectables/PipesPipe.html":{},"controllers/SecurityController.html":{},"injectables/SecurityService.html":{},"classes/SignDTO.html":{},"controllers/TransferController.html":{},"classes/TransferDTO.html":{},"entities/TransferEntity.html":{},"injectables/TransferRepository.html":{},"injectables/TransferService.html":{},"classes/TypeOrmExceptionFilter.html":{},"injectables/TypesOrmPostgresConfigService.html":{},"controllers/UserController.html":{},"coverage.html":{},"dependencies.html":{}}}],["classes",{"_index":131,"title":{},"body":{"classes/AccountDTO.html":{},"classes/CustomerDTO.html":{},"classes/CustomerUpdateDTO.html":{},"classes/DataRangeDTO.html":{},"classes/DepositDTO.html":{},"classes/ExceptionFiltersFilter.html":{},"classes/PaginationDTO.html":{},"classes/SignDTO.html":{},"classes/TransferDTO.html":{},"classes/TypeOrmExceptionFilter.html":{},"overview.html":{}}}],["cli",{"_index":1487,"title":{},"body":{"index.html":{}}}],["cliente",{"_index":150,"title":{},"body":{"classes/AccountDTO.html":{},"entities/AccountEntity.html":{},"injectables/AccountRepository.html":{},"interfaces/AccountRepositoryInterface.html":{},"classes/CustomerDTO.html":{},"entities/CustomerEntity.html":{},"interfaces/CustomerModel.html":{},"injectables/CustomerRepository.html":{},"interfaces/CustomerRepositoryInterface.html":{},"injectables/CustomerService.html":{},"classes/CustomerUpdateDTO.html":{},"classes/TypeOrmExceptionFilter.html":{}}}],["clientes",{"_index":689,"title":{},"body":{"interfaces/CustomerRepositoryInterface.html":{},"injectables/CustomerService.html":{}}}],["cluster_appmodule",{"_index":485,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_providers",{"_index":486,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["code",{"_index":1276,"title":{},"body":{"classes/TypeOrmExceptionFilter.html":{}}}],["coinciden",{"_index":348,"title":{},"body":{"interfaces/AccountRepositoryInterface.html":{},"interfaces/AccountTypeRepositoryInterface.html":{},"interfaces/CustomerRepositoryInterface.html":{}}}],["column",{"_index":201,"title":{},"body":{"entities/AccountEntity.html":{},"entities/AccountTypeEntity.html":{},"entities/CustomerEntity.html":{},"entities/DepositEntity.html":{},"entities/DocumentTypeEntity.html":{},"entities/TransferEntity.html":{}}}],["column({name",{"_index":172,"title":{},"body":{"entities/AccountEntity.html":{},"entities/AccountTypeEntity.html":{},"entities/CustomerEntity.html":{},"entities/DepositEntity.html":{},"entities/DocumentTypeEntity.html":{},"entities/TransferEntity.html":{}}}],["commits",{"_index":1493,"title":{},"body":{"index.html":{}}}],["completo",{"_index":587,"title":{},"body":{"classes/CustomerDTO.html":{},"entities/CustomerEntity.html":{},"interfaces/CustomerRepositoryInterface.html":{},"classes/CustomerUpdateDTO.html":{}}}],["comunes",{"_index":554,"title":{},"body":{"interfaces/BaseRepositoryInterface.html":{}}}],["con",{"_index":269,"title":{},"body":{"injectables/AccountRepository.html":{},"interfaces/AccountRepositoryInterface.html":{},"injectables/AccountTypeRepository.html":{},"interfaces/AccountTypeRepositoryInterface.html":{},"interfaces/BaseRepositoryInterface.html":{},"interfaces/CustomerRepositoryInterface.html":{},"injectables/CustomerService.html":{},"classes/CustomerUpdateDTO.html":{},"interfaces/DepositRepositoryInterface.html":{},"interfaces/DocumentTypeRepositoryInterface.html":{},"classes/TransferDTO.html":{},"interfaces/TransferRepositoryInterface.html":{}}}],["config.service.ts",{"_index":1296,"title":{},"body":{"injectables/TypesOrmPostgresConfigService.html":{},"coverage.html":{}}}],["config.service.ts:21",{"_index":1303,"title":{},"body":{"injectables/TypesOrmPostgresConfigService.html":{}}}],["config.service.ts:30",{"_index":1304,"title":{},"body":{"injectables/TypesOrmPostgresConfigService.html":{}}}],["configmodule",{"_index":507,"title":{},"body":{"modules/AppModule.html":{}}}],["configmodule.forroot",{"_index":526,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice",{"_index":1302,"title":{},"body":{"injectables/TypesOrmPostgresConfigService.html":{}}}],["configuración",{"_index":898,"title":{},"body":{"injectables/DepositService.html":{},"injectables/TypesOrmPostgresConfigService.html":{}}}],["configure",{"_index":501,"title":{},"body":{"modules/AppModule.html":{}}}],["configure(consumer",{"_index":502,"title":{},"body":{"modules/AppModule.html":{}}}],["conflictexception",{"_index":392,"title":{},"body":{"injectables/AccountService.html":{}}}],["conflictexception(`cuenta",{"_index":409,"title":{},"body":{"injectables/AccountService.html":{}}}],["console.log(entity",{"_index":673,"title":{},"body":{"injectables/CustomerRepository.html":{}}}],["const",{"_index":214,"title":{},"body":{"entities/AccountEntity.html":{},"injectables/AccountRepository.html":{},"injectables/AccountService.html":{},"injectables/CustomerRepository.html":{},"injectables/CustomerService.html":{},"injectables/DepositService.html":{},"guards/GuardsGuard.html":{},"injectables/MiddlewaresMiddleware.html":{},"injectables/SecurityService.html":{},"controllers/TransferController.html":{},"injectables/TransferRepository.html":{},"injectables/TransferService.html":{},"classes/TypeOrmExceptionFilter.html":{}}}],["constructor",{"_index":93,"title":{},"body":{"controllers/AccountController.html":{},"injectables/AccountRepository.html":{},"injectables/AccountService.html":{},"injectables/AccountTypeRepository.html":{},"injectables/CustomerRepository.html":{},"injectables/CustomerService.html":{},"injectables/DepositRepository.html":{},"injectables/DepositService.html":{},"injectables/DocumentTypeRepository.html":{},"guards/GuardsGuard.html":{},"injectables/SecurityService.html":{},"injectables/TransferRepository.html":{},"injectables/TransferService.html":{},"injectables/TypesOrmPostgresConfigService.html":{}}}],["constructor(accountrepository",{"_index":353,"title":{},"body":{"injectables/AccountService.html":{}}}],["constructor(configservice",{"_index":1301,"title":{},"body":{"injectables/TypesOrmPostgresConfigService.html":{}}}],["constructor(customerrepository",{"_index":648,"title":{},"body":{"injectables/CustomerRepository.html":{},"injectables/CustomerService.html":{},"injectables/SecurityService.html":{}}}],["constructor(depositrepository",{"_index":847,"title":{},"body":{"injectables/DepositRepository.html":{},"injectables/DepositService.html":{}}}],["constructor(documenttyperepository",{"_index":928,"title":{},"body":{"injectables/DocumentTypeRepository.html":{}}}],["constructor(jwtservice",{"_index":985,"title":{},"body":{"guards/GuardsGuard.html":{}}}],["constructor(private",{"_index":818,"title":{},"body":{"controllers/DepositController.html":{},"guards/GuardsGuard.html":{},"controllers/SecurityController.html":{},"controllers/TransferController.html":{},"injectables/TypesOrmPostgresConfigService.html":{},"controllers/UserController.html":{}}}],["constructor(transferrepository",{"_index":1185,"title":{},"body":{"injectables/TransferRepository.html":{},"injectables/TransferService.html":{}}}],["constructor(userrepository",{"_index":242,"title":{},"body":{"injectables/AccountRepository.html":{},"injectables/AccountTypeRepository.html":{}}}],["consumer",{"_index":505,"title":{},"body":{"modules/AppModule.html":{}}}],["consumer.apply(middlewaresmiddleware).forroutes",{"_index":548,"title":{},"body":{"modules/AppModule.html":{}}}],["contener",{"_index":592,"title":{},"body":{"classes/CustomerDTO.html":{},"classes/CustomerUpdateDTO.html":{}}}],["context",{"_index":991,"title":{},"body":{"guards/GuardsGuard.html":{},"injectables/InterceptorsInterceptor.html":{}}}],["context.switchtohttp().getrequest",{"_index":995,"title":{},"body":{"guards/GuardsGuard.html":{}}}],["contexto",{"_index":978,"title":{},"body":{"classes/ExceptionFiltersFilter.html":{},"classes/TypeOrmExceptionFilter.html":{}}}],["contrario",{"_index":713,"title":{},"body":{"injectables/CustomerService.html":{}}}],["contraseña",{"_index":591,"title":{},"body":{"classes/CustomerDTO.html":{},"entities/CustomerEntity.html":{},"interfaces/CustomerRepositoryInterface.html":{},"classes/CustomerUpdateDTO.html":{},"classes/SignDTO.html":{}}}],["controlador",{"_index":1517,"title":{},"body":{"miscellaneous/variables.html":{}}}],["controller",{"_index":0,"title":{"controllers/AccountController.html":{},"controllers/DepositController.html":{},"controllers/SecurityController.html":{},"controllers/TransferController.html":{},"controllers/UserController.html":{}},"body":{"controllers/AccountController.html":{},"controllers/DepositController.html":{},"controllers/SecurityController.html":{},"controllers/TransferController.html":{},"controllers/UserController.html":{},"coverage.html":{}}}],["controller('account",{"_index":90,"title":{},"body":{"controllers/AccountController.html":{}}}],["controller('deposit",{"_index":817,"title":{},"body":{"controllers/DepositController.html":{}}}],["controller('security",{"_index":1062,"title":{},"body":{"controllers/SecurityController.html":{}}}],["controller('transfer",{"_index":1137,"title":{},"body":{"controllers/TransferController.html":{}}}],["controller('user",{"_index":1342,"title":{},"body":{"controllers/UserController.html":{}}}],["controllers",{"_index":2,"title":{},"body":{"controllers/AccountController.html":{},"modules/AppModule.html":{},"controllers/DepositController.html":{},"controllers/SecurityController.html":{},"controllers/TransferController.html":{},"controllers/UserController.html":{},"overview.html":{}}}],["correo",{"_index":583,"title":{},"body":{"classes/CustomerDTO.html":{},"entities/CustomerEntity.html":{},"interfaces/CustomerRepositoryInterface.html":{},"injectables/CustomerService.html":{},"classes/SignDTO.html":{}}}],["corresponding",{"_index":1480,"title":{},"body":{"index.html":{}}}],["corriente",{"_index":474,"title":{},"body":{"injectables/AccountTypeRepository.html":{}}}],["coverage",{"_index":1356,"title":{"coverage.html":{}},"body":{"coverage.html":{}}}],["creada",{"_index":730,"title":{},"body":{"injectables/CustomerService.html":{}}}],["creado",{"_index":891,"title":{},"body":{"injectables/DepositService.html":{}}}],["creados",{"_index":726,"title":{},"body":{"injectables/CustomerService.html":{}}}],["crear",{"_index":367,"title":{},"body":{"injectables/AccountService.html":{},"injectables/DepositService.html":{},"injectables/SecurityService.html":{},"injectables/TransferService.html":{},"classes/TypeOrmExceptionFilter.html":{},"injectables/TypesOrmPostgresConfigService.html":{}}}],["create",{"_index":1478,"title":{},"body":{"index.html":{}}}],["createaccount",{"_index":16,"title":{},"body":{"controllers/AccountController.html":{},"injectables/AccountService.html":{}}}],["createaccount(@body",{"_index":105,"title":{},"body":{"controllers/AccountController.html":{}}}],["createaccount(account",{"_index":49,"title":{},"body":{"controllers/AccountController.html":{},"injectables/AccountService.html":{}}}],["createdeposit",{"_index":806,"title":{},"body":{"controllers/DepositController.html":{},"injectables/DepositService.html":{}}}],["createdeposit(@body",{"_index":819,"title":{},"body":{"controllers/DepositController.html":{}}}],["createdeposit(account",{"_index":808,"title":{},"body":{"controllers/DepositController.html":{}}}],["createdeposit(deposit",{"_index":889,"title":{},"body":{"injectables/DepositService.html":{}}}],["createtransfer",{"_index":1115,"title":{},"body":{"controllers/TransferController.html":{},"injectables/TransferService.html":{}}}],["createtransfer(@body",{"_index":1138,"title":{},"body":{"controllers/TransferController.html":{}}}],["createtransfer(transfer",{"_index":1120,"title":{},"body":{"controllers/TransferController.html":{},"injectables/TransferService.html":{}}}],["createtypeormoptions",{"_index":1300,"title":{},"body":{"injectables/TypesOrmPostgresConfigService.html":{}}}],["crud",{"_index":557,"title":{},"body":{"interfaces/BaseRepositoryInterface.html":{}}}],["cuenta",{"_index":124,"title":{},"body":{"controllers/AccountController.html":{},"classes/AccountDTO.html":{},"entities/AccountEntity.html":{},"interfaces/AccountModel.html":{},"injectables/AccountRepository.html":{},"interfaces/AccountRepositoryInterface.html":{},"injectables/AccountService.html":{},"entities/AccountTypeEntity.html":{},"interfaces/AccountTypeModel.html":{},"injectables/AccountTypeRepository.html":{},"interfaces/AccountTypeRepositoryInterface.html":{},"injectables/CustomerService.html":{},"classes/DepositDTO.html":{},"entities/DepositEntity.html":{},"injectables/DepositRepository.html":{},"interfaces/DepositRepositoryInterface.html":{},"injectables/DepositService.html":{},"classes/TransferDTO.html":{},"entities/TransferEntity.html":{},"injectables/TransferRepository.html":{},"interfaces/TransferRepositoryInterface.html":{},"injectables/TransferService.html":{},"miscellaneous/functions.html":{}}}],["cuentas",{"_index":266,"title":{},"body":{"injectables/AccountRepository.html":{},"interfaces/AccountRepositoryInterface.html":{},"entities/TransferEntity.html":{},"injectables/TransferService.html":{}}}],["customer",{"_index":164,"title":{},"body":{"entities/AccountEntity.html":{},"interfaces/AccountModel.html":{},"injectables/AccountRepository.html":{},"entities/CustomerEntity.html":{},"injectables/CustomerRepository.html":{},"injectables/CustomerService.html":{},"controllers/SecurityController.html":{},"injectables/SecurityService.html":{},"controllers/UserController.html":{}}}],["customer.document",{"_index":751,"title":{},"body":{"injectables/CustomerService.html":{}}}],["customer.documenttypeid",{"_index":748,"title":{},"body":{"injectables/CustomerService.html":{}}}],["customer.dto",{"_index":740,"title":{},"body":{"injectables/CustomerService.html":{},"controllers/UserController.html":{}}}],["customer.dto.ts",{"_index":774,"title":{},"body":{"classes/CustomerUpdateDTO.html":{},"coverage.html":{}}}],["customer.dto.ts:29",{"_index":775,"title":{},"body":{"classes/CustomerUpdateDTO.html":{}}}],["customer.dto.ts:43",{"_index":778,"title":{},"body":{"classes/CustomerUpdateDTO.html":{}}}],["customer.dto.ts:57",{"_index":782,"title":{},"body":{"classes/CustomerUpdateDTO.html":{}}}],["customer.dto.ts:70",{"_index":781,"title":{},"body":{"classes/CustomerUpdateDTO.html":{}}}],["customer.email",{"_index":755,"title":{},"body":{"injectables/CustomerService.html":{},"injectables/SecurityService.html":{}}}],["customer.fullname",{"_index":753,"title":{},"body":{"injectables/CustomerService.html":{}}}],["customer.id",{"_index":680,"title":{},"body":{"injectables/CustomerRepository.html":{},"injectables/SecurityService.html":{}}}],["customer.password",{"_index":759,"title":{},"body":{"injectables/CustomerService.html":{}}}],["customer.phone",{"_index":757,"title":{},"body":{"injectables/CustomerService.html":{}}}],["customer.state",{"_index":770,"title":{},"body":{"injectables/CustomerService.html":{}}}],["customerbalance",{"_index":350,"title":{},"body":{"injectables/AccountService.html":{}}}],["customerbalance(id",{"_index":368,"title":{},"body":{"injectables/AccountService.html":{}}}],["customerdto",{"_index":570,"title":{"classes/CustomerDTO.html":{}},"body":{"classes/CustomerDTO.html":{},"injectables/CustomerService.html":{},"controllers/SecurityController.html":{},"injectables/SecurityService.html":{},"controllers/UserController.html":{},"coverage.html":{}}}],["customerentity",{"_index":176,"title":{"entities/CustomerEntity.html":{}},"body":{"entities/AccountEntity.html":{},"modules/AppModule.html":{},"entities/CustomerEntity.html":{},"injectables/CustomerRepository.html":{},"interfaces/CustomerRepositoryInterface.html":{},"injectables/CustomerService.html":{},"injectables/SecurityService.html":{},"injectables/TypesOrmPostgresConfigService.html":{},"controllers/UserController.html":{},"coverage.html":{}}}],["customerid",{"_index":141,"title":{},"body":{"classes/AccountDTO.html":{},"injectables/AccountRepository.html":{},"interfaces/AccountRepositoryInterface.html":{},"injectables/AccountService.html":{},"injectables/CustomerService.html":{}}}],["customermodel",{"_index":227,"title":{"interfaces/CustomerModel.html":{}},"body":{"interfaces/AccountModel.html":{},"entities/CustomerEntity.html":{},"interfaces/CustomerModel.html":{},"injectables/SecurityService.html":{},"coverage.html":{}}}],["customerrepository",{"_index":355,"title":{"injectables/CustomerRepository.html":{}},"body":{"injectables/AccountService.html":{},"modules/AppModule.html":{},"injectables/CustomerRepository.html":{},"injectables/CustomerService.html":{},"injectables/SecurityService.html":{},"coverage.html":{},"overview.html":{}}}],["customerrepositoryinterface",{"_index":671,"title":{"interfaces/CustomerRepositoryInterface.html":{}},"body":{"injectables/CustomerRepository.html":{},"interfaces/CustomerRepositoryInterface.html":{},"coverage.html":{}}}],["customerservice",{"_index":86,"title":{"injectables/CustomerService.html":{}},"body":{"controllers/AccountController.html":{},"modules/AppModule.html":{},"injectables/CustomerService.html":{},"controllers/UserController.html":{},"coverage.html":{},"overview.html":{}}}],["customerupdatedto",{"_index":737,"title":{"classes/CustomerUpdateDTO.html":{}},"body":{"injectables/CustomerService.html":{},"classes/CustomerUpdateDTO.html":{},"controllers/UserController.html":{},"coverage.html":{}}}],["customresponse",{"_index":1283,"title":{},"body":{"classes/TypeOrmExceptionFilter.html":{}}}],["cédula",{"_index":946,"title":{},"body":{"injectables/DocumentTypeRepository.html":{}}}],["dar",{"_index":733,"title":{},"body":{"injectables/CustomerService.html":{}}}],["data",{"_index":134,"title":{},"body":{"classes/AccountDTO.html":{},"classes/CustomerDTO.html":{},"classes/CustomerUpdateDTO.html":{},"classes/DataRangeDTO.html":{},"classes/DepositDTO.html":{},"classes/PaginationDTO.html":{},"classes/SignDTO.html":{},"classes/TransferDTO.html":{}}}],["data/models",{"_index":1237,"title":{},"body":{"injectables/TransferService.html":{}}}],["data/persistence/entities",{"_index":89,"title":{},"body":{"controllers/AccountController.html":{},"injectables/AccountService.html":{},"modules/AppModule.html":{},"injectables/CustomerService.html":{},"controllers/DepositController.html":{},"injectables/DepositService.html":{},"injectables/SecurityService.html":{},"controllers/TransferController.html":{},"injectables/TransferService.html":{}}}],["data/persistence/entities/account.entity",{"_index":1340,"title":{},"body":{"controllers/UserController.html":{}}}],["data/persistence/entities/customer.entity",{"_index":1341,"title":{},"body":{"controllers/UserController.html":{}}}],["data/persistence/repositories",{"_index":394,"title":{},"body":{"injectables/AccountService.html":{},"modules/AppModule.html":{},"injectables/CustomerService.html":{},"injectables/DepositService.html":{},"injectables/SecurityService.html":{},"injectables/TransferService.html":{}}}],["data/persistence/utils/exception",{"_index":519,"title":{},"body":{"modules/AppModule.html":{}}}],["database",{"_index":540,"title":{},"body":{"modules/AppModule.html":{},"injectables/TypesOrmPostgresConfigService.html":{}}}],["datarange",{"_index":822,"title":{},"body":{"controllers/DepositController.html":{},"injectables/DepositService.html":{},"controllers/TransferController.html":{},"injectables/TransferService.html":{}}}],["datarange.enddate",{"_index":916,"title":{},"body":{"injectables/DepositService.html":{},"injectables/TransferService.html":{}}}],["datarange.startamount",{"_index":1259,"title":{},"body":{"injectables/TransferService.html":{}}}],["datarange.startdate",{"_index":915,"title":{},"body":{"injectables/DepositService.html":{},"injectables/TransferService.html":{}}}],["datarangedto",{"_index":784,"title":{"classes/DataRangeDTO.html":{}},"body":{"classes/DataRangeDTO.html":{},"controllers/DepositController.html":{},"injectables/DepositService.html":{},"controllers/TransferController.html":{},"coverage.html":{}}}],["datarangemodel",{"_index":801,"title":{"interfaces/DataRangeModel.html":{}},"body":{"interfaces/DataRangeModel.html":{},"injectables/TransferService.html":{},"coverage.html":{}}}],["date",{"_index":179,"title":{},"body":{"entities/AccountEntity.html":{},"interfaces/AccountModel.html":{},"entities/CustomerEntity.html":{},"interfaces/CustomerModel.html":{},"classes/DataRangeDTO.html":{},"interfaces/DataRangeModel.html":{},"entities/DepositEntity.html":{},"interfaces/DepositModel.html":{},"injectables/DepositRepository.html":{},"interfaces/DepositRepositoryInterface.html":{},"entities/TransferEntity.html":{},"interfaces/TransferModel.html":{},"injectables/TransferRepository.html":{},"interfaces/TransferRepositoryInterface.html":{}}}],["date().toisostring",{"_index":1291,"title":{},"body":{"classes/TypeOrmExceptionFilter.html":{}}}],["date.now",{"_index":328,"title":{},"body":{"injectables/AccountRepository.html":{},"injectables/CustomerRepository.html":{},"injectables/CustomerService.html":{},"injectables/DepositRepository.html":{},"injectables/DepositService.html":{},"injectables/TransferRepository.html":{},"injectables/TransferService.html":{}}}],["date_time",{"_index":838,"title":{},"body":{"entities/DepositEntity.html":{},"entities/TransferEntity.html":{}}}],["dateend",{"_index":856,"title":{},"body":{"injectables/DepositRepository.html":{},"interfaces/DepositRepositoryInterface.html":{},"injectables/TransferRepository.html":{},"interfaces/TransferRepositoryInterface.html":{}}}],["dateinit",{"_index":860,"title":{},"body":{"injectables/DepositRepository.html":{},"interfaces/DepositRepositoryInterface.html":{},"injectables/TransferRepository.html":{},"interfaces/TransferRepositoryInterface.html":{}}}],["datetime",{"_index":834,"title":{},"body":{"entities/DepositEntity.html":{},"interfaces/DepositModel.html":{},"injectables/DepositRepository.html":{},"entities/TransferEntity.html":{},"interfaces/TransferModel.html":{},"injectables/TransferRepository.html":{}}}],["datos",{"_index":300,"title":{},"body":{"injectables/AccountRepository.html":{},"injectables/AccountTypeRepository.html":{},"interfaces/BaseRepositoryInterface.html":{},"injectables/CustomerRepository.html":{},"injectables/CustomerService.html":{},"classes/DataRangeDTO.html":{},"interfaces/DataRangeModel.html":{},"injectables/DepositRepository.html":{},"injectables/DepositService.html":{},"injectables/DocumentTypeRepository.html":{},"injectables/SecurityService.html":{},"classes/SignDTO.html":{},"injectables/TransferRepository.html":{}}}],["day",{"_index":1466,"title":{},"body":{"index.html":{}}}],["de",{"_index":148,"title":{},"body":{"classes/AccountDTO.html":{},"entities/AccountEntity.html":{},"interfaces/AccountModel.html":{},"injectables/AccountRepository.html":{},"interfaces/AccountRepositoryInterface.html":{},"injectables/AccountService.html":{},"entities/AccountTypeEntity.html":{},"interfaces/AccountTypeModel.html":{},"injectables/AccountTypeRepository.html":{},"interfaces/AccountTypeRepositoryInterface.html":{},"interfaces/BaseRepositoryInterface.html":{},"classes/CustomerDTO.html":{},"entities/CustomerEntity.html":{},"interfaces/CustomerModel.html":{},"injectables/CustomerRepository.html":{},"interfaces/CustomerRepositoryInterface.html":{},"injectables/CustomerService.html":{},"classes/CustomerUpdateDTO.html":{},"classes/DataRangeDTO.html":{},"interfaces/DataRangeModel.html":{},"classes/DepositDTO.html":{},"interfaces/DepositModel.html":{},"injectables/DepositRepository.html":{},"interfaces/DepositRepositoryInterface.html":{},"injectables/DepositService.html":{},"entities/DocumentTypeEntity.html":{},"interfaces/DocumentTypeModel.html":{},"injectables/DocumentTypeRepository.html":{},"interfaces/DocumentTypeRepositoryInterface.html":{},"classes/ExceptionFiltersFilter.html":{},"classes/PaginationDTO.html":{},"interfaces/PaginationModel.html":{},"injectables/SecurityService.html":{},"classes/SignDTO.html":{},"classes/TransferDTO.html":{},"entities/TransferEntity.html":{},"interfaces/TransferModel.html":{},"injectables/TransferRepository.html":{},"interfaces/TransferRepositoryInterface.html":{},"injectables/TransferService.html":{},"classes/TypeOrmExceptionFilter.html":{},"injectables/TypesOrmPostgresConfigService.html":{},"index.html":{}}}],["debe",{"_index":255,"title":{},"body":{"injectables/AccountRepository.html":{},"classes/CustomerDTO.html":{},"injectables/CustomerRepository.html":{},"classes/CustomerUpdateDTO.html":{},"classes/DataRangeDTO.html":{},"classes/DepositDTO.html":{},"injectables/DepositRepository.html":{},"classes/PaginationDTO.html":{},"classes/SignDTO.html":{},"classes/TransferDTO.html":{},"injectables/TransferRepository.html":{}}}],["declarations",{"_index":481,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["decorador",{"_index":1515,"title":{},"body":{"miscellaneous/variables.html":{}}}],["decorator",{"_index":156,"title":{},"body":{"classes/AccountDTO.html":{},"classes/CustomerDTO.html":{},"classes/CustomerUpdateDTO.html":{},"classes/DataRangeDTO.html":{},"classes/DepositDTO.html":{},"classes/PaginationDTO.html":{},"classes/SignDTO.html":{},"classes/TransferDTO.html":{}}}],["decorators",{"_index":29,"title":{},"body":{"controllers/AccountController.html":{},"classes/AccountDTO.html":{},"entities/AccountEntity.html":{},"entities/AccountTypeEntity.html":{},"classes/CustomerDTO.html":{},"entities/CustomerEntity.html":{},"classes/CustomerUpdateDTO.html":{},"classes/DataRangeDTO.html":{},"controllers/DepositController.html":{},"classes/DepositDTO.html":{},"entities/DepositEntity.html":{},"entities/DocumentTypeEntity.html":{},"classes/PaginationDTO.html":{},"controllers/SecurityController.html":{},"classes/SignDTO.html":{},"controllers/TransferController.html":{},"classes/TransferDTO.html":{},"entities/TransferEntity.html":{},"controllers/UserController.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["default",{"_index":169,"title":{},"body":{"entities/AccountEntity.html":{},"entities/AccountTypeEntity.html":{},"entities/CustomerEntity.html":{},"entities/DepositEntity.html":{},"entities/DocumentTypeEntity.html":{},"entities/TransferEntity.html":{},"miscellaneous/variables.html":{}}}],["defecto",{"_index":460,"title":{},"body":{"injectables/AccountTypeRepository.html":{},"injectables/DocumentTypeRepository.html":{},"injectables/TransferRepository.html":{}}}],["define",{"_index":335,"title":{},"body":{"interfaces/AccountRepositoryInterface.html":{},"interfaces/AccountTypeRepositoryInterface.html":{},"interfaces/BaseRepositoryInterface.html":{},"interfaces/CustomerRepositoryInterface.html":{},"interfaces/DepositRepositoryInterface.html":{},"interfaces/DocumentTypeRepositoryInterface.html":{},"interfaces/TransferRepositoryInterface.html":{}}}],["defined",{"_index":32,"title":{},"body":{"controllers/AccountController.html":{},"classes/AccountDTO.html":{},"entities/AccountEntity.html":{},"injectables/AccountRepository.html":{},"interfaces/AccountRepositoryInterface.html":{},"injectables/AccountService.html":{},"entities/AccountTypeEntity.html":{},"injectables/AccountTypeRepository.html":{},"interfaces/AccountTypeRepositoryInterface.html":{},"modules/AppModule.html":{},"interfaces/BaseRepositoryInterface.html":{},"classes/CustomerDTO.html":{},"entities/CustomerEntity.html":{},"injectables/CustomerRepository.html":{},"interfaces/CustomerRepositoryInterface.html":{},"injectables/CustomerService.html":{},"classes/CustomerUpdateDTO.html":{},"classes/DataRangeDTO.html":{},"controllers/DepositController.html":{},"classes/DepositDTO.html":{},"entities/DepositEntity.html":{},"injectables/DepositRepository.html":{},"interfaces/DepositRepositoryInterface.html":{},"injectables/DepositService.html":{},"entities/DocumentTypeEntity.html":{},"injectables/DocumentTypeRepository.html":{},"interfaces/DocumentTypeRepositoryInterface.html":{},"classes/ExceptionFiltersFilter.html":{},"guards/GuardsGuard.html":{},"injectables/InterceptorsInterceptor.html":{},"injectables/MiddlewaresMiddleware.html":{},"classes/PaginationDTO.html":{},"injectables/PipesPipe.html":{},"controllers/SecurityController.html":{},"injectables/SecurityService.html":{},"classes/SignDTO.html":{},"controllers/TransferController.html":{},"classes/TransferDTO.html":{},"entities/TransferEntity.html":{},"injectables/TransferRepository.html":{},"interfaces/TransferRepositoryInterface.html":{},"injectables/TransferService.html":{},"classes/TypeOrmExceptionFilter.html":{},"injectables/TypesOrmPostgresConfigService.html":{},"controllers/UserController.html":{}}}],["del",{"_index":146,"title":{},"body":{"classes/AccountDTO.html":{},"entities/AccountEntity.html":{},"injectables/AccountRepository.html":{},"interfaces/AccountRepositoryInterface.html":{},"entities/AccountTypeEntity.html":{},"injectables/AccountTypeRepository.html":{},"interfaces/AccountTypeRepositoryInterface.html":{},"classes/CustomerDTO.html":{},"entities/CustomerEntity.html":{},"injectables/CustomerRepository.html":{},"interfaces/CustomerRepositoryInterface.html":{},"injectables/CustomerService.html":{},"classes/CustomerUpdateDTO.html":{},"classes/DataRangeDTO.html":{},"classes/DepositDTO.html":{},"entities/DepositEntity.html":{},"injectables/DepositRepository.html":{},"interfaces/DepositRepositoryInterface.html":{},"injectables/DepositService.html":{},"entities/DocumentTypeEntity.html":{},"injectables/DocumentTypeRepository.html":{},"interfaces/DocumentTypeRepositoryInterface.html":{},"injectables/SecurityService.html":{},"classes/SignDTO.html":{},"injectables/TransferRepository.html":{},"interfaces/TransferRepositoryInterface.html":{},"injectables/TransferService.html":{}}}],["delete",{"_index":75,"title":{},"body":{"controllers/AccountController.html":{},"injectables/AccountRepository.html":{},"injectables/AccountTypeRepository.html":{},"interfaces/BaseRepositoryInterface.html":{},"injectables/CustomerRepository.html":{},"controllers/DepositController.html":{},"injectables/DepositRepository.html":{},"injectables/DocumentTypeRepository.html":{},"controllers/TransferController.html":{},"injectables/TransferRepository.html":{},"controllers/UserController.html":{}}}],["delete(':id",{"_index":54,"title":{},"body":{"controllers/AccountController.html":{},"controllers/DepositController.html":{},"controllers/TransferController.html":{},"controllers/UserController.html":{}}}],["delete(id",{"_index":246,"title":{},"body":{"injectables/AccountRepository.html":{},"injectables/AccountTypeRepository.html":{},"interfaces/BaseRepositoryInterface.html":{},"injectables/CustomerRepository.html":{},"injectables/DepositRepository.html":{},"injectables/DocumentTypeRepository.html":{},"injectables/TransferRepository.html":{}}}],["deleteaccount",{"_index":17,"title":{},"body":{"controllers/AccountController.html":{},"injectables/AccountService.html":{}}}],["deleteaccount(@param('id",{"_index":126,"title":{},"body":{"controllers/AccountController.html":{}}}],["deleteaccount(accountid",{"_index":370,"title":{},"body":{"injectables/AccountService.html":{}}}],["deleteaccount(id",{"_index":53,"title":{},"body":{"controllers/AccountController.html":{}}}],["deletecustomer",{"_index":701,"title":{},"body":{"injectables/CustomerService.html":{}}}],["deletecustomer(id",{"_index":708,"title":{},"body":{"injectables/CustomerService.html":{}}}],["deleted_at",{"_index":180,"title":{},"body":{"entities/AccountEntity.html":{},"entities/CustomerEntity.html":{},"entities/DepositEntity.html":{},"entities/TransferEntity.html":{}}}],["deletedat",{"_index":165,"title":{},"body":{"entities/AccountEntity.html":{},"interfaces/AccountModel.html":{},"injectables/AccountRepository.html":{},"entities/CustomerEntity.html":{},"interfaces/CustomerModel.html":{},"injectables/CustomerRepository.html":{},"entities/DepositEntity.html":{},"interfaces/DepositModel.html":{},"injectables/DepositRepository.html":{},"entities/TransferEntity.html":{},"interfaces/TransferModel.html":{},"injectables/TransferRepository.html":{}}}],["deletedeposit",{"_index":807,"title":{},"body":{"controllers/DepositController.html":{},"injectables/DepositService.html":{}}}],["deletedeposit(@param('id",{"_index":827,"title":{},"body":{"controllers/DepositController.html":{}}}],["deletedeposit(depositid",{"_index":892,"title":{},"body":{"injectables/DepositService.html":{}}}],["deletedeposit(id",{"_index":811,"title":{},"body":{"controllers/DepositController.html":{}}}],["deletetransfer",{"_index":1116,"title":{},"body":{"controllers/TransferController.html":{},"injectables/TransferService.html":{}}}],["deletetransfer(@param('id",{"_index":1143,"title":{},"body":{"controllers/TransferController.html":{}}}],["deletetransfer(id",{"_index":1123,"title":{},"body":{"controllers/TransferController.html":{}}}],["deletetransfer(transferid",{"_index":1225,"title":{},"body":{"injectables/TransferService.html":{}}}],["deleteuser",{"_index":1314,"title":{},"body":{"controllers/UserController.html":{}}}],["deleteuser(@param('id",{"_index":1352,"title":{},"body":{"controllers/UserController.html":{}}}],["deleteuser(id",{"_index":1322,"title":{},"body":{"controllers/UserController.html":{}}}],["deliver",{"_index":1461,"title":{},"body":{"index.html":{}}}],["delivery",{"_index":1464,"title":{},"body":{"index.html":{}}}],["dentro",{"_index":858,"title":{},"body":{"injectables/DepositRepository.html":{},"interfaces/DepositRepositoryInterface.html":{},"interfaces/TransferRepositoryInterface.html":{}}}],["dependencies",{"_index":479,"title":{"dependencies.html":{}},"body":{"modules/AppModule.html":{},"dependencies.html":{},"overview.html":{}}}],["deposit",{"_index":805,"title":{},"body":{"controllers/DepositController.html":{},"entities/DepositEntity.html":{},"injectables/DepositService.html":{}}}],["deposit.accountid",{"_index":904,"title":{},"body":{"injectables/DepositService.html":{}}}],["depositcontroller",{"_index":500,"title":{"controllers/DepositController.html":{}},"body":{"modules/AppModule.html":{},"controllers/DepositController.html":{},"coverage.html":{}}}],["depositdto",{"_index":809,"title":{"classes/DepositDTO.html":{}},"body":{"controllers/DepositController.html":{},"classes/DepositDTO.html":{},"injectables/DepositService.html":{},"coverage.html":{}}}],["depositentity",{"_index":515,"title":{"entities/DepositEntity.html":{}},"body":{"modules/AppModule.html":{},"controllers/DepositController.html":{},"entities/DepositEntity.html":{},"injectables/DepositRepository.html":{},"interfaces/DepositRepositoryInterface.html":{},"injectables/DepositService.html":{},"injectables/TypesOrmPostgresConfigService.html":{},"coverage.html":{}}}],["depositentity.account",{"_index":902,"title":{},"body":{"injectables/DepositService.html":{}}}],["depositentity.amount",{"_index":905,"title":{},"body":{"injectables/DepositService.html":{}}}],["depositentity.datetime",{"_index":907,"title":{},"body":{"injectables/DepositService.html":{}}}],["depositid",{"_index":894,"title":{},"body":{"injectables/DepositService.html":{}}}],["depositmodel",{"_index":842,"title":{"interfaces/DepositModel.html":{}},"body":{"entities/DepositEntity.html":{},"interfaces/DepositModel.html":{},"coverage.html":{}}}],["depositrepository",{"_index":487,"title":{"injectables/DepositRepository.html":{}},"body":{"modules/AppModule.html":{},"injectables/DepositRepository.html":{},"injectables/DepositService.html":{},"injectables/TransferService.html":{},"coverage.html":{},"overview.html":{}}}],["depositrepositoryinterface",{"_index":868,"title":{"interfaces/DepositRepositoryInterface.html":{}},"body":{"injectables/DepositRepository.html":{},"interfaces/DepositRepositoryInterface.html":{},"coverage.html":{}}}],["depositservice",{"_index":488,"title":{"injectables/DepositService.html":{}},"body":{"modules/AppModule.html":{},"controllers/DepositController.html":{},"injectables/DepositService.html":{},"coverage.html":{},"overview.html":{}}}],["depósito",{"_index":830,"title":{},"body":{"classes/DepositDTO.html":{},"entities/DepositEntity.html":{},"interfaces/DepositModel.html":{},"injectables/DepositRepository.html":{},"injectables/DepositService.html":{}}}],["depósitos",{"_index":851,"title":{},"body":{"injectables/DepositRepository.html":{},"interfaces/DepositRepositoryInterface.html":{},"injectables/DepositService.html":{}}}],["desactivada",{"_index":410,"title":{},"body":{"injectables/AccountService.html":{}}}],["description",{"_index":133,"title":{},"body":{"classes/AccountDTO.html":{},"entities/AccountEntity.html":{},"interfaces/AccountModel.html":{},"injectables/AccountRepository.html":{},"interfaces/AccountRepositoryInterface.html":{},"entities/AccountTypeEntity.html":{},"interfaces/AccountTypeModel.html":{},"injectables/AccountTypeRepository.html":{},"interfaces/AccountTypeRepositoryInterface.html":{},"interfaces/BaseRepositoryInterface.html":{},"classes/CustomerDTO.html":{},"entities/CustomerEntity.html":{},"interfaces/CustomerModel.html":{},"injectables/CustomerRepository.html":{},"interfaces/CustomerRepositoryInterface.html":{},"injectables/CustomerService.html":{},"classes/CustomerUpdateDTO.html":{},"classes/DataRangeDTO.html":{},"interfaces/DataRangeModel.html":{},"classes/DepositDTO.html":{},"entities/DepositEntity.html":{},"interfaces/DepositModel.html":{},"injectables/DepositRepository.html":{},"interfaces/DepositRepositoryInterface.html":{},"injectables/DepositService.html":{},"entities/DocumentTypeEntity.html":{},"interfaces/DocumentTypeModel.html":{},"injectables/DocumentTypeRepository.html":{},"interfaces/DocumentTypeRepositoryInterface.html":{},"classes/ExceptionFiltersFilter.html":{},"classes/PaginationDTO.html":{},"interfaces/PaginationModel.html":{},"classes/SignDTO.html":{},"classes/TransferDTO.html":{},"entities/TransferEntity.html":{},"interfaces/TransferModel.html":{},"injectables/TransferRepository.html":{},"interfaces/TransferRepositoryInterface.html":{},"classes/TypeOrmExceptionFilter.html":{},"injectables/TypesOrmPostgresConfigService.html":{},"index.html":{},"properties.html":{}}}],["description]workshop",{"_index":1470,"title":{},"body":{"index.html":{}}}],["destino",{"_index":1158,"title":{},"body":{"classes/TransferDTO.html":{}}}],["detail",{"_index":1289,"title":{},"body":{"classes/TypeOrmExceptionFilter.html":{}}}],["development",{"_index":1453,"title":{},"body":{"index.html":{}}}],["dinero",{"_index":1176,"title":{},"body":{"entities/TransferEntity.html":{}}}],["dio",{"_index":735,"title":{},"body":{"injectables/CustomerService.html":{}}}],["disponibilidad",{"_index":389,"title":{},"body":{"injectables/AccountService.html":{}}}],["document",{"_index":572,"title":{},"body":{"classes/CustomerDTO.html":{},"entities/CustomerEntity.html":{},"interfaces/CustomerModel.html":{},"injectables/CustomerRepository.html":{},"interfaces/CustomerRepositoryInterface.html":{},"classes/CustomerUpdateDTO.html":{}}}],["document_type",{"_index":924,"title":{},"body":{"entities/DocumentTypeEntity.html":{}}}],["documentation",{"_index":1357,"title":{},"body":{"coverage.html":{},"index.html":{}}}],["documented",{"_index":1495,"title":{},"body":{"index.html":{}}}],["documento",{"_index":579,"title":{},"body":{"classes/CustomerDTO.html":{},"entities/CustomerEntity.html":{},"interfaces/CustomerRepositoryInterface.html":{},"classes/CustomerUpdateDTO.html":{},"entities/DocumentTypeEntity.html":{},"interfaces/DocumentTypeModel.html":{},"injectables/DocumentTypeRepository.html":{},"interfaces/DocumentTypeRepositoryInterface.html":{}}}],["documenttype",{"_index":617,"title":{},"body":{"entities/CustomerEntity.html":{},"interfaces/CustomerModel.html":{},"injectables/CustomerRepository.html":{},"injectables/CustomerService.html":{}}}],["documenttype.id",{"_index":747,"title":{},"body":{"injectables/CustomerService.html":{}}}],["documenttypeentity",{"_index":516,"title":{"entities/DocumentTypeEntity.html":{}},"body":{"modules/AppModule.html":{},"entities/CustomerEntity.html":{},"injectables/CustomerService.html":{},"entities/DocumentTypeEntity.html":{},"injectables/DocumentTypeRepository.html":{},"interfaces/DocumentTypeRepositoryInterface.html":{},"injectables/TypesOrmPostgresConfigService.html":{},"coverage.html":{}}}],["documenttypeid",{"_index":573,"title":{},"body":{"classes/CustomerDTO.html":{},"injectables/CustomerRepository.html":{},"interfaces/CustomerRepositoryInterface.html":{}}}],["documenttypemodel",{"_index":639,"title":{"interfaces/DocumentTypeModel.html":{}},"body":{"interfaces/CustomerModel.html":{},"entities/DocumentTypeEntity.html":{},"interfaces/DocumentTypeModel.html":{},"coverage.html":{}}}],["documenttyperepository",{"_index":489,"title":{"injectables/DocumentTypeRepository.html":{}},"body":{"modules/AppModule.html":{},"injectables/DocumentTypeRepository.html":{},"injectables/SecurityService.html":{},"coverage.html":{},"overview.html":{}}}],["documenttyperepositoryinterface",{"_index":937,"title":{"interfaces/DocumentTypeRepositoryInterface.html":{}},"body":{"injectables/DocumentTypeRepository.html":{},"interfaces/DocumentTypeRepositoryInterface.html":{},"coverage.html":{}}}],["donde",{"_index":1174,"title":{},"body":{"entities/TransferEntity.html":{}}}],["dtos",{"_index":1087,"title":{},"body":{"injectables/SecurityService.html":{}}}],["duro",{"_index":879,"title":{},"body":{"injectables/DepositRepository.html":{}}}],["e",{"_index":566,"title":{},"body":{"interfaces/BaseRepositoryInterface.html":{}}}],["each",{"_index":1481,"title":{},"body":{"index.html":{}}}],["efficient",{"_index":1441,"title":{},"body":{"index.html":{}}}],["el",{"_index":224,"title":{},"body":{"interfaces/AccountModel.html":{},"injectables/AccountRepository.html":{},"interfaces/AccountRepositoryInterface.html":{},"injectables/AccountService.html":{},"entities/AccountTypeEntity.html":{},"interfaces/AccountTypeModel.html":{},"injectables/AccountTypeRepository.html":{},"interfaces/AccountTypeRepositoryInterface.html":{},"entities/CustomerEntity.html":{},"interfaces/CustomerModel.html":{},"injectables/CustomerRepository.html":{},"interfaces/CustomerRepositoryInterface.html":{},"injectables/CustomerService.html":{},"interfaces/DataRangeModel.html":{},"entities/DepositEntity.html":{},"interfaces/DepositModel.html":{},"injectables/DepositRepository.html":{},"interfaces/DepositRepositoryInterface.html":{},"injectables/DepositService.html":{},"entities/DocumentTypeEntity.html":{},"interfaces/DocumentTypeModel.html":{},"injectables/DocumentTypeRepository.html":{},"interfaces/DocumentTypeRepositoryInterface.html":{},"interfaces/PaginationModel.html":{},"injectables/SecurityService.html":{},"entities/TransferEntity.html":{},"interfaces/TransferModel.html":{},"injectables/TransferRepository.html":{},"interfaces/TransferRepositoryInterface.html":{},"classes/TypeOrmExceptionFilter.html":{}}}],["electrónico",{"_index":584,"title":{},"body":{"classes/CustomerDTO.html":{},"entities/CustomerEntity.html":{},"interfaces/CustomerRepositoryInterface.html":{},"injectables/CustomerService.html":{},"classes/SignDTO.html":{}}}],["elementos",{"_index":1034,"title":{},"body":{"classes/PaginationDTO.html":{}}}],["elimin",{"_index":193,"title":{},"body":{"entities/AccountEntity.html":{},"entities/CustomerEntity.html":{},"injectables/CustomerService.html":{},"entities/DepositEntity.html":{}}}],["elimina",{"_index":249,"title":{},"body":{"injectables/AccountRepository.html":{},"injectables/AccountTypeRepository.html":{},"interfaces/BaseRepositoryInterface.html":{},"injectables/CustomerRepository.html":{},"injectables/DepositRepository.html":{},"injectables/DocumentTypeRepository.html":{},"entities/TransferEntity.html":{},"injectables/TransferRepository.html":{}}}],["eliminación",{"_index":254,"title":{},"body":{"injectables/AccountRepository.html":{},"interfaces/BaseRepositoryInterface.html":{},"entities/TransferEntity.html":{}}}],["eliminada",{"_index":128,"title":{},"body":{"controllers/AccountController.html":{}}}],["eliminados",{"_index":718,"title":{},"body":{"injectables/CustomerService.html":{}}}],["eliminar",{"_index":250,"title":{},"body":{"injectables/AccountRepository.html":{},"injectables/AccountTypeRepository.html":{},"interfaces/BaseRepositoryInterface.html":{},"injectables/CustomerRepository.html":{},"injectables/CustomerService.html":{},"injectables/DepositRepository.html":{},"injectables/DocumentTypeRepository.html":{},"injectables/TransferRepository.html":{}}}],["email",{"_index":574,"title":{},"body":{"classes/CustomerDTO.html":{},"entities/CustomerEntity.html":{},"interfaces/CustomerModel.html":{},"injectables/CustomerRepository.html":{},"interfaces/CustomerRepositoryInterface.html":{},"injectables/CustomerService.html":{},"injectables/SecurityService.html":{},"classes/SignDTO.html":{},"controllers/UserController.html":{}}}],["en",{"_index":190,"title":{},"body":{"entities/AccountEntity.html":{},"injectables/AccountRepository.html":{},"injectables/AccountService.html":{},"injectables/AccountTypeRepository.html":{},"interfaces/BaseRepositoryInterface.html":{},"entities/CustomerEntity.html":{},"injectables/CustomerRepository.html":{},"injectables/CustomerService.html":{},"entities/DepositEntity.html":{},"injectables/DepositRepository.html":{},"injectables/DepositService.html":{},"injectables/DocumentTypeRepository.html":{},"classes/PaginationDTO.html":{},"injectables/SecurityService.html":{},"injectables/TransferRepository.html":{},"injectables/TransferService.html":{}}}],["encontr",{"_index":698,"title":{},"body":{"interfaces/CustomerRepositoryInterface.html":{}}}],["encontrada",{"_index":283,"title":{},"body":{"injectables/AccountRepository.html":{},"interfaces/BaseRepositoryInterface.html":{},"injectables/TransferRepository.html":{},"interfaces/TransferRepositoryInterface.html":{}}}],["encontradas",{"_index":275,"title":{},"body":{"injectables/AccountRepository.html":{}}}],["encontrado",{"_index":448,"title":{},"body":{"injectables/AccountTypeRepository.html":{},"interfaces/CustomerRepositoryInterface.html":{},"injectables/CustomerService.html":{},"injectables/DepositRepository.html":{},"injectables/DocumentTypeRepository.html":{}}}],["encontrados",{"_index":445,"title":{},"body":{"injectables/AccountTypeRepository.html":{},"injectables/DocumentTypeRepository.html":{}}}],["encontrar",{"_index":862,"title":{},"body":{"injectables/DepositRepository.html":{},"injectables/DocumentTypeRepository.html":{},"injectables/TransferRepository.html":{}}}],["encuentra",{"_index":263,"title":{},"body":{"injectables/AccountRepository.html":{},"interfaces/AccountRepositoryInterface.html":{},"injectables/AccountTypeRepository.html":{},"interfaces/AccountTypeRepositoryInterface.html":{},"interfaces/BaseRepositoryInterface.html":{},"interfaces/CustomerRepositoryInterface.html":{},"injectables/DepositRepository.html":{},"interfaces/DepositRepositoryInterface.html":{},"injectables/DocumentTypeRepository.html":{},"interfaces/DocumentTypeRepositoryInterface.html":{},"injectables/TransferRepository.html":{},"interfaces/TransferRepositoryInterface.html":{}}}],["end",{"_index":922,"title":{},"body":{"injectables/DepositService.html":{},"injectables/TransferService.html":{}}}],["endamount",{"_index":788,"title":{},"body":{"classes/DataRangeDTO.html":{},"interfaces/DataRangeModel.html":{}}}],["enddate",{"_index":789,"title":{},"body":{"classes/DataRangeDTO.html":{},"interfaces/DataRangeModel.html":{}}}],["entidad",{"_index":160,"title":{},"body":{"entities/AccountEntity.html":{},"injectables/AccountRepository.html":{},"entities/AccountTypeEntity.html":{},"injectables/AccountTypeRepository.html":{},"interfaces/BaseRepositoryInterface.html":{},"entities/CustomerEntity.html":{},"injectables/CustomerService.html":{},"entities/DepositEntity.html":{},"injectables/DepositService.html":{},"entities/DocumentTypeEntity.html":{},"entities/TransferEntity.html":{}}}],["entidades",{"_index":553,"title":{},"body":{"interfaces/BaseRepositoryInterface.html":{}}}],["entities",{"_index":158,"title":{},"body":{"entities/AccountEntity.html":{},"injectables/AccountRepository.html":{},"interfaces/AccountRepositoryInterface.html":{},"entities/AccountTypeEntity.html":{},"interfaces/AccountTypeRepositoryInterface.html":{},"entities/CustomerEntity.html":{},"injectables/CustomerRepository.html":{},"interfaces/CustomerRepositoryInterface.html":{},"entities/DepositEntity.html":{},"injectables/DepositRepository.html":{},"interfaces/DepositRepositoryInterface.html":{},"entities/DocumentTypeEntity.html":{},"injectables/DocumentTypeRepository.html":{},"interfaces/DocumentTypeRepositoryInterface.html":{},"injectables/SecurityService.html":{},"entities/TransferEntity.html":{},"injectables/TransferRepository.html":{},"interfaces/TransferRepositoryInterface.html":{},"injectables/TypesOrmPostgresConfigService.html":{},"overview.html":{}}}],["entities/account",{"_index":454,"title":{},"body":{"injectables/AccountTypeRepository.html":{}}}],["entity",{"_index":157,"title":{"entities/AccountEntity.html":{},"entities/AccountTypeEntity.html":{},"entities/CustomerEntity.html":{},"entities/DepositEntity.html":{},"entities/DocumentTypeEntity.html":{},"entities/TransferEntity.html":{}},"body":{"entities/AccountEntity.html":{},"injectables/AccountRepository.html":{},"entities/AccountTypeEntity.html":{},"injectables/AccountTypeRepository.html":{},"interfaces/BaseRepositoryInterface.html":{},"entities/CustomerEntity.html":{},"injectables/CustomerRepository.html":{},"entities/DepositEntity.html":{},"injectables/DepositRepository.html":{},"entities/DocumentTypeEntity.html":{},"injectables/DocumentTypeRepository.html":{},"entities/TransferEntity.html":{},"injectables/TransferRepository.html":{},"coverage.html":{}}}],["entity).then((result",{"_index":309,"title":{},"body":{"injectables/AccountRepository.html":{},"injectables/AccountTypeRepository.html":{},"injectables/CustomerRepository.html":{},"injectables/DepositRepository.html":{},"injectables/DocumentTypeRepository.html":{},"injectables/TransferRepository.html":{}}}],["entrada",{"_index":1194,"title":{},"body":{"injectables/TransferRepository.html":{},"interfaces/TransferRepositoryInterface.html":{},"injectables/TransferService.html":{}}}],["entre",{"_index":1166,"title":{},"body":{"entities/TransferEntity.html":{},"injectables/TransferService.html":{}}}],["enviar",{"_index":1292,"title":{},"body":{"classes/TypeOrmExceptionFilter.html":{}}}],["err",{"_index":1006,"title":{},"body":{"guards/GuardsGuard.html":{}}}],["error",{"_index":1282,"title":{},"body":{"classes/TypeOrmExceptionFilter.html":{}}}],["errorcode",{"_index":1290,"title":{},"body":{"classes/TypeOrmExceptionFilter.html":{}}}],["errores",{"_index":1268,"title":{},"body":{"classes/TypeOrmExceptionFilter.html":{}}}],["errors",{"_index":1288,"title":{},"body":{"classes/TypeOrmExceptionFilter.html":{}}}],["es",{"_index":1188,"title":{},"body":{"injectables/TransferRepository.html":{}}}],["especificada",{"_index":884,"title":{},"body":{"interfaces/DepositRepositoryInterface.html":{}}}],["especificado",{"_index":343,"title":{},"body":{"interfaces/AccountRepositoryInterface.html":{},"interfaces/AccountTypeRepositoryInterface.html":{},"interfaces/CustomerRepositoryInterface.html":{},"interfaces/DepositRepositoryInterface.html":{},"interfaces/DocumentTypeRepositoryInterface.html":{},"interfaces/TransferRepositoryInterface.html":{}}}],["específicos",{"_index":338,"title":{},"body":{"interfaces/AccountRepositoryInterface.html":{},"interfaces/AccountTypeRepositoryInterface.html":{},"interfaces/CustomerRepositoryInterface.html":{},"interfaces/DepositRepositoryInterface.html":{},"interfaces/DocumentTypeRepositoryInterface.html":{},"interfaces/TransferRepositoryInterface.html":{}}}],["estado",{"_index":117,"title":{},"body":{"controllers/AccountController.html":{},"entities/AccountEntity.html":{},"injectables/AccountRepository.html":{},"interfaces/AccountRepositoryInterface.html":{},"injectables/AccountService.html":{},"entities/AccountTypeEntity.html":{},"injectables/AccountTypeRepository.html":{},"interfaces/AccountTypeRepositoryInterface.html":{},"entities/CustomerEntity.html":{},"interfaces/CustomerRepositoryInterface.html":{},"entities/DocumentTypeEntity.html":{},"injectables/DocumentTypeRepository.html":{},"interfaces/DocumentTypeRepositoryInterface.html":{}}}],["estructura",{"_index":1467,"title":{},"body":{"index.html":{}}}],["example",{"_index":1449,"title":{},"body":{"index.html":{}}}],["excepciones",{"_index":965,"title":{},"body":{"classes/ExceptionFiltersFilter.html":{},"classes/TypeOrmExceptionFilter.html":{}}}],["excepción",{"_index":976,"title":{},"body":{"classes/ExceptionFiltersFilter.html":{},"classes/TypeOrmExceptionFilter.html":{}}}],["exception",{"_index":975,"title":{},"body":{"classes/ExceptionFiltersFilter.html":{},"classes/TypeOrmExceptionFilter.html":{}}}],["exception.message",{"_index":1275,"title":{},"body":{"classes/TypeOrmExceptionFilter.html":{}}}],["exceptionfilter",{"_index":967,"title":{},"body":{"classes/ExceptionFiltersFilter.html":{},"classes/TypeOrmExceptionFilter.html":{}}}],["exceptionfiltersfilter",{"_index":960,"title":{"classes/ExceptionFiltersFilter.html":{}},"body":{"classes/ExceptionFiltersFilter.html":{},"coverage.html":{}}}],["executioncontext",{"_index":989,"title":{},"body":{"guards/GuardsGuard.html":{},"injectables/InterceptorsInterceptor.html":{}}}],["existe",{"_index":314,"title":{},"body":{"injectables/AccountRepository.html":{},"injectables/AccountTypeRepository.html":{},"injectables/CustomerRepository.html":{},"injectables/CustomerService.html":{},"injectables/DepositRepository.html":{},"injectables/DocumentTypeRepository.html":{},"injectables/SecurityService.html":{},"injectables/TransferRepository.html":{}}}],["existemail",{"_index":641,"title":{},"body":{"injectables/CustomerRepository.html":{}}}],["existemail(email",{"_index":651,"title":{},"body":{"injectables/CustomerRepository.html":{}}}],["existente",{"_index":297,"title":{},"body":{"injectables/AccountRepository.html":{},"injectables/AccountTypeRepository.html":{},"interfaces/BaseRepositoryInterface.html":{},"injectables/CustomerRepository.html":{},"injectables/DepositRepository.html":{},"injectables/DocumentTypeRepository.html":{},"injectables/TransferRepository.html":{}}}],["export",{"_index":91,"title":{},"body":{"controllers/AccountController.html":{},"classes/AccountDTO.html":{},"entities/AccountEntity.html":{},"interfaces/AccountModel.html":{},"injectables/AccountRepository.html":{},"interfaces/AccountRepositoryInterface.html":{},"injectables/AccountService.html":{},"entities/AccountTypeEntity.html":{},"interfaces/AccountTypeModel.html":{},"injectables/AccountTypeRepository.html":{},"interfaces/AccountTypeRepositoryInterface.html":{},"modules/AppModule.html":{},"interfaces/BaseRepositoryInterface.html":{},"classes/CustomerDTO.html":{},"entities/CustomerEntity.html":{},"interfaces/CustomerModel.html":{},"injectables/CustomerRepository.html":{},"interfaces/CustomerRepositoryInterface.html":{},"injectables/CustomerService.html":{},"classes/CustomerUpdateDTO.html":{},"classes/DataRangeDTO.html":{},"interfaces/DataRangeModel.html":{},"controllers/DepositController.html":{},"classes/DepositDTO.html":{},"entities/DepositEntity.html":{},"interfaces/DepositModel.html":{},"injectables/DepositRepository.html":{},"interfaces/DepositRepositoryInterface.html":{},"injectables/DepositService.html":{},"entities/DocumentTypeEntity.html":{},"interfaces/DocumentTypeModel.html":{},"injectables/DocumentTypeRepository.html":{},"interfaces/DocumentTypeRepositoryInterface.html":{},"classes/ExceptionFiltersFilter.html":{},"guards/GuardsGuard.html":{},"injectables/InterceptorsInterceptor.html":{},"injectables/MiddlewaresMiddleware.html":{},"classes/PaginationDTO.html":{},"interfaces/PaginationModel.html":{},"injectables/PipesPipe.html":{},"controllers/SecurityController.html":{},"injectables/SecurityService.html":{},"classes/SignDTO.html":{},"controllers/TransferController.html":{},"classes/TransferDTO.html":{},"entities/TransferEntity.html":{},"interfaces/TransferModel.html":{},"injectables/TransferRepository.html":{},"interfaces/TransferRepositoryInterface.html":{},"injectables/TransferService.html":{},"classes/TypeOrmExceptionFilter.html":{},"injectables/TypesOrmPostgresConfigService.html":{},"controllers/UserController.html":{}}}],["exports",{"_index":484,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["express",{"_index":1025,"title":{},"body":{"injectables/MiddlewaresMiddleware.html":{},"dependencies.html":{}}}],["extends",{"_index":339,"title":{},"body":{"interfaces/AccountRepositoryInterface.html":{},"interfaces/AccountTypeRepositoryInterface.html":{},"interfaces/CustomerRepositoryInterface.html":{},"interfaces/DepositRepositoryInterface.html":{},"interfaces/DocumentTypeRepositoryInterface.html":{},"interfaces/TransferRepositoryInterface.html":{}}}],["extiende",{"_index":334,"title":{},"body":{"interfaces/AccountRepositoryInterface.html":{},"interfaces/AccountTypeRepositoryInterface.html":{},"interfaces/CustomerRepositoryInterface.html":{},"interfaces/DepositRepositoryInterface.html":{},"interfaces/DocumentTypeRepositoryInterface.html":{},"interfaces/TransferRepositoryInterface.html":{}}}],["extranjería",{"_index":953,"title":{},"body":{"injectables/DocumentTypeRepository.html":{}}}],["f9098e18cf9a",{"_index":952,"title":{},"body":{"injectables/DocumentTypeRepository.html":{}}}],["false",{"_index":185,"title":{},"body":{"entities/AccountEntity.html":{},"entities/CustomerEntity.html":{},"injectables/CustomerRepository.html":{},"injectables/CustomerService.html":{},"entities/DepositEntity.html":{},"guards/GuardsGuard.html":{},"injectables/SecurityService.html":{},"entities/TransferEntity.html":{}}}],["false})@joincolumn",{"_index":628,"title":{},"body":{"entities/CustomerEntity.html":{}}}],["fecha",{"_index":187,"title":{},"body":{"entities/AccountEntity.html":{},"entities/CustomerEntity.html":{},"classes/DataRangeDTO.html":{},"entities/DepositEntity.html":{},"injectables/DepositRepository.html":{},"interfaces/DepositRepositoryInterface.html":{},"entities/TransferEntity.html":{},"injectables/TransferRepository.html":{},"interfaces/TransferRepositoryInterface.html":{}}}],["fechas",{"_index":859,"title":{},"body":{"injectables/DepositRepository.html":{},"interfaces/DepositRepositoryInterface.html":{},"injectables/DepositService.html":{},"injectables/TransferRepository.html":{},"interfaces/TransferRepositoryInterface.html":{}}}],["file",{"_index":5,"title":{},"body":{"controllers/AccountController.html":{},"classes/AccountDTO.html":{},"entities/AccountEntity.html":{},"interfaces/AccountModel.html":{},"injectables/AccountRepository.html":{},"interfaces/AccountRepositoryInterface.html":{},"injectables/AccountService.html":{},"entities/AccountTypeEntity.html":{},"interfaces/AccountTypeModel.html":{},"injectables/AccountTypeRepository.html":{},"interfaces/AccountTypeRepositoryInterface.html":{},"modules/AppModule.html":{},"interfaces/BaseRepositoryInterface.html":{},"classes/CustomerDTO.html":{},"entities/CustomerEntity.html":{},"interfaces/CustomerModel.html":{},"injectables/CustomerRepository.html":{},"interfaces/CustomerRepositoryInterface.html":{},"injectables/CustomerService.html":{},"classes/CustomerUpdateDTO.html":{},"classes/DataRangeDTO.html":{},"interfaces/DataRangeModel.html":{},"controllers/DepositController.html":{},"classes/DepositDTO.html":{},"entities/DepositEntity.html":{},"interfaces/DepositModel.html":{},"injectables/DepositRepository.html":{},"interfaces/DepositRepositoryInterface.html":{},"injectables/DepositService.html":{},"entities/DocumentTypeEntity.html":{},"interfaces/DocumentTypeModel.html":{},"injectables/DocumentTypeRepository.html":{},"interfaces/DocumentTypeRepositoryInterface.html":{},"classes/ExceptionFiltersFilter.html":{},"guards/GuardsGuard.html":{},"injectables/InterceptorsInterceptor.html":{},"injectables/MiddlewaresMiddleware.html":{},"classes/PaginationDTO.html":{},"interfaces/PaginationModel.html":{},"injectables/PipesPipe.html":{},"controllers/SecurityController.html":{},"injectables/SecurityService.html":{},"classes/SignDTO.html":{},"controllers/TransferController.html":{},"classes/TransferDTO.html":{},"entities/TransferEntity.html":{},"interfaces/TransferModel.html":{},"injectables/TransferRepository.html":{},"interfaces/TransferRepositoryInterface.html":{},"injectables/TransferService.html":{},"classes/TypeOrmExceptionFilter.html":{},"injectables/TypesOrmPostgresConfigService.html":{},"controllers/UserController.html":{},"coverage.html":{}}}],["files",{"_index":1479,"title":{},"body":{"index.html":{}}}],["filter",{"_index":1257,"title":{},"body":{"injectables/TransferService.html":{}}}],["filters",{"_index":521,"title":{},"body":{"modules/AppModule.html":{}}}],["filters.filter.ts",{"_index":963,"title":{},"body":{"classes/ExceptionFiltersFilter.html":{},"coverage.html":{}}}],["filters.filter.ts:20",{"_index":972,"title":{},"body":{"classes/ExceptionFiltersFilter.html":{}}}],["filters.ts",{"_index":1266,"title":{},"body":{"classes/TypeOrmExceptionFilter.html":{},"coverage.html":{}}}],["filters.ts:14",{"_index":1270,"title":{},"body":{"classes/TypeOrmExceptionFilter.html":{}}}],["filters/exception",{"_index":962,"title":{},"body":{"classes/ExceptionFiltersFilter.html":{},"coverage.html":{}}}],["filters/typeorm.exception",{"_index":520,"title":{},"body":{"modules/AppModule.html":{},"classes/TypeOrmExceptionFilter.html":{},"coverage.html":{}}}],["filtrar",{"_index":901,"title":{},"body":{"injectables/DepositService.html":{}}}],["filtro",{"_index":964,"title":{},"body":{"classes/ExceptionFiltersFilter.html":{},"classes/TypeOrmExceptionFilter.html":{}}}],["fin",{"_index":794,"title":{},"body":{"classes/DataRangeDTO.html":{},"injectables/DepositRepository.html":{},"interfaces/DepositRepositoryInterface.html":{},"injectables/TransferRepository.html":{}}}],["final",{"_index":1218,"title":{},"body":{"interfaces/TransferRepositoryInterface.html":{}}}],["find",{"_index":685,"title":{},"body":{"injectables/CustomerRepository.html":{}}}],["findall",{"_index":233,"title":{},"body":{"injectables/AccountRepository.html":{},"injectables/AccountService.html":{},"injectables/AccountTypeRepository.html":{},"interfaces/BaseRepositoryInterface.html":{},"injectables/CustomerRepository.html":{},"injectables/CustomerService.html":{},"injectables/DepositRepository.html":{},"injectables/DocumentTypeRepository.html":{},"injectables/TransferRepository.html":{},"interfaces/TransferRepositoryInterface.html":{}}}],["findalldeleted",{"_index":642,"title":{},"body":{"injectables/CustomerRepository.html":{},"injectables/CustomerService.html":{}}}],["findallusers",{"_index":1315,"title":{},"body":{"controllers/UserController.html":{}}}],["findallusersdeleted",{"_index":1316,"title":{},"body":{"controllers/UserController.html":{}}}],["findbyaccountid",{"_index":845,"title":{},"body":{"injectables/DepositRepository.html":{},"interfaces/DepositRepositoryInterface.html":{}}}],["findbyaccountid(accountid",{"_index":852,"title":{},"body":{"injectables/DepositRepository.html":{},"interfaces/DepositRepositoryInterface.html":{}}}],["findbyaccounttype",{"_index":234,"title":{},"body":{"injectables/AccountRepository.html":{},"interfaces/AccountRepositoryInterface.html":{}}}],["findbyaccounttype(accounttypeid",{"_index":271,"title":{},"body":{"injectables/AccountRepository.html":{},"interfaces/AccountRepositoryInterface.html":{}}}],["findbycustomer",{"_index":235,"title":{},"body":{"injectables/AccountRepository.html":{},"interfaces/AccountRepositoryInterface.html":{}}}],["findbycustomer(customerid",{"_index":276,"title":{},"body":{"injectables/AccountRepository.html":{},"interfaces/AccountRepositoryInterface.html":{}}}],["findbydatarange",{"_index":846,"title":{},"body":{"injectables/DepositRepository.html":{},"interfaces/DepositRepositoryInterface.html":{},"injectables/TransferRepository.html":{}}}],["findbydatarange(dateinit",{"_index":855,"title":{},"body":{"injectables/DepositRepository.html":{},"interfaces/DepositRepositoryInterface.html":{},"injectables/TransferRepository.html":{}}}],["findbyfullname",{"_index":643,"title":{},"body":{"injectables/CustomerRepository.html":{},"interfaces/CustomerRepositoryInterface.html":{}}}],["findbyfullname(fullname",{"_index":655,"title":{},"body":{"injectables/CustomerRepository.html":{},"interfaces/CustomerRepositoryInterface.html":{}}}],["findbyname",{"_index":437,"title":{},"body":{"injectables/AccountTypeRepository.html":{},"interfaces/AccountTypeRepositoryInterface.html":{},"injectables/DocumentTypeRepository.html":{},"interfaces/DocumentTypeRepositoryInterface.html":{}}}],["findbyname(name",{"_index":443,"title":{},"body":{"injectables/AccountTypeRepository.html":{},"interfaces/AccountTypeRepositoryInterface.html":{},"injectables/DocumentTypeRepository.html":{},"interfaces/DocumentTypeRepositoryInterface.html":{}}}],["findbystate",{"_index":236,"title":{},"body":{"injectables/AccountRepository.html":{},"interfaces/AccountRepositoryInterface.html":{},"injectables/AccountTypeRepository.html":{},"interfaces/AccountTypeRepositoryInterface.html":{},"injectables/CustomerRepository.html":{},"interfaces/CustomerRepositoryInterface.html":{},"injectables/DocumentTypeRepository.html":{},"interfaces/DocumentTypeRepositoryInterface.html":{}}}],["findbystate(state",{"_index":278,"title":{},"body":{"injectables/AccountRepository.html":{},"interfaces/AccountRepositoryInterface.html":{},"injectables/AccountTypeRepository.html":{},"interfaces/AccountTypeRepositoryInterface.html":{},"injectables/CustomerRepository.html":{},"interfaces/CustomerRepositoryInterface.html":{},"injectables/DocumentTypeRepository.html":{},"interfaces/DocumentTypeRepositoryInterface.html":{}}}],["findincomebydatarange",{"_index":1183,"title":{},"body":{"injectables/TransferRepository.html":{},"interfaces/TransferRepositoryInterface.html":{}}}],["findincomebydatarange(accountid",{"_index":1192,"title":{},"body":{"injectables/TransferRepository.html":{},"interfaces/TransferRepositoryInterface.html":{}}}],["findone",{"_index":318,"title":{},"body":{"injectables/AccountRepository.html":{},"injectables/AccountTypeRepository.html":{},"injectables/CustomerRepository.html":{},"injectables/DepositRepository.html":{},"injectables/DocumentTypeRepository.html":{},"injectables/TransferRepository.html":{}}}],["findonebydocumenttypeanddocument",{"_index":644,"title":{},"body":{"injectables/CustomerRepository.html":{},"interfaces/CustomerRepositoryInterface.html":{}}}],["findonebydocumenttypeanddocument(documenttypeid",{"_index":658,"title":{},"body":{"injectables/CustomerRepository.html":{},"interfaces/CustomerRepositoryInterface.html":{}}}],["findonebyemail",{"_index":645,"title":{},"body":{"injectables/CustomerRepository.html":{},"interfaces/CustomerRepositoryInterface.html":{}}}],["findonebyemail(email",{"_index":660,"title":{},"body":{"injectables/CustomerRepository.html":{},"interfaces/CustomerRepositoryInterface.html":{}}}],["findonebyemailandpassword",{"_index":646,"title":{},"body":{"injectables/CustomerRepository.html":{},"interfaces/CustomerRepositoryInterface.html":{}}}],["findonebyemailandpassword(email",{"_index":662,"title":{},"body":{"injectables/CustomerRepository.html":{},"interfaces/CustomerRepositoryInterface.html":{}}}],["findonebyid",{"_index":237,"title":{},"body":{"injectables/AccountRepository.html":{},"injectables/AccountTypeRepository.html":{},"interfaces/BaseRepositoryInterface.html":{},"injectables/CustomerRepository.html":{},"injectables/DepositRepository.html":{},"injectables/DocumentTypeRepository.html":{},"injectables/TransferRepository.html":{},"interfaces/TransferRepositoryInterface.html":{}}}],["findonebyid(id",{"_index":281,"title":{},"body":{"injectables/AccountRepository.html":{},"injectables/AccountTypeRepository.html":{},"interfaces/BaseRepositoryInterface.html":{},"injectables/CustomerRepository.html":{},"injectables/DepositRepository.html":{},"injectables/DocumentTypeRepository.html":{},"injectables/TransferRepository.html":{},"interfaces/TransferRepositoryInterface.html":{}}}],["findonebyphone",{"_index":647,"title":{},"body":{"injectables/CustomerRepository.html":{},"interfaces/CustomerRepositoryInterface.html":{}}}],["findonebyphone(phone",{"_index":665,"title":{},"body":{"injectables/CustomerRepository.html":{},"interfaces/CustomerRepositoryInterface.html":{}}}],["findoutcomebydatarange",{"_index":1184,"title":{},"body":{"injectables/TransferRepository.html":{},"interfaces/TransferRepositoryInterface.html":{}}}],["findoutcomebydatarange(accountid",{"_index":1196,"title":{},"body":{"injectables/TransferRepository.html":{},"interfaces/TransferRepositoryInterface.html":{}}}],["finduser",{"_index":1317,"title":{},"body":{"controllers/UserController.html":{}}}],["finduser(@param('id",{"_index":1345,"title":{},"body":{"controllers/UserController.html":{}}}],["finduser(id",{"_index":1327,"title":{},"body":{"controllers/UserController.html":{}}}],["finduserbyemail",{"_index":1318,"title":{},"body":{"controllers/UserController.html":{}}}],["finduserbyemail(email",{"_index":1330,"title":{},"body":{"controllers/UserController.html":{}}}],["folder",{"_index":1482,"title":{},"body":{"index.html":{}}}],["folders",{"_index":1477,"title":{},"body":{"index.html":{}}}],["following",{"_index":1471,"title":{},"body":{"index.html":{}}}],["fondos",{"_index":1165,"title":{},"body":{"entities/TransferEntity.html":{}}}],["forget",{"_index":1490,"title":{},"body":{"index.html":{}}}],["framework",{"_index":1439,"title":{},"body":{"index.html":{}}}],["full_name",{"_index":632,"title":{},"body":{"entities/CustomerEntity.html":{}}}],["fullname",{"_index":575,"title":{},"body":{"classes/CustomerDTO.html":{},"entities/CustomerEntity.html":{},"interfaces/CustomerModel.html":{},"injectables/CustomerRepository.html":{},"interfaces/CustomerRepositoryInterface.html":{},"classes/CustomerUpdateDTO.html":{}}}],["function",{"_index":213,"title":{},"body":{"entities/AccountEntity.html":{},"coverage.html":{}}}],["functions",{"_index":1432,"title":{"miscellaneous/functions.html":{}},"body":{"miscellaneous/functions.html":{}}}],["genera",{"_index":210,"title":{},"body":{"entities/AccountEntity.html":{},"miscellaneous/functions.html":{}}}],["generado",{"_index":212,"title":{},"body":{"entities/AccountEntity.html":{},"miscellaneous/functions.html":{}}}],["generateid",{"_index":195,"title":{},"body":{"entities/AccountEntity.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["genérico",{"_index":966,"title":{},"body":{"classes/ExceptionFiltersFilter.html":{}}}],["get('/account/:id",{"_index":41,"title":{},"body":{"controllers/AccountController.html":{}}}],["get('/customer/:id",{"_index":57,"title":{},"body":{"controllers/AccountController.html":{}}}],["get('/select/:id",{"_index":1140,"title":{},"body":{"controllers/TransferController.html":{}}}],["get('/select/:id')@useguards(guardsguard",{"_index":1135,"title":{},"body":{"controllers/TransferController.html":{}}}],["get(':id",{"_index":1328,"title":{},"body":{"controllers/UserController.html":{}}}],["get('amount/:id",{"_index":100,"title":{},"body":{"controllers/AccountController.html":{}}}],["get('amount/:id')@useguards(guardsguard",{"_index":65,"title":{},"body":{"controllers/AccountController.html":{}}}],["get('balance/:id",{"_index":62,"title":{},"body":{"controllers/AccountController.html":{}}}],["get('deleted",{"_index":1325,"title":{},"body":{"controllers/UserController.html":{}}}],["get('email/:email",{"_index":1331,"title":{},"body":{"controllers/UserController.html":{}}}],["get('logout",{"_index":1052,"title":{},"body":{"controllers/SecurityController.html":{}}}],["get('state/:id",{"_index":68,"title":{},"body":{"controllers/AccountController.html":{}}}],["get()@useguards(guardsguard",{"_index":59,"title":{},"body":{"controllers/AccountController.html":{}}}],["getaccountbycustomerid",{"_index":18,"title":{},"body":{"controllers/AccountController.html":{},"injectables/AccountService.html":{}}}],["getaccountbycustomerid(customerid",{"_index":374,"title":{},"body":{"injectables/AccountService.html":{}}}],["getaccountbycustomerid(id",{"_index":56,"title":{},"body":{"controllers/AccountController.html":{}}}],["getaccounttype",{"_index":351,"title":{},"body":{"injectables/AccountService.html":{}}}],["getaccounttype(accountid",{"_index":376,"title":{},"body":{"injectables/AccountService.html":{}}}],["getall",{"_index":19,"title":{},"body":{"controllers/AccountController.html":{},"controllers/DepositController.html":{}}}],["getall(body",{"_index":813,"title":{},"body":{"controllers/DepositController.html":{}}}],["getbalance",{"_index":20,"title":{},"body":{"controllers/AccountController.html":{},"injectables/AccountService.html":{}}}],["getbalance(@param('id",{"_index":96,"title":{},"body":{"controllers/AccountController.html":{}}}],["getbalance(accountid",{"_index":379,"title":{},"body":{"injectables/AccountService.html":{}}}],["getbalance(id",{"_index":61,"title":{},"body":{"controllers/AccountController.html":{}}}],["getbalanceall",{"_index":21,"title":{},"body":{"controllers/AccountController.html":{}}}],["getbalanceall(@param('id",{"_index":102,"title":{},"body":{"controllers/AccountController.html":{}}}],["getbalanceall(id",{"_index":64,"title":{},"body":{"controllers/AccountController.html":{}}}],["getcustomerinfo",{"_index":702,"title":{},"body":{"injectables/CustomerService.html":{}}}],["getcustomerinfo(customerid",{"_index":719,"title":{},"body":{"injectables/CustomerService.html":{}}}],["getcustomerinfobyemail",{"_index":703,"title":{},"body":{"injectables/CustomerService.html":{}}}],["getcustomerinfobyemail(email",{"_index":722,"title":{},"body":{"injectables/CustomerService.html":{}}}],["gethistory",{"_index":887,"title":{},"body":{"injectables/DepositService.html":{},"controllers/TransferController.html":{},"injectables/TransferService.html":{}}}],["gethistory(accountid",{"_index":895,"title":{},"body":{"injectables/DepositService.html":{},"injectables/TransferService.html":{}}}],["gethistory(body",{"_index":1125,"title":{},"body":{"controllers/TransferController.html":{}}}],["gethistoryin",{"_index":1117,"title":{},"body":{"controllers/TransferController.html":{},"injectables/TransferService.html":{}}}],["gethistoryin(accountid",{"_index":1231,"title":{},"body":{"injectables/TransferService.html":{}}}],["gethistoryin(body",{"_index":1128,"title":{},"body":{"controllers/TransferController.html":{}}}],["gethistoryout",{"_index":1118,"title":{},"body":{"controllers/TransferController.html":{},"injectables/TransferService.html":{}}}],["gethistoryout(accountid",{"_index":1233,"title":{},"body":{"injectables/TransferService.html":{}}}],["gethistoryout(body",{"_index":1131,"title":{},"body":{"controllers/TransferController.html":{}}}],["getstate",{"_index":22,"title":{},"body":{"controllers/AccountController.html":{},"injectables/AccountService.html":{}}}],["getstate(@param('id",{"_index":119,"title":{},"body":{"controllers/AccountController.html":{}}}],["getstate(accountid",{"_index":381,"title":{},"body":{"injectables/AccountService.html":{}}}],["getstate(id",{"_index":67,"title":{},"body":{"controllers/AccountController.html":{}}}],["getting",{"_index":1435,"title":{"index.html":{}},"body":{}}],["guard",{"_index":981,"title":{"guards/GuardsGuard.html":{}},"body":{"coverage.html":{},"overview.html":{}}}],["guardan",{"_index":939,"title":{},"body":{"injectables/DocumentTypeRepository.html":{}}}],["guards",{"_index":982,"title":{},"body":{"guards/GuardsGuard.html":{}}}],["guardsguard",{"_index":82,"title":{"guards/GuardsGuard.html":{}},"body":{"controllers/AccountController.html":{},"guards/GuardsGuard.html":{},"controllers/TransferController.html":{},"controllers/UserController.html":{},"coverage.html":{}}}],["guidelines",{"_index":1472,"title":{},"body":{"index.html":{}}}],["hard",{"_index":880,"title":{},"body":{"injectables/DepositRepository.html":{}}}],["harddelete",{"_index":238,"title":{},"body":{"injectables/AccountRepository.html":{},"injectables/CustomerRepository.html":{},"injectables/DepositRepository.html":{},"injectables/TransferRepository.html":{}}}],["harddelete(id",{"_index":284,"title":{},"body":{"injectables/AccountRepository.html":{},"injectables/CustomerRepository.html":{},"injectables/DepositRepository.html":{},"injectables/TransferRepository.html":{}}}],["historial",{"_index":897,"title":{},"body":{"injectables/DepositService.html":{},"injectables/TransferService.html":{}}}],["hora",{"_index":189,"title":{},"body":{"entities/AccountEntity.html":{},"entities/CustomerEntity.html":{},"entities/DepositEntity.html":{},"entities/TransferEntity.html":{}}}],["host",{"_index":532,"title":{},"body":{"modules/AppModule.html":{},"classes/ExceptionFiltersFilter.html":{},"classes/TypeOrmExceptionFilter.html":{},"injectables/TypesOrmPostgresConfigService.html":{}}}],["host.switchtohttp().getresponse",{"_index":1273,"title":{},"body":{"classes/TypeOrmExceptionFilter.html":{}}}],["id",{"_index":37,"title":{},"body":{"controllers/AccountController.html":{},"entities/AccountEntity.html":{},"interfaces/AccountModel.html":{},"injectables/AccountRepository.html":{},"injectables/AccountService.html":{},"entities/AccountTypeEntity.html":{},"interfaces/AccountTypeModel.html":{},"injectables/AccountTypeRepository.html":{},"interfaces/BaseRepositoryInterface.html":{},"entities/CustomerEntity.html":{},"interfaces/CustomerModel.html":{},"injectables/CustomerRepository.html":{},"interfaces/CustomerRepositoryInterface.html":{},"injectables/CustomerService.html":{},"controllers/DepositController.html":{},"entities/DepositEntity.html":{},"interfaces/DepositModel.html":{},"injectables/DepositRepository.html":{},"interfaces/DepositRepositoryInterface.html":{},"injectables/DepositService.html":{},"entities/DocumentTypeEntity.html":{},"interfaces/DocumentTypeModel.html":{},"injectables/DocumentTypeRepository.html":{},"injectables/SecurityService.html":{},"controllers/TransferController.html":{},"entities/TransferEntity.html":{},"interfaces/TransferModel.html":{},"injectables/TransferRepository.html":{},"interfaces/TransferRepositoryInterface.html":{},"controllers/UserController.html":{},"miscellaneous/functions.html":{}}}],["identificación",{"_index":1096,"title":{},"body":{"injectables/SecurityService.html":{}}}],["identificador",{"_index":144,"title":{},"body":{"classes/AccountDTO.html":{},"entities/AccountEntity.html":{},"interfaces/AccountRepositoryInterface.html":{},"entities/AccountTypeEntity.html":{},"interfaces/BaseRepositoryInterface.html":{},"classes/CustomerDTO.html":{},"entities/CustomerEntity.html":{},"classes/DepositDTO.html":{},"entities/DepositEntity.html":{},"entities/DocumentTypeEntity.html":{},"classes/TransferDTO.html":{},"entities/TransferEntity.html":{},"miscellaneous/functions.html":{}}}],["identificarse",{"_index":1075,"title":{},"body":{"injectables/SecurityService.html":{}}}],["identifier",{"_index":1358,"title":{},"body":{"coverage.html":{}}}],["identify",{"_index":1475,"title":{},"body":{"index.html":{}}}],["implements",{"_index":207,"title":{},"body":{"entities/AccountEntity.html":{},"injectables/AccountRepository.html":{},"entities/AccountTypeEntity.html":{},"injectables/AccountTypeRepository.html":{},"modules/AppModule.html":{},"entities/CustomerEntity.html":{},"injectables/CustomerRepository.html":{},"entities/DepositEntity.html":{},"injectables/DepositRepository.html":{},"entities/DocumentTypeEntity.html":{},"injectables/DocumentTypeRepository.html":{},"classes/ExceptionFiltersFilter.html":{},"guards/GuardsGuard.html":{},"injectables/InterceptorsInterceptor.html":{},"injectables/MiddlewaresMiddleware.html":{},"injectables/PipesPipe.html":{},"entities/TransferEntity.html":{},"injectables/TransferRepository.html":{},"classes/TypeOrmExceptionFilter.html":{},"injectables/TypesOrmPostgresConfigService.html":{}}}],["import",{"_index":74,"title":{},"body":{"controllers/AccountController.html":{},"classes/AccountDTO.html":{},"entities/AccountEntity.html":{},"interfaces/AccountModel.html":{},"injectables/AccountRepository.html":{},"interfaces/AccountRepositoryInterface.html":{},"injectables/AccountService.html":{},"entities/AccountTypeEntity.html":{},"injectables/AccountTypeRepository.html":{},"interfaces/AccountTypeRepositoryInterface.html":{},"modules/AppModule.html":{},"classes/CustomerDTO.html":{},"entities/CustomerEntity.html":{},"interfaces/CustomerModel.html":{},"injectables/CustomerRepository.html":{},"interfaces/CustomerRepositoryInterface.html":{},"injectables/CustomerService.html":{},"classes/CustomerUpdateDTO.html":{},"classes/DataRangeDTO.html":{},"controllers/DepositController.html":{},"classes/DepositDTO.html":{},"entities/DepositEntity.html":{},"interfaces/DepositModel.html":{},"injectables/DepositRepository.html":{},"interfaces/DepositRepositoryInterface.html":{},"injectables/DepositService.html":{},"entities/DocumentTypeEntity.html":{},"injectables/DocumentTypeRepository.html":{},"interfaces/DocumentTypeRepositoryInterface.html":{},"classes/ExceptionFiltersFilter.html":{},"guards/GuardsGuard.html":{},"injectables/InterceptorsInterceptor.html":{},"injectables/MiddlewaresMiddleware.html":{},"classes/PaginationDTO.html":{},"injectables/PipesPipe.html":{},"controllers/SecurityController.html":{},"injectables/SecurityService.html":{},"classes/SignDTO.html":{},"controllers/TransferController.html":{},"classes/TransferDTO.html":{},"entities/TransferEntity.html":{},"interfaces/TransferModel.html":{},"injectables/TransferRepository.html":{},"interfaces/TransferRepositoryInterface.html":{},"injectables/TransferService.html":{},"classes/TypeOrmExceptionFilter.html":{},"injectables/TypesOrmPostgresConfigService.html":{},"controllers/UserController.html":{}}}],["important",{"_index":1488,"title":{},"body":{"index.html":{}}}],["imports",{"_index":525,"title":{},"body":{"modules/AppModule.html":{}}}],["income",{"_index":1167,"title":{},"body":{"entities/TransferEntity.html":{},"interfaces/TransferModel.html":{},"injectables/TransferRepository.html":{},"injectables/TransferService.html":{}}}],["income.balance",{"_index":1249,"title":{},"body":{"injectables/TransferService.html":{}}}],["incomeid",{"_index":1153,"title":{},"body":{"classes/TransferDTO.html":{}}}],["index",{"_index":9,"title":{"index.html":{}},"body":{"controllers/AccountController.html":{},"classes/AccountDTO.html":{},"entities/AccountEntity.html":{},"interfaces/AccountModel.html":{},"injectables/AccountRepository.html":{},"interfaces/AccountRepositoryInterface.html":{},"injectables/AccountService.html":{},"entities/AccountTypeEntity.html":{},"interfaces/AccountTypeModel.html":{},"injectables/AccountTypeRepository.html":{},"interfaces/AccountTypeRepositoryInterface.html":{},"interfaces/BaseRepositoryInterface.html":{},"classes/CustomerDTO.html":{},"entities/CustomerEntity.html":{},"interfaces/CustomerModel.html":{},"injectables/CustomerRepository.html":{},"interfaces/CustomerRepositoryInterface.html":{},"injectables/CustomerService.html":{},"classes/CustomerUpdateDTO.html":{},"classes/DataRangeDTO.html":{},"interfaces/DataRangeModel.html":{},"controllers/DepositController.html":{},"classes/DepositDTO.html":{},"entities/DepositEntity.html":{},"interfaces/DepositModel.html":{},"injectables/DepositRepository.html":{},"interfaces/DepositRepositoryInterface.html":{},"injectables/DepositService.html":{},"entities/DocumentTypeEntity.html":{},"interfaces/DocumentTypeModel.html":{},"injectables/DocumentTypeRepository.html":{},"interfaces/DocumentTypeRepositoryInterface.html":{},"classes/ExceptionFiltersFilter.html":{},"guards/GuardsGuard.html":{},"injectables/InterceptorsInterceptor.html":{},"injectables/MiddlewaresMiddleware.html":{},"classes/PaginationDTO.html":{},"interfaces/PaginationModel.html":{},"injectables/PipesPipe.html":{},"controllers/SecurityController.html":{},"injectables/SecurityService.html":{},"classes/SignDTO.html":{},"controllers/TransferController.html":{},"classes/TransferDTO.html":{},"entities/TransferEntity.html":{},"interfaces/TransferModel.html":{},"injectables/TransferRepository.html":{},"interfaces/TransferRepositoryInterface.html":{},"injectables/TransferService.html":{},"classes/TypeOrmExceptionFilter.html":{},"injectables/TypesOrmPostgresConfigService.html":{},"controllers/UserController.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["indica",{"_index":252,"title":{},"body":{"injectables/AccountRepository.html":{},"injectables/CustomerRepository.html":{},"injectables/DepositRepository.html":{},"injectables/TransferRepository.html":{}}}],["indicador",{"_index":559,"title":{},"body":{"interfaces/BaseRepositoryInterface.html":{}}}],["indicando",{"_index":697,"title":{},"body":{"interfaces/CustomerRepositoryInterface.html":{}}}],["info",{"_index":3,"title":{},"body":{"controllers/AccountController.html":{},"classes/AccountDTO.html":{},"entities/AccountEntity.html":{},"interfaces/AccountModel.html":{},"injectables/AccountRepository.html":{},"interfaces/AccountRepositoryInterface.html":{},"injectables/AccountService.html":{},"entities/AccountTypeEntity.html":{},"interfaces/AccountTypeModel.html":{},"injectables/AccountTypeRepository.html":{},"interfaces/AccountTypeRepositoryInterface.html":{},"modules/AppModule.html":{},"interfaces/BaseRepositoryInterface.html":{},"classes/CustomerDTO.html":{},"entities/CustomerEntity.html":{},"interfaces/CustomerModel.html":{},"injectables/CustomerRepository.html":{},"interfaces/CustomerRepositoryInterface.html":{},"injectables/CustomerService.html":{},"classes/CustomerUpdateDTO.html":{},"classes/DataRangeDTO.html":{},"interfaces/DataRangeModel.html":{},"controllers/DepositController.html":{},"classes/DepositDTO.html":{},"entities/DepositEntity.html":{},"interfaces/DepositModel.html":{},"injectables/DepositRepository.html":{},"interfaces/DepositRepositoryInterface.html":{},"injectables/DepositService.html":{},"entities/DocumentTypeEntity.html":{},"interfaces/DocumentTypeModel.html":{},"injectables/DocumentTypeRepository.html":{},"interfaces/DocumentTypeRepositoryInterface.html":{},"classes/ExceptionFiltersFilter.html":{},"guards/GuardsGuard.html":{},"injectables/InterceptorsInterceptor.html":{},"injectables/MiddlewaresMiddleware.html":{},"classes/PaginationDTO.html":{},"interfaces/PaginationModel.html":{},"injectables/PipesPipe.html":{},"controllers/SecurityController.html":{},"injectables/SecurityService.html":{},"classes/SignDTO.html":{},"controllers/TransferController.html":{},"classes/TransferDTO.html":{},"entities/TransferEntity.html":{},"interfaces/TransferModel.html":{},"injectables/TransferRepository.html":{},"interfaces/TransferRepositoryInterface.html":{},"injectables/TransferService.html":{},"classes/TypeOrmExceptionFilter.html":{},"injectables/TypesOrmPostgresConfigService.html":{},"controllers/UserController.html":{}}}],["información",{"_index":721,"title":{},"body":{"injectables/CustomerService.html":{},"classes/CustomerUpdateDTO.html":{}}}],["information",{"_index":1485,"title":{},"body":{"index.html":{}}}],["inicial",{"_index":1217,"title":{},"body":{"interfaces/TransferRepositoryInterface.html":{}}}],["inicializar",{"_index":461,"title":{},"body":{"injectables/AccountTypeRepository.html":{},"injectables/DocumentTypeRepository.html":{}}}],["inicio",{"_index":799,"title":{},"body":{"classes/DataRangeDTO.html":{},"injectables/DepositRepository.html":{},"interfaces/DepositRepositoryInterface.html":{},"classes/SignDTO.html":{},"injectables/TransferRepository.html":{}}}],["injectable",{"_index":228,"title":{"injectables/AccountRepository.html":{},"injectables/AccountService.html":{},"injectables/AccountTypeRepository.html":{},"injectables/CustomerRepository.html":{},"injectables/CustomerService.html":{},"injectables/DepositRepository.html":{},"injectables/DepositService.html":{},"injectables/DocumentTypeRepository.html":{},"injectables/InterceptorsInterceptor.html":{},"injectables/MiddlewaresMiddleware.html":{},"injectables/PipesPipe.html":{},"injectables/SecurityService.html":{},"injectables/TransferRepository.html":{},"injectables/TransferService.html":{},"injectables/TypesOrmPostgresConfigService.html":{}},"body":{"injectables/AccountRepository.html":{},"injectables/AccountService.html":{},"injectables/AccountTypeRepository.html":{},"injectables/CustomerRepository.html":{},"injectables/CustomerService.html":{},"injectables/DepositRepository.html":{},"injectables/DepositService.html":{},"injectables/DocumentTypeRepository.html":{},"guards/GuardsGuard.html":{},"injectables/InterceptorsInterceptor.html":{},"injectables/MiddlewaresMiddleware.html":{},"injectables/PipesPipe.html":{},"injectables/SecurityService.html":{},"injectables/TransferRepository.html":{},"injectables/TransferService.html":{},"injectables/TypesOrmPostgresConfigService.html":{},"coverage.html":{}}}],["injectables",{"_index":230,"title":{},"body":{"injectables/AccountRepository.html":{},"injectables/AccountService.html":{},"injectables/AccountTypeRepository.html":{},"injectables/CustomerRepository.html":{},"injectables/CustomerService.html":{},"injectables/DepositRepository.html":{},"injectables/DepositService.html":{},"injectables/DocumentTypeRepository.html":{},"injectables/InterceptorsInterceptor.html":{},"injectables/MiddlewaresMiddleware.html":{},"injectables/PipesPipe.html":{},"injectables/SecurityService.html":{},"injectables/TransferRepository.html":{},"injectables/TransferService.html":{},"injectables/TypesOrmPostgresConfigService.html":{},"overview.html":{}}}],["injectrepository",{"_index":303,"title":{},"body":{"injectables/AccountRepository.html":{},"injectables/AccountTypeRepository.html":{},"injectables/CustomerRepository.html":{},"injectables/DepositRepository.html":{},"injectables/DocumentTypeRepository.html":{},"injectables/TransferRepository.html":{}}}],["injectrepository(accountentity",{"_index":306,"title":{},"body":{"injectables/AccountRepository.html":{}}}],["injectrepository(accounttypeentity",{"_index":457,"title":{},"body":{"injectables/AccountTypeRepository.html":{}}}],["injectrepository(customerentity",{"_index":672,"title":{},"body":{"injectables/CustomerRepository.html":{}}}],["injectrepository(depositentity",{"_index":869,"title":{},"body":{"injectables/DepositRepository.html":{}}}],["injectrepository(documenttypeentity",{"_index":938,"title":{},"body":{"injectables/DocumentTypeRepository.html":{}}}],["injectrepository(transferentity",{"_index":1204,"title":{},"body":{"injectables/TransferRepository.html":{}}}],["installation",{"_index":1448,"title":{},"body":{"index.html":{}}}],["installrunning",{"_index":1451,"title":{},"body":{"index.html":{}}}],["insuficientes",{"_index":1255,"title":{},"body":{"injectables/TransferService.html":{}}}],["intercept",{"_index":1009,"title":{},"body":{"injectables/InterceptorsInterceptor.html":{}}}],["intercept(context",{"_index":1010,"title":{},"body":{"injectables/InterceptorsInterceptor.html":{}}}],["interceptorsinterceptor",{"_index":1007,"title":{"injectables/InterceptorsInterceptor.html":{}},"body":{"injectables/InterceptorsInterceptor.html":{},"coverage.html":{}}}],["interface",{"_index":220,"title":{"interfaces/AccountModel.html":{},"interfaces/AccountRepositoryInterface.html":{},"interfaces/AccountTypeModel.html":{},"interfaces/AccountTypeRepositoryInterface.html":{},"interfaces/BaseRepositoryInterface.html":{},"interfaces/CustomerModel.html":{},"interfaces/CustomerRepositoryInterface.html":{},"interfaces/DataRangeModel.html":{},"interfaces/DepositModel.html":{},"interfaces/DepositRepositoryInterface.html":{},"interfaces/DocumentTypeModel.html":{},"interfaces/DocumentTypeRepositoryInterface.html":{},"interfaces/PaginationModel.html":{},"interfaces/TransferModel.html":{},"interfaces/TransferRepositoryInterface.html":{}},"body":{"interfaces/AccountModel.html":{},"interfaces/AccountRepositoryInterface.html":{},"interfaces/AccountTypeModel.html":{},"interfaces/AccountTypeRepositoryInterface.html":{},"interfaces/BaseRepositoryInterface.html":{},"interfaces/CustomerModel.html":{},"interfaces/CustomerRepositoryInterface.html":{},"interfaces/DataRangeModel.html":{},"interfaces/DepositModel.html":{},"interfaces/DepositRepositoryInterface.html":{},"interfaces/DocumentTypeModel.html":{},"interfaces/DocumentTypeRepositoryInterface.html":{},"interfaces/PaginationModel.html":{},"interfaces/TransferModel.html":{},"interfaces/TransferRepositoryInterface.html":{},"coverage.html":{}}}],["interfaces",{"_index":221,"title":{},"body":{"interfaces/AccountModel.html":{},"injectables/AccountRepository.html":{},"interfaces/AccountRepositoryInterface.html":{},"interfaces/AccountTypeModel.html":{},"injectables/AccountTypeRepository.html":{},"interfaces/AccountTypeRepositoryInterface.html":{},"interfaces/BaseRepositoryInterface.html":{},"interfaces/CustomerModel.html":{},"injectables/CustomerRepository.html":{},"interfaces/CustomerRepositoryInterface.html":{},"interfaces/DataRangeModel.html":{},"interfaces/DepositModel.html":{},"injectables/DepositRepository.html":{},"interfaces/DepositRepositoryInterface.html":{},"interfaces/DocumentTypeModel.html":{},"injectables/DocumentTypeRepository.html":{},"interfaces/DocumentTypeRepositoryInterface.html":{},"interfaces/PaginationModel.html":{},"interfaces/TransferModel.html":{},"injectables/TransferRepository.html":{},"interfaces/TransferRepositoryInterface.html":{},"overview.html":{}}}],["interfaz",{"_index":223,"title":{},"body":{"interfaces/AccountModel.html":{},"injectables/AccountRepository.html":{},"interfaces/AccountRepositoryInterface.html":{},"interfaces/AccountTypeModel.html":{},"injectables/AccountTypeRepository.html":{},"interfaces/AccountTypeRepositoryInterface.html":{},"interfaces/BaseRepositoryInterface.html":{},"interfaces/CustomerModel.html":{},"interfaces/CustomerRepositoryInterface.html":{},"interfaces/DataRangeModel.html":{},"interfaces/DepositModel.html":{},"interfaces/DepositRepositoryInterface.html":{},"interfaces/DocumentTypeModel.html":{},"interfaces/DocumentTypeRepositoryInterface.html":{},"interfaces/PaginationModel.html":{},"interfaces/TransferModel.html":{},"interfaces/TransferRepositoryInterface.html":{}}}],["internal",{"_index":1286,"title":{},"body":{"classes/TypeOrmExceptionFilter.html":{}}}],["internalservererrorexception",{"_index":1083,"title":{},"body":{"injectables/SecurityService.html":{}}}],["inválidos",{"_index":1097,"title":{},"body":{"injectables/SecurityService.html":{}}}],["isboolean",{"_index":151,"title":{},"body":{"classes/AccountDTO.html":{}}}],["isdatestring",{"_index":152,"title":{},"body":{"classes/AccountDTO.html":{},"classes/DataRangeDTO.html":{}}}],["isemail",{"_index":581,"title":{},"body":{"classes/CustomerDTO.html":{},"classes/CustomerUpdateDTO.html":{}}}],["isnumberstring",{"_index":153,"title":{},"body":{"classes/AccountDTO.html":{},"classes/CustomerDTO.html":{},"classes/CustomerUpdateDTO.html":{},"classes/DataRangeDTO.html":{},"classes/DepositDTO.html":{},"classes/PaginationDTO.html":{},"classes/TransferDTO.html":{}}}],["isnumberstring()@maxlength(30",{"_index":601,"title":{},"body":{"classes/CustomerDTO.html":{},"classes/CustomerUpdateDTO.html":{}}}],["isstring",{"_index":604,"title":{},"body":{"classes/CustomerDTO.html":{},"classes/CustomerUpdateDTO.html":{},"classes/SignDTO.html":{},"classes/TransferDTO.html":{}}}],["isstring()@maxlength(500",{"_index":585,"title":{},"body":{"classes/CustomerDTO.html":{},"classes/CustomerUpdateDTO.html":{},"classes/TransferDTO.html":{}}}],["isuuid",{"_index":142,"title":{},"body":{"classes/AccountDTO.html":{},"classes/CustomerDTO.html":{},"classes/CustomerUpdateDTO.html":{}}}],["item",{"_index":744,"title":{},"body":{"injectables/CustomerService.html":{},"injectables/DepositService.html":{},"injectables/TransferService.html":{}}}],["item.account.id",{"_index":918,"title":{},"body":{"injectables/DepositService.html":{}}}],["item.amount",{"_index":919,"title":{},"body":{"injectables/DepositService.html":{},"injectables/TransferService.html":{}}}],["item.deletedat",{"_index":745,"title":{},"body":{"injectables/CustomerService.html":{}}}],["item.income.id",{"_index":1261,"title":{},"body":{"injectables/TransferService.html":{}}}],["item.outcome.id",{"_index":1258,"title":{},"body":{"injectables/TransferService.html":{}}}],["joincolumn",{"_index":202,"title":{},"body":{"entities/AccountEntity.html":{},"entities/CustomerEntity.html":{},"entities/DepositEntity.html":{},"entities/TransferEntity.html":{}}}],["jwt",{"_index":1068,"title":{},"body":{"controllers/SecurityController.html":{},"injectables/SecurityService.html":{},"dependencies.html":{}}}],["jwtconstants",{"_index":514,"title":{},"body":{"modules/AppModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["jwtconstants.secret",{"_index":529,"title":{},"body":{"modules/AppModule.html":{}}}],["jwtmodule",{"_index":511,"title":{},"body":{"modules/AppModule.html":{}}}],["jwtmodule.register",{"_index":527,"title":{},"body":{"modules/AppModule.html":{}}}],["jwtoken",{"_index":1108,"title":{},"body":{"injectables/SecurityService.html":{}}}],["jwtservice",{"_index":986,"title":{},"body":{"guards/GuardsGuard.html":{},"injectables/SecurityService.html":{}}}],["la",{"_index":161,"title":{},"body":{"entities/AccountEntity.html":{},"injectables/AccountRepository.html":{},"interfaces/AccountRepositoryInterface.html":{},"injectables/AccountService.html":{},"injectables/AccountTypeRepository.html":{},"interfaces/AccountTypeRepositoryInterface.html":{},"interfaces/BaseRepositoryInterface.html":{},"entities/CustomerEntity.html":{},"injectables/CustomerRepository.html":{},"interfaces/CustomerRepositoryInterface.html":{},"injectables/CustomerService.html":{},"classes/DepositDTO.html":{},"entities/DepositEntity.html":{},"injectables/DepositRepository.html":{},"interfaces/DepositRepositoryInterface.html":{},"injectables/DepositService.html":{},"injectables/DocumentTypeRepository.html":{},"interfaces/DocumentTypeRepositoryInterface.html":{},"classes/ExceptionFiltersFilter.html":{},"classes/PaginationDTO.html":{},"classes/TransferDTO.html":{},"entities/TransferEntity.html":{},"injectables/TransferRepository.html":{},"interfaces/TransferRepositoryInterface.html":{},"classes/TypeOrmExceptionFilter.html":{},"injectables/TypesOrmPostgresConfigService.html":{},"miscellaneous/functions.html":{}}}],["las",{"_index":265,"title":{},"body":{"injectables/AccountRepository.html":{},"interfaces/AccountRepositoryInterface.html":{},"interfaces/BaseRepositoryInterface.html":{},"injectables/TransferRepository.html":{},"interfaces/TransferRepositoryInterface.html":{},"injectables/TypesOrmPostgresConfigService.html":{}}}],["legend",{"_index":480,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["length",{"_index":425,"title":{},"body":{"entities/AccountTypeEntity.html":{},"entities/CustomerEntity.html":{},"entities/DocumentTypeEntity.html":{},"classes/PaginationDTO.html":{},"interfaces/PaginationModel.html":{},"entities/TransferEntity.html":{}}}],["letra",{"_index":594,"title":{},"body":{"classes/CustomerDTO.html":{},"classes/CustomerUpdateDTO.html":{}}}],["license",{"_index":1507,"title":{},"body":{"properties.html":{}}}],["link",{"_index":1483,"title":{},"body":{"index.html":{}}}],["lista",{"_index":716,"title":{},"body":{"injectables/CustomerService.html":{},"injectables/DepositService.html":{}}}],["literal",{"_index":27,"title":{},"body":{"controllers/AccountController.html":{},"controllers/DepositController.html":{},"controllers/SecurityController.html":{},"controllers/TransferController.html":{}}}],["llega",{"_index":1175,"title":{},"body":{"entities/TransferEntity.html":{}}}],["lo",{"_index":712,"title":{},"body":{"injectables/CustomerService.html":{}}}],["logging",{"_index":1312,"title":{},"body":{"injectables/TypesOrmPostgresConfigService.html":{}}}],["logout",{"_index":1048,"title":{},"body":{"controllers/SecurityController.html":{}}}],["logout(@body",{"_index":1067,"title":{},"body":{"controllers/SecurityController.html":{}}}],["logout(body",{"_index":1051,"title":{},"body":{"controllers/SecurityController.html":{}}}],["longitud",{"_index":1033,"title":{},"body":{"classes/PaginationDTO.html":{}}}],["los",{"_index":442,"title":{},"body":{"injectables/AccountTypeRepository.html":{},"interfaces/AccountTypeRepositoryInterface.html":{},"interfaces/BaseRepositoryInterface.html":{},"injectables/CustomerRepository.html":{},"interfaces/CustomerRepositoryInterface.html":{},"injectables/CustomerService.html":{},"injectables/DepositRepository.html":{},"interfaces/DepositRepositoryInterface.html":{},"injectables/DocumentTypeRepository.html":{},"interfaces/DocumentTypeRepositoryInterface.html":{},"classes/ExceptionFiltersFilter.html":{},"classes/PaginationDTO.html":{},"classes/SignDTO.html":{},"injectables/TransferRepository.html":{},"classes/TypeOrmExceptionFilter.html":{}}}],["lógico",{"_index":259,"title":{},"body":{"injectables/AccountRepository.html":{}}}],["make",{"_index":1491,"title":{},"body":{"index.html":{}}}],["manejan",{"_index":552,"title":{},"body":{"interfaces/BaseRepositoryInterface.html":{}}}],["manejar",{"_index":974,"title":{},"body":{"classes/ExceptionFiltersFilter.html":{},"classes/TypeOrmExceptionFilter.html":{}}}],["manytoone",{"_index":203,"title":{},"body":{"entities/AccountEntity.html":{},"entities/CustomerEntity.html":{},"entities/DepositEntity.html":{},"entities/TransferEntity.html":{}}}],["manytoone(undefined",{"_index":626,"title":{},"body":{"entities/CustomerEntity.html":{}}}],["manytoone(undefined)@joincolumn",{"_index":167,"title":{},"body":{"entities/AccountEntity.html":{},"entities/DepositEntity.html":{},"entities/TransferEntity.html":{}}}],["mapa",{"_index":772,"title":{},"body":{"injectables/CustomerService.html":{}}}],["mapa.deletedat",{"_index":773,"title":{},"body":{"injectables/CustomerService.html":{}}}],["matches",{"_index":605,"title":{},"body":{"classes/CustomerDTO.html":{},"classes/CustomerUpdateDTO.html":{}}}],["matches(new",{"_index":588,"title":{},"body":{"classes/CustomerDTO.html":{},"classes/CustomerUpdateDTO.html":{}}}],["matching",{"_index":130,"title":{},"body":{"controllers/AccountController.html":{},"classes/AccountDTO.html":{},"entities/AccountEntity.html":{},"interfaces/AccountModel.html":{},"injectables/AccountRepository.html":{},"interfaces/AccountRepositoryInterface.html":{},"injectables/AccountService.html":{},"entities/AccountTypeEntity.html":{},"interfaces/AccountTypeModel.html":{},"injectables/AccountTypeRepository.html":{},"interfaces/AccountTypeRepositoryInterface.html":{},"modules/AppModule.html":{},"interfaces/BaseRepositoryInterface.html":{},"classes/CustomerDTO.html":{},"entities/CustomerEntity.html":{},"interfaces/CustomerModel.html":{},"injectables/CustomerRepository.html":{},"interfaces/CustomerRepositoryInterface.html":{},"injectables/CustomerService.html":{},"classes/CustomerUpdateDTO.html":{},"classes/DataRangeDTO.html":{},"interfaces/DataRangeModel.html":{},"controllers/DepositController.html":{},"classes/DepositDTO.html":{},"entities/DepositEntity.html":{},"interfaces/DepositModel.html":{},"injectables/DepositRepository.html":{},"interfaces/DepositRepositoryInterface.html":{},"injectables/DepositService.html":{},"entities/DocumentTypeEntity.html":{},"interfaces/DocumentTypeModel.html":{},"injectables/DocumentTypeRepository.html":{},"interfaces/DocumentTypeRepositoryInterface.html":{},"classes/ExceptionFiltersFilter.html":{},"guards/GuardsGuard.html":{},"injectables/InterceptorsInterceptor.html":{},"injectables/MiddlewaresMiddleware.html":{},"classes/PaginationDTO.html":{},"interfaces/PaginationModel.html":{},"injectables/PipesPipe.html":{},"controllers/SecurityController.html":{},"injectables/SecurityService.html":{},"classes/SignDTO.html":{},"controllers/TransferController.html":{},"classes/TransferDTO.html":{},"entities/TransferEntity.html":{},"interfaces/TransferModel.html":{},"injectables/TransferRepository.html":{},"interfaces/TransferRepositoryInterface.html":{},"injectables/TransferService.html":{},"classes/TypeOrmExceptionFilter.html":{},"injectables/TypesOrmPostgresConfigService.html":{},"controllers/UserController.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/variables.html":{}}}],["math.floor(math.random",{"_index":218,"title":{},"body":{"entities/AccountEntity.html":{}}}],["maxlength",{"_index":606,"title":{},"body":{"classes/CustomerDTO.html":{},"classes/CustomerUpdateDTO.html":{},"classes/TransferDTO.html":{}}}],["maxlength(30",{"_index":609,"title":{},"body":{"classes/CustomerDTO.html":{},"classes/CustomerUpdateDTO.html":{}}}],["maxlength(500",{"_index":608,"title":{},"body":{"classes/CustomerDTO.html":{},"classes/CustomerUpdateDTO.html":{},"classes/TransferDTO.html":{}}}],["mayúscula",{"_index":595,"title":{},"body":{"classes/CustomerDTO.html":{},"classes/CustomerUpdateDTO.html":{}}}],["memberof",{"_index":155,"title":{},"body":{"classes/AccountDTO.html":{},"entities/AccountEntity.html":{},"injectables/AccountRepository.html":{},"interfaces/AccountRepositoryInterface.html":{},"injectables/AccountService.html":{},"entities/AccountTypeEntity.html":{},"injectables/AccountTypeRepository.html":{},"interfaces/AccountTypeRepositoryInterface.html":{},"interfaces/BaseRepositoryInterface.html":{},"classes/CustomerDTO.html":{},"entities/CustomerEntity.html":{},"interfaces/CustomerRepositoryInterface.html":{},"injectables/CustomerService.html":{},"classes/CustomerUpdateDTO.html":{},"classes/DataRangeDTO.html":{},"classes/DepositDTO.html":{},"entities/DepositEntity.html":{},"interfaces/DepositRepositoryInterface.html":{},"injectables/DepositService.html":{},"entities/DocumentTypeEntity.html":{},"interfaces/DocumentTypeRepositoryInterface.html":{},"classes/ExceptionFiltersFilter.html":{},"classes/PaginationDTO.html":{},"injectables/SecurityService.html":{},"classes/SignDTO.html":{},"classes/TransferDTO.html":{},"entities/TransferEntity.html":{},"interfaces/TransferRepositoryInterface.html":{},"injectables/TransferService.html":{},"injectables/TypesOrmPostgresConfigService.html":{}}}],["menos",{"_index":593,"title":{},"body":{"classes/CustomerDTO.html":{},"classes/CustomerUpdateDTO.html":{}}}],["message",{"_index":1274,"title":{},"body":{"classes/TypeOrmExceptionFilter.html":{},"index.html":{}}}],["metadata",{"_index":1042,"title":{},"body":{"injectables/PipesPipe.html":{},"dependencies.html":{}}}],["metadatos",{"_index":1516,"title":{},"body":{"miscellaneous/variables.html":{}}}],["methods",{"_index":10,"title":{},"body":{"controllers/AccountController.html":{},"injectables/AccountRepository.html":{},"interfaces/AccountRepositoryInterface.html":{},"injectables/AccountService.html":{},"injectables/AccountTypeRepository.html":{},"interfaces/AccountTypeRepositoryInterface.html":{},"modules/AppModule.html":{},"interfaces/BaseRepositoryInterface.html":{},"injectables/CustomerRepository.html":{},"interfaces/CustomerRepositoryInterface.html":{},"injectables/CustomerService.html":{},"controllers/DepositController.html":{},"injectables/DepositRepository.html":{},"interfaces/DepositRepositoryInterface.html":{},"injectables/DepositService.html":{},"injectables/DocumentTypeRepository.html":{},"interfaces/DocumentTypeRepositoryInterface.html":{},"classes/ExceptionFiltersFilter.html":{},"guards/GuardsGuard.html":{},"injectables/InterceptorsInterceptor.html":{},"injectables/MiddlewaresMiddleware.html":{},"injectables/PipesPipe.html":{},"controllers/SecurityController.html":{},"injectables/SecurityService.html":{},"controllers/TransferController.html":{},"injectables/TransferRepository.html":{},"interfaces/TransferRepositoryInterface.html":{},"injectables/TransferService.html":{},"classes/TypeOrmExceptionFilter.html":{},"injectables/TypesOrmPostgresConfigService.html":{},"controllers/UserController.html":{}}}],["middlewareconsumer",{"_index":503,"title":{},"body":{"modules/AppModule.html":{}}}],["middlewaresmiddleware",{"_index":523,"title":{"injectables/MiddlewaresMiddleware.html":{}},"body":{"modules/AppModule.html":{},"injectables/MiddlewaresMiddleware.html":{},"coverage.html":{}}}],["minlength",{"_index":607,"title":{},"body":{"classes/CustomerDTO.html":{},"classes/CustomerUpdateDTO.html":{}}}],["minlength(8",{"_index":614,"title":{},"body":{"classes/CustomerDTO.html":{},"classes/CustomerUpdateDTO.html":{}}}],["minúscula",{"_index":596,"title":{},"body":{"classes/CustomerDTO.html":{},"classes/CustomerUpdateDTO.html":{}}}],["miscellaneous",{"_index":1431,"title":{"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}},"body":{"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["missing",{"_index":1476,"title":{},"body":{"index.html":{}}}],["mode",{"_index":1457,"title":{},"body":{"index.html":{}}}],["modelo",{"_index":225,"title":{},"body":{"interfaces/AccountModel.html":{},"interfaces/AccountTypeModel.html":{},"interfaces/CustomerModel.html":{},"interfaces/DataRangeModel.html":{},"interfaces/DepositModel.html":{},"interfaces/DocumentTypeModel.html":{},"interfaces/PaginationModel.html":{},"interfaces/TransferModel.html":{}}}],["models",{"_index":206,"title":{},"body":{"entities/AccountEntity.html":{},"entities/AccountTypeEntity.html":{},"entities/CustomerEntity.html":{},"entities/DepositEntity.html":{},"entities/DocumentTypeEntity.html":{},"entities/TransferEntity.html":{}}}],["module",{"_index":476,"title":{"modules/AppModule.html":{}},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["modules",{"_index":478,"title":{"modules.html":{}},"body":{"modules/AppModule.html":{},"modules.html":{}}}],["monto",{"_index":390,"title":{},"body":{"injectables/AccountService.html":{},"classes/DepositDTO.html":{},"entities/DepositEntity.html":{},"classes/TransferDTO.html":{},"entities/TransferEntity.html":{}}}],["montos",{"_index":900,"title":{},"body":{"injectables/DepositService.html":{}}}],["motivo",{"_index":1163,"title":{},"body":{"classes/TransferDTO.html":{},"entities/TransferEntity.html":{}}}],["máximo",{"_index":779,"title":{},"body":{"classes/CustomerUpdateDTO.html":{},"classes/TransferDTO.html":{}}}],["método",{"_index":973,"title":{},"body":{"classes/ExceptionFiltersFilter.html":{},"classes/TypeOrmExceptionFilter.html":{},"injectables/TypesOrmPostgresConfigService.html":{},"miscellaneous/variables.html":{}}}],["métodos",{"_index":336,"title":{},"body":{"interfaces/AccountRepositoryInterface.html":{},"interfaces/AccountTypeRepositoryInterface.html":{},"interfaces/BaseRepositoryInterface.html":{},"interfaces/CustomerRepositoryInterface.html":{},"injectables/DepositRepository.html":{},"interfaces/DepositRepositoryInterface.html":{},"interfaces/DocumentTypeRepositoryInterface.html":{},"interfaces/TransferRepositoryInterface.html":{}}}],["mínimo",{"_index":598,"title":{},"body":{"classes/CustomerDTO.html":{},"classes/CustomerUpdateDTO.html":{}}}],["name",{"_index":35,"title":{},"body":{"controllers/AccountController.html":{},"entities/AccountEntity.html":{},"injectables/AccountRepository.html":{},"interfaces/AccountRepositoryInterface.html":{},"injectables/AccountService.html":{},"entities/AccountTypeEntity.html":{},"interfaces/AccountTypeModel.html":{},"injectables/AccountTypeRepository.html":{},"interfaces/AccountTypeRepositoryInterface.html":{},"modules/AppModule.html":{},"interfaces/BaseRepositoryInterface.html":{},"entities/CustomerEntity.html":{},"injectables/CustomerRepository.html":{},"interfaces/CustomerRepositoryInterface.html":{},"injectables/CustomerService.html":{},"controllers/DepositController.html":{},"entities/DepositEntity.html":{},"injectables/DepositRepository.html":{},"interfaces/DepositRepositoryInterface.html":{},"injectables/DepositService.html":{},"entities/DocumentTypeEntity.html":{},"interfaces/DocumentTypeModel.html":{},"injectables/DocumentTypeRepository.html":{},"interfaces/DocumentTypeRepositoryInterface.html":{},"classes/ExceptionFiltersFilter.html":{},"guards/GuardsGuard.html":{},"injectables/InterceptorsInterceptor.html":{},"injectables/MiddlewaresMiddleware.html":{},"injectables/PipesPipe.html":{},"controllers/SecurityController.html":{},"injectables/SecurityService.html":{},"controllers/TransferController.html":{},"entities/TransferEntity.html":{},"injectables/TransferRepository.html":{},"interfaces/TransferRepositoryInterface.html":{},"injectables/TransferService.html":{},"classes/TypeOrmExceptionFilter.html":{},"injectables/TypesOrmPostgresConfigService.html":{},"controllers/UserController.html":{}}}],["nest",{"_index":1445,"title":{},"body":{"index.html":{}}}],["nestinterceptor",{"_index":1014,"title":{},"body":{"injectables/InterceptorsInterceptor.html":{}}}],["nestjs/common",{"_index":80,"title":{},"body":{"controllers/AccountController.html":{},"injectables/AccountRepository.html":{},"injectables/AccountService.html":{},"injectables/AccountTypeRepository.html":{},"modules/AppModule.html":{},"injectables/CustomerRepository.html":{},"injectables/CustomerService.html":{},"controllers/DepositController.html":{},"injectables/DepositRepository.html":{},"injectables/DepositService.html":{},"injectables/DocumentTypeRepository.html":{},"classes/ExceptionFiltersFilter.html":{},"guards/GuardsGuard.html":{},"injectables/InterceptorsInterceptor.html":{},"injectables/MiddlewaresMiddleware.html":{},"injectables/PipesPipe.html":{},"controllers/SecurityController.html":{},"injectables/SecurityService.html":{},"controllers/TransferController.html":{},"injectables/TransferRepository.html":{},"injectables/TransferService.html":{},"classes/TypeOrmExceptionFilter.html":{},"injectables/TypesOrmPostgresConfigService.html":{},"controllers/UserController.html":{},"dependencies.html":{}}}],["nestjs/common/exceptions",{"_index":393,"title":{},"body":{"injectables/AccountService.html":{}}}],["nestjs/config",{"_index":508,"title":{},"body":{"modules/AppModule.html":{},"injectables/TypesOrmPostgresConfigService.html":{},"dependencies.html":{}}}],["nestjs/core",{"_index":510,"title":{},"body":{"modules/AppModule.html":{},"dependencies.html":{}}}],["nestjs/jwt",{"_index":512,"title":{},"body":{"modules/AppModule.html":{},"guards/GuardsGuard.html":{},"injectables/SecurityService.html":{},"dependencies.html":{}}}],["nestjs/platform",{"_index":1418,"title":{},"body":{"dependencies.html":{}}}],["nestjs/typeorm",{"_index":304,"title":{},"body":{"injectables/AccountRepository.html":{},"injectables/AccountTypeRepository.html":{},"modules/AppModule.html":{},"injectables/CustomerRepository.html":{},"injectables/DepositRepository.html":{},"injectables/DocumentTypeRepository.html":{},"injectables/TransferRepository.html":{},"injectables/TypesOrmPostgresConfigService.html":{},"dependencies.html":{}}}],["nestmiddleware",{"_index":1024,"title":{},"body":{"injectables/MiddlewaresMiddleware.html":{}}}],["nestmodule",{"_index":506,"title":{},"body":{"modules/AppModule.html":{}}}],["new",{"_index":312,"title":{},"body":{"injectables/AccountRepository.html":{},"injectables/AccountService.html":{},"injectables/AccountTypeRepository.html":{},"injectables/CustomerRepository.html":{},"injectables/CustomerService.html":{},"injectables/DepositRepository.html":{},"injectables/DepositService.html":{},"injectables/DocumentTypeRepository.html":{},"injectables/SecurityService.html":{},"injectables/TransferRepository.html":{},"injectables/TransferService.html":{},"classes/TypeOrmExceptionFilter.html":{},"coverage.html":{}}}],["newaccount",{"_index":325,"title":{},"body":{"injectables/AccountRepository.html":{},"injectables/AccountService.html":{},"injectables/DepositService.html":{},"injectables/SecurityService.html":{}}}],["newaccount.accounttype",{"_index":398,"title":{},"body":{"injectables/AccountService.html":{}}}],["newaccount.accounttypeid",{"_index":1105,"title":{},"body":{"injectables/SecurityService.html":{}}}],["newaccount.balance",{"_index":412,"title":{},"body":{"injectables/AccountService.html":{},"injectables/DepositService.html":{}}}],["newaccount.customer",{"_index":395,"title":{},"body":{"injectables/AccountService.html":{}}}],["newaccount.customerid",{"_index":1104,"title":{},"body":{"injectables/SecurityService.html":{}}}],["newaccount.deletedat",{"_index":327,"title":{},"body":{"injectables/AccountRepository.html":{}}}],["newaccount.state",{"_index":419,"title":{},"body":{"injectables/AccountService.html":{}}}],["newarray",{"_index":913,"title":{},"body":{"injectables/DepositService.html":{},"injectables/TransferService.html":{}}}],["newarray).filter",{"_index":917,"title":{},"body":{"injectables/DepositService.html":{},"injectables/TransferService.html":{}}}],["newcustomer",{"_index":678,"title":{},"body":{"injectables/CustomerRepository.html":{},"injectables/CustomerService.html":{},"injectables/SecurityService.html":{}}}],["newcustomer(customer",{"_index":724,"title":{},"body":{"injectables/CustomerService.html":{}}}],["newcustomer.deletedat",{"_index":681,"title":{},"body":{"injectables/CustomerRepository.html":{}}}],["newcustomer.document",{"_index":750,"title":{},"body":{"injectables/CustomerService.html":{},"injectables/SecurityService.html":{}}}],["newcustomer.documenttype",{"_index":749,"title":{},"body":{"injectables/CustomerService.html":{},"injectables/SecurityService.html":{}}}],["newcustomer.email",{"_index":754,"title":{},"body":{"injectables/CustomerService.html":{},"injectables/SecurityService.html":{}}}],["newcustomer.fullname",{"_index":752,"title":{},"body":{"injectables/CustomerService.html":{},"injectables/SecurityService.html":{}}}],["newcustomer.password",{"_index":758,"title":{},"body":{"injectables/CustomerService.html":{},"injectables/SecurityService.html":{}}}],["newcustomer.phone",{"_index":756,"title":{},"body":{"injectables/CustomerService.html":{},"injectables/SecurityService.html":{}}}],["newdeposit",{"_index":873,"title":{},"body":{"injectables/DepositRepository.html":{}}}],["newdeposit.deletedat",{"_index":876,"title":{},"body":{"injectables/DepositRepository.html":{}}}],["newtransfer",{"_index":1208,"title":{},"body":{"injectables/TransferRepository.html":{},"injectables/TransferService.html":{}}}],["newtransfer.amount",{"_index":1244,"title":{},"body":{"injectables/TransferService.html":{}}}],["newtransfer.datetime",{"_index":1252,"title":{},"body":{"injectables/TransferService.html":{}}}],["newtransfer.deletedat",{"_index":1211,"title":{},"body":{"injectables/TransferRepository.html":{}}}],["newtransfer.income",{"_index":1242,"title":{},"body":{"injectables/TransferService.html":{}}}],["newtransfer.outcome",{"_index":1243,"title":{},"body":{"injectables/TransferService.html":{}}}],["newtransfer.reason",{"_index":1245,"title":{},"body":{"injectables/TransferService.html":{}}}],["next",{"_index":1011,"title":{},"body":{"injectables/InterceptorsInterceptor.html":{},"injectables/MiddlewaresMiddleware.html":{}}}],["next.handle",{"_index":1015,"title":{},"body":{"injectables/InterceptorsInterceptor.html":{}}}],["nextfunction",{"_index":1021,"title":{},"body":{"injectables/MiddlewaresMiddleware.html":{}}}],["nico",{"_index":145,"title":{},"body":{"classes/AccountDTO.html":{},"entities/AccountEntity.html":{},"entities/AccountTypeEntity.html":{},"interfaces/BaseRepositoryInterface.html":{},"classes/CustomerDTO.html":{},"entities/CustomerEntity.html":{},"entities/DepositEntity.html":{},"entities/DocumentTypeEntity.html":{},"entities/TransferEntity.html":{},"miscellaneous/functions.html":{}}}],["node.js",{"_index":1438,"title":{},"body":{"index.html":{}}}],["nombre",{"_index":428,"title":{},"body":{"entities/AccountTypeEntity.html":{},"injectables/AccountTypeRepository.html":{},"interfaces/AccountTypeRepositoryInterface.html":{},"classes/CustomerDTO.html":{},"entities/CustomerEntity.html":{},"interfaces/CustomerRepositoryInterface.html":{},"classes/CustomerUpdateDTO.html":{},"entities/DocumentTypeEntity.html":{},"injectables/DocumentTypeRepository.html":{},"interfaces/DocumentTypeRepositoryInterface.html":{}}}],["note",{"_index":1489,"title":{},"body":{"index.html":{}}}],["notfoundexception",{"_index":302,"title":{},"body":{"injectables/AccountRepository.html":{},"injectables/AccountTypeRepository.html":{},"injectables/CustomerRepository.html":{},"injectables/CustomerService.html":{},"injectables/DepositRepository.html":{},"injectables/DocumentTypeRepository.html":{},"injectables/SecurityService.html":{},"injectables/TransferRepository.html":{},"injectables/TransferService.html":{}}}],["notfoundexception(`el",{"_index":313,"title":{},"body":{"injectables/AccountRepository.html":{},"injectables/AccountTypeRepository.html":{},"injectables/CustomerRepository.html":{},"injectables/DepositRepository.html":{},"injectables/DocumentTypeRepository.html":{},"injectables/TransferRepository.html":{}}}],["notfoundexception(`fondos",{"_index":1254,"title":{},"body":{"injectables/TransferService.html":{}}}],["notfoundexception(`no",{"_index":687,"title":{},"body":{"injectables/CustomerRepository.html":{}}}],["npm",{"_index":1450,"title":{},"body":{"index.html":{}}}],["nueva",{"_index":289,"title":{},"body":{"injectables/AccountRepository.html":{},"interfaces/BaseRepositoryInterface.html":{},"injectables/TransferRepository.html":{}}}],["nuevo",{"_index":450,"title":{},"body":{"injectables/AccountTypeRepository.html":{},"injectables/CustomerRepository.html":{},"injectables/CustomerService.html":{},"injectables/DepositRepository.html":{},"injectables/DocumentTypeRepository.html":{}}}],["nuevos",{"_index":299,"title":{},"body":{"injectables/AccountRepository.html":{},"injectables/AccountTypeRepository.html":{},"injectables/CustomerRepository.html":{},"injectables/CustomerService.html":{},"injectables/DepositRepository.html":{},"injectables/DocumentTypeRepository.html":{},"injectables/TransferRepository.html":{}}}],["null",{"_index":565,"title":{},"body":{"interfaces/BaseRepositoryInterface.html":{}}}],["nullable",{"_index":182,"title":{},"body":{"entities/AccountEntity.html":{},"entities/CustomerEntity.html":{},"entities/DepositEntity.html":{},"entities/TransferEntity.html":{}}}],["number",{"_index":110,"title":{},"body":{"controllers/AccountController.html":{},"entities/AccountEntity.html":{},"interfaces/AccountModel.html":{},"injectables/AccountService.html":{},"entities/CustomerEntity.html":{},"interfaces/CustomerModel.html":{},"classes/DataRangeDTO.html":{},"interfaces/DataRangeModel.html":{},"entities/DepositEntity.html":{},"interfaces/DepositModel.html":{},"injectables/DepositRepository.html":{},"interfaces/DepositRepositoryInterface.html":{},"classes/PaginationDTO.html":{},"interfaces/PaginationModel.html":{},"entities/TransferEntity.html":{},"interfaces/TransferModel.html":{},"injectables/TransferRepository.html":{},"interfaces/TransferRepositoryInterface.html":{},"classes/TypeOrmExceptionFilter.html":{}}}],["number(amount",{"_index":417,"title":{},"body":{"injectables/AccountService.html":{}}}],["number(datarange.startamount",{"_index":920,"title":{},"body":{"injectables/DepositService.html":{},"injectables/TransferService.html":{}}}],["number(deposit.amount",{"_index":906,"title":{},"body":{"injectables/DepositService.html":{}}}],["number(income.balance",{"_index":1250,"title":{},"body":{"injectables/TransferService.html":{}}}],["number(newaccount.balance",{"_index":909,"title":{},"body":{"injectables/DepositService.html":{}}}],["number(outcome.balance",{"_index":1247,"title":{},"body":{"injectables/TransferService.html":{}}}],["number(transfer.amount",{"_index":1241,"title":{},"body":{"injectables/TransferService.html":{}}}],["numeric",{"_index":173,"title":{},"body":{"entities/AccountEntity.html":{},"entities/DepositEntity.html":{},"entities/TransferEntity.html":{}}}],["número",{"_index":578,"title":{},"body":{"classes/CustomerDTO.html":{},"entities/CustomerEntity.html":{},"interfaces/CustomerRepositoryInterface.html":{},"classes/CustomerUpdateDTO.html":{},"classes/DataRangeDTO.html":{},"classes/DepositDTO.html":{},"classes/PaginationDTO.html":{},"classes/TransferDTO.html":{}}}],["o",{"_index":260,"title":{},"body":{"injectables/AccountRepository.html":{},"interfaces/BaseRepositoryInterface.html":{},"classes/DataRangeDTO.html":{},"injectables/DepositRepository.html":{},"classes/TransferDTO.html":{},"injectables/TransferRepository.html":{},"miscellaneous/variables.html":{}}}],["object",{"_index":136,"title":{},"body":{"classes/AccountDTO.html":{},"classes/CustomerDTO.html":{},"classes/CustomerUpdateDTO.html":{},"classes/DataRangeDTO.html":{},"classes/DepositDTO.html":{},"classes/PaginationDTO.html":{},"classes/SignDTO.html":{},"classes/TransferDTO.html":{},"miscellaneous/variables.html":{}}}],["objeto",{"_index":797,"title":{},"body":{"classes/DataRangeDTO.html":{}}}],["observable",{"_index":992,"title":{},"body":{"guards/GuardsGuard.html":{},"injectables/InterceptorsInterceptor.html":{}}}],["obtener",{"_index":378,"title":{},"body":{"injectables/AccountService.html":{},"injectables/CustomerService.html":{},"injectables/DepositService.html":{},"injectables/TransferService.html":{}}}],["obtiene",{"_index":561,"title":{},"body":{"interfaces/BaseRepositoryInterface.html":{}}}],["ocurri",{"_index":1285,"title":{},"body":{"classes/TypeOrmExceptionFilter.html":{}}}],["opcional",{"_index":194,"title":{},"body":{"entities/AccountEntity.html":{},"interfaces/BaseRepositoryInterface.html":{},"entities/CustomerEntity.html":{},"entities/DepositEntity.html":{},"injectables/TransferRepository.html":{}}}],["opciones",{"_index":1298,"title":{},"body":{"injectables/TypesOrmPostgresConfigService.html":{}}}],["operaciones",{"_index":556,"title":{},"body":{"interfaces/BaseRepositoryInterface.html":{}}}],["optional",{"_index":36,"title":{},"body":{"controllers/AccountController.html":{},"entities/AccountEntity.html":{},"interfaces/AccountModel.html":{},"injectables/AccountRepository.html":{},"interfaces/AccountRepositoryInterface.html":{},"injectables/AccountService.html":{},"injectables/AccountTypeRepository.html":{},"interfaces/AccountTypeRepositoryInterface.html":{},"modules/AppModule.html":{},"interfaces/BaseRepositoryInterface.html":{},"entities/CustomerEntity.html":{},"interfaces/CustomerModel.html":{},"injectables/CustomerRepository.html":{},"interfaces/CustomerRepositoryInterface.html":{},"injectables/CustomerService.html":{},"classes/DataRangeDTO.html":{},"interfaces/DataRangeModel.html":{},"controllers/DepositController.html":{},"entities/DepositEntity.html":{},"interfaces/DepositModel.html":{},"injectables/DepositRepository.html":{},"interfaces/DepositRepositoryInterface.html":{},"injectables/DepositService.html":{},"injectables/DocumentTypeRepository.html":{},"interfaces/DocumentTypeRepositoryInterface.html":{},"classes/ExceptionFiltersFilter.html":{},"guards/GuardsGuard.html":{},"injectables/InterceptorsInterceptor.html":{},"injectables/MiddlewaresMiddleware.html":{},"injectables/PipesPipe.html":{},"controllers/SecurityController.html":{},"injectables/SecurityService.html":{},"controllers/TransferController.html":{},"entities/TransferEntity.html":{},"interfaces/TransferModel.html":{},"injectables/TransferRepository.html":{},"interfaces/TransferRepositoryInterface.html":{},"injectables/TransferService.html":{},"classes/TypeOrmExceptionFilter.html":{},"injectables/TypesOrmPostgresConfigService.html":{},"controllers/UserController.html":{}}}],["origen",{"_index":1160,"title":{},"body":{"classes/TransferDTO.html":{}}}],["orm",{"_index":1295,"title":{},"body":{"injectables/TypesOrmPostgresConfigService.html":{},"coverage.html":{}}}],["out",{"_index":495,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["outcome",{"_index":1168,"title":{},"body":{"entities/TransferEntity.html":{},"interfaces/TransferModel.html":{},"injectables/TransferRepository.html":{},"injectables/TransferService.html":{}}}],["outcome.balance",{"_index":1240,"title":{},"body":{"injectables/TransferService.html":{}}}],["outcomeid",{"_index":1154,"title":{},"body":{"classes/TransferDTO.html":{}}}],["overview",{"_index":1500,"title":{"overview.html":{}},"body":{"overview.html":{}}}],["package",{"_index":1414,"title":{"dependencies.html":{},"properties.html":{}},"body":{}}],["page",{"_index":1031,"title":{},"body":{"classes/PaginationDTO.html":{},"interfaces/PaginationModel.html":{}}}],["paginación",{"_index":899,"title":{},"body":{"injectables/DepositService.html":{},"classes/PaginationDTO.html":{},"interfaces/PaginationModel.html":{}}}],["pagination",{"_index":821,"title":{},"body":{"controllers/DepositController.html":{},"injectables/DepositService.html":{},"controllers/TransferController.html":{},"injectables/TransferService.html":{}}}],["paginationdto",{"_index":816,"title":{"classes/PaginationDTO.html":{}},"body":{"controllers/DepositController.html":{},"injectables/DepositService.html":{},"classes/PaginationDTO.html":{},"controllers/TransferController.html":{},"coverage.html":{}}}],["paginationmodel",{"_index":1037,"title":{"interfaces/PaginationModel.html":{}},"body":{"interfaces/PaginationModel.html":{},"injectables/TransferService.html":{},"coverage.html":{}}}],["para",{"_index":137,"title":{},"body":{"classes/AccountDTO.html":{},"entities/AccountEntity.html":{},"interfaces/AccountModel.html":{},"injectables/AccountRepository.html":{},"interfaces/AccountRepositoryInterface.html":{},"entities/AccountTypeEntity.html":{},"interfaces/AccountTypeModel.html":{},"injectables/AccountTypeRepository.html":{},"interfaces/AccountTypeRepositoryInterface.html":{},"interfaces/BaseRepositoryInterface.html":{},"classes/CustomerDTO.html":{},"entities/CustomerEntity.html":{},"interfaces/CustomerModel.html":{},"interfaces/CustomerRepositoryInterface.html":{},"classes/CustomerUpdateDTO.html":{},"classes/DataRangeDTO.html":{},"interfaces/DataRangeModel.html":{},"classes/DepositDTO.html":{},"entities/DepositEntity.html":{},"interfaces/DepositModel.html":{},"injectables/DepositRepository.html":{},"interfaces/DepositRepositoryInterface.html":{},"injectables/DepositService.html":{},"entities/DocumentTypeEntity.html":{},"interfaces/DocumentTypeModel.html":{},"interfaces/DocumentTypeRepositoryInterface.html":{},"classes/ExceptionFiltersFilter.html":{},"classes/PaginationDTO.html":{},"interfaces/PaginationModel.html":{},"classes/SignDTO.html":{},"classes/TransferDTO.html":{},"entities/TransferEntity.html":{},"interfaces/TransferModel.html":{},"interfaces/TransferRepositoryInterface.html":{},"classes/TypeOrmExceptionFilter.html":{},"injectables/TypesOrmPostgresConfigService.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["param",{"_index":76,"title":{},"body":{"controllers/AccountController.html":{},"injectables/AccountRepository.html":{},"interfaces/AccountRepositoryInterface.html":{},"injectables/AccountService.html":{},"injectables/AccountTypeRepository.html":{},"interfaces/AccountTypeRepositoryInterface.html":{},"interfaces/BaseRepositoryInterface.html":{},"injectables/CustomerRepository.html":{},"interfaces/CustomerRepositoryInterface.html":{},"injectables/CustomerService.html":{},"controllers/DepositController.html":{},"injectables/DepositRepository.html":{},"interfaces/DepositRepositoryInterface.html":{},"injectables/DepositService.html":{},"injectables/DocumentTypeRepository.html":{},"interfaces/DocumentTypeRepositoryInterface.html":{},"classes/ExceptionFiltersFilter.html":{},"injectables/SecurityService.html":{},"controllers/TransferController.html":{},"injectables/TransferRepository.html":{},"interfaces/TransferRepositoryInterface.html":{},"injectables/TransferService.html":{},"classes/TypeOrmExceptionFilter.html":{},"controllers/UserController.html":{}}}],["param('email",{"_index":1347,"title":{},"body":{"controllers/UserController.html":{}}}],["param('id",{"_index":108,"title":{},"body":{"controllers/AccountController.html":{},"controllers/UserController.html":{}}}],["parameters",{"_index":34,"title":{},"body":{"controllers/AccountController.html":{},"injectables/AccountRepository.html":{},"interfaces/AccountRepositoryInterface.html":{},"injectables/AccountService.html":{},"injectables/AccountTypeRepository.html":{},"interfaces/AccountTypeRepositoryInterface.html":{},"modules/AppModule.html":{},"interfaces/BaseRepositoryInterface.html":{},"injectables/CustomerRepository.html":{},"interfaces/CustomerRepositoryInterface.html":{},"injectables/CustomerService.html":{},"controllers/DepositController.html":{},"injectables/DepositRepository.html":{},"interfaces/DepositRepositoryInterface.html":{},"injectables/DepositService.html":{},"injectables/DocumentTypeRepository.html":{},"interfaces/DocumentTypeRepositoryInterface.html":{},"classes/ExceptionFiltersFilter.html":{},"guards/GuardsGuard.html":{},"injectables/InterceptorsInterceptor.html":{},"injectables/MiddlewaresMiddleware.html":{},"injectables/PipesPipe.html":{},"controllers/SecurityController.html":{},"injectables/SecurityService.html":{},"controllers/TransferController.html":{},"injectables/TransferRepository.html":{},"interfaces/TransferRepositoryInterface.html":{},"injectables/TransferService.html":{},"classes/TypeOrmExceptionFilter.html":{},"injectables/TypesOrmPostgresConfigService.html":{},"controllers/UserController.html":{}}}],["passport",{"_index":1423,"title":{},"body":{"dependencies.html":{}}}],["password",{"_index":538,"title":{},"body":{"modules/AppModule.html":{},"classes/CustomerDTO.html":{},"entities/CustomerEntity.html":{},"interfaces/CustomerModel.html":{},"injectables/CustomerRepository.html":{},"interfaces/CustomerRepositoryInterface.html":{},"classes/CustomerUpdateDTO.html":{},"classes/SignDTO.html":{},"injectables/TypesOrmPostgresConfigService.html":{}}}],["payload",{"_index":1003,"title":{},"body":{"guards/GuardsGuard.html":{},"injectables/SecurityService.html":{}}}],["personalizada",{"_index":1281,"title":{},"body":{"classes/TypeOrmExceptionFilter.html":{}}}],["pg",{"_index":1425,"title":{},"body":{"dependencies.html":{}}}],["phone",{"_index":576,"title":{},"body":{"classes/CustomerDTO.html":{},"entities/CustomerEntity.html":{},"interfaces/CustomerModel.html":{},"injectables/CustomerRepository.html":{},"interfaces/CustomerRepositoryInterface.html":{},"classes/CustomerUpdateDTO.html":{}}}],["pipespipe",{"_index":1039,"title":{"injectables/PipesPipe.html":{}},"body":{"injectables/PipesPipe.html":{},"coverage.html":{}}}],["pipetransform",{"_index":1045,"title":{},"body":{"injectables/PipesPipe.html":{}}}],["please",{"_index":1484,"title":{},"body":{"index.html":{}}}],["por",{"_index":273,"title":{},"body":{"injectables/AccountRepository.html":{},"interfaces/AccountRepositoryInterface.html":{},"injectables/AccountTypeRepository.html":{},"interfaces/AccountTypeRepositoryInterface.html":{},"interfaces/BaseRepositoryInterface.html":{},"interfaces/CustomerRepositoryInterface.html":{},"injectables/CustomerService.html":{},"injectables/DepositRepository.html":{},"interfaces/DepositRepositoryInterface.html":{},"injectables/DocumentTypeRepository.html":{},"interfaces/DocumentTypeRepositoryInterface.html":{},"injectables/TransferRepository.html":{},"interfaces/TransferRepositoryInterface.html":{}}}],["port",{"_index":534,"title":{},"body":{"modules/AppModule.html":{},"injectables/TypesOrmPostgresConfigService.html":{}}}],["post",{"_index":77,"title":{},"body":{"controllers/AccountController.html":{},"controllers/DepositController.html":{},"controllers/SecurityController.html":{},"controllers/TransferController.html":{},"controllers/UserController.html":{}}}],["post(':id",{"_index":107,"title":{},"body":{"controllers/AccountController.html":{}}}],["post(':id')@useguards(guardsguard",{"_index":31,"title":{},"body":{"controllers/AccountController.html":{}}}],["post('all",{"_index":814,"title":{},"body":{"controllers/DepositController.html":{}}}],["post('history",{"_index":1149,"title":{},"body":{"controllers/TransferController.html":{}}}],["post('history')@useguards(guardsguard",{"_index":1126,"title":{},"body":{"controllers/TransferController.html":{}}}],["post('income",{"_index":1145,"title":{},"body":{"controllers/TransferController.html":{}}}],["post('income')@useguards(guardsguard",{"_index":1129,"title":{},"body":{"controllers/TransferController.html":{}}}],["post('outcome",{"_index":1147,"title":{},"body":{"controllers/TransferController.html":{}}}],["post('outcome')@useguards(guardsguard",{"_index":1132,"title":{},"body":{"controllers/TransferController.html":{}}}],["post('sign",{"_index":1056,"title":{},"body":{"controllers/SecurityController.html":{}}}],["post()@useguards(guardsguard",{"_index":51,"title":{},"body":{"controllers/AccountController.html":{},"controllers/TransferController.html":{}}}],["postgres",{"_index":531,"title":{},"body":{"modules/AppModule.html":{},"injectables/TypesOrmPostgresConfigService.html":{},"coverage.html":{}}}],["postgresql",{"_index":1299,"title":{},"body":{"injectables/TypesOrmPostgresConfigService.html":{}}}],["prefix",{"_index":7,"title":{},"body":{"controllers/AccountController.html":{},"controllers/DepositController.html":{},"controllers/SecurityController.html":{},"controllers/TransferController.html":{},"controllers/UserController.html":{}}}],["presentation/controllers",{"_index":522,"title":{},"body":{"modules/AppModule.html":{}}}],["presentation/middlewares/middlewares.middleware",{"_index":524,"title":{},"body":{"modules/AppModule.html":{}}}],["primary",{"_index":197,"title":{},"body":{"entities/AccountEntity.html":{},"entities/AccountTypeEntity.html":{},"entities/CustomerEntity.html":{},"entities/DepositEntity.html":{},"entities/DocumentTypeEntity.html":{},"entities/TransferEntity.html":{}}}],["privados",{"_index":878,"title":{},"body":{"injectables/DepositRepository.html":{}}}],["private",{"_index":94,"title":{},"body":{"controllers/AccountController.html":{},"injectables/AccountRepository.html":{},"injectables/AccountService.html":{},"injectables/AccountTypeRepository.html":{},"injectables/CustomerRepository.html":{},"injectables/CustomerService.html":{},"injectables/DepositRepository.html":{},"injectables/DepositService.html":{},"injectables/DocumentTypeRepository.html":{},"injectables/SecurityService.html":{},"injectables/TransferRepository.html":{},"injectables/TransferService.html":{}}}],["process.env.bank_id",{"_index":216,"title":{},"body":{"entities/AccountEntity.html":{}}}],["process.env.db_host",{"_index":533,"title":{},"body":{"modules/AppModule.html":{}}}],["process.env.db_name",{"_index":541,"title":{},"body":{"modules/AppModule.html":{}}}],["process.env.db_password",{"_index":539,"title":{},"body":{"modules/AppModule.html":{}}}],["process.env.db_user",{"_index":537,"title":{},"body":{"modules/AppModule.html":{}}}],["process.env.jwt_secret",{"_index":1518,"title":{},"body":{"miscellaneous/variables.html":{}}}],["production",{"_index":1459,"title":{},"body":{"index.html":{}}}],["progressive",{"_index":1437,"title":{},"body":{"index.html":{}}}],["promesa",{"_index":267,"title":{},"body":{"injectables/AccountRepository.html":{},"interfaces/AccountRepositoryInterface.html":{},"injectables/AccountTypeRepository.html":{},"interfaces/AccountTypeRepositoryInterface.html":{},"interfaces/BaseRepositoryInterface.html":{},"injectables/CustomerRepository.html":{},"interfaces/CustomerRepositoryInterface.html":{},"injectables/DepositRepository.html":{},"interfaces/DepositRepositoryInterface.html":{},"injectables/DocumentTypeRepository.html":{},"interfaces/DocumentTypeRepositoryInterface.html":{},"injectables/TransferRepository.html":{},"interfaces/TransferRepositoryInterface.html":{}}}],["promise",{"_index":39,"title":{},"body":{"controllers/AccountController.html":{},"injectables/AccountRepository.html":{},"interfaces/AccountRepositoryInterface.html":{},"injectables/AccountService.html":{},"injectables/AccountTypeRepository.html":{},"interfaces/AccountTypeRepositoryInterface.html":{},"interfaces/BaseRepositoryInterface.html":{},"injectables/CustomerRepository.html":{},"interfaces/CustomerRepositoryInterface.html":{},"injectables/CustomerService.html":{},"controllers/DepositController.html":{},"injectables/DepositRepository.html":{},"interfaces/DepositRepositoryInterface.html":{},"injectables/DepositService.html":{},"injectables/DocumentTypeRepository.html":{},"interfaces/DocumentTypeRepositoryInterface.html":{},"guards/GuardsGuard.html":{},"controllers/TransferController.html":{},"injectables/TransferRepository.html":{},"interfaces/TransferRepositoryInterface.html":{},"injectables/TransferService.html":{},"controllers/UserController.html":{}}}],["properly",{"_index":1494,"title":{},"body":{"index.html":{}}}],["properties",{"_index":140,"title":{"properties.html":{}},"body":{"classes/AccountDTO.html":{},"entities/AccountEntity.html":{},"interfaces/AccountModel.html":{},"entities/AccountTypeEntity.html":{},"interfaces/AccountTypeModel.html":{},"classes/CustomerDTO.html":{},"entities/CustomerEntity.html":{},"interfaces/CustomerModel.html":{},"classes/CustomerUpdateDTO.html":{},"classes/DataRangeDTO.html":{},"interfaces/DataRangeModel.html":{},"classes/DepositDTO.html":{},"entities/DepositEntity.html":{},"interfaces/DepositModel.html":{},"entities/DocumentTypeEntity.html":{},"interfaces/DocumentTypeModel.html":{},"classes/PaginationDTO.html":{},"interfaces/PaginationModel.html":{},"classes/SignDTO.html":{},"classes/TransferDTO.html":{},"entities/TransferEntity.html":{},"interfaces/TransferModel.html":{},"properties.html":{}}}],["provide",{"_index":545,"title":{},"body":{"modules/AppModule.html":{}}}],["providers",{"_index":483,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["proyecto",{"_index":1468,"title":{},"body":{"index.html":{}}}],["public",{"_index":209,"title":{},"body":{"entities/AccountEntity.html":{},"entities/AccountTypeEntity.html":{},"entities/CustomerEntity.html":{},"entities/DepositEntity.html":{},"entities/DocumentTypeEntity.html":{},"entities/TransferEntity.html":{}}}],["puede",{"_index":796,"title":{},"body":{"classes/DataRangeDTO.html":{}}}],["put",{"_index":78,"title":{},"body":{"controllers/AccountController.html":{},"controllers/UserController.html":{}}}],["put(':id",{"_index":47,"title":{},"body":{"controllers/AccountController.html":{},"controllers/UserController.html":{}}}],["put('accountype/:id",{"_index":44,"title":{},"body":{"controllers/AccountController.html":{}}}],["put('removebalance/:id')@useguards(guardsguard",{"_index":71,"title":{},"body":{"controllers/AccountController.html":{}}}],["put('unsuscribe/:id",{"_index":1336,"title":{},"body":{"controllers/UserController.html":{}}}],["página",{"_index":1035,"title":{},"body":{"classes/PaginationDTO.html":{}}}],["que",{"_index":191,"title":{},"body":{"entities/AccountEntity.html":{},"injectables/AccountRepository.html":{},"interfaces/AccountRepositoryInterface.html":{},"injectables/AccountTypeRepository.html":{},"interfaces/AccountTypeRepositoryInterface.html":{},"interfaces/BaseRepositoryInterface.html":{},"entities/CustomerEntity.html":{},"injectables/CustomerRepository.html":{},"interfaces/CustomerRepositoryInterface.html":{},"classes/CustomerUpdateDTO.html":{},"classes/DataRangeDTO.html":{},"classes/DepositDTO.html":{},"entities/DepositEntity.html":{},"injectables/DepositRepository.html":{},"interfaces/DepositRepositoryInterface.html":{},"injectables/DocumentTypeRepository.html":{},"interfaces/DocumentTypeRepositoryInterface.html":{},"classes/PaginationDTO.html":{},"classes/TransferDTO.html":{},"injectables/TransferRepository.html":{},"interfaces/TransferRepositoryInterface.html":{},"classes/TypeOrmExceptionFilter.html":{}}}],["range.dto.ts",{"_index":786,"title":{},"body":{"classes/DataRangeDTO.html":{},"coverage.html":{}}}],["range.dto.ts:20",{"_index":800,"title":{},"body":{"classes/DataRangeDTO.html":{}}}],["range.dto.ts:32",{"_index":795,"title":{},"body":{"classes/DataRangeDTO.html":{}}}],["range.dto.ts:44",{"_index":798,"title":{},"body":{"classes/DataRangeDTO.html":{}}}],["range.dto.ts:56",{"_index":792,"title":{},"body":{"classes/DataRangeDTO.html":{}}}],["range.model.ts",{"_index":803,"title":{},"body":{"interfaces/DataRangeModel.html":{},"coverage.html":{}}}],["rango",{"_index":787,"title":{},"body":{"classes/DataRangeDTO.html":{},"interfaces/DataRangeModel.html":{},"injectables/DepositRepository.html":{},"interfaces/DepositRepositoryInterface.html":{},"injectables/DepositService.html":{},"injectables/TransferRepository.html":{},"interfaces/TransferRepositoryInterface.html":{}}}],["razón",{"_index":1162,"title":{},"body":{"classes/TransferDTO.html":{}}}],["readonly",{"_index":95,"title":{},"body":{"controllers/AccountController.html":{},"injectables/AccountRepository.html":{},"injectables/AccountService.html":{},"injectables/AccountTypeRepository.html":{},"injectables/CustomerRepository.html":{},"injectables/CustomerService.html":{},"controllers/DepositController.html":{},"injectables/DepositRepository.html":{},"injectables/DepositService.html":{},"injectables/DocumentTypeRepository.html":{},"controllers/SecurityController.html":{},"injectables/SecurityService.html":{},"controllers/TransferController.html":{},"injectables/TransferRepository.html":{},"injectables/TransferService.html":{},"injectables/TypesOrmPostgresConfigService.html":{},"controllers/UserController.html":{}}}],["realizar",{"_index":555,"title":{},"body":{"interfaces/BaseRepositoryInterface.html":{},"injectables/CustomerRepository.html":{},"injectables/DepositRepository.html":{},"injectables/TransferRepository.html":{}}}],["reason",{"_index":1155,"title":{},"body":{"classes/TransferDTO.html":{},"entities/TransferEntity.html":{},"interfaces/TransferModel.html":{}}}],["reflect",{"_index":1427,"title":{},"body":{"dependencies.html":{}}}],["regexp())@minlength(8",{"_index":589,"title":{},"body":{"classes/CustomerDTO.html":{},"classes/CustomerUpdateDTO.html":{}}}],["regexp(/^(?=.*\\d)(?=.*[a",{"_index":610,"title":{},"body":{"classes/CustomerDTO.html":{},"classes/CustomerUpdateDTO.html":{}}}],["register",{"_index":239,"title":{},"body":{"injectables/AccountRepository.html":{},"injectables/AccountTypeRepository.html":{},"interfaces/BaseRepositoryInterface.html":{},"injectables/CustomerRepository.html":{},"injectables/DepositRepository.html":{},"injectables/DocumentTypeRepository.html":{},"injectables/TransferRepository.html":{}}}],["register(entity",{"_index":286,"title":{},"body":{"injectables/AccountRepository.html":{},"injectables/AccountTypeRepository.html":{},"interfaces/BaseRepositoryInterface.html":{},"injectables/CustomerRepository.html":{},"injectables/DepositRepository.html":{},"injectables/DocumentTypeRepository.html":{},"injectables/TransferRepository.html":{}}}],["registeruser",{"_index":1319,"title":{},"body":{"controllers/UserController.html":{}}}],["registeruser(@body",{"_index":1349,"title":{},"body":{"controllers/UserController.html":{}}}],["registeruser(customer",{"_index":1333,"title":{},"body":{"controllers/UserController.html":{}}}],["registra",{"_index":288,"title":{},"body":{"injectables/AccountRepository.html":{},"injectables/AccountTypeRepository.html":{},"interfaces/BaseRepositoryInterface.html":{},"injectables/CustomerRepository.html":{},"injectables/DepositRepository.html":{},"injectables/DocumentTypeRepository.html":{},"injectables/TransferRepository.html":{}}}],["registrada",{"_index":291,"title":{},"body":{"injectables/AccountRepository.html":{},"interfaces/BaseRepositoryInterface.html":{},"injectables/TransferRepository.html":{}}}],["registrado",{"_index":451,"title":{},"body":{"injectables/AccountTypeRepository.html":{},"injectables/CustomerRepository.html":{},"injectables/DepositRepository.html":{},"injectables/DocumentTypeRepository.html":{}}}],["registran",{"_index":458,"title":{},"body":{"injectables/AccountTypeRepository.html":{}}}],["registrar",{"_index":290,"title":{},"body":{"injectables/AccountRepository.html":{},"injectables/AccountTypeRepository.html":{},"interfaces/BaseRepositoryInterface.html":{},"injectables/CustomerRepository.html":{},"injectables/CustomerService.html":{},"injectables/DepositRepository.html":{},"injectables/DocumentTypeRepository.html":{},"injectables/TransferRepository.html":{}}}],["relations",{"_index":331,"title":{},"body":{"injectables/AccountRepository.html":{},"injectables/DepositRepository.html":{},"injectables/TransferRepository.html":{}}}],["removebalance",{"_index":23,"title":{},"body":{"controllers/AccountController.html":{},"injectables/AccountService.html":{}}}],["removebalance(accountid",{"_index":383,"title":{},"body":{"injectables/AccountService.html":{}}}],["removebalance(id",{"_index":70,"title":{},"body":{"controllers/AccountController.html":{}}}],["remover",{"_index":385,"title":{},"body":{"injectables/AccountService.html":{}}}],["repositories",{"_index":1085,"title":{},"body":{"injectables/SecurityService.html":{}}}],["repositories.interface.ts",{"_index":550,"title":{},"body":{"interfaces/BaseRepositoryInterface.html":{},"coverage.html":{}}}],["repositories.interface.ts:18",{"_index":567,"title":{},"body":{"interfaces/BaseRepositoryInterface.html":{}}}],["repositories.interface.ts:28",{"_index":568,"title":{},"body":{"interfaces/BaseRepositoryInterface.html":{}}}],["repositories.interface.ts:37",{"_index":558,"title":{},"body":{"interfaces/BaseRepositoryInterface.html":{}}}],["repositories.interface.ts:45",{"_index":560,"title":{},"body":{"interfaces/BaseRepositoryInterface.html":{}}}],["repositories.interface.ts:54",{"_index":563,"title":{},"body":{"interfaces/BaseRepositoryInterface.html":{}}}],["repositorio",{"_index":232,"title":{},"body":{"injectables/AccountRepository.html":{},"interfaces/AccountRepositoryInterface.html":{},"injectables/AccountTypeRepository.html":{},"interfaces/AccountTypeRepositoryInterface.html":{},"interfaces/CustomerRepositoryInterface.html":{},"interfaces/DepositRepositoryInterface.html":{},"injectables/DocumentTypeRepository.html":{},"interfaces/DocumentTypeRepositoryInterface.html":{},"interfaces/TransferRepositoryInterface.html":{}}}],["repositorios",{"_index":551,"title":{},"body":{"interfaces/BaseRepositoryInterface.html":{}}}],["repository",{"_index":243,"title":{},"body":{"injectables/AccountRepository.html":{},"injectables/AccountTypeRepository.html":{},"injectables/CustomerRepository.html":{},"injectables/DepositRepository.html":{},"injectables/DocumentTypeRepository.html":{},"injectables/TransferRepository.html":{},"index.html":{}}}],["repository.interface.ts",{"_index":333,"title":{},"body":{"interfaces/AccountRepositoryInterface.html":{},"interfaces/AccountTypeRepositoryInterface.html":{},"interfaces/CustomerRepositoryInterface.html":{},"interfaces/DepositRepositoryInterface.html":{},"interfaces/DocumentTypeRepositoryInterface.html":{},"interfaces/TransferRepositoryInterface.html":{},"coverage.html":{}}}],["repository.interface.ts:20",{"_index":1215,"title":{},"body":{"interfaces/TransferRepositoryInterface.html":{}}}],["repository.interface.ts:21",{"_index":347,"title":{},"body":{"interfaces/AccountRepositoryInterface.html":{},"interfaces/AccountTypeRepositoryInterface.html":{},"interfaces/DepositRepositoryInterface.html":{},"interfaces/DocumentTypeRepositoryInterface.html":{}}}],["repository.interface.ts:22",{"_index":694,"title":{},"body":{"interfaces/CustomerRepositoryInterface.html":{}}}],["repository.interface.ts:29",{"_index":1219,"title":{},"body":{"interfaces/TransferRepositoryInterface.html":{}}}],["repository.interface.ts:30",{"_index":344,"title":{},"body":{"interfaces/AccountRepositoryInterface.html":{},"interfaces/AccountTypeRepositoryInterface.html":{},"interfaces/DocumentTypeRepositoryInterface.html":{}}}],["repository.interface.ts:31",{"_index":885,"title":{},"body":{"interfaces/DepositRepositoryInterface.html":{}}}],["repository.interface.ts:32",{"_index":692,"title":{},"body":{"interfaces/CustomerRepositoryInterface.html":{}}}],["repository.interface.ts:39",{"_index":341,"title":{},"body":{"interfaces/AccountRepositoryInterface.html":{}}}],["repository.interface.ts:40",{"_index":1220,"title":{},"body":{"interfaces/TransferRepositoryInterface.html":{}}}],["repository.interface.ts:44",{"_index":693,"title":{},"body":{"interfaces/CustomerRepositoryInterface.html":{}}}],["repository.interface.ts:53",{"_index":699,"title":{},"body":{"interfaces/CustomerRepositoryInterface.html":{}}}],["repository.interface.ts:55",{"_index":1216,"title":{},"body":{"interfaces/TransferRepositoryInterface.html":{}}}],["repository.interface.ts:62",{"_index":691,"title":{},"body":{"interfaces/CustomerRepositoryInterface.html":{}}}],["repository.interface.ts:71",{"_index":690,"title":{},"body":{"interfaces/CustomerRepositoryInterface.html":{}}}],["representa",{"_index":777,"title":{},"body":{"classes/CustomerUpdateDTO.html":{},"classes/DataRangeDTO.html":{},"classes/DepositDTO.html":{},"classes/PaginationDTO.html":{},"classes/TransferDTO.html":{},"classes/TypeOrmExceptionFilter.html":{}}}],["representar",{"_index":138,"title":{},"body":{"classes/AccountDTO.html":{},"classes/CustomerDTO.html":{},"classes/DataRangeDTO.html":{},"classes/DepositDTO.html":{},"classes/TransferDTO.html":{}}}],["req",{"_index":1023,"title":{},"body":{"injectables/MiddlewaresMiddleware.html":{}}}],["req.headers.authorization",{"_index":1026,"title":{},"body":{"injectables/MiddlewaresMiddleware.html":{}}}],["req.headers['authorization",{"_index":1028,"title":{},"body":{"injectables/MiddlewaresMiddleware.html":{}}}],["request",{"_index":994,"title":{},"body":{"guards/GuardsGuard.html":{},"injectables/MiddlewaresMiddleware.html":{}}}],["request.headers.authorization",{"_index":997,"title":{},"body":{"guards/GuardsGuard.html":{}}}],["request.user",{"_index":1005,"title":{},"body":{"guards/GuardsGuard.html":{}}}],["res",{"_index":1019,"title":{},"body":{"injectables/MiddlewaresMiddleware.html":{}}}],["reset",{"_index":494,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["response",{"_index":1020,"title":{},"body":{"injectables/MiddlewaresMiddleware.html":{},"classes/TypeOrmExceptionFilter.html":{}}}],["response.status(customresponse.status).json(customresponse",{"_index":1293,"title":{},"body":{"classes/TypeOrmExceptionFilter.html":{}}}],["respuesta",{"_index":1280,"title":{},"body":{"classes/TypeOrmExceptionFilter.html":{}}}],["resuelve",{"_index":268,"title":{},"body":{"injectables/AccountRepository.html":{},"interfaces/AccountRepositoryInterface.html":{},"injectables/AccountTypeRepository.html":{},"interfaces/AccountTypeRepositoryInterface.html":{},"interfaces/BaseRepositoryInterface.html":{},"injectables/CustomerRepository.html":{},"interfaces/CustomerRepositoryInterface.html":{},"injectables/DepositRepository.html":{},"interfaces/DepositRepositoryInterface.html":{},"injectables/DocumentTypeRepository.html":{},"interfaces/DocumentTypeRepositoryInterface.html":{},"injectables/TransferRepository.html":{},"interfaces/TransferRepositoryInterface.html":{}}}],["result",{"_index":320,"title":{},"body":{"injectables/AccountRepository.html":{},"injectables/AccountTypeRepository.html":{},"injectables/CustomerRepository.html":{},"injectables/DepositRepository.html":{},"injectables/DocumentTypeRepository.html":{},"injectables/TransferRepository.html":{}}}],["result.affected",{"_index":310,"title":{},"body":{"injectables/AccountRepository.html":{},"injectables/AccountTypeRepository.html":{},"injectables/CustomerRepository.html":{},"injectables/DepositRepository.html":{},"injectables/DocumentTypeRepository.html":{},"injectables/TransferRepository.html":{}}}],["result.id",{"_index":875,"title":{},"body":{"injectables/DepositRepository.html":{}}}],["result.length",{"_index":686,"title":{},"body":{"injectables/CustomerRepository.html":{}}}],["results",{"_index":129,"title":{},"body":{"controllers/AccountController.html":{},"classes/AccountDTO.html":{},"entities/AccountEntity.html":{},"interfaces/AccountModel.html":{},"injectables/AccountRepository.html":{},"interfaces/AccountRepositoryInterface.html":{},"injectables/AccountService.html":{},"entities/AccountTypeEntity.html":{},"interfaces/AccountTypeModel.html":{},"injectables/AccountTypeRepository.html":{},"interfaces/AccountTypeRepositoryInterface.html":{},"modules/AppModule.html":{},"interfaces/BaseRepositoryInterface.html":{},"classes/CustomerDTO.html":{},"entities/CustomerEntity.html":{},"interfaces/CustomerModel.html":{},"injectables/CustomerRepository.html":{},"interfaces/CustomerRepositoryInterface.html":{},"injectables/CustomerService.html":{},"classes/CustomerUpdateDTO.html":{},"classes/DataRangeDTO.html":{},"interfaces/DataRangeModel.html":{},"controllers/DepositController.html":{},"classes/DepositDTO.html":{},"entities/DepositEntity.html":{},"interfaces/DepositModel.html":{},"injectables/DepositRepository.html":{},"interfaces/DepositRepositoryInterface.html":{},"injectables/DepositService.html":{},"entities/DocumentTypeEntity.html":{},"interfaces/DocumentTypeModel.html":{},"injectables/DocumentTypeRepository.html":{},"interfaces/DocumentTypeRepositoryInterface.html":{},"classes/ExceptionFiltersFilter.html":{},"guards/GuardsGuard.html":{},"injectables/InterceptorsInterceptor.html":{},"injectables/MiddlewaresMiddleware.html":{},"classes/PaginationDTO.html":{},"interfaces/PaginationModel.html":{},"injectables/PipesPipe.html":{},"controllers/SecurityController.html":{},"injectables/SecurityService.html":{},"classes/SignDTO.html":{},"controllers/TransferController.html":{},"classes/TransferDTO.html":{},"entities/TransferEntity.html":{},"interfaces/TransferModel.html":{},"injectables/TransferRepository.html":{},"interfaces/TransferRepositoryInterface.html":{},"injectables/TransferService.html":{},"classes/TypeOrmExceptionFilter.html":{},"injectables/TypesOrmPostgresConfigService.html":{},"controllers/UserController.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/variables.html":{}}}],["retirar",{"_index":391,"title":{},"body":{"injectables/AccountService.html":{}}}],["return",{"_index":97,"title":{},"body":{"controllers/AccountController.html":{},"entities/AccountEntity.html":{},"injectables/AccountRepository.html":{},"injectables/AccountService.html":{},"injectables/AccountTypeRepository.html":{},"injectables/CustomerRepository.html":{},"injectables/CustomerService.html":{},"controllers/DepositController.html":{},"injectables/DepositRepository.html":{},"injectables/DepositService.html":{},"injectables/DocumentTypeRepository.html":{},"guards/GuardsGuard.html":{},"injectables/InterceptorsInterceptor.html":{},"injectables/PipesPipe.html":{},"controllers/SecurityController.html":{},"injectables/SecurityService.html":{},"controllers/TransferController.html":{},"injectables/TransferRepository.html":{},"injectables/TransferService.html":{},"injectables/TypesOrmPostgresConfigService.html":{},"controllers/UserController.html":{}}}],["returns",{"_index":38,"title":{},"body":{"controllers/AccountController.html":{},"entities/AccountEntity.html":{},"injectables/AccountRepository.html":{},"interfaces/AccountRepositoryInterface.html":{},"injectables/AccountService.html":{},"injectables/AccountTypeRepository.html":{},"interfaces/AccountTypeRepositoryInterface.html":{},"modules/AppModule.html":{},"interfaces/BaseRepositoryInterface.html":{},"injectables/CustomerRepository.html":{},"interfaces/CustomerRepositoryInterface.html":{},"injectables/CustomerService.html":{},"controllers/DepositController.html":{},"injectables/DepositRepository.html":{},"interfaces/DepositRepositoryInterface.html":{},"injectables/DepositService.html":{},"injectables/DocumentTypeRepository.html":{},"interfaces/DocumentTypeRepositoryInterface.html":{},"classes/ExceptionFiltersFilter.html":{},"guards/GuardsGuard.html":{},"injectables/InterceptorsInterceptor.html":{},"injectables/MiddlewaresMiddleware.html":{},"injectables/PipesPipe.html":{},"controllers/SecurityController.html":{},"injectables/SecurityService.html":{},"controllers/TransferController.html":{},"injectables/TransferRepository.html":{},"interfaces/TransferRepositoryInterface.html":{},"injectables/TransferService.html":{},"classes/TypeOrmExceptionFilter.html":{},"injectables/TypesOrmPostgresConfigService.html":{},"controllers/UserController.html":{},"miscellaneous/functions.html":{}}}],["run",{"_index":1454,"title":{},"body":{"index.html":{}}}],["rxjs",{"_index":993,"title":{},"body":{"guards/GuardsGuard.html":{},"injectables/InterceptorsInterceptor.html":{},"dependencies.html":{}}}],["saldo",{"_index":175,"title":{},"body":{"entities/AccountEntity.html":{}}}],["sale",{"_index":1178,"title":{},"body":{"entities/TransferEntity.html":{}}}],["salida",{"_index":1198,"title":{},"body":{"injectables/TransferRepository.html":{},"interfaces/TransferRepositoryInterface.html":{},"injectables/TransferService.html":{}}}],["salir",{"_index":1079,"title":{},"body":{"injectables/SecurityService.html":{}}}],["scalable",{"_index":1442,"title":{},"body":{"index.html":{}}}],["schema",{"_index":208,"title":{},"body":{"entities/AccountEntity.html":{},"entities/AccountTypeEntity.html":{},"entities/CustomerEntity.html":{},"entities/DepositEntity.html":{},"entities/DocumentTypeEntity.html":{},"entities/TransferEntity.html":{}}}],["se",{"_index":192,"title":{},"body":{"entities/AccountEntity.html":{},"injectables/AccountTypeRepository.html":{},"interfaces/BaseRepositoryInterface.html":{},"entities/CustomerEntity.html":{},"injectables/CustomerRepository.html":{},"interfaces/CustomerRepositoryInterface.html":{},"injectables/CustomerService.html":{},"entities/DepositEntity.html":{},"injectables/DepositRepository.html":{},"injectables/DocumentTypeRepository.html":{},"entities/TransferEntity.html":{},"injectables/TransferRepository.html":{}}}],["secret",{"_index":528,"title":{},"body":{"modules/AppModule.html":{},"miscellaneous/variables.html":{}}}],["secretkey",{"_index":1519,"title":{},"body":{"miscellaneous/variables.html":{}}}],["security",{"_index":1047,"title":{},"body":{"controllers/SecurityController.html":{}}}],["securitycontroller",{"_index":499,"title":{"controllers/SecurityController.html":{}},"body":{"modules/AppModule.html":{},"controllers/SecurityController.html":{},"coverage.html":{}}}],["securityservice",{"_index":490,"title":{"injectables/SecurityService.html":{}},"body":{"modules/AppModule.html":{},"controllers/SecurityController.html":{},"injectables/SecurityService.html":{},"coverage.html":{},"overview.html":{}}}],["select",{"_index":184,"title":{},"body":{"entities/AccountEntity.html":{},"entities/CustomerEntity.html":{},"entities/DepositEntity.html":{},"entities/TransferEntity.html":{}}}],["selecttransfer",{"_index":1119,"title":{},"body":{"controllers/TransferController.html":{},"injectables/TransferService.html":{}}}],["selecttransfer(@param('id",{"_index":1141,"title":{},"body":{"controllers/TransferController.html":{}}}],["selecttransfer(id",{"_index":1134,"title":{},"body":{"controllers/TransferController.html":{}}}],["selecttransfer(transferid",{"_index":1235,"title":{},"body":{"injectables/TransferService.html":{}}}],["ser",{"_index":256,"title":{},"body":{"injectables/AccountRepository.html":{},"classes/CustomerUpdateDTO.html":{},"classes/DataRangeDTO.html":{},"classes/DepositDTO.html":{},"classes/PaginationDTO.html":{},"classes/SignDTO.html":{},"classes/TransferDTO.html":{}}}],["server",{"_index":1287,"title":{},"body":{"classes/TypeOrmExceptionFilter.html":{},"index.html":{}}}],["services",{"_index":1086,"title":{},"body":{"injectables/SecurityService.html":{}}}],["servicio",{"_index":1297,"title":{},"body":{"injectables/TypesOrmPostgresConfigService.html":{}}}],["sesión",{"_index":1111,"title":{},"body":{"classes/SignDTO.html":{}}}],["setmetadata('decorators",{"_index":1514,"title":{},"body":{"miscellaneous/variables.html":{}}}],["short",{"_index":1469,"title":{},"body":{"index.html":{}}}],["si",{"_index":253,"title":{},"body":{"injectables/AccountRepository.html":{},"interfaces/BaseRepositoryInterface.html":{},"injectables/CustomerRepository.html":{},"interfaces/CustomerRepositoryInterface.html":{},"injectables/CustomerService.html":{},"injectables/DepositRepository.html":{},"injectables/DocumentTypeRepository.html":{},"entities/TransferEntity.html":{},"injectables/TransferRepository.html":{}}}],["side",{"_index":1443,"title":{},"body":{"index.html":{}}}],["signdto",{"_index":1055,"title":{"classes/SignDTO.html":{}},"body":{"controllers/SecurityController.html":{},"injectables/SecurityService.html":{},"classes/SignDTO.html":{},"coverage.html":{}}}],["signin",{"_index":1049,"title":{},"body":{"controllers/SecurityController.html":{},"injectables/SecurityService.html":{}}}],["signin(@body",{"_index":1065,"title":{},"body":{"controllers/SecurityController.html":{}}}],["signin(customer",{"_index":1054,"title":{},"body":{"controllers/SecurityController.html":{}}}],["signin(user",{"_index":1073,"title":{},"body":{"injectables/SecurityService.html":{}}}],["signout",{"_index":1071,"title":{},"body":{"injectables/SecurityService.html":{}}}],["signout(jwt",{"_index":1077,"title":{},"body":{"injectables/SecurityService.html":{}}}],["signup",{"_index":1050,"title":{},"body":{"controllers/SecurityController.html":{},"injectables/SecurityService.html":{}}}],["signup(@body",{"_index":1063,"title":{},"body":{"controllers/SecurityController.html":{}}}],["signup(customer",{"_index":1058,"title":{},"body":{"controllers/SecurityController.html":{}}}],["signup(user",{"_index":1080,"title":{},"body":{"injectables/SecurityService.html":{}}}],["sistema",{"_index":710,"title":{},"body":{"injectables/CustomerService.html":{},"injectables/SecurityService.html":{}}}],["slice(start",{"_index":921,"title":{},"body":{"injectables/DepositService.html":{},"injectables/TransferService.html":{}}}],["soft",{"_index":247,"title":{},"body":{"injectables/AccountRepository.html":{},"interfaces/BaseRepositoryInterface.html":{},"injectables/CustomerRepository.html":{},"injectables/DepositRepository.html":{},"injectables/TransferRepository.html":{}}}],["softdelete",{"_index":240,"title":{},"body":{"injectables/AccountRepository.html":{},"injectables/CustomerRepository.html":{},"injectables/DepositRepository.html":{},"injectables/TransferRepository.html":{}}}],["softdelete(id",{"_index":292,"title":{},"body":{"injectables/AccountRepository.html":{},"injectables/CustomerRepository.html":{},"injectables/DepositRepository.html":{},"injectables/TransferRepository.html":{}}}],["solicitud",{"_index":1271,"title":{},"body":{"classes/TypeOrmExceptionFilter.html":{}}}],["source",{"_index":4,"title":{},"body":{"controllers/AccountController.html":{},"classes/AccountDTO.html":{},"entities/AccountEntity.html":{},"interfaces/AccountModel.html":{},"injectables/AccountRepository.html":{},"interfaces/AccountRepositoryInterface.html":{},"injectables/AccountService.html":{},"entities/AccountTypeEntity.html":{},"interfaces/AccountTypeModel.html":{},"injectables/AccountTypeRepository.html":{},"interfaces/AccountTypeRepositoryInterface.html":{},"modules/AppModule.html":{},"interfaces/BaseRepositoryInterface.html":{},"classes/CustomerDTO.html":{},"entities/CustomerEntity.html":{},"interfaces/CustomerModel.html":{},"injectables/CustomerRepository.html":{},"interfaces/CustomerRepositoryInterface.html":{},"injectables/CustomerService.html":{},"classes/CustomerUpdateDTO.html":{},"classes/DataRangeDTO.html":{},"interfaces/DataRangeModel.html":{},"controllers/DepositController.html":{},"classes/DepositDTO.html":{},"entities/DepositEntity.html":{},"interfaces/DepositModel.html":{},"injectables/DepositRepository.html":{},"interfaces/DepositRepositoryInterface.html":{},"injectables/DepositService.html":{},"entities/DocumentTypeEntity.html":{},"interfaces/DocumentTypeModel.html":{},"injectables/DocumentTypeRepository.html":{},"interfaces/DocumentTypeRepositoryInterface.html":{},"classes/ExceptionFiltersFilter.html":{},"guards/GuardsGuard.html":{},"injectables/InterceptorsInterceptor.html":{},"injectables/MiddlewaresMiddleware.html":{},"classes/PaginationDTO.html":{},"interfaces/PaginationModel.html":{},"injectables/PipesPipe.html":{},"controllers/SecurityController.html":{},"injectables/SecurityService.html":{},"classes/SignDTO.html":{},"controllers/TransferController.html":{},"classes/TransferDTO.html":{},"entities/TransferEntity.html":{},"interfaces/TransferModel.html":{},"injectables/TransferRepository.html":{},"interfaces/TransferRepositoryInterface.html":{},"injectables/TransferService.html":{},"classes/TypeOrmExceptionFilter.html":{},"injectables/TypesOrmPostgresConfigService.html":{},"controllers/UserController.html":{}}}],["src/.../account.entity.ts",{"_index":1434,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../decorators.decorator.ts",{"_index":1511,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../main.ts",{"_index":1433,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../secret.ts",{"_index":1512,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/app.module.ts",{"_index":496,"title":{},"body":{"modules/AppModule.html":{}}}],["src/app.module.ts:92",{"_index":504,"title":{},"body":{"modules/AppModule.html":{}}}],["src/business/dtos",{"_index":81,"title":{},"body":{"controllers/AccountController.html":{},"injectables/AccountService.html":{},"injectables/CustomerService.html":{},"controllers/DepositController.html":{},"injectables/DepositService.html":{},"controllers/TransferController.html":{},"injectables/TransferService.html":{}}}],["src/business/dtos/account.dto.ts",{"_index":132,"title":{},"body":{"classes/AccountDTO.html":{},"coverage.html":{}}}],["src/business/dtos/account.dto.ts:23",{"_index":143,"title":{},"body":{"classes/AccountDTO.html":{}}}],["src/business/dtos/account.dto.ts:33",{"_index":149,"title":{},"body":{"classes/AccountDTO.html":{}}}],["src/business/dtos/customer.dto.ts",{"_index":571,"title":{},"body":{"classes/CustomerDTO.html":{},"coverage.html":{}}}],["src/business/dtos/customer.dto.ts:26",{"_index":580,"title":{},"body":{"classes/CustomerDTO.html":{}}}],["src/business/dtos/customer.dto.ts:36",{"_index":577,"title":{},"body":{"classes/CustomerDTO.html":{}}}],["src/business/dtos/customer.dto.ts:48",{"_index":586,"title":{},"body":{"classes/CustomerDTO.html":{}}}],["src/business/dtos/customer.dto.ts:58",{"_index":582,"title":{},"body":{"classes/CustomerDTO.html":{}}}],["src/business/dtos/customer.dto.ts:70",{"_index":602,"title":{},"body":{"classes/CustomerDTO.html":{}}}],["src/business/dtos/customer.dto.ts:83",{"_index":590,"title":{},"body":{"classes/CustomerDTO.html":{}}}],["src/business/dtos/data",{"_index":785,"title":{},"body":{"classes/DataRangeDTO.html":{},"coverage.html":{}}}],["src/business/dtos/deposit.dto.ts",{"_index":829,"title":{},"body":{"classes/DepositDTO.html":{},"coverage.html":{}}}],["src/business/dtos/deposit.dto.ts:20",{"_index":831,"title":{},"body":{"classes/DepositDTO.html":{}}}],["src/business/dtos/deposit.dto.ts:32",{"_index":832,"title":{},"body":{"classes/DepositDTO.html":{}}}],["src/business/dtos/pagination.dto.ts",{"_index":1030,"title":{},"body":{"classes/PaginationDTO.html":{},"coverage.html":{}}}],["src/business/dtos/pagination.dto.ts:20",{"_index":1032,"title":{},"body":{"classes/PaginationDTO.html":{}}}],["src/business/dtos/pagination.dto.ts:32",{"_index":1036,"title":{},"body":{"classes/PaginationDTO.html":{}}}],["src/business/dtos/sign.dto.ts",{"_index":1110,"title":{},"body":{"classes/SignDTO.html":{},"coverage.html":{}}}],["src/business/dtos/sign.dto.ts:20",{"_index":1112,"title":{},"body":{"classes/SignDTO.html":{}}}],["src/business/dtos/sign.dto.ts:32",{"_index":1113,"title":{},"body":{"classes/SignDTO.html":{}}}],["src/business/dtos/transfer.dto.ts",{"_index":1151,"title":{},"body":{"classes/TransferDTO.html":{},"coverage.html":{}}}],["src/business/dtos/transfer.dto.ts:20",{"_index":1159,"title":{},"body":{"classes/TransferDTO.html":{}}}],["src/business/dtos/transfer.dto.ts:32",{"_index":1157,"title":{},"body":{"classes/TransferDTO.html":{}}}],["src/business/dtos/transfer.dto.ts:44",{"_index":1156,"title":{},"body":{"classes/TransferDTO.html":{}}}],["src/business/dtos/transfer.dto.ts:58",{"_index":1161,"title":{},"body":{"classes/TransferDTO.html":{}}}],["src/business/dtos/update",{"_index":739,"title":{},"body":{"injectables/CustomerService.html":{},"classes/CustomerUpdateDTO.html":{},"controllers/UserController.html":{},"coverage.html":{}}}],["src/business/services/account/account.service.ts",{"_index":349,"title":{},"body":{"injectables/AccountService.html":{},"coverage.html":{}}}],["src/business/services/account/account.service.ts:115",{"_index":387,"title":{},"body":{"injectables/AccountService.html":{}}}],["src/business/services/account/account.service.ts:137",{"_index":382,"title":{},"body":{"injectables/AccountService.html":{}}}],["src/business/services/account/account.service.ts:148",{"_index":365,"title":{},"body":{"injectables/AccountService.html":{}}}],["src/business/services/account/account.service.ts:15",{"_index":356,"title":{},"body":{"injectables/AccountService.html":{}}}],["src/business/services/account/account.service.ts:162",{"_index":377,"title":{},"body":{"injectables/AccountService.html":{}}}],["src/business/services/account/account.service.ts:180",{"_index":362,"title":{},"body":{"injectables/AccountService.html":{}}}],["src/business/services/account/account.service.ts:204",{"_index":371,"title":{},"body":{"injectables/AccountService.html":{}}}],["src/business/services/account/account.service.ts:29",{"_index":366,"title":{},"body":{"injectables/AccountService.html":{}}}],["src/business/services/account/account.service.ts:40",{"_index":369,"title":{},"body":{"injectables/AccountService.html":{}}}],["src/business/services/account/account.service.ts:54",{"_index":380,"title":{},"body":{"injectables/AccountService.html":{}}}],["src/business/services/account/account.service.ts:63",{"_index":375,"title":{},"body":{"injectables/AccountService.html":{}}}],["src/business/services/account/account.service.ts:67",{"_index":373,"title":{},"body":{"injectables/AccountService.html":{}}}],["src/business/services/account/account.service.ts:78",{"_index":358,"title":{},"body":{"injectables/AccountService.html":{}}}],["src/business/services/account/account.service.ts:95",{"_index":384,"title":{},"body":{"injectables/AccountService.html":{}}}],["src/business/services/customer/customer.service.ts",{"_index":700,"title":{},"body":{"injectables/CustomerService.html":{},"coverage.html":{}}}],["src/business/services/customer/customer.service.ts:130",{"_index":738,"title":{},"body":{"injectables/CustomerService.html":{}}}],["src/business/services/customer/customer.service.ts:152",{"_index":732,"title":{},"body":{"injectables/CustomerService.html":{}}}],["src/business/services/customer/customer.service.ts:16",{"_index":707,"title":{},"body":{"injectables/CustomerService.html":{}}}],["src/business/services/customer/customer.service.ts:171",{"_index":709,"title":{},"body":{"injectables/CustomerService.html":{}}}],["src/business/services/customer/customer.service.ts:30",{"_index":720,"title":{},"body":{"injectables/CustomerService.html":{}}}],["src/business/services/customer/customer.service.ts:42",{"_index":723,"title":{},"body":{"injectables/CustomerService.html":{}}}],["src/business/services/customer/customer.service.ts:53",{"_index":714,"title":{},"body":{"injectables/CustomerService.html":{}}}],["src/business/services/customer/customer.service.ts:65",{"_index":717,"title":{},"body":{"injectables/CustomerService.html":{}}}],["src/business/services/customer/customer.service.ts:76",{"_index":728,"title":{},"body":{"injectables/CustomerService.html":{}}}],["src/business/services/customer/customer.service.ts:96",{"_index":725,"title":{},"body":{"injectables/CustomerService.html":{}}}],["src/business/services/deposit/deposit.service.ts",{"_index":886,"title":{},"body":{"injectables/DepositService.html":{},"coverage.html":{}}}],["src/business/services/deposit/deposit.service.ts:13",{"_index":888,"title":{},"body":{"injectables/DepositService.html":{}}}],["src/business/services/deposit/deposit.service.ts:26",{"_index":890,"title":{},"body":{"injectables/DepositService.html":{}}}],["src/business/services/deposit/deposit.service.ts:46",{"_index":893,"title":{},"body":{"injectables/DepositService.html":{}}}],["src/business/services/deposit/deposit.service.ts:59",{"_index":896,"title":{},"body":{"injectables/DepositService.html":{}}}],["src/business/services/security/secret.ts",{"_index":1369,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/business/services/security/security.service.ts",{"_index":1070,"title":{},"body":{"injectables/SecurityService.html":{},"coverage.html":{}}}],["src/business/services/security/security.service.ts:100",{"_index":1078,"title":{},"body":{"injectables/SecurityService.html":{}}}],["src/business/services/security/security.service.ts:24",{"_index":1072,"title":{},"body":{"injectables/SecurityService.html":{}}}],["src/business/services/security/security.service.ts:39",{"_index":1074,"title":{},"body":{"injectables/SecurityService.html":{}}}],["src/business/services/security/security.service.ts:58",{"_index":1081,"title":{},"body":{"injectables/SecurityService.html":{}}}],["src/business/services/transfer/transfer.service.ts",{"_index":1221,"title":{},"body":{"injectables/TransferService.html":{},"coverage.html":{}}}],["src/business/services/transfer/transfer.service.ts:130",{"_index":1229,"title":{},"body":{"injectables/TransferService.html":{}}}],["src/business/services/transfer/transfer.service.ts:15",{"_index":1222,"title":{},"body":{"injectables/TransferService.html":{}}}],["src/business/services/transfer/transfer.service.ts:167",{"_index":1226,"title":{},"body":{"injectables/TransferService.html":{}}}],["src/business/services/transfer/transfer.service.ts:171",{"_index":1236,"title":{},"body":{"injectables/TransferService.html":{}}}],["src/business/services/transfer/transfer.service.ts:28",{"_index":1223,"title":{},"body":{"injectables/TransferService.html":{}}}],["src/business/services/transfer/transfer.service.ts:60",{"_index":1234,"title":{},"body":{"injectables/TransferService.html":{}}}],["src/business/services/transfer/transfer.service.ts:95",{"_index":1232,"title":{},"body":{"injectables/TransferService.html":{}}}],["src/common/decorators/decorators.decorator.ts",{"_index":1374,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/common/exception",{"_index":961,"title":{},"body":{"classes/ExceptionFiltersFilter.html":{},"coverage.html":{}}}],["src/data/models/account",{"_index":432,"title":{},"body":{"interfaces/AccountTypeModel.html":{},"coverage.html":{}}}],["src/data/models/account.model.ts",{"_index":222,"title":{},"body":{"interfaces/AccountModel.html":{},"coverage.html":{}}}],["src/data/models/customer.model.ts",{"_index":638,"title":{},"body":{"interfaces/CustomerModel.html":{},"coverage.html":{}}}],["src/data/models/data",{"_index":802,"title":{},"body":{"interfaces/DataRangeModel.html":{},"coverage.html":{}}}],["src/data/models/deposit.model.ts",{"_index":843,"title":{},"body":{"interfaces/DepositModel.html":{},"coverage.html":{}}}],["src/data/models/document",{"_index":925,"title":{},"body":{"interfaces/DocumentTypeModel.html":{},"coverage.html":{}}}],["src/data/models/pagination.model.ts",{"_index":1038,"title":{},"body":{"interfaces/PaginationModel.html":{},"coverage.html":{}}}],["src/data/models/transfer.model.ts",{"_index":1181,"title":{},"body":{"interfaces/TransferModel.html":{},"coverage.html":{}}}],["src/data/persistence/configs/types",{"_index":1294,"title":{},"body":{"injectables/TypesOrmPostgresConfigService.html":{},"coverage.html":{}}}],["src/data/persistence/entities/account",{"_index":421,"title":{},"body":{"entities/AccountTypeEntity.html":{},"coverage.html":{}}}],["src/data/persistence/entities/account.entity.ts",{"_index":159,"title":{},"body":{"entities/AccountEntity.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/data/persistence/entities/account.entity.ts:28",{"_index":198,"title":{},"body":{"entities/AccountEntity.html":{}}}],["src/data/persistence/entities/account.entity.ts:38",{"_index":177,"title":{},"body":{"entities/AccountEntity.html":{}}}],["src/data/persistence/entities/account.entity.ts:48",{"_index":168,"title":{},"body":{"entities/AccountEntity.html":{}}}],["src/data/persistence/entities/account.entity.ts:60",{"_index":174,"title":{},"body":{"entities/AccountEntity.html":{}}}],["src/data/persistence/entities/account.entity.ts:72",{"_index":199,"title":{},"body":{"entities/AccountEntity.html":{}}}],["src/data/persistence/entities/account.entity.ts:86",{"_index":186,"title":{},"body":{"entities/AccountEntity.html":{}}}],["src/data/persistence/entities/customer.entity.ts",{"_index":615,"title":{},"body":{"entities/CustomerEntity.html":{},"coverage.html":{}}}],["src/data/persistence/entities/customer.entity.ts:106",{"_index":635,"title":{},"body":{"entities/CustomerEntity.html":{}}}],["src/data/persistence/entities/customer.entity.ts:120",{"_index":620,"title":{},"body":{"entities/CustomerEntity.html":{}}}],["src/data/persistence/entities/customer.entity.ts:132",{"_index":637,"title":{},"body":{"entities/CustomerEntity.html":{}}}],["src/data/persistence/entities/customer.entity.ts:146",{"_index":623,"title":{},"body":{"entities/CustomerEntity.html":{}}}],["src/data/persistence/entities/customer.entity.ts:29",{"_index":634,"title":{},"body":{"entities/CustomerEntity.html":{}}}],["src/data/persistence/entities/customer.entity.ts:41",{"_index":629,"title":{},"body":{"entities/CustomerEntity.html":{}}}],["src/data/persistence/entities/customer.entity.ts:54",{"_index":625,"title":{},"body":{"entities/CustomerEntity.html":{}}}],["src/data/persistence/entities/customer.entity.ts:67",{"_index":633,"title":{},"body":{"entities/CustomerEntity.html":{}}}],["src/data/persistence/entities/customer.entity.ts:80",{"_index":631,"title":{},"body":{"entities/CustomerEntity.html":{}}}],["src/data/persistence/entities/customer.entity.ts:93",{"_index":636,"title":{},"body":{"entities/CustomerEntity.html":{}}}],["src/data/persistence/entities/deposit.entity.ts",{"_index":833,"title":{},"body":{"entities/DepositEntity.html":{},"coverage.html":{}}}],["src/data/persistence/entities/deposit.entity.ts:29",{"_index":841,"title":{},"body":{"entities/DepositEntity.html":{}}}],["src/data/persistence/entities/deposit.entity.ts:41",{"_index":837,"title":{},"body":{"entities/DepositEntity.html":{}}}],["src/data/persistence/entities/deposit.entity.ts:51",{"_index":835,"title":{},"body":{"entities/DepositEntity.html":{}}}],["src/data/persistence/entities/deposit.entity.ts:63",{"_index":839,"title":{},"body":{"entities/DepositEntity.html":{}}}],["src/data/persistence/entities/deposit.entity.ts:77",{"_index":840,"title":{},"body":{"entities/DepositEntity.html":{}}}],["src/data/persistence/entities/document",{"_index":923,"title":{},"body":{"entities/DocumentTypeEntity.html":{},"coverage.html":{}}}],["src/data/persistence/entities/transfer.entitty.ts",{"_index":1164,"title":{},"body":{"entities/TransferEntity.html":{},"coverage.html":{}}}],["src/data/persistence/entities/transfer.entitty.ts:100",{"_index":1171,"title":{},"body":{"entities/TransferEntity.html":{}}}],["src/data/persistence/entities/transfer.entitty.ts:29",{"_index":1172,"title":{},"body":{"entities/TransferEntity.html":{}}}],["src/data/persistence/entities/transfer.entitty.ts:39",{"_index":1177,"title":{},"body":{"entities/TransferEntity.html":{}}}],["src/data/persistence/entities/transfer.entitty.ts:49",{"_index":1173,"title":{},"body":{"entities/TransferEntity.html":{}}}],["src/data/persistence/entities/transfer.entitty.ts:61",{"_index":1169,"title":{},"body":{"entities/TransferEntity.html":{}}}],["src/data/persistence/entities/transfer.entitty.ts:74",{"_index":1179,"title":{},"body":{"entities/TransferEntity.html":{}}}],["src/data/persistence/entities/transfer.entitty.ts:86",{"_index":1170,"title":{},"body":{"entities/TransferEntity.html":{}}}],["src/data/persistence/repositories/account",{"_index":434,"title":{},"body":{"injectables/AccountTypeRepository.html":{},"coverage.html":{}}}],["src/data/persistence/repositories/account.repository.ts",{"_index":231,"title":{},"body":{"injectables/AccountRepository.html":{},"coverage.html":{}}}],["src/data/persistence/repositories/account.repository.ts:111",{"_index":262,"title":{},"body":{"injectables/AccountRepository.html":{}}}],["src/data/persistence/repositories/account.repository.ts:125",{"_index":279,"title":{},"body":{"injectables/AccountRepository.html":{}}}],["src/data/persistence/repositories/account.repository.ts:137",{"_index":277,"title":{},"body":{"injectables/AccountRepository.html":{}}}],["src/data/persistence/repositories/account.repository.ts:15",{"_index":244,"title":{},"body":{"injectables/AccountRepository.html":{}}}],["src/data/persistence/repositories/account.repository.ts:152",{"_index":272,"title":{},"body":{"injectables/AccountRepository.html":{}}}],["src/data/persistence/repositories/account.repository.ts:28",{"_index":287,"title":{},"body":{"injectables/AccountRepository.html":{}}}],["src/data/persistence/repositories/account.repository.ts:40",{"_index":295,"title":{},"body":{"injectables/AccountRepository.html":{}}}],["src/data/persistence/repositories/account.repository.ts:56",{"_index":282,"title":{},"body":{"injectables/AccountRepository.html":{}}}],["src/data/persistence/repositories/account.repository.ts:80",{"_index":248,"title":{},"body":{"injectables/AccountRepository.html":{}}}],["src/data/persistence/repositories/account.repository.ts:89",{"_index":285,"title":{},"body":{"injectables/AccountRepository.html":{}}}],["src/data/persistence/repositories/account.repository.ts:93",{"_index":293,"title":{},"body":{"injectables/AccountRepository.html":{}}}],["src/data/persistence/repositories/customer.repository.ts",{"_index":640,"title":{},"body":{"injectables/CustomerRepository.html":{},"coverage.html":{}}}],["src/data/persistence/repositories/customer.repository.ts:116",{"_index":659,"title":{},"body":{"injectables/CustomerRepository.html":{}}}],["src/data/persistence/repositories/customer.repository.ts:134",{"_index":661,"title":{},"body":{"injectables/CustomerRepository.html":{}}}],["src/data/persistence/repositories/customer.repository.ts:147",{"_index":652,"title":{},"body":{"injectables/CustomerRepository.html":{}}}],["src/data/persistence/repositories/customer.repository.ts:161",{"_index":666,"title":{},"body":{"injectables/CustomerRepository.html":{}}}],["src/data/persistence/repositories/customer.repository.ts:175",{"_index":657,"title":{},"body":{"injectables/CustomerRepository.html":{}}}],["src/data/persistence/repositories/customer.repository.ts:18",{"_index":668,"title":{},"body":{"injectables/CustomerRepository.html":{}}}],["src/data/persistence/repositories/customer.repository.ts:181",{"_index":656,"title":{},"body":{"injectables/CustomerRepository.html":{}}}],["src/data/persistence/repositories/customer.repository.ts:30",{"_index":670,"title":{},"body":{"injectables/CustomerRepository.html":{}}}],["src/data/persistence/repositories/customer.repository.ts:44",{"_index":650,"title":{},"body":{"injectables/CustomerRepository.html":{}}}],["src/data/persistence/repositories/customer.repository.ts:53",{"_index":667,"title":{},"body":{"injectables/CustomerRepository.html":{}}}],["src/data/persistence/repositories/customer.repository.ts:57",{"_index":669,"title":{},"body":{"injectables/CustomerRepository.html":{}}}],["src/data/persistence/repositories/customer.repository.ts:8",{"_index":649,"title":{},"body":{"injectables/CustomerRepository.html":{}}}],["src/data/persistence/repositories/customer.repository.ts:81",{"_index":653,"title":{},"body":{"injectables/CustomerRepository.html":{}}}],["src/data/persistence/repositories/customer.repository.ts:85",{"_index":654,"title":{},"body":{"injectables/CustomerRepository.html":{}}}],["src/data/persistence/repositories/customer.repository.ts:91",{"_index":664,"title":{},"body":{"injectables/CustomerRepository.html":{}}}],["src/data/persistence/repositories/customer.repository.ts:99",{"_index":663,"title":{},"body":{"injectables/CustomerRepository.html":{}}}],["src/data/persistence/repositories/deposit.repository.ts",{"_index":844,"title":{},"body":{"injectables/DepositRepository.html":{},"coverage.html":{}}}],["src/data/persistence/repositories/deposit.repository.ts:119",{"_index":853,"title":{},"body":{"injectables/DepositRepository.html":{}}}],["src/data/persistence/repositories/deposit.repository.ts:132",{"_index":857,"title":{},"body":{"injectables/DepositRepository.html":{}}}],["src/data/persistence/repositories/deposit.repository.ts:18",{"_index":864,"title":{},"body":{"injectables/DepositRepository.html":{}}}],["src/data/persistence/repositories/deposit.repository.ts:28",{"_index":866,"title":{},"body":{"injectables/DepositRepository.html":{}}}],["src/data/persistence/repositories/deposit.repository.ts:41",{"_index":849,"title":{},"body":{"injectables/DepositRepository.html":{}}}],["src/data/persistence/repositories/deposit.repository.ts:50",{"_index":863,"title":{},"body":{"injectables/DepositRepository.html":{}}}],["src/data/persistence/repositories/deposit.repository.ts:56",{"_index":865,"title":{},"body":{"injectables/DepositRepository.html":{}}}],["src/data/persistence/repositories/deposit.repository.ts:8",{"_index":848,"title":{},"body":{"injectables/DepositRepository.html":{}}}],["src/data/persistence/repositories/deposit.repository.ts:84",{"_index":850,"title":{},"body":{"injectables/DepositRepository.html":{}}}],["src/data/persistence/repositories/deposit.repository.ts:97",{"_index":861,"title":{},"body":{"injectables/DepositRepository.html":{}}}],["src/data/persistence/repositories/document",{"_index":927,"title":{},"body":{"injectables/DocumentTypeRepository.html":{},"coverage.html":{}}}],["src/data/persistence/repositories/interfaces/account",{"_index":332,"title":{},"body":{"interfaces/AccountRepositoryInterface.html":{},"interfaces/AccountTypeRepositoryInterface.html":{},"coverage.html":{}}}],["src/data/persistence/repositories/interfaces/base/base",{"_index":549,"title":{},"body":{"interfaces/BaseRepositoryInterface.html":{},"coverage.html":{}}}],["src/data/persistence/repositories/interfaces/customer",{"_index":688,"title":{},"body":{"interfaces/CustomerRepositoryInterface.html":{},"coverage.html":{}}}],["src/data/persistence/repositories/interfaces/deposit",{"_index":883,"title":{},"body":{"interfaces/DepositRepositoryInterface.html":{},"coverage.html":{}}}],["src/data/persistence/repositories/interfaces/document",{"_index":959,"title":{},"body":{"interfaces/DocumentTypeRepositoryInterface.html":{},"coverage.html":{}}}],["src/data/persistence/repositories/interfaces/transfer",{"_index":1214,"title":{},"body":{"interfaces/TransferRepositoryInterface.html":{},"coverage.html":{}}}],["src/data/persistence/repositories/transfer.repository.ts",{"_index":1182,"title":{},"body":{"injectables/TransferRepository.html":{},"coverage.html":{}}}],["src/data/persistence/repositories/transfer.repository.ts:120",{"_index":1197,"title":{},"body":{"injectables/TransferRepository.html":{}}}],["src/data/persistence/repositories/transfer.repository.ts:141",{"_index":1193,"title":{},"body":{"injectables/TransferRepository.html":{}}}],["src/data/persistence/repositories/transfer.repository.ts:156",{"_index":1191,"title":{},"body":{"injectables/TransferRepository.html":{}}}],["src/data/persistence/repositories/transfer.repository.ts:19",{"_index":1200,"title":{},"body":{"injectables/TransferRepository.html":{}}}],["src/data/persistence/repositories/transfer.repository.ts:30",{"_index":1202,"title":{},"body":{"injectables/TransferRepository.html":{}}}],["src/data/persistence/repositories/transfer.repository.ts:44",{"_index":1187,"title":{},"body":{"injectables/TransferRepository.html":{}}}],["src/data/persistence/repositories/transfer.repository.ts:53",{"_index":1199,"title":{},"body":{"injectables/TransferRepository.html":{}}}],["src/data/persistence/repositories/transfer.repository.ts:59",{"_index":1201,"title":{},"body":{"injectables/TransferRepository.html":{}}}],["src/data/persistence/repositories/transfer.repository.ts:8",{"_index":1186,"title":{},"body":{"injectables/TransferRepository.html":{}}}],["src/data/persistence/repositories/transfer.repository.ts:85",{"_index":1189,"title":{},"body":{"injectables/TransferRepository.html":{}}}],["src/data/persistence/repositories/transfer.repository.ts:98",{"_index":1195,"title":{},"body":{"injectables/TransferRepository.html":{}}}],["src/data/persistence/utils/exception",{"_index":1265,"title":{},"body":{"classes/TypeOrmExceptionFilter.html":{},"coverage.html":{}}}],["src/main.ts",{"_index":1405,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/presentation/controllers/account/account.controller.ts",{"_index":6,"title":{},"body":{"controllers/AccountController.html":{},"coverage.html":{}}}],["src/presentation/controllers/account/account.controller.ts:104",{"_index":45,"title":{},"body":{"controllers/AccountController.html":{}}}],["src/presentation/controllers/account/account.controller.ts:113",{"_index":55,"title":{},"body":{"controllers/AccountController.html":{}}}],["src/presentation/controllers/account/account.controller.ts:25",{"_index":63,"title":{},"body":{"controllers/AccountController.html":{}}}],["src/presentation/controllers/account/account.controller.ts:31",{"_index":66,"title":{},"body":{"controllers/AccountController.html":{}}}],["src/presentation/controllers/account/account.controller.ts:37",{"_index":60,"title":{},"body":{"controllers/AccountController.html":{}}}],["src/presentation/controllers/account/account.controller.ts:43",{"_index":52,"title":{},"body":{"controllers/AccountController.html":{}}}],["src/presentation/controllers/account/account.controller.ts:49",{"_index":33,"title":{},"body":{"controllers/AccountController.html":{}}}],["src/presentation/controllers/account/account.controller.ts:60",{"_index":72,"title":{},"body":{"controllers/AccountController.html":{}}}],["src/presentation/controllers/account/account.controller.ts:75",{"_index":58,"title":{},"body":{"controllers/AccountController.html":{}}}],["src/presentation/controllers/account/account.controller.ts:82",{"_index":42,"title":{},"body":{"controllers/AccountController.html":{}}}],["src/presentation/controllers/account/account.controller.ts:90",{"_index":48,"title":{},"body":{"controllers/AccountController.html":{}}}],["src/presentation/controllers/account/account.controller.ts:99",{"_index":69,"title":{},"body":{"controllers/AccountController.html":{}}}],["src/presentation/controllers/deposit/deposit.controller.ts",{"_index":804,"title":{},"body":{"controllers/DepositController.html":{},"coverage.html":{}}}],["src/presentation/controllers/deposit/deposit.controller.ts:10",{"_index":810,"title":{},"body":{"controllers/DepositController.html":{}}}],["src/presentation/controllers/deposit/deposit.controller.ts:15",{"_index":815,"title":{},"body":{"controllers/DepositController.html":{}}}],["src/presentation/controllers/deposit/deposit.controller.ts:31",{"_index":812,"title":{},"body":{"controllers/DepositController.html":{}}}],["src/presentation/controllers/security/security.controller.ts",{"_index":1046,"title":{},"body":{"controllers/SecurityController.html":{},"coverage.html":{}}}],["src/presentation/controllers/security/security.controller.ts:10",{"_index":1060,"title":{},"body":{"controllers/SecurityController.html":{}}}],["src/presentation/controllers/security/security.controller.ts:15",{"_index":1057,"title":{},"body":{"controllers/SecurityController.html":{}}}],["src/presentation/controllers/security/security.controller.ts:20",{"_index":1053,"title":{},"body":{"controllers/SecurityController.html":{}}}],["src/presentation/controllers/transfer/transfer.controller.ts",{"_index":1114,"title":{},"body":{"controllers/TransferController.html":{},"coverage.html":{}}}],["src/presentation/controllers/transfer/transfer.controller.ts:21",{"_index":1122,"title":{},"body":{"controllers/TransferController.html":{}}}],["src/presentation/controllers/transfer/transfer.controller.ts:27",{"_index":1136,"title":{},"body":{"controllers/TransferController.html":{}}}],["src/presentation/controllers/transfer/transfer.controller.ts:32",{"_index":1124,"title":{},"body":{"controllers/TransferController.html":{}}}],["src/presentation/controllers/transfer/transfer.controller.ts:40",{"_index":1130,"title":{},"body":{"controllers/TransferController.html":{}}}],["src/presentation/controllers/transfer/transfer.controller.ts:57",{"_index":1133,"title":{},"body":{"controllers/TransferController.html":{}}}],["src/presentation/controllers/transfer/transfer.controller.ts:74",{"_index":1127,"title":{},"body":{"controllers/TransferController.html":{}}}],["src/presentation/controllers/user/user.controller.ts",{"_index":1313,"title":{},"body":{"controllers/UserController.html":{},"coverage.html":{}}}],["src/presentation/controllers/user/user.controller.ts:23",{"_index":1324,"title":{},"body":{"controllers/UserController.html":{}}}],["src/presentation/controllers/user/user.controller.ts:27",{"_index":1326,"title":{},"body":{"controllers/UserController.html":{}}}],["src/presentation/controllers/user/user.controller.ts:32",{"_index":1329,"title":{},"body":{"controllers/UserController.html":{}}}],["src/presentation/controllers/user/user.controller.ts:36",{"_index":1332,"title":{},"body":{"controllers/UserController.html":{}}}],["src/presentation/controllers/user/user.controller.ts:43",{"_index":1334,"title":{},"body":{"controllers/UserController.html":{}}}],["src/presentation/controllers/user/user.controller.ts:52",{"_index":1339,"title":{},"body":{"controllers/UserController.html":{}}}],["src/presentation/controllers/user/user.controller.ts:61",{"_index":1323,"title":{},"body":{"controllers/UserController.html":{}}}],["src/presentation/controllers/user/user.controller.ts:66",{"_index":1337,"title":{},"body":{"controllers/UserController.html":{}}}],["src/presentation/guards/guards.guard",{"_index":83,"title":{},"body":{"controllers/AccountController.html":{},"controllers/TransferController.html":{},"controllers/UserController.html":{}}}],["src/presentation/guards/guards.guard.ts",{"_index":983,"title":{},"body":{"guards/GuardsGuard.html":{},"coverage.html":{}}}],["src/presentation/guards/guards.guard.ts:6",{"_index":987,"title":{},"body":{"guards/GuardsGuard.html":{}}}],["src/presentation/guards/guards.guard.ts:9",{"_index":990,"title":{},"body":{"guards/GuardsGuard.html":{}}}],["src/presentation/interceptors/interceptors.interceptor.ts",{"_index":1008,"title":{},"body":{"injectables/InterceptorsInterceptor.html":{},"coverage.html":{}}}],["src/presentation/interceptors/interceptors.interceptor.ts:11",{"_index":1013,"title":{},"body":{"injectables/InterceptorsInterceptor.html":{}}}],["src/presentation/middlewares/middlewares.middleware.ts",{"_index":1016,"title":{},"body":{"injectables/MiddlewaresMiddleware.html":{},"coverage.html":{}}}],["src/presentation/middlewares/middlewares.middleware.ts:5",{"_index":1022,"title":{},"body":{"injectables/MiddlewaresMiddleware.html":{}}}],["src/presentation/pipes/pipes.pipe.ts",{"_index":1040,"title":{},"body":{"injectables/PipesPipe.html":{},"coverage.html":{}}}],["src/presentation/pipes/pipes.pipe.ts:5",{"_index":1044,"title":{},"body":{"injectables/PipesPipe.html":{}}}],["start",{"_index":1455,"title":{},"body":{"index.html":{}}}],["start:dev",{"_index":1458,"title":{},"body":{"index.html":{}}}],["start:prodhow",{"_index":1460,"title":{},"body":{"index.html":{}}}],["startamount",{"_index":790,"title":{},"body":{"classes/DataRangeDTO.html":{},"interfaces/DataRangeModel.html":{}}}],["startdate",{"_index":791,"title":{},"body":{"classes/DataRangeDTO.html":{},"interfaces/DataRangeModel.html":{}}}],["started",{"_index":1436,"title":{"index.html":{}},"body":{}}],["starter",{"_index":1447,"title":{},"body":{"index.html":{}}}],["state",{"_index":114,"title":{},"body":{"controllers/AccountController.html":{},"entities/AccountEntity.html":{},"interfaces/AccountModel.html":{},"injectables/AccountRepository.html":{},"interfaces/AccountRepositoryInterface.html":{},"injectables/AccountService.html":{},"entities/AccountTypeEntity.html":{},"interfaces/AccountTypeModel.html":{},"injectables/AccountTypeRepository.html":{},"interfaces/AccountTypeRepositoryInterface.html":{},"entities/CustomerEntity.html":{},"interfaces/CustomerModel.html":{},"injectables/CustomerRepository.html":{},"interfaces/CustomerRepositoryInterface.html":{},"entities/DocumentTypeEntity.html":{},"interfaces/DocumentTypeModel.html":{},"injectables/DocumentTypeRepository.html":{},"interfaces/DocumentTypeRepositoryInterface.html":{}}}],["statements",{"_index":1359,"title":{},"body":{"coverage.html":{}}}],["status",{"_index":1284,"title":{},"body":{"classes/TypeOrmExceptionFilter.html":{}}}],["string",{"_index":25,"title":{},"body":{"controllers/AccountController.html":{},"classes/AccountDTO.html":{},"entities/AccountEntity.html":{},"interfaces/AccountModel.html":{},"injectables/AccountRepository.html":{},"interfaces/AccountRepositoryInterface.html":{},"injectables/AccountService.html":{},"entities/AccountTypeEntity.html":{},"interfaces/AccountTypeModel.html":{},"injectables/AccountTypeRepository.html":{},"interfaces/AccountTypeRepositoryInterface.html":{},"interfaces/BaseRepositoryInterface.html":{},"classes/CustomerDTO.html":{},"entities/CustomerEntity.html":{},"interfaces/CustomerModel.html":{},"injectables/CustomerRepository.html":{},"interfaces/CustomerRepositoryInterface.html":{},"injectables/CustomerService.html":{},"classes/CustomerUpdateDTO.html":{},"controllers/DepositController.html":{},"classes/DepositDTO.html":{},"entities/DepositEntity.html":{},"interfaces/DepositModel.html":{},"injectables/DepositRepository.html":{},"interfaces/DepositRepositoryInterface.html":{},"injectables/DepositService.html":{},"entities/DocumentTypeEntity.html":{},"interfaces/DocumentTypeModel.html":{},"injectables/DocumentTypeRepository.html":{},"interfaces/DocumentTypeRepositoryInterface.html":{},"controllers/SecurityController.html":{},"injectables/SecurityService.html":{},"classes/SignDTO.html":{},"controllers/TransferController.html":{},"classes/TransferDTO.html":{},"entities/TransferEntity.html":{},"interfaces/TransferModel.html":{},"injectables/TransferRepository.html":{},"interfaces/TransferRepositoryInterface.html":{},"injectables/TransferService.html":{},"controllers/UserController.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["su",{"_index":274,"title":{},"body":{"injectables/AccountRepository.html":{},"injectables/AccountTypeRepository.html":{},"interfaces/BaseRepositoryInterface.html":{},"injectables/CustomerService.html":{},"injectables/DepositRepository.html":{},"injectables/DocumentTypeRepository.html":{},"injectables/TransferRepository.html":{},"interfaces/TransferRepositoryInterface.html":{}}}],["suave",{"_index":257,"title":{},"body":{"injectables/AccountRepository.html":{},"interfaces/BaseRepositoryInterface.html":{},"injectables/CustomerRepository.html":{},"injectables/DepositRepository.html":{},"injectables/TransferRepository.html":{}}}],["sub",{"_index":1093,"title":{},"body":{"injectables/SecurityService.html":{}}}],["submitted",{"_index":1474,"title":{},"body":{"index.html":{}}}],["support",{"_index":1497,"title":{},"body":{"modules.html":{}}}],["svg",{"_index":1498,"title":{},"body":{"modules.html":{}}}],["synchronize",{"_index":542,"title":{},"body":{"modules/AppModule.html":{},"injectables/TypesOrmPostgresConfigService.html":{}}}],["t",{"_index":970,"title":{},"body":{"classes/ExceptionFiltersFilter.html":{}}}],["table",{"_index":1413,"title":{},"body":{"coverage.html":{}}}],["tablesort(document.getelementbyid('coverage",{"_index":1412,"title":{},"body":{"coverage.html":{}}}],["taken",{"_index":1473,"title":{},"body":{"index.html":{}}}],["teléfono",{"_index":603,"title":{},"body":{"classes/CustomerDTO.html":{},"entities/CustomerEntity.html":{},"interfaces/CustomerRepositoryInterface.html":{},"classes/CustomerUpdateDTO.html":{}}}],["template",{"_index":980,"title":{},"body":{"classes/ExceptionFiltersFilter.html":{}}}],["tener",{"_index":597,"title":{},"body":{"classes/CustomerDTO.html":{},"classes/CustomerUpdateDTO.html":{}}}],["then((result",{"_index":319,"title":{},"body":{"injectables/AccountRepository.html":{},"injectables/AccountTypeRepository.html":{},"injectables/CustomerRepository.html":{},"injectables/DepositRepository.html":{},"injectables/DocumentTypeRepository.html":{},"injectables/TransferRepository.html":{}}}],["this.accountrepository.delete(accountid",{"_index":420,"title":{},"body":{"injectables/AccountService.html":{}}}],["this.accountrepository.findall",{"_index":414,"title":{},"body":{"injectables/AccountService.html":{}}}],["this.accountrepository.findall()).filter",{"_index":403,"title":{},"body":{"injectables/AccountService.html":{}}}],["this.accountrepository.findall()).map",{"_index":771,"title":{},"body":{"injectables/CustomerService.html":{}}}],["this.accountrepository.findbycustomer(customerid",{"_index":413,"title":{},"body":{"injectables/AccountService.html":{}}}],["this.accountrepository.findonebyid",{"_index":903,"title":{},"body":{"injectables/DepositService.html":{},"injectables/TransferService.html":{}}}],["this.accountrepository.findonebyid(accountid",{"_index":411,"title":{},"body":{"injectables/AccountService.html":{}}}],["this.accountrepository.findonebyid(accountid)).state",{"_index":418,"title":{},"body":{"injectables/AccountService.html":{}}}],["this.accountrepository.findonebyid(deposit.accountid",{"_index":908,"title":{},"body":{"injectables/DepositService.html":{}}}],["this.accountrepository.findonebyid(transfer.incomeid",{"_index":1238,"title":{},"body":{"injectables/TransferService.html":{}}}],["this.accountrepository.register(account",{"_index":767,"title":{},"body":{"injectables/CustomerService.html":{}}}],["this.accountrepository.register(newaccount",{"_index":401,"title":{},"body":{"injectables/AccountService.html":{}}}],["this.accountrepository.update(accountid",{"_index":415,"title":{},"body":{"injectables/AccountService.html":{}}}],["this.accountrepository.update(deposit.accountid",{"_index":910,"title":{},"body":{"injectables/DepositService.html":{}}}],["this.accountrepository.update(income.id",{"_index":1251,"title":{},"body":{"injectables/TransferService.html":{}}}],["this.accountrepository.update(outcome.id",{"_index":1248,"title":{},"body":{"injectables/TransferService.html":{}}}],["this.accountservice.changeaccounttype(id",{"_index":122,"title":{},"body":{"controllers/AccountController.html":{}}}],["this.accountservice.changestate(id",{"_index":115,"title":{},"body":{"controllers/AccountController.html":{}}}],["this.accountservice.createaccount(account",{"_index":106,"title":{},"body":{"controllers/AccountController.html":{}}}],["this.accountservice.createaccount(newaccount",{"_index":1106,"title":{},"body":{"injectables/SecurityService.html":{}}}],["this.accountservice.customerbalance(id",{"_index":103,"title":{},"body":{"controllers/AccountController.html":{}}}],["this.accountservice.deleteaccount(id",{"_index":127,"title":{},"body":{"controllers/AccountController.html":{}}}],["this.accountservice.findall",{"_index":104,"title":{},"body":{"controllers/AccountController.html":{}}}],["this.accountservice.getaccountbycustomerid(id",{"_index":112,"title":{},"body":{"controllers/AccountController.html":{}}}],["this.accountservice.getbalance(id",{"_index":99,"title":{},"body":{"controllers/AccountController.html":{}}}],["this.accountservice.getstate(id",{"_index":120,"title":{},"body":{"controllers/AccountController.html":{}}}],["this.accountservice.verifyamountintobalance(id",{"_index":113,"title":{},"body":{"controllers/AccountController.html":{}}}],["this.accounttyperepository.findonebyid",{"_index":399,"title":{},"body":{"injectables/AccountService.html":{}}}],["this.accounttyperepository.findonebyid(typeid",{"_index":764,"title":{},"body":{"injectables/CustomerService.html":{}}}],["this.configservice.get('db_host",{"_index":1307,"title":{},"body":{"injectables/TypesOrmPostgresConfigService.html":{}}}],["this.configservice.get('db_name",{"_index":1311,"title":{},"body":{"injectables/TypesOrmPostgresConfigService.html":{}}}],["this.configservice.get('db_password",{"_index":1310,"title":{},"body":{"injectables/TypesOrmPostgresConfigService.html":{}}}],["this.configservice.get('db_port",{"_index":1308,"title":{},"body":{"injectables/TypesOrmPostgresConfigService.html":{}}}],["this.configservice.get('db_user",{"_index":1309,"title":{},"body":{"injectables/TypesOrmPostgresConfigService.html":{}}}],["this.customerrepository",{"_index":679,"title":{},"body":{"injectables/CustomerRepository.html":{}}}],["this.customerrepository.delete(id",{"_index":677,"title":{},"body":{"injectables/CustomerRepository.html":{},"injectables/CustomerService.html":{}}}],["this.customerrepository.existemail(customer.email",{"_index":760,"title":{},"body":{"injectables/CustomerService.html":{}}}],["this.customerrepository.existemail(user.email",{"_index":1103,"title":{},"body":{"injectables/SecurityService.html":{}}}],["this.customerrepository.find",{"_index":683,"title":{},"body":{"injectables/CustomerRepository.html":{}}}],["this.customerrepository.findall()).filter",{"_index":743,"title":{},"body":{"injectables/CustomerService.html":{}}}],["this.customerrepository.findalldeleted",{"_index":746,"title":{},"body":{"injectables/CustomerService.html":{}}}],["this.customerrepository.findone",{"_index":684,"title":{},"body":{"injectables/CustomerRepository.html":{}}}],["this.customerrepository.findonebyemail(email",{"_index":742,"title":{},"body":{"injectables/CustomerService.html":{}}}],["this.customerrepository.findonebyemail(user.email",{"_index":1092,"title":{},"body":{"injectables/SecurityService.html":{}}}],["this.customerrepository.findonebyemailandpassword",{"_index":1089,"title":{},"body":{"injectables/SecurityService.html":{}}}],["this.customerrepository.findonebyid",{"_index":396,"title":{},"body":{"injectables/AccountService.html":{}}}],["this.customerrepository.findonebyid(customerid",{"_index":741,"title":{},"body":{"injectables/CustomerService.html":{}}}],["this.customerrepository.findonebyid(id",{"_index":768,"title":{},"body":{"injectables/CustomerService.html":{}}}],["this.customerrepository.findonebyid(id)).deletedat",{"_index":769,"title":{},"body":{"injectables/CustomerService.html":{}}}],["this.customerrepository.register(newcustomer",{"_index":766,"title":{},"body":{"injectables/CustomerService.html":{},"injectables/SecurityService.html":{}}}],["this.customerrepository.save(entity",{"_index":674,"title":{},"body":{"injectables/CustomerRepository.html":{}}}],["this.customerrepository.update(id",{"_index":676,"title":{},"body":{"injectables/CustomerRepository.html":{},"injectables/CustomerService.html":{}}}],["this.customerservice.deletecustomer(id",{"_index":1353,"title":{},"body":{"controllers/UserController.html":{}}}],["this.customerservice.findall",{"_index":1343,"title":{},"body":{"controllers/UserController.html":{}}}],["this.customerservice.findalldeleted",{"_index":1344,"title":{},"body":{"controllers/UserController.html":{}}}],["this.customerservice.getcustomerinfo(id",{"_index":1346,"title":{},"body":{"controllers/UserController.html":{}}}],["this.customerservice.getcustomerinfobyemail(email",{"_index":1348,"title":{},"body":{"controllers/UserController.html":{}}}],["this.customerservice.newcustomer(customer",{"_index":1350,"title":{},"body":{"controllers/UserController.html":{}}}],["this.customerservice.unsuscribe(id",{"_index":1355,"title":{},"body":{"controllers/UserController.html":{}}}],["this.customerservice.updatedcustomer(id",{"_index":1351,"title":{},"body":{"controllers/UserController.html":{}}}],["this.depositrepository",{"_index":874,"title":{},"body":{"injectables/DepositRepository.html":{}}}],["this.depositrepository.delete",{"_index":872,"title":{},"body":{"injectables/DepositRepository.html":{}}}],["this.depositrepository.delete(depositid",{"_index":912,"title":{},"body":{"injectables/DepositService.html":{}}}],["this.depositrepository.find",{"_index":881,"title":{},"body":{"injectables/DepositRepository.html":{}}}],["this.depositrepository.findbydatarange",{"_index":914,"title":{},"body":{"injectables/DepositService.html":{}}}],["this.depositrepository.register(depositentity",{"_index":911,"title":{},"body":{"injectables/DepositService.html":{}}}],["this.depositrepository.save(entity",{"_index":870,"title":{},"body":{"injectables/DepositRepository.html":{}}}],["this.depositrepository.update(id",{"_index":871,"title":{},"body":{"injectables/DepositRepository.html":{}}}],["this.depositservice.createdeposit(account",{"_index":820,"title":{},"body":{"controllers/DepositController.html":{}}}],["this.depositservice.deletedeposit(id",{"_index":828,"title":{},"body":{"controllers/DepositController.html":{}}}],["this.depositservice.gethistory",{"_index":823,"title":{},"body":{"controllers/DepositController.html":{}}}],["this.documenttyperepository",{"_index":958,"title":{},"body":{"injectables/DocumentTypeRepository.html":{}}}],["this.documenttyperepository.delete(id).then((result",{"_index":956,"title":{},"body":{"injectables/DocumentTypeRepository.html":{}}}],["this.documenttyperepository.find",{"_index":957,"title":{},"body":{"injectables/DocumentTypeRepository.html":{}}}],["this.documenttyperepository.findonebyid",{"_index":1098,"title":{},"body":{"injectables/SecurityService.html":{}}}],["this.documenttyperepository.save",{"_index":940,"title":{},"body":{"injectables/DocumentTypeRepository.html":{}}}],["this.documenttyperepository.save(entity",{"_index":954,"title":{},"body":{"injectables/DocumentTypeRepository.html":{}}}],["this.documenttyperepository.update(id",{"_index":955,"title":{},"body":{"injectables/DocumentTypeRepository.html":{}}}],["this.findonebyid(id",{"_index":321,"title":{},"body":{"injectables/AccountRepository.html":{},"injectables/CustomerRepository.html":{},"injectables/DepositRepository.html":{},"injectables/DocumentTypeRepository.html":{},"injectables/TransferRepository.html":{}}}],["this.getstate(accountid",{"_index":408,"title":{},"body":{"injectables/AccountService.html":{}}}],["this.harddelete(id",{"_index":323,"title":{},"body":{"injectables/AccountRepository.html":{},"injectables/CustomerRepository.html":{},"injectables/DepositRepository.html":{},"injectables/TransferRepository.html":{}}}],["this.jwtservice.sign(payload",{"_index":1094,"title":{},"body":{"injectables/SecurityService.html":{}}}],["this.jwtservice.verify(jwt",{"_index":1109,"title":{},"body":{"injectables/SecurityService.html":{}}}],["this.jwtservice.verify(token",{"_index":1004,"title":{},"body":{"guards/GuardsGuard.html":{}}}],["this.register",{"_index":462,"title":{},"body":{"injectables/AccountTypeRepository.html":{}}}],["this.securityservice.signin(customer",{"_index":1066,"title":{},"body":{"controllers/SecurityController.html":{}}}],["this.securityservice.signout(body.jwt",{"_index":1069,"title":{},"body":{"controllers/SecurityController.html":{}}}],["this.securityservice.signup(customer",{"_index":1064,"title":{},"body":{"controllers/SecurityController.html":{}}}],["this.softdelete(id",{"_index":322,"title":{},"body":{"injectables/AccountRepository.html":{},"injectables/CustomerRepository.html":{},"injectables/DepositRepository.html":{},"injectables/TransferRepository.html":{}}}],["this.transferrepository",{"_index":1209,"title":{},"body":{"injectables/TransferRepository.html":{}}}],["this.transferrepository.delete",{"_index":1207,"title":{},"body":{"injectables/TransferRepository.html":{}}}],["this.transferrepository.delete(transferid",{"_index":1263,"title":{},"body":{"injectables/TransferService.html":{}}}],["this.transferrepository.find",{"_index":1213,"title":{},"body":{"injectables/TransferRepository.html":{}}}],["this.transferrepository.findbydatarange",{"_index":1262,"title":{},"body":{"injectables/TransferService.html":{}}}],["this.transferrepository.findincomebydatarange",{"_index":1260,"title":{},"body":{"injectables/TransferService.html":{}}}],["this.transferrepository.findonebyid(transferid",{"_index":1264,"title":{},"body":{"injectables/TransferService.html":{}}}],["this.transferrepository.findoutcomebydatarange",{"_index":1256,"title":{},"body":{"injectables/TransferService.html":{}}}],["this.transferrepository.register(newtransfer",{"_index":1253,"title":{},"body":{"injectables/TransferService.html":{}}}],["this.transferrepository.save(entity",{"_index":1205,"title":{},"body":{"injectables/TransferRepository.html":{}}}],["this.transferrepository.update(id",{"_index":1206,"title":{},"body":{"injectables/TransferRepository.html":{}}}],["this.transferservice.createtransfer(transfer",{"_index":1139,"title":{},"body":{"controllers/TransferController.html":{}}}],["this.transferservice.deletetransfer(id",{"_index":1144,"title":{},"body":{"controllers/TransferController.html":{}}}],["this.transferservice.gethistory",{"_index":1150,"title":{},"body":{"controllers/TransferController.html":{}}}],["this.transferservice.gethistoryin",{"_index":1146,"title":{},"body":{"controllers/TransferController.html":{}}}],["this.transferservice.gethistoryout",{"_index":1148,"title":{},"body":{"controllers/TransferController.html":{}}}],["this.transferservice.selecttransfer(id",{"_index":1142,"title":{},"body":{"controllers/TransferController.html":{}}}],["this.update(account.id",{"_index":329,"title":{},"body":{"injectables/AccountRepository.html":{}}}],["this.update(customer.id",{"_index":682,"title":{},"body":{"injectables/CustomerRepository.html":{}}}],["this.update(result.id",{"_index":877,"title":{},"body":{"injectables/DepositRepository.html":{}}}],["this.update(transfer.id",{"_index":1212,"title":{},"body":{"injectables/TransferRepository.html":{}}}],["this.userrepository",{"_index":317,"title":{},"body":{"injectables/AccountRepository.html":{},"injectables/AccountTypeRepository.html":{}}}],["this.userrepository.delete(id",{"_index":324,"title":{},"body":{"injectables/AccountRepository.html":{}}}],["this.userrepository.delete(id).then((result",{"_index":475,"title":{},"body":{"injectables/AccountTypeRepository.html":{}}}],["this.userrepository.find",{"_index":330,"title":{},"body":{"injectables/AccountRepository.html":{},"injectables/AccountTypeRepository.html":{}}}],["this.userrepository.save(entity",{"_index":307,"title":{},"body":{"injectables/AccountRepository.html":{},"injectables/AccountTypeRepository.html":{}}}],["this.userrepository.update(id",{"_index":308,"title":{},"body":{"injectables/AccountRepository.html":{},"injectables/AccountTypeRepository.html":{}}}],["this.verifyamountintobalance(accountid",{"_index":416,"title":{},"body":{"injectables/AccountService.html":{}}}],["throw",{"_index":311,"title":{},"body":{"injectables/AccountRepository.html":{},"injectables/AccountService.html":{},"injectables/AccountTypeRepository.html":{},"injectables/CustomerRepository.html":{},"injectables/CustomerService.html":{},"injectables/DepositRepository.html":{},"injectables/DocumentTypeRepository.html":{},"injectables/SecurityService.html":{},"injectables/TransferRepository.html":{},"injectables/TransferService.html":{}}}],["throws",{"_index":675,"title":{},"body":{"injectables/CustomerRepository.html":{},"injectables/DepositRepository.html":{},"injectables/DocumentTypeRepository.html":{},"injectables/TransferRepository.html":{}}}],["tienen",{"_index":342,"title":{},"body":{"interfaces/AccountRepositoryInterface.html":{},"interfaces/AccountTypeRepositoryInterface.html":{},"interfaces/CustomerRepositoryInterface.html":{}}}],["timestamp",{"_index":181,"title":{},"body":{"entities/AccountEntity.html":{},"entities/CustomerEntity.html":{},"classes/DataRangeDTO.html":{},"entities/DepositEntity.html":{},"entities/TransferEntity.html":{},"classes/TypeOrmExceptionFilter.html":{}}}],["tipo",{"_index":147,"title":{},"body":{"classes/AccountDTO.html":{},"entities/AccountEntity.html":{},"injectables/AccountRepository.html":{},"interfaces/AccountRepositoryInterface.html":{},"injectables/AccountService.html":{},"entities/AccountTypeEntity.html":{},"interfaces/AccountTypeModel.html":{},"injectables/AccountTypeRepository.html":{},"interfaces/AccountTypeRepositoryInterface.html":{},"classes/CustomerDTO.html":{},"entities/CustomerEntity.html":{},"interfaces/CustomerRepositoryInterface.html":{},"entities/DocumentTypeEntity.html":{},"interfaces/DocumentTypeModel.html":{},"injectables/DocumentTypeRepository.html":{},"interfaces/DocumentTypeRepositoryInterface.html":{},"classes/ExceptionFiltersFilter.html":{}}}],["tipos",{"_index":436,"title":{},"body":{"injectables/AccountTypeRepository.html":{},"interfaces/AccountTypeRepositoryInterface.html":{},"injectables/DocumentTypeRepository.html":{},"interfaces/DocumentTypeRepositoryInterface.html":{}}}],["title",{"_index":1463,"title":{},"body":{"index.html":{}}}],["todas",{"_index":264,"title":{},"body":{"injectables/AccountRepository.html":{},"interfaces/BaseRepositoryInterface.html":{},"injectables/TransferRepository.html":{},"interfaces/TransferRepositoryInterface.html":{}}}],["todos",{"_index":441,"title":{},"body":{"injectables/AccountTypeRepository.html":{},"injectables/CustomerService.html":{},"injectables/DepositRepository.html":{},"injectables/DocumentTypeRepository.html":{}}}],["token",{"_index":999,"title":{},"body":{"guards/GuardsGuard.html":{},"injectables/MiddlewaresMiddleware.html":{}}}],["transacciones",{"_index":1230,"title":{},"body":{"injectables/TransferService.html":{}}}],["transacción",{"_index":1227,"title":{},"body":{"injectables/TransferService.html":{}}}],["transfer",{"_index":135,"title":{},"body":{"classes/AccountDTO.html":{},"classes/CustomerDTO.html":{},"classes/CustomerUpdateDTO.html":{},"classes/DataRangeDTO.html":{},"classes/DepositDTO.html":{},"classes/PaginationDTO.html":{},"classes/SignDTO.html":{},"controllers/TransferController.html":{},"classes/TransferDTO.html":{},"entities/TransferEntity.html":{},"injectables/TransferRepository.html":{},"injectables/TransferService.html":{}}}],["transfer.id",{"_index":1210,"title":{},"body":{"injectables/TransferRepository.html":{}}}],["transfer.outcomeid",{"_index":1239,"title":{},"body":{"injectables/TransferService.html":{}}}],["transfer.reason",{"_index":1246,"title":{},"body":{"injectables/TransferService.html":{}}}],["transfercontroller",{"_index":498,"title":{"controllers/TransferController.html":{}},"body":{"modules/AppModule.html":{},"controllers/TransferController.html":{},"coverage.html":{}}}],["transferdto",{"_index":1121,"title":{"classes/TransferDTO.html":{}},"body":{"controllers/TransferController.html":{},"classes/TransferDTO.html":{},"injectables/TransferService.html":{},"coverage.html":{}}}],["transferencia",{"_index":1152,"title":{},"body":{"classes/TransferDTO.html":{},"entities/TransferEntity.html":{},"interfaces/TransferModel.html":{},"injectables/TransferRepository.html":{},"interfaces/TransferRepositoryInterface.html":{},"injectables/TransferService.html":{}}}],["transferencias",{"_index":1190,"title":{},"body":{"injectables/TransferRepository.html":{},"interfaces/TransferRepositoryInterface.html":{}}}],["transferentity",{"_index":517,"title":{"entities/TransferEntity.html":{}},"body":{"modules/AppModule.html":{},"controllers/TransferController.html":{},"entities/TransferEntity.html":{},"injectables/TransferRepository.html":{},"interfaces/TransferRepositoryInterface.html":{},"injectables/TransferService.html":{},"injectables/TypesOrmPostgresConfigService.html":{},"coverage.html":{}}}],["transferid",{"_index":1228,"title":{},"body":{"injectables/TransferService.html":{}}}],["transfermodel",{"_index":1180,"title":{"interfaces/TransferModel.html":{}},"body":{"entities/TransferEntity.html":{},"interfaces/TransferModel.html":{},"injectables/TransferService.html":{},"coverage.html":{}}}],["transferrepository",{"_index":491,"title":{"injectables/TransferRepository.html":{}},"body":{"modules/AppModule.html":{},"injectables/TransferRepository.html":{},"injectables/TransferService.html":{},"coverage.html":{},"overview.html":{}}}],["transferrepositoryinterface",{"_index":1203,"title":{"interfaces/TransferRepositoryInterface.html":{}},"body":{"injectables/TransferRepository.html":{},"interfaces/TransferRepositoryInterface.html":{},"coverage.html":{}}}],["transferservice",{"_index":492,"title":{"injectables/TransferService.html":{}},"body":{"modules/AppModule.html":{},"controllers/TransferController.html":{},"injectables/TransferService.html":{},"coverage.html":{},"overview.html":{}}}],["transform",{"_index":704,"title":{},"body":{"injectables/CustomerService.html":{},"injectables/PipesPipe.html":{}}}],["transform(customer",{"_index":727,"title":{},"body":{"injectables/CustomerService.html":{}}}],["transform(value",{"_index":1041,"title":{},"body":{"injectables/PipesPipe.html":{}}}],["transformar",{"_index":729,"title":{},"body":{"injectables/CustomerService.html":{}}}],["transformer",{"_index":1420,"title":{},"body":{"dependencies.html":{}}}],["true",{"_index":183,"title":{},"body":{"entities/AccountEntity.html":{},"entities/AccountTypeEntity.html":{},"injectables/AccountTypeRepository.html":{},"modules/AppModule.html":{},"entities/CustomerEntity.html":{},"injectables/CustomerRepository.html":{},"injectables/CustomerService.html":{},"entities/DepositEntity.html":{},"entities/DocumentTypeEntity.html":{},"injectables/DocumentTypeRepository.html":{},"guards/GuardsGuard.html":{},"injectables/SecurityService.html":{},"entities/TransferEntity.html":{},"injectables/TransferRepository.html":{},"injectables/TypesOrmPostgresConfigService.html":{}}}],["try",{"_index":1002,"title":{},"body":{"guards/GuardsGuard.html":{}}}],["type",{"_index":28,"title":{},"body":{"controllers/AccountController.html":{},"classes/AccountDTO.html":{},"entities/AccountEntity.html":{},"interfaces/AccountModel.html":{},"injectables/AccountRepository.html":{},"interfaces/AccountRepositoryInterface.html":{},"injectables/AccountService.html":{},"entities/AccountTypeEntity.html":{},"interfaces/AccountTypeModel.html":{},"injectables/AccountTypeRepository.html":{},"interfaces/AccountTypeRepositoryInterface.html":{},"modules/AppModule.html":{},"interfaces/BaseRepositoryInterface.html":{},"classes/CustomerDTO.html":{},"entities/CustomerEntity.html":{},"interfaces/CustomerModel.html":{},"injectables/CustomerRepository.html":{},"interfaces/CustomerRepositoryInterface.html":{},"injectables/CustomerService.html":{},"classes/CustomerUpdateDTO.html":{},"classes/DataRangeDTO.html":{},"interfaces/DataRangeModel.html":{},"controllers/DepositController.html":{},"classes/DepositDTO.html":{},"entities/DepositEntity.html":{},"interfaces/DepositModel.html":{},"injectables/DepositRepository.html":{},"interfaces/DepositRepositoryInterface.html":{},"injectables/DepositService.html":{},"entities/DocumentTypeEntity.html":{},"interfaces/DocumentTypeModel.html":{},"injectables/DocumentTypeRepository.html":{},"interfaces/DocumentTypeRepositoryInterface.html":{},"classes/ExceptionFiltersFilter.html":{},"guards/GuardsGuard.html":{},"injectables/InterceptorsInterceptor.html":{},"injectables/MiddlewaresMiddleware.html":{},"classes/PaginationDTO.html":{},"interfaces/PaginationModel.html":{},"injectables/PipesPipe.html":{},"controllers/SecurityController.html":{},"injectables/SecurityService.html":{},"classes/SignDTO.html":{},"controllers/TransferController.html":{},"classes/TransferDTO.html":{},"entities/TransferEntity.html":{},"interfaces/TransferModel.html":{},"injectables/TransferRepository.html":{},"interfaces/TransferRepositoryInterface.html":{},"injectables/TransferService.html":{},"classes/TypeOrmExceptionFilter.html":{},"injectables/TypesOrmPostgresConfigService.html":{},"controllers/UserController.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["type.entity",{"_index":455,"title":{},"body":{"injectables/AccountTypeRepository.html":{}}}],["type.entity.ts",{"_index":422,"title":{},"body":{"entities/AccountTypeEntity.html":{},"entities/DocumentTypeEntity.html":{},"coverage.html":{}}}],["type.entity.ts:28",{"_index":424,"title":{},"body":{"entities/AccountTypeEntity.html":{},"entities/DocumentTypeEntity.html":{}}}],["type.entity.ts:41",{"_index":427,"title":{},"body":{"entities/AccountTypeEntity.html":{},"entities/DocumentTypeEntity.html":{}}}],["type.entity.ts:53",{"_index":429,"title":{},"body":{"entities/AccountTypeEntity.html":{},"entities/DocumentTypeEntity.html":{}}}],["type.mode.ts",{"_index":433,"title":{},"body":{"interfaces/AccountTypeModel.html":{},"coverage.html":{}}}],["type.model.ts",{"_index":926,"title":{},"body":{"interfaces/DocumentTypeModel.html":{},"coverage.html":{}}}],["type.repository.ts",{"_index":435,"title":{},"body":{"injectables/AccountTypeRepository.html":{},"injectables/DocumentTypeRepository.html":{},"coverage.html":{}}}],["type.repository.ts:104",{"_index":932,"title":{},"body":{"injectables/DocumentTypeRepository.html":{}}}],["type.repository.ts:119",{"_index":446,"title":{},"body":{"injectables/AccountTypeRepository.html":{}}}],["type.repository.ts:130",{"_index":444,"title":{},"body":{"injectables/AccountTypeRepository.html":{}}}],["type.repository.ts:15",{"_index":438,"title":{},"body":{"injectables/AccountTypeRepository.html":{}}}],["type.repository.ts:31",{"_index":935,"title":{},"body":{"injectables/DocumentTypeRepository.html":{}}}],["type.repository.ts:40",{"_index":440,"title":{},"body":{"injectables/AccountTypeRepository.html":{}}}],["type.repository.ts:42",{"_index":936,"title":{},"body":{"injectables/DocumentTypeRepository.html":{}}}],["type.repository.ts:51",{"_index":449,"title":{},"body":{"injectables/AccountTypeRepository.html":{}}}],["type.repository.ts:55",{"_index":930,"title":{},"body":{"injectables/DocumentTypeRepository.html":{}}}],["type.repository.ts:63",{"_index":452,"title":{},"body":{"injectables/AccountTypeRepository.html":{}}}],["type.repository.ts:68",{"_index":931,"title":{},"body":{"injectables/DocumentTypeRepository.html":{}}}],["type.repository.ts:78",{"_index":934,"title":{},"body":{"injectables/DocumentTypeRepository.html":{}}}],["type.repository.ts:8",{"_index":929,"title":{},"body":{"injectables/DocumentTypeRepository.html":{}}}],["type.repository.ts:81",{"_index":439,"title":{},"body":{"injectables/AccountTypeRepository.html":{}}}],["type.repository.ts:95",{"_index":933,"title":{},"body":{"injectables/DocumentTypeRepository.html":{}}}],["type.repository.ts:96",{"_index":447,"title":{},"body":{"injectables/AccountTypeRepository.html":{}}}],["typeid",{"_index":762,"title":{},"body":{"injectables/CustomerService.html":{}}}],["typeorm",{"_index":204,"title":{},"body":{"entities/AccountEntity.html":{},"injectables/AccountRepository.html":{},"entities/AccountTypeEntity.html":{},"injectables/AccountTypeRepository.html":{},"entities/CustomerEntity.html":{},"injectables/CustomerRepository.html":{},"entities/DepositEntity.html":{},"injectables/DepositRepository.html":{},"entities/DocumentTypeEntity.html":{},"injectables/DocumentTypeRepository.html":{},"entities/TransferEntity.html":{},"injectables/TransferRepository.html":{},"classes/TypeOrmExceptionFilter.html":{},"injectables/TypesOrmPostgresConfigService.html":{},"dependencies.html":{}}}],["typeormerror",{"_index":1269,"title":{},"body":{"classes/TypeOrmExceptionFilter.html":{}}}],["typeormexceptionfilter",{"_index":518,"title":{"classes/TypeOrmExceptionFilter.html":{}},"body":{"modules/AppModule.html":{},"classes/TypeOrmExceptionFilter.html":{},"coverage.html":{}}}],["typeormmodule",{"_index":513,"title":{},"body":{"modules/AppModule.html":{}}}],["typeormmodule.forfeature",{"_index":544,"title":{},"body":{"modules/AppModule.html":{}}}],["typeormmodule.forroot",{"_index":530,"title":{},"body":{"modules/AppModule.html":{}}}],["typeormmoduleoptions",{"_index":1305,"title":{},"body":{"injectables/TypesOrmPostgresConfigService.html":{}}}],["typeormoptionsfactory",{"_index":1306,"title":{},"body":{"injectables/TypesOrmPostgresConfigService.html":{}}}],["typescript",{"_index":1446,"title":{},"body":{"index.html":{}}}],["typesormpostgresconfigservice",{"_index":547,"title":{"injectables/TypesOrmPostgresConfigService.html":{}},"body":{"modules/AppModule.html":{},"injectables/TypesOrmPostgresConfigService.html":{},"coverage.html":{}}}],["un",{"_index":211,"title":{},"body":{"entities/AccountEntity.html":{},"injectables/AccountRepository.html":{},"interfaces/AccountRepositoryInterface.html":{},"injectables/AccountService.html":{},"injectables/AccountTypeRepository.html":{},"interfaces/AccountTypeRepositoryInterface.html":{},"interfaces/BaseRepositoryInterface.html":{},"classes/CustomerDTO.html":{},"injectables/CustomerRepository.html":{},"interfaces/CustomerRepositoryInterface.html":{},"injectables/CustomerService.html":{},"classes/CustomerUpdateDTO.html":{},"classes/DataRangeDTO.html":{},"classes/DepositDTO.html":{},"injectables/DepositRepository.html":{},"interfaces/DepositRepositoryInterface.html":{},"injectables/DepositService.html":{},"injectables/DocumentTypeRepository.html":{},"interfaces/DocumentTypeRepositoryInterface.html":{},"classes/PaginationDTO.html":{},"classes/TransferDTO.html":{},"injectables/TransferRepository.html":{},"interfaces/TransferRepositoryInterface.html":{},"classes/TypeOrmExceptionFilter.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["una",{"_index":139,"title":{},"body":{"classes/AccountDTO.html":{},"injectables/AccountRepository.html":{},"injectables/AccountService.html":{},"interfaces/BaseRepositoryInterface.html":{},"classes/CustomerDTO.html":{},"injectables/CustomerRepository.html":{},"classes/CustomerUpdateDTO.html":{},"classes/DataRangeDTO.html":{},"classes/DepositDTO.html":{},"injectables/DepositRepository.html":{},"injectables/DepositService.html":{},"injectables/DocumentTypeRepository.html":{},"classes/PaginationDTO.html":{},"classes/SignDTO.html":{},"classes/TransferDTO.html":{},"injectables/TransferRepository.html":{},"interfaces/TransferRepositoryInterface.html":{},"injectables/TransferService.html":{},"classes/TypeOrmExceptionFilter.html":{}}}],["unauthorizedexception",{"_index":1084,"title":{},"body":{"injectables/SecurityService.html":{}}}],["unauthorizedexception('datos",{"_index":1095,"title":{},"body":{"injectables/SecurityService.html":{}}}],["undefined",{"_index":316,"title":{},"body":{"injectables/AccountRepository.html":{},"injectables/CustomerRepository.html":{},"injectables/CustomerService.html":{},"injectables/DepositRepository.html":{},"injectables/TransferRepository.html":{}}}],["unknown",{"_index":1076,"title":{},"body":{"injectables/SecurityService.html":{}}}],["unlicensed",{"_index":1508,"title":{},"body":{"properties.html":{}}}],["unsuscribe",{"_index":705,"title":{},"body":{"injectables/CustomerService.html":{}}}],["unsuscribe(id",{"_index":731,"title":{},"body":{"injectables/CustomerService.html":{}}}],["unsuscribeuser",{"_index":1320,"title":{},"body":{"controllers/UserController.html":{}}}],["unsuscribeuser(@param('id",{"_index":1354,"title":{},"body":{"controllers/UserController.html":{}}}],["unsuscribeuser(id",{"_index":1335,"title":{},"body":{"controllers/UserController.html":{}}}],["up",{"_index":1059,"title":{},"body":{"controllers/SecurityController.html":{}}}],["update",{"_index":241,"title":{},"body":{"injectables/AccountRepository.html":{},"injectables/AccountTypeRepository.html":{},"interfaces/BaseRepositoryInterface.html":{},"injectables/CustomerRepository.html":{},"injectables/DepositRepository.html":{},"injectables/DocumentTypeRepository.html":{},"injectables/TransferRepository.html":{}}}],["update(id",{"_index":294,"title":{},"body":{"injectables/AccountRepository.html":{},"injectables/AccountTypeRepository.html":{},"interfaces/BaseRepositoryInterface.html":{},"injectables/CustomerRepository.html":{},"injectables/DepositRepository.html":{},"injectables/DocumentTypeRepository.html":{},"injectables/TransferRepository.html":{}}}],["updatedcustomer",{"_index":706,"title":{},"body":{"injectables/CustomerService.html":{}}}],["updatedcustomer(id",{"_index":736,"title":{},"body":{"injectables/CustomerService.html":{}}}],["updateuser",{"_index":1321,"title":{},"body":{"controllers/UserController.html":{}}}],["updateuser(id",{"_index":1338,"title":{},"body":{"controllers/UserController.html":{}}}],["url",{"_index":621,"title":{},"body":{"entities/CustomerEntity.html":{}}}],["use",{"_index":1017,"title":{},"body":{"injectables/MiddlewaresMiddleware.html":{},"index.html":{}}}],["use(req",{"_index":1018,"title":{},"body":{"injectables/MiddlewaresMiddleware.html":{}}}],["useclass",{"_index":546,"title":{},"body":{"modules/AppModule.html":{}}}],["useguards",{"_index":79,"title":{},"body":{"controllers/AccountController.html":{},"controllers/TransferController.html":{},"controllers/UserController.html":{}}}],["useguards(guardsguard",{"_index":101,"title":{},"body":{"controllers/AccountController.html":{},"controllers/TransferController.html":{},"controllers/UserController.html":{}}}],["user",{"_index":404,"title":{},"body":{"injectables/AccountService.html":{},"injectables/SecurityService.html":{},"controllers/UserController.html":{}}}],["user.balance",{"_index":406,"title":{},"body":{"injectables/AccountService.html":{}}}],["user.customer.id",{"_index":405,"title":{},"body":{"injectables/AccountService.html":{}}}],["user.document",{"_index":1100,"title":{},"body":{"injectables/SecurityService.html":{}}}],["user.documenttypeid",{"_index":1099,"title":{},"body":{"injectables/SecurityService.html":{}}}],["user.email",{"_index":1090,"title":{},"body":{"injectables/SecurityService.html":{}}}],["user.fullname",{"_index":1101,"title":{},"body":{"injectables/SecurityService.html":{}}}],["user.password",{"_index":1091,"title":{},"body":{"injectables/SecurityService.html":{}}}],["user.phone",{"_index":1102,"title":{},"body":{"injectables/SecurityService.html":{}}}],["usercontroller",{"_index":497,"title":{"controllers/UserController.html":{}},"body":{"modules/AppModule.html":{},"controllers/UserController.html":{},"coverage.html":{}}}],["username",{"_index":536,"title":{},"body":{"modules/AppModule.html":{},"injectables/TypesOrmPostgresConfigService.html":{}}}],["userrepository",{"_index":245,"title":{},"body":{"injectables/AccountRepository.html":{},"injectables/AccountTypeRepository.html":{}}}],["using",{"_index":1486,"title":{},"body":{"index.html":{}}}],["usuario",{"_index":1082,"title":{},"body":{"injectables/SecurityService.html":{},"classes/SignDTO.html":{}}}],["uuid",{"_index":423,"title":{},"body":{"entities/AccountTypeEntity.html":{},"entities/CustomerEntity.html":{},"entities/DepositEntity.html":{},"entities/DocumentTypeEntity.html":{},"entities/TransferEntity.html":{}}}],["v4",{"_index":430,"title":{},"body":{"entities/AccountTypeEntity.html":{},"entities/CustomerEntity.html":{},"entities/DepositEntity.html":{},"entities/DocumentTypeEntity.html":{},"entities/TransferEntity.html":{}}}],["validator",{"_index":154,"title":{},"body":{"classes/AccountDTO.html":{},"classes/CustomerDTO.html":{},"classes/CustomerUpdateDTO.html":{},"classes/DataRangeDTO.html":{},"classes/DepositDTO.html":{},"classes/PaginationDTO.html":{},"classes/SignDTO.html":{},"classes/TransferDTO.html":{},"dependencies.html":{}}}],["valor",{"_index":695,"title":{},"body":{"interfaces/CustomerRepositoryInterface.html":{}}}],["value",{"_index":170,"title":{},"body":{"entities/AccountEntity.html":{},"entities/AccountTypeEntity.html":{},"entities/CustomerEntity.html":{},"entities/DepositEntity.html":{},"entities/DocumentTypeEntity.html":{},"injectables/PipesPipe.html":{},"entities/TransferEntity.html":{},"miscellaneous/variables.html":{}}}],["varchar",{"_index":196,"title":{},"body":{"entities/AccountEntity.html":{},"entities/AccountTypeEntity.html":{},"entities/CustomerEntity.html":{},"entities/DocumentTypeEntity.html":{},"entities/TransferEntity.html":{}}}],["variable",{"_index":1370,"title":{},"body":{"coverage.html":{}}}],["variables",{"_index":1510,"title":{"miscellaneous/variables.html":{}},"body":{"miscellaneous/variables.html":{}}}],["verificar",{"_index":388,"title":{},"body":{"injectables/AccountService.html":{}}}],["verifyamountintobalance",{"_index":352,"title":{},"body":{"injectables/AccountService.html":{}}}],["verifyamountintobalance(accountid",{"_index":386,"title":{},"body":{"injectables/AccountService.html":{}}}],["version",{"_index":1505,"title":{},"body":{"properties.html":{}}}],["void",{"_index":261,"title":{},"body":{"injectables/AccountRepository.html":{},"injectables/AccountService.html":{},"injectables/AccountTypeRepository.html":{},"modules/AppModule.html":{},"interfaces/BaseRepositoryInterface.html":{},"injectables/CustomerRepository.html":{},"controllers/DepositController.html":{},"injectables/DepositRepository.html":{},"injectables/DepositService.html":{},"injectables/DocumentTypeRepository.html":{},"classes/ExceptionFiltersFilter.html":{},"injectables/MiddlewaresMiddleware.html":{},"injectables/TransferRepository.html":{},"injectables/TransferService.html":{},"classes/TypeOrmExceptionFilter.html":{}}}],["watch",{"_index":1456,"title":{},"body":{"index.html":{}}}],["week",{"_index":1465,"title":{},"body":{"index.html":{}}}],["workshop",{"_index":1462,"title":{},"body":{"index.html":{}}}],["xito",{"_index":711,"title":{},"body":{"injectables/CustomerService.html":{}}}],["y",{"_index":188,"title":{},"body":{"entities/AccountEntity.html":{},"interfaces/AccountRepositoryInterface.html":{},"interfaces/AccountTypeRepositoryInterface.html":{},"classes/CustomerDTO.html":{},"entities/CustomerEntity.html":{},"interfaces/CustomerRepositoryInterface.html":{},"injectables/CustomerService.html":{},"classes/CustomerUpdateDTO.html":{},"entities/DepositEntity.html":{},"interfaces/DepositRepositoryInterface.html":{},"injectables/DepositService.html":{},"interfaces/DocumentTypeRepositoryInterface.html":{},"entities/TransferEntity.html":{},"injectables/TransferRepository.html":{},"interfaces/TransferRepositoryInterface.html":{}}}],["ya",{"_index":761,"title":{},"body":{"injectables/CustomerService.html":{},"injectables/SecurityService.html":{}}}],["yes",{"_index":251,"title":{},"body":{"injectables/AccountRepository.html":{},"interfaces/BaseRepositoryInterface.html":{},"injectables/CustomerRepository.html":{},"injectables/DepositRepository.html":{},"injectables/DepositService.html":{},"injectables/TransferRepository.html":{},"injectables/TransferService.html":{}}}],["z])(?=.*[a",{"_index":611,"title":{},"body":{"classes/CustomerDTO.html":{},"classes/CustomerUpdateDTO.html":{}}}],["z]).{8",{"_index":613,"title":{},"body":{"classes/CustomerDTO.html":{},"classes/CustomerUpdateDTO.html":{}}}],["za",{"_index":612,"title":{},"body":{"classes/CustomerDTO.html":{},"classes/CustomerUpdateDTO.html":{}}}],["zoom",{"_index":493,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"controllers/AccountController.html":{"url":"controllers/AccountController.html","title":"controller - AccountController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AccountController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/presentation/controllers/account/account.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                account\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    Async\n                                addBalance\n                            \n                            \n                                    \n                                    Async\n                                amountBalance\n                            \n                            \n                                    \n                                changeAccountType\n                            \n                            \n                                    \n                                changeState\n                            \n                            \n                                    \n                                    \n                                    Async\n                                createAccount\n                            \n                            \n                                    \n                                deleteAccount\n                            \n                            \n                                    \n                                    Async\n                                getAccountByCustomerId\n                            \n                            \n                                    \n                                    \n                                    Async\n                                getAll\n                            \n                            \n                                    \n                                    Async\n                                getBalance\n                            \n                            \n                                    \n                                    \n                                    Async\n                                getBalanceAll\n                            \n                            \n                                    \n                                    Async\n                                getState\n                            \n                            \n                                    \n                                    \n                                removeBalance\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Async\n                        addBalance\n                        \n                    \n                \n            \n            \n                \n                        \n                    addBalance(id: string, body: literal type)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post(':id')@UseGuards(GuardsGuard)\n                \n            \n\n                    \n                        \n                            Defined in src/presentation/controllers/account/account.controller.ts:49\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                body\n                                            \n                                                        literal type\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        amountBalance\n                        \n                    \n                \n            \n            \n                \n                        \n                    amountBalance(id: string, body: literal type)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/account/:id')\n                \n            \n\n                    \n                        \n                            Defined in src/presentation/controllers/account/account.controller.ts:82\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                body\n                                            \n                                                        literal type\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        changeAccountType\n                        \n                    \n                \n            \n            \n                \n                        \n                    changeAccountType(id: string, body: literal type)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Put('accountype/:id')\n                \n            \n\n                    \n                        \n                            Defined in src/presentation/controllers/account/account.controller.ts:104\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                body\n                                            \n                                                        literal type\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         string\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        changeState\n                        \n                    \n                \n            \n            \n                \n                        \n                    changeState(id: string, body: literal type)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Put(':id')\n                \n            \n\n                    \n                        \n                            Defined in src/presentation/controllers/account/account.controller.ts:90\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                body\n                                            \n                                                        literal type\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         string\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Async\n                        createAccount\n                        \n                    \n                \n            \n            \n                \n                        \n                    createAccount(account: AccountDTO)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post()@UseGuards(GuardsGuard)\n                \n            \n\n                    \n                        \n                            Defined in src/presentation/controllers/account/account.controller.ts:43\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                account\n                                            \n                                                            AccountDTO\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        deleteAccount\n                        \n                    \n                \n            \n            \n                \n                        \n                    deleteAccount(id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete(':id')\n                \n            \n\n                    \n                        \n                            Defined in src/presentation/controllers/account/account.controller.ts:113\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         string\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        getAccountByCustomerId\n                        \n                    \n                \n            \n            \n                \n                        \n                    getAccountByCustomerId(id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/customer/:id')\n                \n            \n\n                    \n                        \n                            Defined in src/presentation/controllers/account/account.controller.ts:75\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Async\n                        getAll\n                        \n                    \n                \n            \n            \n                \n                        \n                    getAll()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()@UseGuards(GuardsGuard)\n                \n            \n\n                    \n                        \n                            Defined in src/presentation/controllers/account/account.controller.ts:37\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         Promise\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        getBalance\n                        \n                    \n                \n            \n            \n                \n                        \n                    getBalance(id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('balance/:id')\n                \n            \n\n                    \n                        \n                            Defined in src/presentation/controllers/account/account.controller.ts:25\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Async\n                        getBalanceAll\n                        \n                    \n                \n            \n            \n                \n                        \n                    getBalanceAll(id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('amount/:id')@UseGuards(GuardsGuard)\n                \n            \n\n                    \n                        \n                            Defined in src/presentation/controllers/account/account.controller.ts:31\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        getState\n                        \n                    \n                \n            \n            \n                \n                        \n                    getState(id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('state/:id')\n                \n            \n\n                    \n                        \n                            Defined in src/presentation/controllers/account/account.controller.ts:99\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        removeBalance\n                        \n                    \n                \n            \n            \n                \n                        \n                    removeBalance(id: string, body: literal type)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Put('removebalance/:id')@UseGuards(GuardsGuard)\n                \n            \n\n                    \n                        \n                            Defined in src/presentation/controllers/account/account.controller.ts:60\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                body\n                                            \n                                                        literal type\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         boolean\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Body,\n  Controller,\n  Delete,\n  Get,\n  Param,\n  Post,\n  Put,\n  UseGuards,\n} from '@nestjs/common';\nimport { AccountDTO } from 'src/business/dtos';\nimport { GuardsGuard } from 'src/presentation/guards/guards.guard';\nimport { AccountService } from '../../../business/services';\nimport { CustomerService } from '../../../business/services/customer/customer.service';\nimport { AccountEntity } from '../../../data/persistence/entities';\n\n@Controller('account')\nexport class AccountController {\n  constructor(\n    private readonly accountService: AccountService,\n    private readonly customerService: CustomerService,\n  ) {}\n\n  @Get('balance/:id')\n  async getBalance(@Param('id') id: string): Promise {\n    return await this.accountService.getBalance(id);\n  }\n\n  @Get('amount/:id')\n  @UseGuards(GuardsGuard)\n  async getBalanceAll(@Param('id') id: string): Promise {\n    return await this.accountService.CustomerBalance(id);\n  }\n\n  @Get()\n  @UseGuards(GuardsGuard)\n  async getAll(): Promise {\n    return await this.accountService.findAll();\n  }\n\n  @Post()\n  @UseGuards(GuardsGuard)\n  async createAccount(@Body() account: AccountDTO): Promise {\n    return await this.accountService.createAccount(account);\n  }\n\n  @Post(':id')\n  @UseGuards(GuardsGuard)\n  async addBalance(\n    @Param('id') id: string,\n    @Body() body: { amount: number },\n  ): Promise {\n    if (body.amount  {\n    return await this.accountService.getAccountByCustomerId(id);\n  }\n\n  @Get('/account/:id')\n  async amountBalance(\n    @Param('id') id: string,\n    @Body() body: { amount: number },\n  ): Promise {\n    return await this.accountService.verifyAmountIntoBalance(id, body.amount);\n  }\n\n  @Put(':id')\n  changeState(\n    @Param('id') id: string,\n    @Body() body: { state: boolean },\n  ): string {\n    this.accountService.changeState(id, body.state);\n    return 'estado cambiado';\n  }\n\n  @Get('state/:id')\n  async getState(@Param('id') id: string): Promise {\n    return await this.accountService.getState(id);\n  }\n\n  @Put('accountype/:id')\n  changeAccountType(\n    @Param('id') id: string,\n    @Body() body: { accountTypeId: string },\n  ): string {\n    this.accountService.changeAccountType(id, body.accountTypeId);\n    return 'cuenta cambiada';\n  }\n\n  @Delete(':id')\n  deleteAccount(@Param('id') id: string): string {\n    this.accountService.deleteAccount(id);\n    return 'cuenta eliminada';\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/AccountDTO.html":{"url":"classes/AccountDTO.html","title":"class - AccountDTO","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  AccountDTO\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/business/dtos/account.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                Data Transfer Object para representar una cuenta.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                accountTypeId\n                            \n                            \n                                    \n                                customerId\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        accountTypeId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsUUID()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/business/dtos/account.dto.ts:23\n                        \n                    \n\n            \n                \n                    Identificador único del tipo de cuenta.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        customerId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsUUID()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/business/dtos/account.dto.ts:33\n                        \n                    \n\n            \n                \n                    Identificador único del cliente.\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {\n  IsBoolean,\n  IsDateString,\n  IsNumberString,\n  IsUUID,\n} from 'class-validator';\n\n/**\n * Data Transfer Object para representar una cuenta.\n *\n * @export\n * @class AccountDTO\n */\nexport class AccountDTO {\n  /**\n   * Identificador único del tipo de cuenta.\n   * \n   * @type {string}\n   * @memberof AccountDTO\n   * @decorator IsUUID\n   */\n  @IsUUID()\n  accountTypeId: string;\n\n  /**\n   * Identificador único del cliente.\n   * \n   * @type {string}\n   * @memberof AccountDTO\n   * @decorator IsUUID\n   */\n  @IsUUID()\n  customerId: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/AccountEntity.html":{"url":"entities/AccountEntity.html","title":"entity - AccountEntity","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  AccountEntity\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/data/persistence/entities/account.entity.ts\n        \n\n\n            \n                Description\n            \n            \n                Entidad para la cuenta del cliente\n\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                accountType\n                            \n                            \n                                    \n                                balance\n                            \n                            \n                                    \n                                    \n                                customer\n                            \n                            \n                                    \n                                    Optional\n                                deletedAt\n                            \n                            \n                                    \n                                id\n                            \n                            \n                                    \n                                state\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        accountType\n                        \n                    \n                \n            \n                \n                    \n                        Type :         AccountTypeEntity\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ManyToOne(undefined)@JoinColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/data/persistence/entities/account.entity.ts:48\n                        \n                    \n\n            \n                \n                    Tipo de cuenta\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        balance\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 0\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({name: 'balance', type: 'numeric'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/data/persistence/entities/account.entity.ts:60\n                        \n                    \n\n            \n                \n                    Saldo de la cuenta\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        customer\n                        \n                    \n                \n            \n                \n                    \n                        Type :         CustomerEntity\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ManyToOne(undefined)@JoinColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/data/persistence/entities/account.entity.ts:38\n                        \n                    \n\n            \n                \n                    Cliente asociado a la cuenta\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        deletedAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Date | number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({name: 'deleted_at', type: 'timestamp', nullable: true, select: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/data/persistence/entities/account.entity.ts:86\n                        \n                    \n\n            \n                \n                    Fecha y hora en la que se eliminó la cuenta (opcional)\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Default value : generateID()\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({name: 'id', type: 'varchar', primary: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/data/persistence/entities/account.entity.ts:28\n                        \n                    \n\n            \n                \n                    Identificador único de la cuenta\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        state\n                        \n                    \n                \n            \n                \n                    \n                        Default value : true\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({name: 'state', type: 'boolean'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/data/persistence/entities/account.entity.ts:72\n                        \n                    \n\n            \n                \n                    Estado de la cuenta (activo/inactivo)\n\n                \n            \n\n        \n    \n\n    \n\n\n    \n        import { Column, Entity, JoinColumn, ManyToOne } from 'typeorm';\nimport { AccountTypeEntity, CustomerEntity } from '.';\nimport { AccountModel } from '../../models';\n\n/**\n * Entidad para la cuenta del cliente\n *\n * @export\n * @class AccountEntity\n * @implements {AccountModel}\n */\n@Entity({\n  name: 'account',\n  schema: 'public',\n})\nexport class AccountEntity implements AccountModel {\n  /**\n   * Identificador único de la cuenta\n   *\n   * @type {string}\n   * @memberof AccountEntity\n   */\n  @Column({\n    name: 'id',\n    type: 'varchar',\n    primary: true,\n  })\n  id = generateID();\n\n  /**\n   * Cliente asociado a la cuenta\n   *\n   * @type {CustomerEntity}\n   * @memberof AccountEntity\n   */\n  @ManyToOne(() => CustomerEntity)\n  @JoinColumn()\n  customer: CustomerEntity;\n\n  /**\n   * Tipo de cuenta\n   *\n   * @type {AccountTypeEntity}\n   * @memberof AccountEntity\n   */\n  @ManyToOne(() => AccountTypeEntity)\n  @JoinColumn()\n  accountType: AccountTypeEntity;\n\n  /**\n   * Saldo de la cuenta\n   *\n   * @type {number}\n   * @memberof AccountEntity\n   */\n  @Column({\n    name: 'balance',\n    type: 'numeric',\n  })\n  balance = 0;\n\n  /**\n   * Estado de la cuenta (activo/inactivo)\n   *\n   * @type {boolean}\n   * @memberof AccountEntity\n   */\n  @Column({\n    name: 'state',\n    type: 'boolean',\n  })\n  state = true;\n\n  /**\n   * Fecha y hora en la que se eliminó la cuenta (opcional)\n   *\n   * @type {(Date | number)}\n   * @memberof AccountEntity\n   */\n  @Column({\n    name: 'deleted_at',\n    type: 'timestamp',\n    nullable: true,\n    select: false,\n  })\n  deletedAt?: Date | number;\n}\n\n/**\n * Genera un identificador único para la cuenta\n *\n * @returns {string} ID generado\n */\nfunction generateID(): string {\n  const bank = process.env.BANK_ID ?? '';\n  return '20000' + bank + Math.floor(Math.random() * 10000);\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/AccountModel.html":{"url":"interfaces/AccountModel.html","title":"interface - AccountModel","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  AccountModel\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/data/models/account.model.ts\n        \n\n\n            \n                Description\n            \n            \n                Interfaz para el modelo de cuenta\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            accountType\n                                        \n                                \n                                \n                                        \n                                            balance\n                                        \n                                \n                                \n                                        \n                                            customer\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            deletedAt\n                                        \n                                \n                                \n                                        \n                                            id\n                                        \n                                \n                                \n                                        \n                                            state\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        accountType\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        accountType:         AccountTypeModel\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         AccountTypeModel\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        balance\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        balance:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        customer\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        customer:         CustomerModel\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         CustomerModel\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        deletedAt\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        deletedAt:     Date | number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     Date | number\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        id\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        id:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        state\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        state:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { CustomerModel } from '.';\nimport { AccountTypeModel } from '.';\n\n/**\n * Interfaz para el modelo de cuenta\n *\n * @export\n * @interface AccountModel\n */\nexport interface AccountModel {\n  id: string;\n  customer: CustomerModel;\n  accountType: AccountTypeModel;\n  balance: number;\n  state: boolean;\n  deletedAt?: Date | number;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AccountRepository.html":{"url":"injectables/AccountRepository.html","title":"injectable - AccountRepository","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AccountRepository\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/data/persistence/repositories/account.repository.ts\n        \n\n\n            \n                Description\n            \n            \n                Repositorio para la entidad de cuenta.\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                delete\n                            \n                            \n                                findAll\n                            \n                            \n                                findByAccountType\n                            \n                            \n                                findByCustomer\n                            \n                            \n                                findByState\n                            \n                            \n                                findOneById\n                            \n                            \n                                    Private\n                                hardDelete\n                            \n                            \n                                register\n                            \n                            \n                                    Private\n                                    Async\n                                softDelete\n                            \n                            \n                                    Async\n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(userRepository: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/data/persistence/repositories/account.repository.ts:15\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        userRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        delete\n                        \n                    \n                \n            \n            \n                \ndelete(id: string, soft?: boolean)\n                \n            \n\n\n                    \n                        \n                            Defined in src/data/persistence/repositories/account.repository.ts:80\n                        \n                    \n\n\n            \n                \n                        Elimina una cuenta.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    ID de la cuenta a eliminar\n\n                                            \n                                        \n                                        \n                                                soft\n                                            \n                                                            boolean\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                            \n                                                    Indica si la eliminación debe ser suave (borrado lógico) o no\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findAll\n                        \n                    \n                \n            \n            \n                \nfindAll()\n                \n            \n\n\n                    \n                        \n                            Defined in src/data/persistence/repositories/account.repository.ts:111\n                        \n                    \n\n\n            \n                \n                        Encuentra todas las cuentas.\n\n\n                        \n                            Returns :         Promise\n\n                        \n                            \n                                Promesa que resuelve con un arreglo de todas las cuentas\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findByAccountType\n                        \n                    \n                \n            \n            \n                \nfindByAccountType(accountTypeId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/data/persistence/repositories/account.repository.ts:152\n                        \n                    \n\n\n            \n                \n                        Encuentra cuentas por el ID de su tipo de cuenta.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                accountTypeId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    ID del tipo de cuenta asociado a las cuentas\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                Promesa que resuelve con un arreglo de cuentas encontradas\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findByCustomer\n                        \n                    \n                \n            \n            \n                \nfindByCustomer(customerId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/data/persistence/repositories/account.repository.ts:137\n                        \n                    \n\n\n            \n                \n                        Encuentra cuentas por el ID de su cliente.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                customerId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    ID del cliente asociado a las cuentas\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                Promesa que resuelve con un arreglo de cuentas encontradas\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findByState\n                        \n                    \n                \n            \n            \n                \nfindByState(state: boolean)\n                \n            \n\n\n                    \n                        \n                            Defined in src/data/persistence/repositories/account.repository.ts:125\n                        \n                    \n\n\n            \n                \n                        Encuentra cuentas por su estado.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                state\n                                            \n                                                            boolean\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Estado de las cuentas a buscar\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                Promesa que resuelve con un arreglo de cuentas encontradas\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findOneById\n                        \n                    \n                \n            \n            \n                \nfindOneById(id: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/data/persistence/repositories/account.repository.ts:56\n                        \n                    \n\n\n            \n                \n                        Encuentra una cuenta por su ID.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    ID de la cuenta a buscar\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                Promesa que resuelve con la cuenta encontrada\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        hardDelete\n                        \n                    \n                \n            \n            \n                \n                        \n                    hardDelete(id: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/data/persistence/repositories/account.repository.ts:89\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        register\n                        \n                    \n                \n            \n            \n                \nregister(entity: AccountEntity)\n                \n            \n\n\n                    \n                        \n                            Defined in src/data/persistence/repositories/account.repository.ts:28\n                        \n                    \n\n\n            \n                \n                        Registra una nueva cuenta.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                entity\n                                            \n                                                            AccountEntity\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Entidad de la cuenta a registrar\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                Promesa que resuelve con la cuenta registrada\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Async\n                        softDelete\n                        \n                    \n                \n            \n            \n                \n                        \n                    softDelete(id: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/data/persistence/repositories/account.repository.ts:93\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        update\n                        \n                    \n                \n            \n            \n                \n                        \n                    update(id: string, entity: AccountEntity)\n                \n            \n\n\n                    \n                        \n                            Defined in src/data/persistence/repositories/account.repository.ts:40\n                        \n                    \n\n\n            \n                \n                        Actualiza una cuenta existente.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    ID de la cuenta a actualizar\n\n                                            \n                                        \n                                        \n                                                entity\n                                            \n                                                            AccountEntity\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Nuevos datos de la cuenta\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                Promesa que resuelve con la cuenta actualizada\n\n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, NotFoundException } from '@nestjs/common';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { Repository } from 'typeorm';\nimport { AccountEntity } from '../entities';\nimport { AccountRepositoryInterface } from './interfaces/';\n\n/**\n * Repositorio para la entidad de cuenta.\n *\n * @export\n * @class AccountRepository\n * @implements {AccountRepositoryInterface} Interfaz del repositorio de cuentas\n */\n@Injectable()\nexport class AccountRepository implements AccountRepositoryInterface {\n  constructor(\n    @InjectRepository(AccountEntity)\n    private readonly userRepository: Repository,\n  ) {}\n\n  /**\n   * Registra una nueva cuenta.\n   *\n   * @param {AccountEntity} entity Entidad de la cuenta a registrar\n   * @returns {Promise} Promesa que resuelve con la cuenta registrada\n   * @memberof AccountRepository\n   */\n  register(entity: AccountEntity): Promise {\n    return this.userRepository.save(entity);\n  }\n\n  /**\n   * Actualiza una cuenta existente.\n   *\n   * @param {string} id ID de la cuenta a actualizar\n   * @param {AccountEntity} entity Nuevos datos de la cuenta\n   * @returns {Promise} Promesa que resuelve con la cuenta actualizada\n   * @memberof AccountRepository\n   */\n  async update(id: string, entity: AccountEntity): Promise {\n    return this.userRepository.update(id, entity).then((result) => {\n      if (result.affected === 0) {\n        throw new NotFoundException(`El Id: ${id} no existe en la base de datos`);\n      }\n      return entity;\n    });\n  }\n\n  /**\n   * Encuentra una cuenta por su ID.\n   *\n   * @param {string} id ID de la cuenta a buscar\n   * @returns {Promise} Promesa que resuelve con la cuenta encontrada\n   * @memberof AccountRepository\n   */\n  findOneById(id: string): Promise {\n    const deletedAt = undefined;\n    return this.userRepository\n      .findOne({\n        where: { id, deletedAt },\n      })\n      .then((result) => {\n        if (result) {\n          return result;\n        } else {\n          throw new NotFoundException(\n            `El Id: ${id} no existe en la base de datos`,\n          );\n        }\n      });\n  }\n\n  /**\n   * Elimina una cuenta.\n   *\n   * @param {string} id ID de la cuenta a eliminar\n   * @param {boolean} [soft] Indica si la eliminación debe ser suave (borrado lógico) o no\n   * @memberof AccountRepository\n   */\n  delete(id: string, soft?: boolean): void {\n    this.findOneById(id);\n    if (soft || soft === undefined) {\n      this.softDelete(id);\n    } else {\n      this.hardDelete(id);\n    }\n  }\n\n  private hardDelete(id: string): void {\n    this.userRepository.delete(id);\n  }\n\n  private async softDelete(id: string) {\n    let newAccount = new AccountEntity();\n    const account = await this.findOneById(id);\n    newAccount = {\n      ...newAccount,\n      ...account,\n      id: account.id,\n    };\n    newAccount.deletedAt = Date.now();\n    this.update(account.id, newAccount);\n  }\n\n  /**\n   * Encuentra todas las cuentas.\n   *\n   * @returns {Promise} Promesa que resuelve con un arreglo de todas las cuentas\n   * @memberof AccountRepository\n   */\n  findAll(): Promise {\n    const deletedAt = undefined;\n    return this.userRepository.find({\n      where: { deletedAt },\n    });\n  }\n\n  /**\n   * Encuentra cuentas por su estado.\n   *\n   * @param {boolean} state Estado de las cuentas a buscar\n   * @returns {Promise} Promesa que resuelve con un arreglo de cuentas encontradas\n   * @memberof AccountRepository\n   */\n  findByState(state: boolean): Promise {\n    const deletedAt = undefined;\n    return this.userRepository.find({ where: { state, deletedAt } });\n  }\n\n  /**\n   * Encuentra cuentas por el ID de su cliente.\n   *\n   * @param {string} customerId ID del cliente asociado a las cuentas\n   * @returns {Promise} Promesa que resuelve con un arreglo de cuentas encontradas\n   * @memberof AccountRepository\n   */\n  findByCustomer(customerId: string): Promise {\n    const deletedAt = undefined;\n    return this.userRepository.find({\n      where: { customer: { id: customerId }, deletedAt },\n      relations: ['accountType'],\n    });\n  }\n\n  /**\n   * Encuentra cuentas por el ID de su tipo de cuenta.\n   *\n   * @param {string} accountTypeId ID del tipo de cuenta asociado a las cuentas\n   * @returns {Promise} Promesa que resuelve con un arreglo de cuentas encontradas\n   * @memberof AccountRepository\n   */\n  findByAccountType(accountTypeId: string): Promise {\n    const deletedAt = undefined;\n    return this.userRepository.find({\n      where: { accountType: { id: accountTypeId }, deletedAt },\n    });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/AccountRepositoryInterface.html":{"url":"interfaces/AccountRepositoryInterface.html","title":"interface - AccountRepositoryInterface","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  AccountRepositoryInterface\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/data/persistence/repositories/interfaces/account-repository.interface.ts\n        \n\n\n            \n                Description\n            \n            \n                Interfaz para el repositorio de cuentas.\nExtiende la interfaz base de repositorio y define métodos adicionales específicos para las cuentas.\n\n            \n\n            \n                Extends\n            \n            \n                            BaseRepositoryInterface\n            \n\n        \n            Index\n            \n                \n                    \n                        \n                            Methods\n                        \n                    \n                    \n                        \n                            \n                                \n                                    \n                                        findByAccountType\n                                    \n                                \n                                \n                                    \n                                        findByCustomer\n                                    \n                                \n                                \n                                    \n                                        findByState\n                                    \n                                \n                            \n                        \n                    \n                \n            \n        \n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        findByAccountType\n                        \n                    \n                \n            \n            \n                \nfindByAccountType(accountTypeId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/data/persistence/repositories/interfaces/account-repository.interface.ts:39\n                        \n                    \n\n\n            \n                \n                        Encuentra cuentas por tipo de cuenta.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                accountTypeId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Identificador del tipo de cuenta\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                Promesa que resuelve con un arreglo de cuentas que tienen el tipo de cuenta especificado\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findByCustomer\n                        \n                    \n                \n            \n            \n                \nfindByCustomer(customerId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/data/persistence/repositories/interfaces/account-repository.interface.ts:30\n                        \n                    \n\n\n            \n                \n                        Encuentra cuentas por cliente.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                customerId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Identificador del cliente asociado a las cuentas\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                Promesa que resuelve con un arreglo de cuentas asociadas al cliente especificado\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findByState\n                        \n                    \n                \n            \n            \n                \nfindByState(state: boolean)\n                \n            \n\n\n                    \n                        \n                            Defined in src/data/persistence/repositories/interfaces/account-repository.interface.ts:21\n                        \n                    \n\n\n            \n                \n                        Encuentra cuentas por estado.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                state\n                                            \n                                                            boolean\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Estado de la cuenta a buscar\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                Promesa que resuelve con un arreglo de cuentas que coinciden con el estado especificado\n\n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { AccountEntity } from '../../entities';\nimport { BaseRepositoryInterface } from './base/';\n\n/**\n * Interfaz para el repositorio de cuentas.\n *\n * Extiende la interfaz base de repositorio y define métodos adicionales específicos para las cuentas.\n *\n * @export\n * @interface AccountRepositoryInterface\n * @extends {BaseRepositoryInterface} Interfaz base de repositorio para cuentas\n */\nexport interface AccountRepositoryInterface extends BaseRepositoryInterface {\n  /**\n   * Encuentra cuentas por estado.\n   *\n   * @param {boolean} state Estado de la cuenta a buscar\n   * @returns {Promise} Promesa que resuelve con un arreglo de cuentas que coinciden con el estado especificado\n   * @memberof AccountRepositoryInterface\n   */\n  findByState(state: boolean): Promise;\n\n  /**\n   * Encuentra cuentas por cliente.\n   *\n   * @param {string} customerId Identificador del cliente asociado a las cuentas\n   * @returns {Promise} Promesa que resuelve con un arreglo de cuentas asociadas al cliente especificado\n   * @memberof AccountRepositoryInterface\n   */\n  findByCustomer(customerId: string): Promise;\n\n  /**\n   * Encuentra cuentas por tipo de cuenta.\n   *\n   * @param {string} accountTypeId Identificador del tipo de cuenta\n   * @returns {Promise} Promesa que resuelve con un arreglo de cuentas que tienen el tipo de cuenta especificado\n   * @memberof AccountRepositoryInterface\n   */\n  findByAccountType(accountTypeId: string): Promise;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AccountService.html":{"url":"injectables/AccountService.html","title":"injectable - AccountService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AccountService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/business/services/account/account.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                addBalance\n                            \n                            \n                                    Async\n                                changeAccountType\n                            \n                            \n                                    Async\n                                changeState\n                            \n                            \n                                    Async\n                                createAccount\n                            \n                            \n                                    Async\n                                CustomerBalance\n                            \n                            \n                                deleteAccount\n                            \n                            \n                                    Async\n                                findAll\n                            \n                            \n                                    Async\n                                getAccountByCustomerId\n                            \n                            \n                                    Async\n                                getAccountType\n                            \n                            \n                                    Async\n                                getBalance\n                            \n                            \n                                    Async\n                                getState\n                            \n                            \n                                    Async\n                                removeBalance\n                            \n                            \n                                    Async\n                                verifyAmountIntoBalance\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(accountRepository: AccountRepository, accountTypeRepository: AccountTypeRepository, customerRepository: CustomerRepository)\n                    \n                \n                        \n                            \n                                Defined in src/business/services/account/account.service.ts:15\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        accountRepository\n                                                  \n                                                        \n                                                                        AccountRepository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        accountTypeRepository\n                                                  \n                                                        \n                                                                        AccountTypeRepository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        customerRepository\n                                                  \n                                                        \n                                                                        CustomerRepository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        addBalance\n                        \n                    \n                \n            \n            \n                \n                        \n                    addBalance(accountId: string, amount: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/business/services/account/account.service.ts:78\n                        \n                    \n\n\n            \n                \n                        Agregar balance a una cuenta\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                accountId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                amount\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        changeAccountType\n                        \n                    \n                \n            \n            \n                \n                        \n                    changeAccountType(accountId: string, accountTypeId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/business/services/account/account.service.ts:180\n                        \n                    \n\n\n            \n                \n                        Cambiar el tipo de cuenta a una cuenta\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                accountId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                accountTypeId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                {AccountTypeEntity}\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        changeState\n                        \n                    \n                \n            \n            \n                \n                        \n                    changeState(accountId: string, state: boolean)\n                \n            \n\n\n                    \n                        \n                            Defined in src/business/services/account/account.service.ts:148\n                        \n                    \n\n\n            \n                \n                        Cambiar el estado de una cuenta\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                accountId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                state\n                                            \n                                                            boolean\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        createAccount\n                        \n                    \n                \n            \n            \n                \n                        \n                    createAccount(account: AccountDTO)\n                \n            \n\n\n                    \n                        \n                            Defined in src/business/services/account/account.service.ts:29\n                        \n                    \n\n\n            \n                \n                        Crear una cuenta\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                account\n                                            \n                                                            AccountDTO\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                {AccountEntity}\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        CustomerBalance\n                        \n                    \n                \n            \n            \n                \n                        \n                    CustomerBalance(id: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/business/services/account/account.service.ts:40\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        deleteAccount\n                        \n                    \n                \n            \n            \n                \ndeleteAccount(accountId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/business/services/account/account.service.ts:204\n                        \n                    \n\n\n            \n                \n                        Borrar una cuenta\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                accountId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        findAll\n                        \n                    \n                \n            \n            \n                \n                        \n                    findAll()\n                \n            \n\n\n                    \n                        \n                            Defined in src/business/services/account/account.service.ts:67\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         Promise\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        getAccountByCustomerId\n                        \n                    \n                \n            \n            \n                \n                        \n                    getAccountByCustomerId(customerId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/business/services/account/account.service.ts:63\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                customerId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        getAccountType\n                        \n                    \n                \n            \n            \n                \n                        \n                    getAccountType(accountId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/business/services/account/account.service.ts:162\n                        \n                    \n\n\n            \n                \n                        Obtener el tipo de cuenta de una cuenta\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                accountId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                {AccountTypeEntity}\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        getBalance\n                        \n                    \n                \n            \n            \n                \n                        \n                    getBalance(accountId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/business/services/account/account.service.ts:54\n                        \n                    \n\n\n            \n                \n                        Obtener el balance de una cuenta\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                accountId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                {number}\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        getState\n                        \n                    \n                \n            \n            \n                \n                        \n                    getState(accountId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/business/services/account/account.service.ts:137\n                        \n                    \n\n\n            \n                \n                        Obtener el estado de una cuenta\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                accountId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                {boolean}\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        removeBalance\n                        \n                    \n                \n            \n            \n                \n                        \n                    removeBalance(accountId: string, amount: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/business/services/account/account.service.ts:95\n                        \n                    \n\n\n            \n                \n                        Remover balance de una cuenta\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                accountId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                amount\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        verifyAmountIntoBalance\n                        \n                    \n                \n            \n            \n                \n                        \n                    verifyAmountIntoBalance(accountId: string, amount: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/business/services/account/account.service.ts:115\n                        \n                    \n\n\n            \n                \n                        Verificar la disponibilidad de un monto a retirar en una cuenta\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                accountId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                amount\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                {boolean}\n\n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { ConflictException } from '@nestjs/common/exceptions';\nimport { AccountDTO } from 'src/business/dtos';\nimport {\n  AccountEntity,\n  AccountTypeEntity,\n} from '../../../data/persistence/entities';\nimport {\n  AccountRepository,\n  AccountTypeRepository,\n  CustomerRepository,\n} from '../../../data/persistence/repositories';\n\n@Injectable()\nexport class AccountService {\n  constructor(\n    private readonly accountRepository: AccountRepository,\n    private readonly accountTypeRepository: AccountTypeRepository,\n    private readonly customerRepository: CustomerRepository,\n  ) {}\n\n  /**\n   * Crear una cuenta\n   *\n   * @param {AccountModel} account\n   * @return {*}  {AccountEntity}\n   * @memberof AccountService\n   */\n  async createAccount(account: AccountDTO): Promise {\n    const newAccount = new AccountEntity();\n    newAccount.customer = await this.customerRepository.findOneById(\n      account.customerId,\n    );\n    newAccount.accountType = await this.accountTypeRepository.findOneById(\n      account.accountTypeId,\n    );\n    return this.accountRepository.register(newAccount);\n  }\n\n  async CustomerBalance(id: string): Promise {\n    const array = (await this.accountRepository.findAll()).filter(\n      (user) => user.customer.id === id && user.balance > 0,\n    );\n    return array.length  {\n    if (!this.getState(accountId)) {\n      throw new ConflictException(`Cuenta desactivada`);\n    }\n    let newAccount = new AccountEntity();\n    newAccount = await this.accountRepository.findOneById(accountId);\n    return newAccount.balance;\n  }\n\n  async getAccountByCustomerId(customerId: string): Promise {\n    return await this.accountRepository.findByCustomer(customerId);\n  }\n\n  async findAll(): Promise {\n    return await this.accountRepository.findAll();\n  }\n\n  /**\n   * Agregar balance a una cuenta\n   *\n   * @param {string} accountId\n   * @param {number} amount\n   * @memberof AccountService\n   */\n  async addBalance(accountId: string, amount: number) {\n    if (!this.getState(accountId)) {\n      throw new ConflictException(`Cuenta desactivada`);\n    }\n    let newAccount = new AccountEntity();\n    newAccount = await this.accountRepository.findOneById(accountId);\n    newAccount.balance += amount;\n    this.accountRepository.update(accountId, newAccount);\n  }\n\n  /**\n   * Remover balance de una cuenta\n   *\n   * @param {string} accountId\n   * @param {number} amount\n   * @memberof AccountService\n   */\n  async removeBalance(accountId: string, amount: number) {\n    if (!this.getState(accountId)) {\n      throw new ConflictException(`Cuenta desactivada`);\n    }\n    if (await this.verifyAmountIntoBalance(accountId, amount)) {\n      let newAccount = new AccountEntity();\n      newAccount = await this.accountRepository.findOneById(accountId);\n      newAccount.balance -= Number(amount);\n      this.accountRepository.update(accountId, newAccount);\n    }\n  }\n\n  /**\n   * Verificar la disponibilidad de un monto a retirar en una cuenta\n   *\n   * @param {string} accountId\n   * @param {number} amount\n   * @return {*}  {boolean}\n   * @memberof AccountService\n   */\n  async verifyAmountIntoBalance(\n    accountId: string,\n    amount: number,\n  ): Promise {\n    if (!this.getState(accountId)) {\n      throw new ConflictException(`Cuenta desactivada`);\n    }\n    let newAccount = new AccountEntity();\n    newAccount = await this.accountRepository.findOneById(accountId);\n    if (newAccount.balance  {\n    return (await this.accountRepository.findOneById(accountId)).state;\n  }\n\n  /**\n   * Cambiar el estado de una cuenta\n   *\n   * @param {string} accountId\n   * @param {boolean} state\n   * @memberof AccountService\n   */\n  async changeState(accountId: string, state: boolean) {\n    let newAccount = new AccountEntity();\n    newAccount = await this.accountRepository.findOneById(accountId);\n    newAccount.state = state;\n    this.accountRepository.update(accountId, newAccount);\n  }\n\n  /**\n   * Obtener el tipo de cuenta de una cuenta\n   *\n   * @param {string} accountId\n   * @return {*}  {AccountTypeEntity}\n   * @memberof AccountService\n   */\n  async getAccountType(accountId: string): Promise {\n    if (!this.getState(accountId)) {\n      throw new ConflictException(`Cuenta desactivada`);\n    }\n    let newAccount = new AccountEntity();\n    newAccount = await this.accountRepository.findOneById(accountId);\n    const AccountTypeEntity = newAccount.accountType;\n    return AccountTypeEntity;\n  }\n\n  /**\n   * Cambiar el tipo de cuenta a una cuenta\n   *\n   * @param {string} accountId\n   * @param {string} accountTypeId\n   * @return {*}  {AccountTypeEntity}\n   * @memberof AccountService\n   */\n  async changeAccountType(\n    accountId: string,\n    accountTypeId: string,\n  ): Promise {\n    if (!this.getState(accountId)) {\n      throw new ConflictException(`Cuenta desactivada`);\n    }\n    let newAccount = new AccountEntity();\n    newAccount = await this.accountRepository.findOneById(accountId);\n    const accountType = await this.accountTypeRepository.findOneById(\n      accountTypeId,\n    );\n    newAccount.accountType = accountType;\n\n    return (await this.accountRepository.update(accountId, newAccount))\n      .accountType;\n  }\n\n  /**\n   * Borrar una cuenta\n   *\n   * @param {string} accountId\n   * @memberof AccountService\n   */\n  deleteAccount(accountId: string): void {\n    if (!this.getState(accountId)) {\n      throw new ConflictException(`Cuenta desactivada`);\n    }\n    this.accountRepository.delete(accountId);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/AccountTypeEntity.html":{"url":"entities/AccountTypeEntity.html","title":"entity - AccountTypeEntity","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  AccountTypeEntity\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/data/persistence/entities/account-type.entity.ts\n        \n\n\n            \n                Description\n            \n            \n                Entidad para el tipo de cuenta\n\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                id\n                            \n                            \n                                    \n                                name\n                            \n                            \n                                    \n                                state\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Default value : uuid()\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({name: 'id', type: 'uuid', primary: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/data/persistence/entities/account-type.entity.ts:28\n                        \n                    \n\n            \n                \n                    Identificador único del tipo de cuenta\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({name: 'name', type: 'varchar', length: 50})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/data/persistence/entities/account-type.entity.ts:41\n                        \n                    \n\n            \n                \n                    Nombre del tipo de cuenta\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        state\n                        \n                    \n                \n            \n                \n                    \n                        Default value : true\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({name: 'state', type: 'boolean'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/data/persistence/entities/account-type.entity.ts:53\n                        \n                    \n\n            \n                \n                    Estado del tipo de cuenta (activo/inactivo)\n\n                \n            \n\n        \n    \n\n    \n\n\n    \n        import { Column, Entity } from 'typeorm';\nimport { v4 as uuid } from 'uuid';\nimport { AccountTypeModel } from '../../models';\n\n/**\n * Entidad para el tipo de cuenta\n *\n * @export\n * @class AccountTypeEntity\n * @implements {AccountTypeModel}\n */\n@Entity({\n  name: 'account_type',\n  schema: 'public',\n})\nexport class AccountTypeEntity implements AccountTypeModel {\n  /**\n   * Identificador único del tipo de cuenta\n   *\n   * @type {string}\n   * @memberof AccountTypeEntity\n   */\n  @Column({\n    name: 'id',\n    type: 'uuid',\n    primary: true,\n  })\n  id = uuid();\n\n  /**\n   * Nombre del tipo de cuenta\n   *\n   * @type {string}\n   * @memberof AccountTypeEntity\n   */\n  @Column({\n    name: 'name',\n    type: 'varchar',\n    length: 50,\n  })\n  name: string;\n\n  /**\n   * Estado del tipo de cuenta (activo/inactivo)\n   *\n   * @type {boolean}\n   * @memberof AccountTypeEntity\n   */\n  @Column({\n    name: 'state',\n    type: 'boolean',\n  })\n  state = true;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/AccountTypeModel.html":{"url":"interfaces/AccountTypeModel.html","title":"interface - AccountTypeModel","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  AccountTypeModel\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/data/models/account-type.mode.ts\n        \n\n\n            \n                Description\n            \n            \n                Interfaz para el modelo de tipo de cuenta\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            id\n                                        \n                                \n                                \n                                        \n                                            name\n                                        \n                                \n                                \n                                        \n                                            state\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        id\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        id:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        name\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        name:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        state\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        state:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export interface AccountTypeModel {\n  id: string;\n  name: string;\n  state: boolean;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AccountTypeRepository.html":{"url":"injectables/AccountTypeRepository.html","title":"injectable - AccountTypeRepository","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AccountTypeRepository\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/data/persistence/repositories/account-type.repository.ts\n        \n\n\n            \n                Description\n            \n            \n                Repositorio para la entidad de tipos de cuenta.\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                delete\n                            \n                            \n                                findAll\n                            \n                            \n                                findByName\n                            \n                            \n                                findByState\n                            \n                            \n                                    Async\n                                findOneById\n                            \n                            \n                                register\n                            \n                            \n                                    Async\n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(userRepository: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/data/persistence/repositories/account-type.repository.ts:15\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        userRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        delete\n                        \n                    \n                \n            \n            \n                \ndelete(id: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/data/persistence/repositories/account-type.repository.ts:81\n                        \n                    \n\n\n            \n                \n                        Elimina un tipo de cuenta.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    ID del tipo de cuenta a eliminar\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findAll\n                        \n                    \n                \n            \n            \n                \nfindAll()\n                \n            \n\n\n                    \n                        \n                            Defined in src/data/persistence/repositories/account-type.repository.ts:40\n                        \n                    \n\n\n            \n                \n                        Encuentra todos los tipos de cuenta.\n\n\n                        \n                            Returns :         Promise\n\n                        \n                            \n                                Promesa que resuelve con un arreglo de todos los tipos de cuenta\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findByName\n                        \n                    \n                \n            \n            \n                \nfindByName(name: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/data/persistence/repositories/account-type.repository.ts:130\n                        \n                    \n\n\n            \n                \n                        Encuentra tipos de cuenta por su nombre.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                name\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Nombre de los tipos de cuenta a buscar\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                Promesa que resuelve con un arreglo de tipos de cuenta encontrados\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findByState\n                        \n                    \n                \n            \n            \n                \nfindByState(state: boolean)\n                \n            \n\n\n                    \n                        \n                            Defined in src/data/persistence/repositories/account-type.repository.ts:119\n                        \n                    \n\n\n            \n                \n                        Encuentra tipos de cuenta por su estado.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                state\n                                            \n                                                            boolean\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Estado de los tipos de cuenta a buscar\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                Promesa que resuelve con un arreglo de tipos de cuenta encontrados\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        findOneById\n                        \n                    \n                \n            \n            \n                \n                        \n                    findOneById(id: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/data/persistence/repositories/account-type.repository.ts:96\n                        \n                    \n\n\n            \n                \n                        Encuentra un tipo de cuenta por su ID.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    ID del tipo de cuenta a buscar\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                Promesa que resuelve con el tipo de cuenta encontrado\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        register\n                        \n                    \n                \n            \n            \n                \nregister(entity: AccountTypeEntity)\n                \n            \n\n\n                    \n                        \n                            Defined in src/data/persistence/repositories/account-type.repository.ts:51\n                        \n                    \n\n\n            \n                \n                        Registra un nuevo tipo de cuenta.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                entity\n                                            \n                                                            AccountTypeEntity\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Entidad del tipo de cuenta a registrar\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                Promesa que resuelve con el tipo de cuenta registrado\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        update\n                        \n                    \n                \n            \n            \n                \n                        \n                    update(id: string, entity: AccountTypeEntity)\n                \n            \n\n\n                    \n                        \n                            Defined in src/data/persistence/repositories/account-type.repository.ts:63\n                        \n                    \n\n\n            \n                \n                        Actualiza un tipo de cuenta existente.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    ID del tipo de cuenta a actualizar\n\n                                            \n                                        \n                                        \n                                                entity\n                                            \n                                                            AccountTypeEntity\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Nuevos datos del tipo de cuenta\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                Promesa que resuelve con el tipo de cuenta actualizado\n\n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, NotFoundException } from '@nestjs/common';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { Repository } from 'typeorm';\nimport { AccountTypeEntity } from '../entities/account-type.entity';\nimport { AccountTypeRepositoryInterface } from './interfaces/';\n\n/**\n * Repositorio para la entidad de tipos de cuenta.\n *\n * @export\n * @class AccountTypeRepository\n * @implements {AccountTypeRepositoryInterface} Interfaz del repositorio de tipos de cuenta\n */\n@Injectable()\nexport class AccountTypeRepository implements AccountTypeRepositoryInterface {\n  constructor(\n    @InjectRepository(AccountTypeEntity)\n    private readonly userRepository: Repository,\n  ) {\n    // Se registran algunos tipos de cuenta por defecto al inicializar el repositorio\n    this.register({\n      id: 'ab27c9ac-a01c-4c22-a6d6-ce5ab3b79185',\n      name: 'Cuenta de ahorros',\n      state: true,\n    });\n\n    this.register({\n      id: '10b6c590-85fa-4621-b85a-4021e882c080',\n      name: 'Cuenta corriente',\n      state: true,\n    });\n  }\n\n  /**\n   * Encuentra todos los tipos de cuenta.\n   *\n   * @returns {Promise} Promesa que resuelve con un arreglo de todos los tipos de cuenta\n   * @memberof AccountTypeRepository\n   */\n  findAll(): Promise {\n    return this.userRepository.find();\n  }\n\n  /**\n   * Registra un nuevo tipo de cuenta.\n   *\n   * @param {AccountTypeEntity} entity Entidad del tipo de cuenta a registrar\n   * @returns {Promise} Promesa que resuelve con el tipo de cuenta registrado\n   * @memberof AccountTypeRepository\n   */\n  register(entity: AccountTypeEntity): Promise {\n    return this.userRepository.save(entity);\n  }\n\n  /**\n   * Actualiza un tipo de cuenta existente.\n   *\n   * @param {string} id ID del tipo de cuenta a actualizar\n   * @param {AccountTypeEntity} entity Nuevos datos del tipo de cuenta\n   * @returns {Promise} Promesa que resuelve con el tipo de cuenta actualizado\n   * @memberof AccountTypeRepository\n   */\n  async update(\n    id: string,\n    entity: AccountTypeEntity,\n  ): Promise {\n    return this.userRepository.update(id, entity).then((result) => {\n      if (result.affected === 0) {\n        throw new NotFoundException(`El Id: ${id} no existe en la base de datos`);\n      }\n      return entity;\n    });\n  }\n\n  /**\n   * Elimina un tipo de cuenta.\n   *\n   * @param {string} id ID del tipo de cuenta a eliminar\n   * @memberof AccountTypeRepository\n   */\n  delete(id: string): void {\n    this.userRepository.delete(id).then((result) => {\n      if (result.affected === 0) {\n        throw new NotFoundException(`El Id: ${id} no existe en la base de datos`);\n      }\n    });\n  }\n\n  /**\n   * Encuentra un tipo de cuenta por su ID.\n   *\n   * @param {string} id ID del tipo de cuenta a buscar\n   * @returns {Promise} Promesa que resuelve con el tipo de cuenta encontrado\n   * @memberof AccountTypeRepository\n   */\n  async findOneById(id: string): Promise {\n    return this.userRepository\n      .findOne({\n        where: { id },\n      })\n      ?.then((result) => {\n        if (result) {\n          return result;\n        } else {\n          throw new NotFoundException(\n            `El Id: ${id} no existe en la base de datos`,\n          );\n        }\n      });\n  }\n\n  /**\n   * Encuentra tipos de cuenta por su estado.\n   *\n   * @param {boolean} state Estado de los tipos de cuenta a buscar\n   * @returns {Promise} Promesa que resuelve con un arreglo de tipos de cuenta encontrados\n   * @memberof AccountTypeRepository\n   */\n  findByState(state: boolean): Promise {\n    return this.userRepository.find({ where: { state } });\n  }\n\n  /**\n   * Encuentra tipos de cuenta por su nombre.\n   *\n   * @param {string} name Nombre de los tipos de cuenta a buscar\n   * @returns {Promise} Promesa que resuelve con un arreglo de tipos de cuenta encontrados\n   * @memberof AccountTypeRepository\n   */\n  findByName(name: string): Promise {\n    return this.userRepository.find({ where: { name } });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/AccountTypeRepositoryInterface.html":{"url":"interfaces/AccountTypeRepositoryInterface.html","title":"interface - AccountTypeRepositoryInterface","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  AccountTypeRepositoryInterface\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/data/persistence/repositories/interfaces/account-type-repository.interface.ts\n        \n\n\n            \n                Description\n            \n            \n                Interfaz para el repositorio de tipos de cuenta.\nExtiende la interfaz base de repositorio y define métodos adicionales específicos para los tipos de cuenta.\n\n            \n\n            \n                Extends\n            \n            \n                            BaseRepositoryInterface\n            \n\n        \n            Index\n            \n                \n                    \n                        \n                            Methods\n                        \n                    \n                    \n                        \n                            \n                                \n                                    \n                                        findByName\n                                    \n                                \n                                \n                                    \n                                        findByState\n                                    \n                                \n                            \n                        \n                    \n                \n            \n        \n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        findByName\n                        \n                    \n                \n            \n            \n                \nfindByName(name: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/data/persistence/repositories/interfaces/account-type-repository.interface.ts:30\n                        \n                    \n\n\n            \n                \n                        Encuentra tipos de cuenta por nombre.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                name\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Nombre del tipo de cuenta\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                Promesa que resuelve con un arreglo de tipos de cuenta que tienen el nombre especificado\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findByState\n                        \n                    \n                \n            \n            \n                \nfindByState(state: boolean)\n                \n            \n\n\n                    \n                        \n                            Defined in src/data/persistence/repositories/interfaces/account-type-repository.interface.ts:21\n                        \n                    \n\n\n            \n                \n                        Encuentra tipos de cuenta por estado.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                state\n                                            \n                                                            boolean\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Estado del tipo de cuenta a buscar\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                Promesa que resuelve con un arreglo de tipos de cuenta que coinciden con el estado especificado\n\n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { AccountTypeEntity } from '../../entities';\nimport { BaseRepositoryInterface } from './base/';\n\n/**\n * Interfaz para el repositorio de tipos de cuenta.\n *\n * Extiende la interfaz base de repositorio y define métodos adicionales específicos para los tipos de cuenta.\n *\n * @export\n * @interface AccountTypeRepositoryInterface\n * @extends {BaseRepositoryInterface} Interfaz base de repositorio para tipos de cuenta\n */\nexport interface AccountTypeRepositoryInterface extends BaseRepositoryInterface {\n  /**\n   * Encuentra tipos de cuenta por estado.\n   *\n   * @param {boolean} state Estado del tipo de cuenta a buscar\n   * @returns {Promise} Promesa que resuelve con un arreglo de tipos de cuenta que coinciden con el estado especificado\n   * @memberof AccountTypeRepositoryInterface\n   */\n  findByState(state: boolean): Promise;\n\n  /**\n   * Encuentra tipos de cuenta por nombre.\n   *\n   * @param {string} name Nombre del tipo de cuenta\n   * @returns {Promise} Promesa que resuelve con un arreglo de tipos de cuenta que tienen el nombre especificado\n   * @memberof AccountTypeRepositoryInterface\n   */\n  findByName(name: string): Promise;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AppModule.html":{"url":"modules/AppModule.html","title":"module - AppModule","body":"\n                   \n\n\n\n\n    Modules\n    AppModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AppModule\n\n\n\ncluster_AppModule_providers\n\n\n\n\nAccountRepository\n\nAccountRepository\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAccountRepository->AppModule\n\n\n\n\n\nAccountService\n\nAccountService\n\nAppModule -->\n\nAccountService->AppModule\n\n\n\n\n\nAccountTypeRepository\n\nAccountTypeRepository\n\nAppModule -->\n\nAccountTypeRepository->AppModule\n\n\n\n\n\nCustomerRepository\n\nCustomerRepository\n\nAppModule -->\n\nCustomerRepository->AppModule\n\n\n\n\n\nCustomerService\n\nCustomerService\n\nAppModule -->\n\nCustomerService->AppModule\n\n\n\n\n\nDepositRepository\n\nDepositRepository\n\nAppModule -->\n\nDepositRepository->AppModule\n\n\n\n\n\nDepositService\n\nDepositService\n\nAppModule -->\n\nDepositService->AppModule\n\n\n\n\n\nDocumentTypeRepository\n\nDocumentTypeRepository\n\nAppModule -->\n\nDocumentTypeRepository->AppModule\n\n\n\n\n\nSecurityService\n\nSecurityService\n\nAppModule -->\n\nSecurityService->AppModule\n\n\n\n\n\nTransferRepository\n\nTransferRepository\n\nAppModule -->\n\nTransferRepository->AppModule\n\n\n\n\n\nTransferService\n\nTransferService\n\nAppModule -->\n\nTransferService->AppModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/app.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AccountRepository\n                        \n                        \n                            AccountService\n                        \n                        \n                            AccountTypeRepository\n                        \n                        \n                            CustomerRepository\n                        \n                        \n                            CustomerService\n                        \n                        \n                            DepositRepository\n                        \n                        \n                            DepositService\n                        \n                        \n                            DocumentTypeRepository\n                        \n                        \n                            SecurityService\n                        \n                        \n                            TransferRepository\n                        \n                        \n                            TransferService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            UserController\n                        \n                        \n                            TransferController\n                        \n                        \n                            SecurityController\n                        \n                        \n                            DepositController\n                        \n                        \n                            AccountController\n                        \n                    \n                \n            \n        \n\n        \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        configure\n                        \n                    \n                \n            \n            \n                \nconfigure(consumer: MiddlewareConsumer)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app.module.ts:92\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                consumer\n                                            \n                                                        MiddlewareConsumer\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n    \n\n\n    \n        import { MiddlewareConsumer, Module, NestModule } from '@nestjs/common';\nimport { ConfigModule } from '@nestjs/config';\nimport { APP_FILTER } from '@nestjs/core';\nimport { JwtModule } from '@nestjs/jwt';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { jwtConstants } from './business/services';\nimport {\n  AccountService,\n  CustomerService,\n  DepositService,\n  SecurityService,\n  TransferService,\n} from './business/services/';\nimport {\n  AccountEntity,\n  AccountTypeEntity,\n  CustomerEntity,\n  DepositEntity,\n  DocumentTypeEntity,\n  TransferEntity,\n} from './data/persistence/entities';\nimport {\n  AccountRepository,\n  AccountTypeRepository,\n  CustomerRepository,\n  DepositRepository,\n  DocumentTypeRepository,\n  TransferRepository,\n} from './data/persistence/repositories/';\nimport { TypeOrmExceptionFilter } from './data/persistence/utils/exception-filters/typeorm.exception-filters';\nimport {\n  AccountController,\n  DepositController,\n  SecurityController,\n  TransferController,\n  UserController,\n} from './presentation/controllers/';\nimport { MiddlewaresMiddleware } from './presentation/middlewares/middlewares.middleware';\n\n@Module({\n  imports: [\n    ConfigModule.forRoot(),\n    JwtModule.register({\n      secret: jwtConstants.secret,\n    }),\n    TypeOrmModule.forRoot({\n      type: 'postgres',\n      host: process.env.DB_HOST,\n      port: 5432,\n      username: process.env.DB_USER,\n      password: process.env.DB_PASSWORD,\n      database: process.env.DB_NAME,\n      synchronize: true,\n      autoLoadEntities: true,\n    }),\n    TypeOrmModule.forFeature([\n      AccountEntity,\n      AccountTypeEntity,\n      CustomerEntity,\n      DepositEntity,\n      DocumentTypeEntity,\n      TransferEntity,\n    ]),\n  ],\n  controllers: [\n    UserController,\n    TransferController,\n    SecurityController,\n    DepositController,\n    AccountController,\n  ],\n  providers: [\n    {\n      provide: APP_FILTER,\n      useClass: TypeOrmExceptionFilter,\n    },\n    // TypesOrmPostgresConfigService,\n    CustomerService,\n    TransferService,\n    SecurityService,\n    DepositService,\n    AccountService,\n    CustomerRepository,\n    TransferRepository,\n    DepositRepository,\n    AccountRepository,\n    AccountTypeRepository,\n    DocumentTypeRepository,\n  ],\n})\nexport class AppModule implements NestModule {\n  configure(consumer: MiddlewareConsumer) {\n    consumer.apply(MiddlewaresMiddleware).forRoutes('*');\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/BaseRepositoryInterface.html":{"url":"interfaces/BaseRepositoryInterface.html","title":"interface - BaseRepositoryInterface","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  BaseRepositoryInterface\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/data/persistence/repositories/interfaces/base/base-repositories.interface.ts\n        \n\n\n            \n                Description\n            \n            \n                Interfaz base para los repositorios que manejan entidades.\nDefine métodos comunes para realizar operaciones CRUD en la base de datos.\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Methods\n                        \n                    \n                    \n                        \n                            \n                                \n                                    \n                                        delete\n                                    \n                                \n                                \n                                    \n                                        findAll\n                                    \n                                \n                                \n                                    \n                                        findOneById\n                                    \n                                \n                                \n                                    \n                                        register\n                                    \n                                \n                                \n                                    \n                                        update\n                                    \n                                \n                            \n                        \n                    \n                \n            \n        \n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        delete\n                        \n                    \n                \n            \n            \n                \ndelete(id: string, soft?: boolean)\n                \n            \n\n\n                    \n                        \n                            Defined in src/data/persistence/repositories/interfaces/base/base-repositories.interface.ts:37\n                        \n                    \n\n\n            \n                \n                        Elimina una entidad de la base de datos.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Identificador de la entidad a eliminar\n\n                                            \n                                        \n                                        \n                                                soft\n                                            \n                                                            boolean\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                            \n                                                    Indicador de eliminación suave (opcional)\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findAll\n                        \n                    \n                \n            \n            \n                \nfindAll()\n                \n            \n\n\n                    \n                        \n                            Defined in src/data/persistence/repositories/interfaces/base/base-repositories.interface.ts:45\n                        \n                    \n\n\n            \n                \n                        Obtiene todas las entidades almacenadas en la base de datos.\n\n\n                        \n                            Returns :     Promise\n\n                        \n                            \n                                Promesa que resuelve con un arreglo de todas las entidades\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findOneById\n                        \n                    \n                \n            \n            \n                \nfindOneById(id: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/data/persistence/repositories/interfaces/base/base-repositories.interface.ts:54\n                        \n                    \n\n\n            \n                \n                        Busca una entidad por su identificador único en la base de datos.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Identificador de la entidad a buscar\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                Promesa que resuelve con la entidad encontrada (o null si no se encuentra)\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        register\n                        \n                    \n                \n            \n            \n                \nregister(entity: E)\n                \n            \n\n\n                    \n                        \n                            Defined in src/data/persistence/repositories/interfaces/base/base-repositories.interface.ts:18\n                        \n                    \n\n\n            \n                \n                        Registra una nueva entidad en la base de datos.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                entity\n                                            \n                                                        E\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Entidad a registrar\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                Promesa que resuelve con la entidad registrada\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        update\n                        \n                    \n                \n            \n            \n                \nupdate(id: string, entity: E)\n                \n            \n\n\n                    \n                        \n                            Defined in src/data/persistence/repositories/interfaces/base/base-repositories.interface.ts:28\n                        \n                    \n\n\n            \n                \n                        Actualiza una entidad existente en la base de datos.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Identificador de la entidad a actualizar\n\n                                            \n                                        \n                                        \n                                                entity\n                                            \n                                                        E\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Datos actualizados de la entidad\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                Promesa que resuelve con la entidad actualizada\n\n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        export interface BaseRepositoryInterface {\n  /**\n   * Registra una nueva entidad en la base de datos.\n   *\n   * @param {E} entity Entidad a registrar\n   * @returns {Promise} Promesa que resuelve con la entidad registrada\n   * @memberof BaseRepositoryInterface\n   */\n  register(entity: E): Promise;\n\n  /**\n   * Actualiza una entidad existente en la base de datos.\n   *\n   * @param {string} id Identificador de la entidad a actualizar\n   * @param {E} entity Datos actualizados de la entidad\n   * @returns {Promise} Promesa que resuelve con la entidad actualizada\n   * @memberof BaseRepositoryInterface\n   */\n  update(id: string, entity: E): Promise;\n\n  /**\n   * Elimina una entidad de la base de datos.\n   *\n   * @param {string} id Identificador de la entidad a eliminar\n   * @param {boolean} [soft] Indicador de eliminación suave (opcional)\n   * @memberof BaseRepositoryInterface\n   */\n  delete(id: string, soft?: boolean): void;\n\n  /**\n   * Obtiene todas las entidades almacenadas en la base de datos.\n   *\n   * @returns {Promise} Promesa que resuelve con un arreglo de todas las entidades\n   * @memberof BaseRepositoryInterface\n   */\n  findAll(): Promise;\n\n  /**\n   * Busca una entidad por su identificador único en la base de datos.\n   *\n   * @param {string} id Identificador de la entidad a buscar\n   * @returns {Promise} Promesa que resuelve con la entidad encontrada (o null si no se encuentra)\n   * @memberof BaseRepositoryInterface\n   */\n  findOneById(id: string): Promise;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CustomerDTO.html":{"url":"classes/CustomerDTO.html","title":"class - CustomerDTO","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CustomerDTO\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/business/dtos/customer.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                Data Transfer Object para representar un cliente.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                document\n                            \n                            \n                                    \n                                documentTypeId\n                            \n                            \n                                    \n                                email\n                            \n                            \n                                    \n                                    \n                                fullName\n                            \n                            \n                                    \n                                    \n                                password\n                            \n                            \n                                    \n                                    \n                                phone\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        document\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNumberString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/business/dtos/customer.dto.ts:36\n                        \n                    \n\n            \n                \n                    Número del documento.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        documentTypeId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsUUID()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/business/dtos/customer.dto.ts:26\n                        \n                    \n\n            \n                \n                    Identificador único del tipo de documento.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsEmail()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/business/dtos/customer.dto.ts:58\n                        \n                    \n\n            \n                \n                    Correo electrónico del cliente.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        fullName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@MaxLength(500)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/business/dtos/customer.dto.ts:48\n                        \n                    \n\n            \n                \n                    Nombre completo del cliente.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Matches(new RegExp())@MinLength(8)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/business/dtos/customer.dto.ts:83\n                        \n                    \n\n            \n                \n                    Contraseña del cliente.\nDebe contener al menos una letra mayúscula, una letra minúscula, un número y tener un mínimo de 8 caracteres.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        phone\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNumberString()@MaxLength(30)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/business/dtos/customer.dto.ts:70\n                        \n                    \n\n            \n                \n                    Número de teléfono del cliente.\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {\n  IsEmail,\n  IsNumberString,\n  IsString,\n  IsUUID,\n  Matches,\n  MaxLength,\n  MinLength,\n} from 'class-validator';\n\n/**\n * Data Transfer Object para representar un cliente.\n *\n * @export\n * @class CustomerDTO\n */\nexport class CustomerDTO {\n  /**\n   * Identificador único del tipo de documento.\n   * \n   * @type {string}\n   * @memberof CustomerDTO\n   * @decorator IsUUID\n   */\n  @IsUUID()\n  documentTypeId: string;\n\n  /**\n   * Número del documento.\n   * \n   * @type {string}\n   * @memberof CustomerDTO\n   * @decorator IsNumberString\n   */\n  @IsNumberString()\n  document: string;\n\n  /**\n   * Nombre completo del cliente.\n   * \n   * @type {string}\n   * @memberof CustomerDTO\n   * @decorator IsString\n   * @decorator MaxLength\n   */\n  @IsString()\n  @MaxLength(500)\n  fullName: string;\n\n  /**\n   * Correo electrónico del cliente.\n   * \n   * @type {string}\n   * @memberof CustomerDTO\n   * @decorator IsEmail\n   */\n  @IsEmail()\n  email: string;\n\n  /**\n   * Número de teléfono del cliente.\n   * \n   * @type {string}\n   * @memberof CustomerDTO\n   * @decorator IsNumberString\n   * @decorator MaxLength\n   */\n  @IsNumberString()\n  @MaxLength(30)\n  phone: string;\n\n  /**\n   * Contraseña del cliente.\n   * Debe contener al menos una letra mayúscula, una letra minúscula, un número y tener un mínimo de 8 caracteres.\n   * \n   * @type {string}\n   * @memberof CustomerDTO\n   * @decorator Matches\n   * @decorator MinLength\n   */\n  @Matches(new RegExp(/^(?=.*\\d)(?=.*[a-z])(?=.*[A-Z])(?=.*[a-zA-Z]).{8,}$/))\n  @MinLength(8)\n  password: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/CustomerEntity.html":{"url":"entities/CustomerEntity.html","title":"entity - CustomerEntity","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  CustomerEntity\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/data/persistence/entities/customer.entity.ts\n        \n\n\n            \n                Description\n            \n            \n                Entidad para el cliente\n\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    Optional\n                                avatarUrl\n                            \n                            \n                                    \n                                    Optional\n                                deletedAt\n                            \n                            \n                                    \n                                document\n                            \n                            \n                                    \n                                    \n                                documentType\n                            \n                            \n                                    \n                                email\n                            \n                            \n                                    \n                                fullName\n                            \n                            \n                                    \n                                id\n                            \n                            \n                                    \n                                password\n                            \n                            \n                                    \n                                phone\n                            \n                            \n                                    \n                                state\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        avatarUrl\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({name: 'avatar_url', type: 'varchar', length: 255, nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/data/persistence/entities/customer.entity.ts:120\n                        \n                    \n\n            \n                \n                    URL del avatar del cliente (opcional)\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        deletedAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Date | number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({name: 'deleted_at', type: 'timestamp', nullable: true, select: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/data/persistence/entities/customer.entity.ts:146\n                        \n                    \n\n            \n                \n                    Fecha y hora en la que se eliminó el cliente (opcional)\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        document\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({name: 'document', type: 'varchar', length: 20})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/data/persistence/entities/customer.entity.ts:54\n                        \n                    \n\n            \n                \n                    Número de documento del cliente\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        documentType\n                        \n                    \n                \n            \n                \n                    \n                        Type :         DocumentTypeEntity\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ManyToOne(undefined, {cascade: false})@JoinColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/data/persistence/entities/customer.entity.ts:41\n                        \n                    \n\n            \n                \n                    Tipo de documento del cliente\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({name: 'email', type: 'varchar', length: 100})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/data/persistence/entities/customer.entity.ts:80\n                        \n                    \n\n            \n                \n                    Correo electrónico del cliente\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        fullName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({name: 'full_name', type: 'varchar', length: 100})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/data/persistence/entities/customer.entity.ts:67\n                        \n                    \n\n            \n                \n                    Nombre completo del cliente\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Default value : uuid()\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({name: 'id', type: 'uuid', primary: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/data/persistence/entities/customer.entity.ts:29\n                        \n                    \n\n            \n                \n                    Identificador único del cliente\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({name: 'password', type: 'varchar', length: 100})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/data/persistence/entities/customer.entity.ts:106\n                        \n                    \n\n            \n                \n                    Contraseña del cliente\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        phone\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({name: 'phone', type: 'varchar', length: 20})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/data/persistence/entities/customer.entity.ts:93\n                        \n                    \n\n            \n                \n                    Número de teléfono del cliente\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        state\n                        \n                    \n                \n            \n                \n                    \n                        Default value : true\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({name: 'state', type: 'boolean'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/data/persistence/entities/customer.entity.ts:132\n                        \n                    \n\n            \n                \n                    Estado del cliente (activo/inactivo)\n\n                \n            \n\n        \n    \n\n    \n\n\n    \n        import { Column, Entity, JoinColumn, ManyToOne } from 'typeorm';\nimport { v4 as uuid } from 'uuid';\nimport { CustomerModel } from '../../models';\nimport { DocumentTypeEntity } from './';\n\n/**\n * Entidad para el cliente\n *\n * @export\n * @class CustomerEntity\n * @implements {CustomerModel}\n */\n@Entity({\n  name: 'customer',\n  schema: 'public',\n})\nexport class CustomerEntity implements CustomerModel {\n  /**\n   * Identificador único del cliente\n   *\n   * @type {string}\n   * @memberof CustomerEntity\n   */\n  @Column({\n    name: 'id',\n    type: 'uuid',\n    primary: true,\n  })\n  id = uuid();\n\n  /**\n   * Tipo de documento del cliente\n   *\n   * @type {DocumentTypeEntity}\n   * @memberof CustomerEntity\n   */\n  @ManyToOne(() => DocumentTypeEntity, {\n    cascade: false,\n  })\n  @JoinColumn()\n  documentType: DocumentTypeEntity;\n\n  /**\n   * Número de documento del cliente\n   *\n   * @type {string}\n   * @memberof CustomerEntity\n   */\n  @Column({\n    name: 'document',\n    type: 'varchar',\n    length: 20,\n  })\n  document: string;\n\n  /**\n   * Nombre completo del cliente\n   *\n   * @type {string}\n   * @memberof CustomerEntity\n   */\n  @Column({\n    name: 'full_name',\n    type: 'varchar',\n    length: 100,\n  })\n  fullName: string;\n\n  /**\n   * Correo electrónico del cliente\n   *\n   * @type {string}\n   * @memberof CustomerEntity\n   */\n  @Column({\n    name: 'email',\n    type: 'varchar',\n    length: 100,\n  })\n  email: string;\n\n  /**\n   * Número de teléfono del cliente\n   *\n   * @type {string}\n   * @memberof CustomerEntity\n   */\n  @Column({\n    name: 'phone',\n    type: 'varchar',\n    length: 20,\n  })\n  phone: string;\n\n  /**\n   * Contraseña del cliente\n   *\n   * @type {string}\n   * @memberof CustomerEntity\n   */\n  @Column({\n    name: 'password',\n    type: 'varchar',\n    length: 100,\n  })\n  password: string;\n\n  /**\n   * URL del avatar del cliente (opcional)\n   *\n   * @type {string}\n   * @memberof CustomerEntity\n   */\n  @Column({\n    name: 'avatar_url',\n    type: 'varchar',\n    length: 255,\n    nullable: true,\n  })\n  avatarUrl?: string;\n\n  /**\n   * Estado del cliente (activo/inactivo)\n   *\n   * @type {boolean}\n   * @memberof CustomerEntity\n   */\n  @Column({\n    name: 'state',\n    type: 'boolean',\n  })\n  state = true;\n\n  /**\n   * Fecha y hora en la que se eliminó el cliente (opcional)\n   *\n   * @type {(Date | number)}\n   * @memberof CustomerEntity\n   */\n  @Column({\n    name: 'deleted_at',\n    type: 'timestamp',\n    nullable: true,\n    select: false,\n  })\n  deletedAt?: Date | number;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/CustomerModel.html":{"url":"interfaces/CustomerModel.html","title":"interface - CustomerModel","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  CustomerModel\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/data/models/customer.model.ts\n        \n\n\n            \n                Description\n            \n            \n                Interfaz para el modelo de cliente\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        \n                                            avatarUrl\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            deletedAt\n                                        \n                                \n                                \n                                        \n                                            document\n                                        \n                                \n                                \n                                        \n                                            documentType\n                                        \n                                \n                                \n                                        \n                                            email\n                                        \n                                \n                                \n                                        \n                                            fullName\n                                        \n                                \n                                \n                                        \n                                            id\n                                        \n                                \n                                \n                                        \n                                            password\n                                        \n                                \n                                \n                                        \n                                            phone\n                                        \n                                \n                                \n                                        \n                                            state\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        avatarUrl\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        avatarUrl:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        deletedAt\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        deletedAt:     Date | number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     Date | number\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        document\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        document:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        documentType\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        documentType:         DocumentTypeModel\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         DocumentTypeModel\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        email\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        email:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        fullName\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        fullName:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        id\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        id:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        password\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        password:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        phone\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        phone:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        state\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        state:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { DocumentTypeModel } from '.';\n\n/**\n * Interfaz para el modelo de cliente\n *\n * @export\n * @interface CustomerModel\n */\nexport interface CustomerModel {\n  id: string;\n  documentType: DocumentTypeModel;\n  document: string;\n  fullName: string;\n  email: string;\n  phone: string;\n  password: string;\n  avatarUrl?: string;\n  state: boolean;\n  deletedAt?: Date | number;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/CustomerRepository.html":{"url":"injectables/CustomerRepository.html","title":"injectable - CustomerRepository","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  CustomerRepository\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/data/persistence/repositories/customer.repository.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                delete\n                            \n                            \n                                    Async\n                                existEmail\n                            \n                            \n                                findAll\n                            \n                            \n                                findAllDeleted\n                            \n                            \n                                findByFullName\n                            \n                            \n                                findByState\n                            \n                            \n                                    Async\n                                findOneByDocumentTypeAndDocument\n                            \n                            \n                                    Async\n                                findOneByEmail\n                            \n                            \n                                    Async\n                                findOneByEmailAndPassword\n                            \n                            \n                                    Async\n                                findOneById\n                            \n                            \n                                    Async\n                                findOneByPhone\n                            \n                            \n                                    Private\n                                hardDelete\n                            \n                            \n                                register\n                            \n                            \n                                    Private\n                                    Async\n                                softDelete\n                            \n                            \n                                    Async\n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(customerRepository: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/data/persistence/repositories/customer.repository.ts:8\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        customerRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        delete\n                        \n                    \n                \n            \n            \n                \ndelete(id: string, soft?: boolean)\n                \n            \n\n\n                    \n                        \n                            Defined in src/data/persistence/repositories/customer.repository.ts:44\n                        \n                    \n\n\n            \n                \n                        Elimina un cliente de la base de datos.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    El ID del cliente a eliminar.\n\n                                            \n                                        \n                                        \n                                                soft\n                                            \n                                                            boolean\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                            \n                                                    Indica si se debe realizar un borrado suave (soft delete).\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        existEmail\n                        \n                    \n                \n            \n            \n                \n                        \n                    existEmail(email: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/data/persistence/repositories/customer.repository.ts:147\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                email\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findAll\n                        \n                    \n                \n            \n            \n                \nfindAll()\n                \n            \n\n\n                    \n                        \n                            Defined in src/data/persistence/repositories/customer.repository.ts:81\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         Promise\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findAllDeleted\n                        \n                    \n                \n            \n            \n                \nfindAllDeleted()\n                \n            \n\n\n                    \n                        \n                            Defined in src/data/persistence/repositories/customer.repository.ts:85\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         Promise\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findByFullName\n                        \n                    \n                \n            \n            \n                \nfindByFullName(fullName: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/data/persistence/repositories/customer.repository.ts:181\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                fullName\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findByState\n                        \n                    \n                \n            \n            \n                \nfindByState(state: boolean)\n                \n            \n\n\n                    \n                        \n                            Defined in src/data/persistence/repositories/customer.repository.ts:175\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                state\n                                            \n                                                            boolean\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        findOneByDocumentTypeAndDocument\n                        \n                    \n                \n            \n            \n                \n                        \n                    findOneByDocumentTypeAndDocument(documentTypeId: string, document: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/data/persistence/repositories/customer.repository.ts:116\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                documentTypeId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                document\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        findOneByEmail\n                        \n                    \n                \n            \n            \n                \n                        \n                    findOneByEmail(email: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/data/persistence/repositories/customer.repository.ts:134\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                email\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        findOneByEmailAndPassword\n                        \n                    \n                \n            \n            \n                \n                        \n                    findOneByEmailAndPassword(email: string, password: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/data/persistence/repositories/customer.repository.ts:99\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                email\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                password\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        findOneById\n                        \n                    \n                \n            \n            \n                \n                        \n                    findOneById(id: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/data/persistence/repositories/customer.repository.ts:91\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        findOneByPhone\n                        \n                    \n                \n            \n            \n                \n                        \n                    findOneByPhone(phone: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/data/persistence/repositories/customer.repository.ts:161\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                phone\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        hardDelete\n                        \n                    \n                \n            \n            \n                \n                        \n                    hardDelete(id: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/data/persistence/repositories/customer.repository.ts:53\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        register\n                        \n                    \n                \n            \n            \n                \nregister(entity: CustomerEntity)\n                \n            \n\n\n                    \n                        \n                            Defined in src/data/persistence/repositories/customer.repository.ts:18\n                        \n                    \n\n\n            \n                \n                        Registra un nuevo cliente en la base de datos.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                entity\n                                            \n                                                            CustomerEntity\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Los datos del cliente a registrar.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                Una promesa que resuelve en el cliente registrado.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Async\n                        softDelete\n                        \n                    \n                \n            \n            \n                \n                        \n                    softDelete(id: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/data/persistence/repositories/customer.repository.ts:57\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        update\n                        \n                    \n                \n            \n            \n                \n                        \n                    update(id: string, entity: CustomerEntity)\n                \n            \n\n\n                    \n                        \n                            Defined in src/data/persistence/repositories/customer.repository.ts:30\n                        \n                    \n\n\n            \n                \n                        Actualiza un cliente existente en la base de datos.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    El ID del cliente a actualizar.\n\n                                            \n                                        \n                                        \n                                                entity\n                                            \n                                                            CustomerEntity\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Los nuevos datos del cliente.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                Una promesa que resuelve en el cliente actualizado.\n\n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, NotFoundException } from '@nestjs/common';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { Repository } from 'typeorm';\nimport { CustomerEntity } from '../entities';\nimport { CustomerRepositoryInterface } from './interfaces/';\n\n@Injectable()\nexport class CustomerRepository implements CustomerRepositoryInterface {\n  constructor(\n    @InjectRepository(CustomerEntity)\n    private readonly customerRepository: Repository,\n  ) {}\n /**\n   * Registra un nuevo cliente en la base de datos.\n   * @param entity Los datos del cliente a registrar.\n   * @returns Una promesa que resuelve en el cliente registrado.\n   */\n  register(entity: CustomerEntity): Promise {\n    console.log(entity)\n    return this.customerRepository.save(entity);\n\n  }\n  /**\n   * Actualiza un cliente existente en la base de datos.\n   * @param id El ID del cliente a actualizar.\n   * @param entity Los nuevos datos del cliente.\n   * @returns Una promesa que resuelve en el cliente actualizado.\n   * @throws `NotFoundException` si el cliente no existe.\n   */\n  async update(id: string, entity: CustomerEntity): Promise {\n    return this.customerRepository.update(id, entity).then((result) => {\n      if (result.affected === 0) {\n        throw new NotFoundException(`El Id: ${id} no existe en base de datos`);\n      }\n      return entity;\n    });\n  }\n\n   /**\n   * Elimina un cliente de la base de datos.\n   * @param id El ID del cliente a eliminar.\n   * @param soft Indica si se debe realizar un borrado suave (soft delete).\n   */\n  delete(id: string, soft?: boolean) {\n    this.findOneById(id);\n    if (soft || soft === undefined) {\n      this.softDelete(id);\n    } else {\n      this.hardDelete(id);\n    }\n  }\n\n  private hardDelete(id: string): void {\n    this.customerRepository.delete(id);\n  }\n\n  private async softDelete(id: string) {\n    let newCustomer = new CustomerEntity();\n    const customer = await this.customerRepository\n      .findOne({\n        where: { id },\n      })\n      .then((result) => {\n        if (result) {\n          return result;\n        } else {\n          throw new NotFoundException(\n            `El Id: ${id} no existe en base de datos`,\n          );\n        }\n      });\n    newCustomer = {\n      ...newCustomer,\n      ...customer,\n      id: customer.id,\n    };\n    newCustomer.deletedAt = Date.now();\n    this.update(customer.id, newCustomer);\n  }\n\n  findAll(): Promise {\n    const deletedAt = undefined;\n    return this.customerRepository.find({ where: { deletedAt } });\n  }\n  findAllDeleted(): Promise {\n    return this.customerRepository.find({\n      where: { deletedAt: undefined },\n    });\n  }\n\n  async findOneById(id: string): Promise {\n    const customer = await this.customerRepository.findOne({\n      where: { id, deletedAt: undefined },\n    });\n    if (customer) return customer;\n    else throw new NotFoundException(`El ID ${id} no existe en base de datos`);\n  }\n\n  async findOneByEmailAndPassword(\n    email: string,\n    password: string,\n  ): Promise {\n    return this.customerRepository\n      .find({\n        where: { email, password, deletedAt: undefined },\n      })\n      .then((result) => {\n        if (result.length > 0) {\n          return true;\n        } else {\n          return false;\n        }\n      });\n  }\n\n  async findOneByDocumentTypeAndDocument(\n    documentTypeId: string,\n    document: string,\n  ): Promise {\n    const result = await this.customerRepository.findOne({\n      where: {\n        documentType: { id: documentTypeId },\n        document,\n        deletedAt: undefined,\n      },\n    });\n    if (result) {\n      return result;\n    } else {\n      throw new NotFoundException(`no existe en base de datos`);\n    }\n  }\n\n  async findOneByEmail(email: string): Promise {\n    return this.customerRepository\n      .findOne({\n        where: { email, deletedAt: undefined },\n      })\n      .then((result) => {\n        if (result) {\n          return result;\n        } else {\n          throw new NotFoundException(`no existe en base de datos`);\n        }\n      });\n  }\n  async existEmail(email: string): Promise {\n    return this.customerRepository\n      .find({\n        where: { email, deletedAt: undefined },\n      })\n      .then((result) => {\n        if (result.length > 0) {\n          return true;\n        } else {\n          return false;\n        }\n      });\n  }\n\n  async findOneByPhone(phone: string): Promise {\n    return this.customerRepository\n      .findOne({\n        where: { phone, deletedAt: undefined },\n      })\n      .then((result) => {\n        if (result) {\n          return result;\n        } else {\n          throw new NotFoundException(`no existe en base de datos`);\n        }\n      });\n  }\n\n  findByState(state: boolean): Promise {\n    return this.customerRepository.find({\n      where: { state, deletedAt: undefined },\n    });\n  }\n\n  findByFullName(fullName: string): Promise {\n    return this.customerRepository.find({\n      where: { fullName, deletedAt: undefined },\n    });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/CustomerRepositoryInterface.html":{"url":"interfaces/CustomerRepositoryInterface.html","title":"interface - CustomerRepositoryInterface","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  CustomerRepositoryInterface\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/data/persistence/repositories/interfaces/customer-repository.interface.ts\n        \n\n\n            \n                Description\n            \n            \n                Interfaz para el repositorio de clientes.\nExtiende la interfaz base de repositorio y define métodos adicionales específicos para los clientes.\n\n            \n\n            \n                Extends\n            \n            \n                            BaseRepositoryInterface\n            \n\n        \n            Index\n            \n                \n                    \n                        \n                            Methods\n                        \n                    \n                    \n                        \n                            \n                                \n                                    \n                                        findByFullName\n                                    \n                                \n                                \n                                    \n                                        findByState\n                                    \n                                \n                                \n                                    \n                                        findOneByDocumentTypeAndDocument\n                                    \n                                \n                                \n                                    \n                                        findOneByEmail\n                                    \n                                \n                                \n                                    \n                                        findOneByEmailAndPassword\n                                    \n                                \n                                \n                                    \n                                        findOneByPhone\n                                    \n                                \n                            \n                        \n                    \n                \n            \n        \n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        findByFullName\n                        \n                    \n                \n            \n            \n                \nfindByFullName(fullName: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/data/persistence/repositories/interfaces/customer-repository.interface.ts:71\n                        \n                    \n\n\n            \n                \n                        Encuentra clientes por nombre completo.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                fullName\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Nombre completo del cliente\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                Promesa que resuelve con un arreglo de clientes que tienen el nombre completo especificado\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findByState\n                        \n                    \n                \n            \n            \n                \nfindByState(state: boolean)\n                \n            \n\n\n                    \n                        \n                            Defined in src/data/persistence/repositories/interfaces/customer-repository.interface.ts:62\n                        \n                    \n\n\n            \n                \n                        Encuentra clientes por estado.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                state\n                                            \n                                                            boolean\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Estado del cliente a buscar\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                Promesa que resuelve con un arreglo de clientes que coinciden con el estado especificado\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findOneByDocumentTypeAndDocument\n                        \n                    \n                \n            \n            \n                \nfindOneByDocumentTypeAndDocument(documentTypeId: string, document: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/data/persistence/repositories/interfaces/customer-repository.interface.ts:32\n                        \n                    \n\n\n            \n                \n                        Encuentra un cliente por tipo de documento y número de documento.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                documentTypeId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    ID del tipo de documento del cliente\n\n                                            \n                                        \n                                        \n                                                document\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Número de documento del cliente\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                Promesa que resuelve con el cliente encontrado\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findOneByEmail\n                        \n                    \n                \n            \n            \n                \nfindOneByEmail(email: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/data/persistence/repositories/interfaces/customer-repository.interface.ts:44\n                        \n                    \n\n\n            \n                \n                        Encuentra un cliente por correo electrónico.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                email\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Correo electrónico del cliente\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                Promesa que resuelve con el cliente encontrado\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findOneByEmailAndPassword\n                        \n                    \n                \n            \n            \n                \nfindOneByEmailAndPassword(email: string, password: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/data/persistence/repositories/interfaces/customer-repository.interface.ts:22\n                        \n                    \n\n\n            \n                \n                        Encuentra un cliente por email y contraseña.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                email\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Correo electrónico del cliente\n\n                                            \n                                        \n                                        \n                                                password\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Contraseña del cliente\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                Promesa que resuelve con un valor booleano indicando si se encontró el cliente\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findOneByPhone\n                        \n                    \n                \n            \n            \n                \nfindOneByPhone(phone: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/data/persistence/repositories/interfaces/customer-repository.interface.ts:53\n                        \n                    \n\n\n            \n                \n                        Encuentra un cliente por número de teléfono.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                phone\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Número de teléfono del cliente\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                Promesa que resuelve con el cliente encontrado\n\n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { CustomerEntity } from '../../entities';\nimport { BaseRepositoryInterface } from './base/';\n\n/**\n * Interfaz para el repositorio de clientes.\n *\n * Extiende la interfaz base de repositorio y define métodos adicionales específicos para los clientes.\n *\n * @export\n * @interface CustomerRepositoryInterface\n * @extends {BaseRepositoryInterface} Interfaz base de repositorio para clientes\n */\nexport interface CustomerRepositoryInterface extends BaseRepositoryInterface {\n  /**\n   * Encuentra un cliente por email y contraseña.\n   *\n   * @param {string} email Correo electrónico del cliente\n   * @param {string} password Contraseña del cliente\n   * @returns {Promise} Promesa que resuelve con un valor booleano indicando si se encontró el cliente\n   * @memberof CustomerRepositoryInterface\n   */\n  findOneByEmailAndPassword(email: string, password: string): Promise;\n\n  /**\n   * Encuentra un cliente por tipo de documento y número de documento.\n   *\n   * @param {string} documentTypeId ID del tipo de documento del cliente\n   * @param {string} document Número de documento del cliente\n   * @returns {Promise} Promesa que resuelve con el cliente encontrado\n   * @memberof CustomerRepositoryInterface\n   */\n  findOneByDocumentTypeAndDocument(\n    documentTypeId: string,\n    document: string,\n  ): Promise;\n\n  /**\n   * Encuentra un cliente por correo electrónico.\n   *\n   * @param {string} email Correo electrónico del cliente\n   * @returns {Promise} Promesa que resuelve con el cliente encontrado\n   * @memberof CustomerRepositoryInterface\n   */\n  findOneByEmail(email: string): Promise;\n\n  /**\n   * Encuentra un cliente por número de teléfono.\n   *\n   * @param {string} phone Número de teléfono del cliente\n   * @returns {Promise} Promesa que resuelve con el cliente encontrado\n   * @memberof CustomerRepositoryInterface\n   */\n  findOneByPhone(phone: string): Promise;\n\n  /**\n   * Encuentra clientes por estado.\n   *\n   * @param {boolean} state Estado del cliente a buscar\n   * @returns {Promise} Promesa que resuelve con un arreglo de clientes que coinciden con el estado especificado\n   * @memberof CustomerRepositoryInterface\n   */\n  findByState(state: boolean): Promise;\n\n  /**\n   * Encuentra clientes por nombre completo.\n   *\n   * @param {string} fullName Nombre completo del cliente\n   * @returns {Promise} Promesa que resuelve con un arreglo de clientes que tienen el nombre completo especificado\n   * @memberof CustomerRepositoryInterface\n   */\n  findByFullName(fullName: string): Promise;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/CustomerService.html":{"url":"injectables/CustomerService.html","title":"injectable - CustomerService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  CustomerService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/business/services/customer/customer.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                deleteCustomer\n                            \n                            \n                                    Async\n                                findAll\n                            \n                            \n                                findAllDeleted\n                            \n                            \n                                    Async\n                                getCustomerInfo\n                            \n                            \n                                    Async\n                                getCustomerInfoByEmail\n                            \n                            \n                                    Async\n                                newCustomer\n                            \n                            \n                                transform\n                            \n                            \n                                    Async\n                                unsuscribe\n                            \n                            \n                                    Async\n                                updatedCustomer\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(customerRepository: CustomerRepository, accountRepository: AccountRepository, accountTypeRepository: AccountTypeRepository)\n                    \n                \n                        \n                            \n                                Defined in src/business/services/customer/customer.service.ts:16\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        customerRepository\n                                                  \n                                                        \n                                                                        CustomerRepository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        accountRepository\n                                                  \n                                                        \n                                                                        AccountRepository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        accountTypeRepository\n                                                  \n                                                        \n                                                                        AccountTypeRepository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        deleteCustomer\n                        \n                    \n                \n            \n            \n                \n                        \n                    deleteCustomer(id: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/business/services/customer/customer.service.ts:171\n                        \n                    \n\n\n            \n                \n                        Eliminar un cliente del sistema\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    ID del cliente a eliminar\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                {Promise} true si el cliente se eliminó con éxito, false de lo contrario\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        findAll\n                        \n                    \n                \n            \n            \n                \n                        \n                    findAll()\n                \n            \n\n\n                    \n                        \n                            Defined in src/business/services/customer/customer.service.ts:53\n                        \n                    \n\n\n            \n                \n                        Obtener todos los clientes activos\n\n\n                        \n                            Returns :         Promise\n\n                        \n                            \n                                {Promise} Lista de clientes activos\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findAllDeleted\n                        \n                    \n                \n            \n            \n                \nfindAllDeleted()\n                \n            \n\n\n                    \n                        \n                            Defined in src/business/services/customer/customer.service.ts:65\n                        \n                    \n\n\n            \n                \n                        Obtener todos los clientes eliminados\n\n\n                        \n                            Returns :         Promise\n\n                        \n                            \n                                {Promise} Lista de clientes eliminados\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        getCustomerInfo\n                        \n                    \n                \n            \n            \n                \n                        \n                    getCustomerInfo(customerId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/business/services/customer/customer.service.ts:30\n                        \n                    \n\n\n            \n                \n                        Obtener información de un cliente por su ID\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                customerId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    ID del cliente\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                {Promise} Entidad del cliente encontrado\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        getCustomerInfoByEmail\n                        \n                    \n                \n            \n            \n                \n                        \n                    getCustomerInfoByEmail(email: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/business/services/customer/customer.service.ts:42\n                        \n                    \n\n\n            \n                \n                        Obtener información de un cliente por su correo electrónico\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                email\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Correo electrónico del cliente\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                {Promise} Entidad del cliente encontrado\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        newCustomer\n                        \n                    \n                \n            \n            \n                \n                        \n                    newCustomer(customer: CustomerDTO)\n                \n            \n\n\n                    \n                        \n                            Defined in src/business/services/customer/customer.service.ts:96\n                        \n                    \n\n\n            \n                \n                        Registrar un nuevo cliente en el sistema\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                customer\n                                            \n                                                            CustomerDTO\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Datos del nuevo cliente\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                {Promise} Cliente y cuenta creados\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        transform\n                        \n                    \n                \n            \n            \n                \ntransform(customer: CustomerDTO)\n                \n            \n\n\n                    \n                        \n                            Defined in src/business/services/customer/customer.service.ts:76\n                        \n                    \n\n\n            \n                \n                        Transformar datos del cliente a entidad del cliente\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                customer\n                                            \n                                                            CustomerDTO\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Datos del cliente\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         CustomerEntity\n\n                        \n                            \n                                {CustomerEntity} Entidad del cliente creada\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        unsuscribe\n                        \n                    \n                \n            \n            \n                \n                        \n                    unsuscribe(id: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/business/services/customer/customer.service.ts:152\n                        \n                    \n\n\n            \n                \n                        Dar de baja a un cliente en el sistema\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    ID del cliente a dar de baja\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                {Promise} true si el cliente se dio de baja con éxito, false de lo contrario\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        updatedCustomer\n                        \n                    \n                \n            \n            \n                \n                        \n                    updatedCustomer(id: string, customer: CustomerUpdateDTO)\n                \n            \n\n\n                    \n                        \n                            Defined in src/business/services/customer/customer.service.ts:130\n                        \n                    \n\n\n            \n                \n                        Actualizar información de un cliente\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    ID del cliente a actualizar\n\n                                            \n                                        \n                                        \n                                                customer\n                                            \n                                                            CustomerUpdateDTO\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Nuevos datos del cliente\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                {Promise} Entidad del cliente actualizado\n\n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, NotFoundException } from '@nestjs/common';\nimport { CustomerDTO } from 'src/business/dtos';\nimport { CustomerUpdateDTO } from 'src/business/dtos/update-customer.dto';\nimport {\n  AccountEntity,\n  CustomerEntity,\n  DocumentTypeEntity,\n} from '../../../data/persistence/entities';\nimport {\n  AccountRepository,\n  AccountTypeRepository,\n  CustomerRepository,\n} from '../../../data/persistence/repositories';\n\n@Injectable()\nexport class CustomerService {\n  constructor(\n    private readonly customerRepository: CustomerRepository,\n    private readonly accountRepository: AccountRepository,\n    private readonly accountTypeRepository: AccountTypeRepository,\n  ) {}\n\n  /**\n   * Obtener información de un cliente por su ID\n   *\n   * @param {string} customerId ID del cliente\n   * @return {*} {Promise} Entidad del cliente encontrado\n   * @memberof CustomerService\n   */\n  async getCustomerInfo(customerId: string): Promise {\n    const newCustomer = await this.customerRepository.findOneById(customerId);\n    return newCustomer;\n  }\n\n  /**\n   * Obtener información de un cliente por su correo electrónico\n   *\n   * @param {string} email Correo electrónico del cliente\n   * @return {*} {Promise} Entidad del cliente encontrado\n   * @memberof CustomerService\n   */\n  async getCustomerInfoByEmail(email: string): Promise {\n    const newCustomer = await this.customerRepository.findOneByEmail(email);\n    return newCustomer;\n  }\n\n  /**\n   * Obtener todos los clientes activos\n   *\n   * @return {*} {Promise} Lista de clientes activos\n   * @memberof CustomerService\n   */\n  async findAll(): Promise {\n    return (await this.customerRepository.findAll()).filter(\n      (item) => (item.deletedAt ?? true) === true,\n    );\n  }\n\n  /**\n   * Obtener todos los clientes eliminados\n   *\n   * @return {*} {Promise} Lista de clientes eliminados\n   * @memberof CustomerService\n   */\n  findAllDeleted(): Promise {\n    return this.customerRepository.findAllDeleted();\n  }\n\n  /**\n   * Transformar datos del cliente a entidad del cliente\n   *\n   * @param {CustomerDTO} customer Datos del cliente\n   * @return {*} {CustomerEntity} Entidad del cliente creada\n   * @memberof CustomerService\n   */\n  transform(customer: CustomerDTO): CustomerEntity {\n    const documentType = new DocumentTypeEntity();\n    documentType.id = customer.documentTypeId;\n    const newCustomer = new CustomerEntity();\n    newCustomer.documentType = documentType;\n    newCustomer.document = customer.document;\n    newCustomer.fullName = customer.fullName;\n    newCustomer.email = customer.email;\n    newCustomer.phone = customer.phone;\n    newCustomer.password = customer.password;\n    return newCustomer;\n  }\n\n  /**\n   * Registrar un nuevo cliente en el sistema\n   *\n   * @param {CustomerDTO} customer Datos del nuevo cliente\n   * @return {*} {Promise} Cliente y cuenta creados\n   * @memberof CustomerService\n   */\n  async newCustomer(customer: CustomerDTO): Promise {\n    const documentType = new DocumentTypeEntity();\n    documentType.id = customer.documentTypeId;\n\n    const newCustomer = new CustomerEntity();\n    newCustomer.documentType = documentType;\n    newCustomer.document = customer.document;\n    newCustomer.fullName = customer.fullName;\n    if (await this.customerRepository.existEmail(customer.email)) {\n      throw new NotFoundException(\n        `El email ${customer.email} ya existe en la base de datos`,\n      );\n    }\n    newCustomer.email = customer.email;\n    newCustomer.phone = customer.phone;\n    newCustomer.password = customer.password;\n    const typeId = 'ab27c9ac-a01c-4c22-a6d6-ce5ab3b79185';\n    const account = new AccountEntity();\n    account.accountType = await this.accountTypeRepository.findOneById(typeId);\n    account.customer = newCustomer;\n    return {\n      customer: await this.customerRepository.register(newCustomer),\n      account: await this.accountRepository.register(account),\n    };\n  }\n\n  /**\n   * Actualizar información de un cliente\n   *\n   * @param {string} id ID del cliente a actualizar\n   * @param {CustomerUpdateDTO} customer Nuevos datos del cliente\n   * @return {*} {Promise} Entidad del cliente actualizado\n   * @memberof CustomerService\n   */\n  async updatedCustomer(\n    id: string,\n    customer: CustomerUpdateDTO,\n  ): Promise {\n    if (await this.customerRepository.findOneById(id)) {\n      const newCustomer = new CustomerEntity();\n      newCustomer.document = customer.document;\n      newCustomer.fullName = customer.fullName;\n      newCustomer.phone = customer.phone;\n      newCustomer.password = customer.password;\n      return this.customerRepository.update(id, newCustomer);\n    }\n    return new CustomerEntity();\n  }\n\n  /**\n   * Dar de baja a un cliente en el sistema\n   *\n   * @param {string} id ID del cliente a dar de baja\n   * @return {*} {Promise} true si el cliente se dio de baja con éxito, false de lo contrario\n   * @memberof CustomerService\n   */\n  async unsuscribe(id: string): Promise {\n    if (\n      (await this.customerRepository.findOneById(id)).deletedAt === undefined\n    ) {\n      const customer = await this.customerRepository.findOneById(id);\n      customer.state = false;\n      this.customerRepository.update(id, customer);\n      return true;\n    }\n    return false;\n  }\n\n  /**\n   * Eliminar un cliente del sistema\n   *\n   * @param {string} id ID del cliente a eliminar\n   * @return {*} {Promise} true si el cliente se eliminó con éxito, false de lo contrario\n   * @memberof CustomerService\n   */\n  async deleteCustomer(id: string): Promise {\n    if (\n      (await this.customerRepository.findOneById(id)).deletedAt === undefined\n    ) {\n      (await this.accountRepository.findAll()).map(\n        (mapa) => (mapa.deletedAt = Date.now()),\n      );\n      this.customerRepository.delete(id);\n      return true;\n    }\n    return false;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CustomerUpdateDTO.html":{"url":"classes/CustomerUpdateDTO.html","title":"class - CustomerUpdateDTO","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CustomerUpdateDTO\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/business/dtos/update-customer.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                Data Transfer Object para actualizar información del cliente.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                document\n                            \n                            \n                                    \n                                    \n                                fullName\n                            \n                            \n                                    \n                                    \n                                password\n                            \n                            \n                                    \n                                    \n                                phone\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        document\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNumberString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/business/dtos/update-customer.dto.ts:29\n                        \n                    \n\n            \n                \n                    Número de documento del cliente.\nDebe ser una cadena que representa un número.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        fullName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@MaxLength(500)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/business/dtos/update-customer.dto.ts:43\n                        \n                    \n\n            \n                \n                    Nombre completo del cliente.\nDebe ser una cadena con un máximo de 500 caracteres.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Matches(new RegExp())@MinLength(8)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/business/dtos/update-customer.dto.ts:70\n                        \n                    \n\n            \n                \n                    Contraseña del cliente.\nDebe contener al menos una letra mayúscula, una letra minúscula, un número y tener un mínimo de 8 caracteres.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        phone\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNumberString()@MaxLength(30)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/business/dtos/update-customer.dto.ts:57\n                        \n                    \n\n            \n                \n                    Número de teléfono del cliente.\nDebe ser una cadena que representa un número con un máximo de 30 caracteres.\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {\n  IsEmail,\n  IsNumberString,\n  IsString,\n  IsUUID,\n  Matches,\n  MaxLength,\n  MinLength,\n} from 'class-validator';\n\n/**\n * Data Transfer Object para actualizar información del cliente.\n *\n * @export\n * @class CustomerUpdateDTO\n */\nexport class CustomerUpdateDTO {\n  /**\n   * Número de documento del cliente.\n   * \n   * Debe ser una cadena que representa un número.\n   *\n   * @type {string}\n   * @memberof CustomerUpdateDTO\n   * @decorator IsNumberString\n   */\n  @IsNumberString()\n  document: string;\n\n  /**\n   * Nombre completo del cliente.\n   * \n   * Debe ser una cadena con un máximo de 500 caracteres.\n   *\n   * @type {string}\n   * @memberof CustomerUpdateDTO\n   * @decorator IsString\n   * @decorator MaxLength\n   */\n  @IsString()\n  @MaxLength(500)\n  fullName: string;\n\n  /**\n   * Número de teléfono del cliente.\n   * \n   * Debe ser una cadena que representa un número con un máximo de 30 caracteres.\n   *\n   * @type {string}\n   * @memberof CustomerUpdateDTO\n   * @decorator IsNumberString\n   * @decorator MaxLength\n   */\n  @IsNumberString()\n  @MaxLength(30)\n  phone: string;\n\n  /**\n   * Contraseña del cliente.\n   * Debe contener al menos una letra mayúscula, una letra minúscula, un número y tener un mínimo de 8 caracteres.\n   * \n   * @type {string}\n   * @memberof CustomerUpdateDTO\n   * @decorator Matches\n   * @decorator MinLength\n   */\n  @Matches(new RegExp(/^(?=.*\\d)(?=.*[a-z])(?=.*[A-Z])(?=.*[a-zA-Z]).{8,}$/))\n  @MinLength(8)\n  password: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/DataRangeDTO.html":{"url":"classes/DataRangeDTO.html","title":"class - DataRangeDTO","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  DataRangeDTO\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/business/dtos/data-range.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                Data Transfer Object para representar un rango de datos.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    Optional\n                                endAmount\n                            \n                            \n                                    \n                                    Optional\n                                endDate\n                            \n                            \n                                    \n                                    Optional\n                                startAmount\n                            \n                            \n                                    \n                                    Optional\n                                startDate\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        endAmount\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNumberString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/business/dtos/data-range.dto.ts:56\n                        \n                    \n\n            \n                \n                    Cantidad de fin del rango.\nDebe ser una cadena que representa un número.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        endDate\n                        \n                    \n                \n            \n                \n                    \n                        Type :     number | Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsDateString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/business/dtos/data-range.dto.ts:32\n                        \n                    \n\n            \n                \n                    Fecha de fin del rango.\nPuede ser un número (timestamp) o un objeto Date.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        startAmount\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNumberString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/business/dtos/data-range.dto.ts:44\n                        \n                    \n\n            \n                \n                    Cantidad de inicio del rango.\nDebe ser una cadena que representa un número.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        startDate\n                        \n                    \n                \n            \n                \n                    \n                        Type :     number | Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsDateString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/business/dtos/data-range.dto.ts:20\n                        \n                    \n\n            \n                \n                    Fecha de inicio del rango.\nPuede ser un número (timestamp) o un objeto Date.\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsDateString, IsNumberString } from 'class-validator';\n\n/**\n * Data Transfer Object para representar un rango de datos.\n *\n * @export\n * @class DataRangeDTO\n */\nexport class DataRangeDTO {\n  /**\n   * Fecha de inicio del rango.\n   * \n   * Puede ser un número (timestamp) o un objeto Date.\n   *\n   * @type {number | Date}\n   * @memberof DataRangeDTO\n   * @decorator IsDateString\n   */\n  @IsDateString()\n  startDate?: number | Date;\n\n  /**\n   * Fecha de fin del rango.\n   * \n   * Puede ser un número (timestamp) o un objeto Date.\n   *\n   * @type {number | Date}\n   * @memberof DataRangeDTO\n   * @decorator IsDateString\n   */\n  @IsDateString()\n  endDate?: number | Date;\n\n  /**\n   * Cantidad de inicio del rango.\n   * \n   * Debe ser una cadena que representa un número.\n   *\n   * @type {number}\n   * @memberof DataRangeDTO\n   * @decorator IsNumberString\n   */\n  @IsNumberString()\n  startAmount?: number;\n\n  /**\n   * Cantidad de fin del rango.\n   * \n   * Debe ser una cadena que representa un número.\n   *\n   * @type {number}\n   * @memberof DataRangeDTO\n   * @decorator IsNumberString\n   */\n  @IsNumberString()\n  endAmount?: number;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/DataRangeModel.html":{"url":"interfaces/DataRangeModel.html","title":"interface - DataRangeModel","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  DataRangeModel\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/data/models/data-range.model.ts\n        \n\n\n            \n                Description\n            \n            \n                Interfaz para el modelo de rango de datos\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        \n                                            endAmount\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            endDate\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            startAmount\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            startDate\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        endAmount\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        endAmount:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        endDate\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        endDate:     number | Date\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     number | Date\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        startAmount\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        startAmount:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        startDate\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        startDate:     number | Date\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     number | Date\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export interface DataRangeModel {\n  startDate?: number | Date;\n  endDate?: number | Date;\n  startAmount?: number;\n  endAmount?: number;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/DepositController.html":{"url":"controllers/DepositController.html","title":"controller - DepositController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  DepositController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/presentation/controllers/deposit/deposit.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                deposit\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    Async\n                                createDeposit\n                            \n                            \n                                    \n                                deleteDeposit\n                            \n                            \n                                    \n                                    Async\n                                GetAll\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        createDeposit\n                        \n                    \n                \n            \n            \n                \n                        \n                    createDeposit(account: DepositDTO)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post()\n                \n            \n\n                    \n                        \n                            Defined in src/presentation/controllers/deposit/deposit.controller.ts:10\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                account\n                                            \n                                                            DepositDTO\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        deleteDeposit\n                        \n                    \n                \n            \n            \n                \n                        \n                    deleteDeposit(id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete(':id')\n                \n            \n\n                    \n                        \n                            Defined in src/presentation/controllers/deposit/deposit.controller.ts:31\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        GetAll\n                        \n                    \n                \n            \n            \n                \n                        \n                    GetAll(body: literal type)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('all')\n                \n            \n\n                    \n                        \n                            Defined in src/presentation/controllers/deposit/deposit.controller.ts:15\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                body\n                                            \n                                                        literal type\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import { Body, Controller, Delete, Param, Post } from '@nestjs/common';\nimport { DataRangeDTO, DepositDTO, PaginationDTO } from 'src/business/dtos';\nimport { DepositService } from '../../../business/services';\nimport { DepositEntity } from '../../../data/persistence/entities';\n\n@Controller('deposit')\nexport class DepositController {\n  constructor(private readonly depositService: DepositService) {}\n  @Post()\n  async createDeposit(@Body() account: DepositDTO): Promise {\n    return await this.depositService.createDeposit(account);\n  }\n\n  @Post('all')\n  async GetAll(\n    @Body()\n    body: {\n      accountId: string;\n      pagination: PaginationDTO;\n      dataRange?: DataRangeDTO;\n    },\n  ): Promise {\n    return await this.depositService.getHistory(\n      body.accountId,\n      body.pagination,\n      body.dataRange,\n    );\n  }\n\n  @Delete(':id')\n  deleteDeposit(@Param('id') id: string): void {\n    this.depositService.deleteDeposit(id);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/DepositDTO.html":{"url":"classes/DepositDTO.html","title":"class - DepositDTO","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  DepositDTO\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/business/dtos/deposit.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                Data Transfer Object para representar un depósito.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                accountId\n                            \n                            \n                                    \n                                amount\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        accountId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNumberString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/business/dtos/deposit.dto.ts:20\n                        \n                    \n\n            \n                \n                    Identificador de la cuenta.\nDebe ser una cadena que representa un número.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        amount\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNumberString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/business/dtos/deposit.dto.ts:32\n                        \n                    \n\n            \n                \n                    Monto del depósito.\nDebe ser una cadena que representa un número.\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsNumberString } from 'class-validator';\n\n/**\n * Data Transfer Object para representar un depósito.\n *\n * @export\n * @class DepositDTO\n */\nexport class DepositDTO {\n  /**\n   * Identificador de la cuenta.\n   * \n   * Debe ser una cadena que representa un número.\n   *\n   * @type {string}\n   * @memberof DepositDTO\n   * @decorator IsNumberString\n   */\n  @IsNumberString()\n  accountId: string;\n\n  /**\n   * Monto del depósito.\n   * \n   * Debe ser una cadena que representa un número.\n   *\n   * @type {string}\n   * @memberof DepositDTO\n   * @decorator IsNumberString\n   */\n  @IsNumberString()\n  amount: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/DepositEntity.html":{"url":"entities/DepositEntity.html","title":"entity - DepositEntity","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  DepositEntity\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/data/persistence/entities/deposit.entity.ts\n        \n\n\n            \n                Description\n            \n            \n                Entidad para el depósito\n\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                account\n                            \n                            \n                                    \n                                amount\n                            \n                            \n                                    \n                                dateTime\n                            \n                            \n                                    \n                                    Optional\n                                deletedAt\n                            \n                            \n                                    \n                                id\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        account\n                        \n                    \n                \n            \n                \n                    \n                        Type :         AccountEntity\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ManyToOne(undefined)@JoinColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/data/persistence/entities/deposit.entity.ts:51\n                        \n                    \n\n            \n                \n                    Cuenta asociada al depósito\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        amount\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 0\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({name: 'amount', type: 'numeric'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/data/persistence/entities/deposit.entity.ts:41\n                        \n                    \n\n            \n                \n                    Monto del depósito\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        dateTime\n                        \n                    \n                \n            \n                \n                    \n                        Type :     number | Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({name: 'date_time', type: 'numeric'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/data/persistence/entities/deposit.entity.ts:63\n                        \n                    \n\n            \n                \n                    Fecha y hora del depósito\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        deletedAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :     number | Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({name: 'deleted_at', type: 'timestamp', nullable: true, select: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/data/persistence/entities/deposit.entity.ts:77\n                        \n                    \n\n            \n                \n                    Fecha y hora en la que se eliminó el depósito (opcional)\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Default value : uuid()\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({name: 'id', type: 'uuid', primary: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/data/persistence/entities/deposit.entity.ts:29\n                        \n                    \n\n            \n                \n                    Identificador único del depósito\n\n                \n            \n\n        \n    \n\n    \n\n\n    \n        import { Column, Entity, JoinColumn, ManyToOne } from 'typeorm';\nimport { v4 as uuid } from 'uuid';\nimport { DepositModel } from '../../models';\nimport { AccountEntity } from './';\n\n/**\n * Entidad para el depósito\n *\n * @export\n * @class DepositEntity\n * @implements {DepositModel}\n */\n@Entity({\n  name: 'deposit',\n  schema: 'public',\n})\nexport class DepositEntity implements DepositModel {\n  /**\n   * Identificador único del depósito\n   *\n   * @type {string}\n   * @memberof DepositEntity\n   */\n  @Column({\n    name: 'id',\n    type: 'uuid',\n    primary: true,\n  })\n  id = uuid();\n\n  /**\n   * Monto del depósito\n   *\n   * @type {number}\n   * @memberof DepositEntity\n   */\n  @Column({\n    name: 'amount',\n    type: 'numeric',\n  })\n  amount = 0;\n\n  /**\n   * Cuenta asociada al depósito\n   *\n   * @type {AccountEntity}\n   * @memberof DepositEntity\n   */\n  @ManyToOne(() => AccountEntity)\n  @JoinColumn()\n  account: AccountEntity;\n\n  /**\n   * Fecha y hora del depósito\n   *\n   * @type {(number | Date)}\n   * @memberof DepositEntity\n   */\n  @Column({\n    name: 'date_time',\n    type: 'numeric',\n  })\n  dateTime: number | Date;\n\n  /**\n   * Fecha y hora en la que se eliminó el depósito (opcional)\n   *\n   * @type {(number | Date)}\n   * @memberof DepositEntity\n   */\n  @Column({\n    name: 'deleted_at',\n    type: 'timestamp',\n    nullable: true,\n    select: false,\n  })\n  deletedAt?: number | Date;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/DepositModel.html":{"url":"interfaces/DepositModel.html","title":"interface - DepositModel","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  DepositModel\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/data/models/deposit.model.ts\n        \n\n\n            \n                Description\n            \n            \n                Interfaz para el modelo de depósito\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            account\n                                        \n                                \n                                \n                                        \n                                            amount\n                                        \n                                \n                                \n                                        \n                                            dateTime\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            deletedAt\n                                        \n                                \n                                \n                                        \n                                            id\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        account\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        account:         AccountModel\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         AccountModel\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        amount\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        amount:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        dateTime\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        dateTime:     Date | number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     Date | number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        deletedAt\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        deletedAt:     Date | number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     Date | number\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        id\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        id:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { AccountModel } from '.';\n\n/**\n * Interfaz para el modelo de depósito\n *\n * @export\n * @interface DepositModel\n */\nexport interface DepositModel {\n  id: string;\n  account: AccountModel;\n  amount: number;\n  dateTime: Date | number;\n  deletedAt?: Date | number;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/DepositRepository.html":{"url":"injectables/DepositRepository.html","title":"injectable - DepositRepository","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  DepositRepository\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/data/persistence/repositories/deposit.repository.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                delete\n                            \n                            \n                                findAll\n                            \n                            \n                                findByAccountId\n                            \n                            \n                                findByDataRange\n                            \n                            \n                                    Async\n                                findOneById\n                            \n                            \n                                    Private\n                                hardDelete\n                            \n                            \n                                register\n                            \n                            \n                                    Private\n                                softDelete\n                            \n                            \n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(depositRepository: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/data/persistence/repositories/deposit.repository.ts:8\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        depositRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        delete\n                        \n                    \n                \n            \n            \n                \ndelete(id: string, soft?: boolean)\n                \n            \n\n\n                    \n                        \n                            Defined in src/data/persistence/repositories/deposit.repository.ts:41\n                        \n                    \n\n\n            \n                \n                        Elimina un depósito de la base de datos.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    El ID del depósito a eliminar.\n\n                                            \n                                        \n                                        \n                                                soft\n                                            \n                                                            boolean\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                            \n                                                    Indica si se debe realizar un borrado suave (soft delete).\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findAll\n                        \n                    \n                \n            \n            \n                \nfindAll()\n                \n            \n\n\n                    \n                        \n                            Defined in src/data/persistence/repositories/deposit.repository.ts:84\n                        \n                    \n\n\n            \n                \n                        Encuentra todos los depósitos en la base de datos.\n\n\n                        \n                            Returns :         Promise\n\n                        \n                            \n                                Una promesa que resuelve en un arreglo de todos los depósitos.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findByAccountId\n                        \n                    \n                \n            \n            \n                \nfindByAccountId(accountId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/data/persistence/repositories/deposit.repository.ts:119\n                        \n                    \n\n\n            \n                \n                        Encuentra todos los depósitos asociados a una cuenta en la base de datos.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                accountId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    El ID de la cuenta asociada a los depósitos.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                Una promesa que resuelve en un arreglo de todos los depósitos asociados a la cuenta.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findByDataRange\n                        \n                    \n                \n            \n            \n                \nfindByDataRange(dateInit: Date | number, dateEnd: Date | number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/data/persistence/repositories/deposit.repository.ts:132\n                        \n                    \n\n\n            \n                \n                        Encuentra todos los depósitos dentro de un rango de fechas en la base de datos.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                dateInit\n                                            \n                                                        Date | number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    La fecha de inicio del rango.\n\n                                            \n                                        \n                                        \n                                                dateEnd\n                                            \n                                                        Date | number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    La fecha de fin del rango.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                Una promesa que resuelve en un arreglo de todos los depósitos dentro del rango de fechas.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        findOneById\n                        \n                    \n                \n            \n            \n                \n                        \n                    findOneById(id: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/data/persistence/repositories/deposit.repository.ts:97\n                        \n                    \n\n\n            \n                \n                        Encuentra un depósito por su ID en la base de datos.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    El ID del depósito a encontrar.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                Una promesa que resuelve en el depósito encontrado.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        hardDelete\n                        \n                    \n                \n            \n            \n                \n                        \n                    hardDelete(id: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/data/persistence/repositories/deposit.repository.ts:50\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        register\n                        \n                    \n                \n            \n            \n                \nregister(entity: DepositEntity)\n                \n            \n\n\n                    \n                        \n                            Defined in src/data/persistence/repositories/deposit.repository.ts:18\n                        \n                    \n\n\n            \n                \n                        Registra un nuevo depósito en la base de datos.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                entity\n                                            \n                                                            DepositEntity\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Los datos del depósito a registrar.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                Una promesa que resuelve en el depósito registrado.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        softDelete\n                        \n                    \n                \n            \n            \n                \n                        \n                    softDelete(id: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/data/persistence/repositories/deposit.repository.ts:56\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        update\n                        \n                    \n                \n            \n            \n                \nupdate(id: string, entity: DepositEntity)\n                \n            \n\n\n                    \n                        \n                            Defined in src/data/persistence/repositories/deposit.repository.ts:28\n                        \n                    \n\n\n            \n                \n                        Actualiza un depósito existente en la base de datos.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    El ID del depósito a actualizar.\n\n                                            \n                                        \n                                        \n                                                entity\n                                            \n                                                            DepositEntity\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Los nuevos datos del depósito.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                Una promesa que resuelve en el depósito actualizado.\n\n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, NotFoundException } from '@nestjs/common';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { Between, Repository } from 'typeorm';\nimport { DepositEntity } from '../entities';\nimport { DepositRepositoryInterface } from './interfaces/';\n\n@Injectable()\nexport class DepositRepository implements DepositRepositoryInterface {\n  constructor(\n    @InjectRepository(DepositEntity)\n    private readonly depositRepository: Repository,\n  ) {}\n  /**\n   * Registra un nuevo depósito en la base de datos.\n   * @param entity Los datos del depósito a registrar.\n   * @returns Una promesa que resuelve en el depósito registrado.\n   */\n  register(entity: DepositEntity): Promise {\n    return this.depositRepository.save(entity);\n  }\n  /**\n   * Actualiza un depósito existente en la base de datos.\n   * @param id El ID del depósito a actualizar.\n   * @param entity Los nuevos datos del depósito.\n   * @returns Una promesa que resuelve en el depósito actualizado.\n   * @throws `NotFoundException` si el depósito no existe.\n   */\n  update(id: string, entity: DepositEntity): Promise {\n    return this.depositRepository.update(id, entity).then((result) => {\n      if (result.affected === 0) {\n        throw new NotFoundException(`El Id: ${id} no existe en base de datos`);\n      }\n      return entity;\n    });\n  }\n  /**\n   * Elimina un depósito de la base de datos.\n   * @param id El ID del depósito a eliminar.\n   * @param soft Indica si se debe realizar un borrado suave (soft delete).\n   */\n  delete(id: string, soft?: boolean): void {\n    this.findOneById(id);\n    if (soft || soft === undefined) {\n      this.softDelete(id);\n    } else {\n      this.hardDelete(id);\n    }\n  }\n\n  private hardDelete(id: string) {\n    this.depositRepository.delete({\n      id,\n    });\n  }\n\n  private softDelete(id: string) {\n    let newDeposit = new DepositEntity();\n    this.depositRepository\n      .findOne({\n        where: { id },\n      })\n      .then((result) => {\n        if (result) {\n          newDeposit = {\n            ...newDeposit,\n            ...result,\n            id: result.id,\n          };\n          newDeposit.deletedAt = Date.now();\n          this.update(result.id, newDeposit);\n        } else {\n          throw new NotFoundException(\n            `El Id: ${id} no existe en base de datos`,\n          );\n        }\n      });\n  }\n  // Métodos privados para realizar borrado suave (soft delete) o borrado duro (hard delete)...\n\n  /**\n   * Encuentra todos los depósitos en la base de datos.\n   * @returns Una promesa que resuelve en un arreglo de todos los depósitos.\n   */\n  findAll(): Promise {\n    return this.depositRepository.find({\n      where: { deletedAt: undefined },\n      relations: ['account'],\n    });\n  }\n\n  /**\n   * Encuentra un depósito por su ID en la base de datos.\n   * @param id El ID del depósito a encontrar.\n   * @returns Una promesa que resuelve en el depósito encontrado.\n   * @throws `NotFoundException` si el depósito no existe.\n   */\n  async findOneById(id: string): Promise {\n    return this.depositRepository\n      .findOne({\n        where: { id, deletedAt: undefined },\n        relations: ['account'],\n      })\n      .then((result) => {\n        if (result) {\n          return result;\n        } else {\n          throw new NotFoundException(\n            `El ID ${id} no existe en la base de datos`,\n          );\n        }\n      });\n  }\n\n  /**\n   * Encuentra todos los depósitos asociados a una cuenta en la base de datos.\n   * @param accountId El ID de la cuenta asociada a los depósitos.\n   * @returns Una promesa que resuelve en un arreglo de todos los depósitos asociados a la cuenta.\n   */\n  findByAccountId(accountId: string): Promise {\n    return this.depositRepository.find({\n      where: { account: { id: accountId }, deletedAt: undefined },\n      relations: ['account'],\n    });\n  }\n\n  /**\n   * Encuentra todos los depósitos dentro de un rango de fechas en la base de datos.\n   * @param dateInit La fecha de inicio del rango.\n   * @param dateEnd La fecha de fin del rango.\n   * @returns Una promesa que resuelve en un arreglo de todos los depósitos dentro del rango de fechas.\n   */\n  findByDataRange(\n    dateInit: Date | number,\n    dateEnd: Date | number,\n  ): Promise {\n    return this.depositRepository.find({\n      where: {\n        dateTime: Between(dateInit, dateEnd),\n      },\n      relations: ['account'],\n    });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/DepositRepositoryInterface.html":{"url":"interfaces/DepositRepositoryInterface.html","title":"interface - DepositRepositoryInterface","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  DepositRepositoryInterface\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/data/persistence/repositories/interfaces/deposit-repository.interface.ts\n        \n\n\n            \n                Description\n            \n            \n                Interfaz para el repositorio de depósitos.\nExtiende la interfaz base de repositorio y define métodos adicionales específicos para los depósitos.\n\n            \n\n            \n                Extends\n            \n            \n                            BaseRepositoryInterface\n            \n\n        \n            Index\n            \n                \n                    \n                        \n                            Methods\n                        \n                    \n                    \n                        \n                            \n                                \n                                    \n                                        findByAccountId\n                                    \n                                \n                                \n                                    \n                                        findByDataRange\n                                    \n                                \n                            \n                        \n                    \n                \n            \n        \n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        findByAccountId\n                        \n                    \n                \n            \n            \n                \nfindByAccountId(accountId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/data/persistence/repositories/interfaces/deposit-repository.interface.ts:21\n                        \n                    \n\n\n            \n                \n                        Encuentra depósitos por ID de cuenta.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                accountId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    ID de la cuenta asociada a los depósitos\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                Promesa que resuelve con un arreglo de depósitos asociados a la cuenta especificada\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findByDataRange\n                        \n                    \n                \n            \n            \n                \nfindByDataRange(dateInit: Date | number, dateEnd: Date | number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/data/persistence/repositories/interfaces/deposit-repository.interface.ts:31\n                        \n                    \n\n\n            \n                \n                        Encuentra depósitos dentro de un rango de fechas.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                dateInit\n                                            \n                                                        Date | number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Fecha de inicio del rango\n\n                                            \n                                        \n                                        \n                                                dateEnd\n                                            \n                                                        Date | number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Fecha de fin del rango\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                Promesa que resuelve con un arreglo de depósitos dentro del rango de fechas especificado\n\n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { DepositEntity } from '../../entities';\nimport { BaseRepositoryInterface } from './base/';\n\n/**\n * Interfaz para el repositorio de depósitos.\n *\n * Extiende la interfaz base de repositorio y define métodos adicionales específicos para los depósitos.\n *\n * @export\n * @interface DepositRepositoryInterface\n * @extends {BaseRepositoryInterface} Interfaz base de repositorio para depósitos\n */\nexport interface DepositRepositoryInterface extends BaseRepositoryInterface {\n  /**\n   * Encuentra depósitos por ID de cuenta.\n   *\n   * @param {string} accountId ID de la cuenta asociada a los depósitos\n   * @returns {Promise} Promesa que resuelve con un arreglo de depósitos asociados a la cuenta especificada\n   * @memberof DepositRepositoryInterface\n   */\n  findByAccountId(accountId: string): Promise;\n\n  /**\n   * Encuentra depósitos dentro de un rango de fechas.\n   *\n   * @param {(Date | number)} dateInit Fecha de inicio del rango\n   * @param {(Date | number)} dateEnd Fecha de fin del rango\n   * @returns {Promise} Promesa que resuelve con un arreglo de depósitos dentro del rango de fechas especificado\n   * @memberof DepositRepositoryInterface\n   */\n  findByDataRange(\n    dateInit: Date | number,\n    dateEnd: Date | number,\n  ): Promise;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/DepositService.html":{"url":"injectables/DepositService.html","title":"injectable - DepositService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  DepositService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/business/services/deposit/deposit.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                createDeposit\n                            \n                            \n                                deleteDeposit\n                            \n                            \n                                    Async\n                                getHistory\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(depositRepository: DepositRepository, accountRepository: AccountRepository)\n                    \n                \n                        \n                            \n                                Defined in src/business/services/deposit/deposit.service.ts:13\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        depositRepository\n                                                  \n                                                        \n                                                                        DepositRepository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        accountRepository\n                                                  \n                                                        \n                                                                        AccountRepository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        createDeposit\n                        \n                    \n                \n            \n            \n                \n                        \n                    createDeposit(deposit: DepositDTO)\n                \n            \n\n\n                    \n                        \n                            Defined in src/business/services/deposit/deposit.service.ts:26\n                        \n                    \n\n\n            \n                \n                        Crear un depósito\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                deposit\n                                            \n                                                            DepositDTO\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Datos del depósito\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                {Promise} Entidad del depósito creado\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        deleteDeposit\n                        \n                    \n                \n            \n            \n                \ndeleteDeposit(depositId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/business/services/deposit/deposit.service.ts:46\n                        \n                    \n\n\n            \n                \n                        Borrar un depósito\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                depositId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    ID del depósito a borrar\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        getHistory\n                        \n                    \n                \n            \n            \n                \n                        \n                    getHistory(accountId: string, pagination: PaginationDTO, dataRange?: DataRangeDTO)\n                \n            \n\n\n                    \n                        \n                            Defined in src/business/services/deposit/deposit.service.ts:59\n                        \n                    \n\n\n            \n                \n                        Obtener el historial de depósitos en una cuenta\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                accountId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    ID de la cuenta\n\n                                            \n                                        \n                                        \n                                                pagination\n                                            \n                                                            PaginationDTO\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Configuración de paginación\n\n                                            \n                                        \n                                        \n                                                dataRange\n                                            \n                                                            DataRangeDTO\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                            \n                                                    Rango de fechas y montos para filtrar\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                {Promise} Lista de depósitos\n\n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { DataRangeDTO, DepositDTO, PaginationDTO } from 'src/business/dtos';\nimport {\n  AccountEntity,\n  DepositEntity\n} from '../../../data/persistence/entities';\nimport {\n  AccountRepository,\n  DepositRepository\n} from '../../../data/persistence/repositories';\n\n@Injectable()\nexport class DepositService {\n  constructor(\n    private readonly depositRepository: DepositRepository,\n    private readonly accountRepository: AccountRepository,\n  ) {}\n\n  /**\n   * Crear un depósito\n   *\n   * @param {DepositDTO} deposit Datos del depósito\n   * @return {*} {Promise} Entidad del depósito creado\n   * @memberof DepositService\n   */\n  async createDeposit(deposit: DepositDTO): Promise {\n    const depositEntity = new DepositEntity();\n    depositEntity.account = await this.accountRepository.findOneById(\n      deposit.accountId,\n    );\n    depositEntity.amount = Number(deposit.amount);\n    depositEntity.dateTime = Date.now();\n    let newAccount = new AccountEntity();\n    newAccount = await this.accountRepository.findOneById(deposit.accountId);\n    newAccount.balance = Number(newAccount.balance) + Number(deposit.amount);\n    this.accountRepository.update(deposit.accountId, newAccount);\n    return this.depositRepository.register(depositEntity);\n  }\n\n  /**\n   * Borrar un depósito\n   *\n   * @param {string} depositId ID del depósito a borrar\n   * @memberof DepositService\n   */\n  deleteDeposit(depositId: string): void {\n    this.depositRepository.delete(depositId);\n  }\n\n  /**\n   * Obtener el historial de depósitos en una cuenta\n   *\n   * @param {string} accountId ID de la cuenta\n   * @param {PaginationDTO} pagination Configuración de paginación\n   * @param {DataRangeDTO} [dataRange] Rango de fechas y montos para filtrar\n   * @return {*} {Promise} Lista de depósitos\n   * @memberof DepositService\n   */\n  async getHistory(\n    accountId: string,\n    pagination: PaginationDTO,\n    dataRange?: DataRangeDTO,\n  ): Promise {\n    if (dataRange) {\n      const newArray = this.depositRepository.findByDataRange(\n        dataRange.startDate ?? 0,\n        dataRange.endDate ?? Date.now(),\n      );\n      const array = (await newArray).filter(\n        (item) =>\n          item.account.id === accountId &&\n          (item.amount >= Number(dataRange.startAmount) ?? 0) &&\n          (item.amount  item.account.id === accountId)\n      .slice(start, end);\n    return array;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/DocumentTypeEntity.html":{"url":"entities/DocumentTypeEntity.html","title":"entity - DocumentTypeEntity","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  DocumentTypeEntity\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/data/persistence/entities/document-type.entity.ts\n        \n\n\n            \n                Description\n            \n            \n                Entidad para el tipo de documento\n\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                id\n                            \n                            \n                                    \n                                name\n                            \n                            \n                                    \n                                state\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Default value : uuid()\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({name: 'id', type: 'uuid', primary: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/data/persistence/entities/document-type.entity.ts:28\n                        \n                    \n\n            \n                \n                    Identificador único del tipo de documento\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({name: 'name', type: 'varchar', length: 50})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/data/persistence/entities/document-type.entity.ts:41\n                        \n                    \n\n            \n                \n                    Nombre del tipo de documento\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        state\n                        \n                    \n                \n            \n                \n                    \n                        Default value : true\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({name: 'state', type: 'boolean'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/data/persistence/entities/document-type.entity.ts:53\n                        \n                    \n\n            \n                \n                    Estado del tipo de documento\n\n                \n            \n\n        \n    \n\n    \n\n\n    \n        import { Column, Entity } from 'typeorm';\nimport { v4 as uuid } from 'uuid';\nimport { DocumentTypeModel } from '../../models';\n\n/**\n * Entidad para el tipo de documento\n *\n * @export\n * @class DocumentTypeEntity\n * @implements {DocumentTypeModel}\n */\n@Entity({\n  name: 'document_type',\n  schema: 'public',\n})\nexport class DocumentTypeEntity implements DocumentTypeModel {\n  /**\n   * Identificador único del tipo de documento\n   *\n   * @type {string}\n   * @memberof DocumentTypeEntity\n   */\n  @Column({\n    name: 'id',\n    type: 'uuid',\n    primary: true,\n  })\n  id = uuid();\n\n  /**\n   * Nombre del tipo de documento\n   *\n   * @type {string}\n   * @memberof DocumentTypeEntity\n   */\n  @Column({\n    name: 'name',\n    type: 'varchar',\n    length: 50,\n  })\n  name: string;\n\n  /**\n   * Estado del tipo de documento\n   *\n   * @type {boolean}\n   * @memberof DocumentTypeEntity\n   */\n  @Column({\n    name: 'state',\n    type: 'boolean',\n  })\n  state = true;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/DocumentTypeModel.html":{"url":"interfaces/DocumentTypeModel.html","title":"interface - DocumentTypeModel","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  DocumentTypeModel\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/data/models/document-type.model.ts\n        \n\n\n            \n                Description\n            \n            \n                Interfaz para el modelo de tipo de documento\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            id\n                                        \n                                \n                                \n                                        \n                                            name\n                                        \n                                \n                                \n                                        \n                                            state\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        id\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        id:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        name\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        name:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        state\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        state:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export interface DocumentTypeModel {\n  id: string;\n  name: string;\n  state: boolean;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/DocumentTypeRepository.html":{"url":"injectables/DocumentTypeRepository.html","title":"injectable - DocumentTypeRepository","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  DocumentTypeRepository\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/data/persistence/repositories/document-type.repository.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                delete\n                            \n                            \n                                findAll\n                            \n                            \n                                findByName\n                            \n                            \n                                findByState\n                            \n                            \n                                findOneById\n                            \n                            \n                                register\n                            \n                            \n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(documentTypeRepository: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/data/persistence/repositories/document-type.repository.ts:8\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        documentTypeRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        delete\n                        \n                    \n                \n            \n            \n                \ndelete(id: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/data/persistence/repositories/document-type.repository.ts:55\n                        \n                    \n\n\n            \n                \n                        Elimina un tipo de documento de la base de datos.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    El ID del tipo de documento a eliminar.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findAll\n                        \n                    \n                \n            \n            \n                \nfindAll()\n                \n            \n\n\n                    \n                        \n                            Defined in src/data/persistence/repositories/document-type.repository.ts:68\n                        \n                    \n\n\n            \n                \n                        Encuentra todos los tipos de documento en la base de datos.\n\n\n                        \n                            Returns :         Promise\n\n                        \n                            \n                                Una promesa que resuelve en un arreglo de todos los tipos de documento.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findByName\n                        \n                    \n                \n            \n            \n                \nfindByName(name: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/data/persistence/repositories/document-type.repository.ts:104\n                        \n                    \n\n\n            \n                \n                        Encuentra todos los tipos de documento por su nombre en la base de datos.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                name\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    El nombre de los tipos de documento a encontrar.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                Una promesa que resuelve en un arreglo de todos los tipos de documento encontrados.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findByState\n                        \n                    \n                \n            \n            \n                \nfindByState(state: boolean)\n                \n            \n\n\n                    \n                        \n                            Defined in src/data/persistence/repositories/document-type.repository.ts:95\n                        \n                    \n\n\n            \n                \n                        Encuentra todos los tipos de documento por su estado en la base de datos.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                state\n                                            \n                                                            boolean\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    El estado de los tipos de documento a encontrar.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                Una promesa que resuelve en un arreglo de todos los tipos de documento encontrados.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findOneById\n                        \n                    \n                \n            \n            \n                \nfindOneById(id: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/data/persistence/repositories/document-type.repository.ts:78\n                        \n                    \n\n\n            \n                \n                        Encuentra un tipo de documento por su ID en la base de datos.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    El ID del tipo de documento a encontrar.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                Una promesa que resuelve en el tipo de documento encontrado.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        register\n                        \n                    \n                \n            \n            \n                \nregister(entity: DocumentTypeEntity)\n                \n            \n\n\n                    \n                        \n                            Defined in src/data/persistence/repositories/document-type.repository.ts:31\n                        \n                    \n\n\n            \n                \n                        Registra un nuevo tipo de documento en la base de datos.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                entity\n                                            \n                                                            DocumentTypeEntity\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Los datos del tipo de documento a registrar.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                Una promesa que resuelve en el tipo de documento registrado.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        update\n                        \n                    \n                \n            \n            \n                \nupdate(id: string, entity: DocumentTypeEntity)\n                \n            \n\n\n                    \n                        \n                            Defined in src/data/persistence/repositories/document-type.repository.ts:42\n                        \n                    \n\n\n            \n                \n                        Actualiza un tipo de documento existente en la base de datos.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    El ID del tipo de documento a actualizar.\n\n                                            \n                                        \n                                        \n                                                entity\n                                            \n                                                            DocumentTypeEntity\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Los nuevos datos del tipo de documento.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                Una promesa que resuelve en el tipo de documento actualizado.\n\n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, NotFoundException } from '@nestjs/common';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { Repository } from 'typeorm';\nimport { DocumentTypeEntity } from '../entities';\nimport { DocumentTypeRepositoryInterface } from './interfaces';\n\n@Injectable()\nexport class DocumentTypeRepository implements DocumentTypeRepositoryInterface {\n  constructor(\n    @InjectRepository(DocumentTypeEntity)\n    private readonly documentTypeRepository: Repository,\n  ) {\n    // Se guardan tipos de documento por defecto al inicializar el repositorio\n    this.documentTypeRepository.save({\n      id: 'c822487e-5e89-4a49-98d5-50ce60b300b1',\n      name: 'Cédula de ciudadanía',\n      state: true,\n    });\n    this.documentTypeRepository.save({\n      id: '64911806-283f-4e71-ab94-f9098e18cf9a',\n      name: 'Cédula de extranjería',\n      state: true,\n    });\n  }\n\n  /**\n   * Registra un nuevo tipo de documento en la base de datos.\n   * @param entity Los datos del tipo de documento a registrar.\n   * @returns Una promesa que resuelve en el tipo de documento registrado.\n   */\n  register(entity: DocumentTypeEntity): Promise {\n    return this.documentTypeRepository.save(entity);\n  }\n\n  /**\n   * Actualiza un tipo de documento existente en la base de datos.\n   * @param id El ID del tipo de documento a actualizar.\n   * @param entity Los nuevos datos del tipo de documento.\n   * @returns Una promesa que resuelve en el tipo de documento actualizado.\n   * @throws `NotFoundException` si el tipo de documento no existe.\n   */\n  update(id: string, entity: DocumentTypeEntity): Promise {\n    return this.documentTypeRepository.update(id, entity).then((result) => {\n      if (result.affected === 0) {\n        throw new NotFoundException(`El ID ${id} no existe en la base de datos`);\n      }\n      return entity;\n    });\n  }\n\n  /**\n   * Elimina un tipo de documento de la base de datos.\n   * @param id El ID del tipo de documento a eliminar.\n   */\n  delete(id: string): void {\n    this.findOneById(id);\n    this.documentTypeRepository.delete(id).then((result) => {\n      if (result.affected === 0) {\n        throw new NotFoundException(`El ID ${id} no existe en la base de datos`);\n      }\n    });\n  }\n\n  /**\n   * Encuentra todos los tipos de documento en la base de datos.\n   * @returns Una promesa que resuelve en un arreglo de todos los tipos de documento.\n   */\n  findAll(): Promise {\n    return this.documentTypeRepository.find();\n  }\n\n  /**\n   * Encuentra un tipo de documento por su ID en la base de datos.\n   * @param id El ID del tipo de documento a encontrar.\n   * @returns Una promesa que resuelve en el tipo de documento encontrado.\n   * @throws `NotFoundException` si el tipo de documento no existe.\n   */\n  findOneById(id: string): Promise {\n    return this.documentTypeRepository\n      .findOne({ where: { id } })\n      .then((result) => {\n        if (result) {\n          return result;\n        } else {\n          throw new NotFoundException(`El ID ${id} no existe en la base de datos`);\n        }\n      });\n  }\n\n  /**\n   * Encuentra todos los tipos de documento por su estado en la base de datos.\n   * @param state El estado de los tipos de documento a encontrar.\n   * @returns Una promesa que resuelve en un arreglo de todos los tipos de documento encontrados.\n   */\n  findByState(state: boolean): Promise {\n    return this.documentTypeRepository.find({ where: { state } });\n  }\n\n  /**\n   * Encuentra todos los tipos de documento por su nombre en la base de datos.\n   * @param name El nombre de los tipos de documento a encontrar.\n   * @returns Una promesa que resuelve en un arreglo de todos los tipos de documento encontrados.\n   */\n  findByName(name: string): Promise {\n    return this.documentTypeRepository.find({ where: { name } });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/DocumentTypeRepositoryInterface.html":{"url":"interfaces/DocumentTypeRepositoryInterface.html","title":"interface - DocumentTypeRepositoryInterface","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  DocumentTypeRepositoryInterface\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/data/persistence/repositories/interfaces/document-type-repository.interface.ts\n        \n\n\n            \n                Description\n            \n            \n                Interfaz para el repositorio de tipos de documento.\nExtiende la interfaz base de repositorio y define métodos adicionales específicos para los tipos de documento.\n\n            \n\n            \n                Extends\n            \n            \n                            BaseRepositoryInterface\n            \n\n        \n            Index\n            \n                \n                    \n                        \n                            Methods\n                        \n                    \n                    \n                        \n                            \n                                \n                                    \n                                        findByName\n                                    \n                                \n                                \n                                    \n                                        findByState\n                                    \n                                \n                            \n                        \n                    \n                \n            \n        \n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        findByName\n                        \n                    \n                \n            \n            \n                \nfindByName(name: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/data/persistence/repositories/interfaces/document-type-repository.interface.ts:30\n                        \n                    \n\n\n            \n                \n                        Encuentra tipos de documento por nombre.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                name\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Nombre del tipo de documento\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                Promesa que resuelve con un arreglo de tipos de documento con el nombre especificado\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findByState\n                        \n                    \n                \n            \n            \n                \nfindByState(state: boolean)\n                \n            \n\n\n                    \n                        \n                            Defined in src/data/persistence/repositories/interfaces/document-type-repository.interface.ts:21\n                        \n                    \n\n\n            \n                \n                        Encuentra tipos de documento por estado.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                state\n                                            \n                                                            boolean\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Estado del tipo de documento\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                Promesa que resuelve con un arreglo de tipos de documento con el estado especificado\n\n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { DocumentTypeEntity } from '../../entities';\nimport { BaseRepositoryInterface } from './base/';\n\n/**\n * Interfaz para el repositorio de tipos de documento.\n *\n * Extiende la interfaz base de repositorio y define métodos adicionales específicos para los tipos de documento.\n *\n * @export\n * @interface DocumentTypeRepositoryInterface\n * @extends {BaseRepositoryInterface} Interfaz base de repositorio para tipos de documento\n */\nexport interface DocumentTypeRepositoryInterface extends BaseRepositoryInterface {\n  /**\n   * Encuentra tipos de documento por estado.\n   *\n   * @param {boolean} state Estado del tipo de documento\n   * @returns {Promise} Promesa que resuelve con un arreglo de tipos de documento con el estado especificado\n   * @memberof DocumentTypeRepositoryInterface\n   */\n  findByState(state: boolean): Promise;\n\n  /**\n   * Encuentra tipos de documento por nombre.\n   *\n   * @param {string} name Nombre del tipo de documento\n   * @returns {Promise} Promesa que resuelve con un arreglo de tipos de documento con el nombre especificado\n   * @memberof DocumentTypeRepositoryInterface\n   */\n  findByName(name: string): Promise;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ExceptionFiltersFilter.html":{"url":"classes/ExceptionFiltersFilter.html","title":"class - ExceptionFiltersFilter","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ExceptionFiltersFilter\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/exception-filters/exception-filters.filter.ts\n        \n\n\n            \n                Description\n            \n            \n                Filtro de excepciones genérico\n\n            \n\n\n            \n                Implements\n            \n            \n                        ExceptionFilter\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                catch\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        catch\n                        \n                    \n                \n            \n            \n                \ncatch(exception: T, host: ArgumentsHost)\n                \n            \n\n\n                    \n                        \n                            Defined in src/common/exception-filters/exception-filters.filter.ts:20\n                        \n                    \n\n\n            \n                \n                        Método para manejar excepciones\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                exception\n                                            \n                                                        T\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Excepción capturada\n\n                                            \n                                        \n                                        \n                                                host\n                                            \n                                                        ArgumentsHost\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Contexto de los argumentos\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { ArgumentsHost, Catch, ExceptionFilter } from '@nestjs/common';\n\n/**\n * Filtro de excepciones genérico\n *\n * @template T Tipo de la excepción\n * @export\n * @class ExceptionFiltersFilter\n * @implements {ExceptionFilter}\n */\n@Catch()\nexport class ExceptionFiltersFilter implements ExceptionFilter {\n  /**\n   * Método para manejar excepciones\n   *\n   * @param {T} exception Excepción capturada\n   * @param {ArgumentsHost} host Contexto de los argumentos\n   * @memberof ExceptionFiltersFilter\n   */\n  catch(exception: T, host: ArgumentsHost) {}\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"guards/GuardsGuard.html":{"url":"guards/GuardsGuard.html","title":"guard - GuardsGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n    Guards\n    GuardsGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n        \n            \n            File\n            \n            \n                src/presentation/guards/guards.guard.ts\n            \n\n\n\n\n\n\n                \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                canActivate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n                \n    Constructor\n        \n            \n                \n                    \nconstructor(jwtService: JwtService)\n                    \n                \n                        \n                            \n                                Defined in src/presentation/guards/guards.guard.ts:6\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        jwtService\n                                                  \n                                                        \n                                                                    JwtService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n                \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        canActivate\n                        \n                    \n                \n            \n            \n                \n                        \n                    canActivate(context: ExecutionContext)\n                \n            \n\n\n                    \n                        \n                            Defined in src/presentation/guards/guards.guard.ts:9\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                context\n                                            \n                                                        ExecutionContext\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n        \n\n\n        \n            import { CanActivate, ExecutionContext, Injectable } from '@nestjs/common';\nimport { JwtService } from '@nestjs/jwt';\nimport { Observable } from 'rxjs';\n\n@Injectable()\nexport class GuardsGuard implements CanActivate {\n  constructor(private jwtService: JwtService) {}\n\n  async canActivate(context: ExecutionContext): Promise {\n    const request = context.switchToHttp().getRequest();\n    const authHeader = request.headers.authorization;\n\n    if (!authHeader || !authHeader.startsWith('access_token ')) {\n      return false;\n    }\n\n    const token = authHeader.split(' ')[1];\n\n    try {\n      const payload = this.jwtService.verify(token);\n      request.user = payload;\n      return true;\n    } catch (err) {\n      return false;\n    }\n  }\n}\n\n        \n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/InterceptorsInterceptor.html":{"url":"injectables/InterceptorsInterceptor.html","title":"injectable - InterceptorsInterceptor","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  InterceptorsInterceptor\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/presentation/interceptors/interceptors.interceptor.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                intercept\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        intercept\n                        \n                    \n                \n            \n            \n                \nintercept(context: ExecutionContext, next: CallHandler)\n                \n            \n\n\n                    \n                        \n                            Defined in src/presentation/interceptors/interceptors.interceptor.ts:11\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                context\n                                            \n                                                        ExecutionContext\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                next\n                                            \n                                                        CallHandler\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Observable\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {\n  CallHandler,\n  ExecutionContext,\n  Injectable,\n  NestInterceptor,\n} from '@nestjs/common';\nimport { Observable } from 'rxjs';\n\n@Injectable()\nexport class InterceptorsInterceptor implements NestInterceptor {\n  intercept(context: ExecutionContext, next: CallHandler): Observable {\n    return next.handle();\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/MiddlewaresMiddleware.html":{"url":"injectables/MiddlewaresMiddleware.html","title":"injectable - MiddlewaresMiddleware","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  MiddlewaresMiddleware\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/presentation/middlewares/middlewares.middleware.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                use\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        use\n                        \n                    \n                \n            \n            \n                \nuse(req: Request, res: Response, next: NextFunction)\n                \n            \n\n\n                    \n                        \n                            Defined in src/presentation/middlewares/middlewares.middleware.ts:5\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                req\n                                            \n                                                        Request\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                res\n                                            \n                                                        Response\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                next\n                                            \n                                                        NextFunction\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, NestMiddleware } from '@nestjs/common';\nimport { Request, Response, NextFunction } from 'express';\n@Injectable()\nexport class MiddlewaresMiddleware implements NestMiddleware {\n  use(req: Request, res: Response, next: NextFunction) {\n    const authHeader = req.headers.authorization;\n\n    if (authHeader && authHeader.startsWith('access_token ')) {\n      const token = authHeader.substring(7);\n      req.headers['Authorization'] = `access_token ${token}`;\n    }\n\n    next();\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/PaginationDTO.html":{"url":"classes/PaginationDTO.html","title":"class - PaginationDTO","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  PaginationDTO\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/business/dtos/pagination.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                Data Transfer Object para la paginación.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                length\n                            \n                            \n                                    \n                                page\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        length\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNumberString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/business/dtos/pagination.dto.ts:20\n                        \n                    \n\n            \n                \n                    Longitud de los elementos en una página.\nDebe ser una cadena que representa un número.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        page\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNumberString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/business/dtos/pagination.dto.ts:32\n                        \n                    \n\n            \n                \n                    Número de página.\nDebe ser una cadena que representa un número.\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsNumberString } from 'class-validator';\n\n/**\n * Data Transfer Object para la paginación.\n *\n * @export\n * @class PaginationDTO\n */\nexport class PaginationDTO {\n  /**\n   * Longitud de los elementos en una página.\n   * \n   * Debe ser una cadena que representa un número.\n   *\n   * @type {number}\n   * @memberof PaginationDTO\n   * @decorator IsNumberString\n   */\n  @IsNumberString()\n  length: number;\n\n  /**\n   * Número de página.\n   * \n   * Debe ser una cadena que representa un número.\n   *\n   * @type {number}\n   * @memberof PaginationDTO\n   * @decorator IsNumberString\n   */\n  @IsNumberString()\n  page: number;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/PaginationModel.html":{"url":"interfaces/PaginationModel.html","title":"interface - PaginationModel","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  PaginationModel\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/data/models/pagination.model.ts\n        \n\n\n            \n                Description\n            \n            \n                Interfaz para el modelo de paginación\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            length\n                                        \n                                \n                                \n                                        \n                                            page\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        length\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        length:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        page\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        page:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export interface PaginationModel {\n  length: number;\n  page: number;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/PipesPipe.html":{"url":"injectables/PipesPipe.html","title":"injectable - PipesPipe","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  PipesPipe\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/presentation/pipes/pipes.pipe.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                transform\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        transform\n                        \n                    \n                \n            \n            \n                \ntransform(value: any, metadata: ArgumentMetadata)\n                \n            \n\n\n                    \n                        \n                            Defined in src/presentation/pipes/pipes.pipe.ts:5\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                value\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                metadata\n                                            \n                                                        ArgumentMetadata\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { ArgumentMetadata, Injectable, PipeTransform } from '@nestjs/common';\n\n@Injectable()\nexport class PipesPipe implements PipeTransform {\n  transform(value: any, metadata: ArgumentMetadata) {\n    return value;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/SecurityController.html":{"url":"controllers/SecurityController.html","title":"controller - SecurityController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  SecurityController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/presentation/controllers/security/security.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                security\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                logout\n                            \n                            \n                                    \n                                signIn\n                            \n                            \n                                    \n                                signUp\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        logout\n                        \n                    \n                \n            \n            \n                \n                        \n                    logout(body: literal type)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('logout')\n                \n            \n\n                    \n                        \n                            Defined in src/presentation/controllers/security/security.controller.ts:20\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                body\n                                            \n                                                        literal type\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         boolean\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        signIn\n                        \n                    \n                \n            \n            \n                \n                        \n                    signIn(customer: SignDTO)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('sign-in')\n                \n            \n\n                    \n                        \n                            Defined in src/presentation/controllers/security/security.controller.ts:15\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                customer\n                                            \n                                                            SignDTO\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        signUp\n                        \n                    \n                \n            \n            \n                \n                        \n                    signUp(customer: CustomerDTO)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('sign-up')\n                \n            \n\n                    \n                        \n                            Defined in src/presentation/controllers/security/security.controller.ts:10\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                customer\n                                            \n                                                            CustomerDTO\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import { Body, Controller, Get, Post } from '@nestjs/common';\nimport { SecurityService } from '../../../business/services';\nimport { CustomerDTO, SignDTO } from '../../../business/dtos';\n\n@Controller('security')\nexport class SecurityController {\n  constructor(private readonly securityService: SecurityService) {}\n\n  @Post('sign-up')\n  signUp(@Body() customer: CustomerDTO) {\n    return this.securityService.signUp(customer);\n  }\n\n  @Post('sign-in')\n  signIn(@Body() customer: SignDTO) {\n    return this.securityService.signIn(customer);\n  }\n\n  @Get('logout')\n  logout(@Body() body: { JWT: string }): boolean {\n    return this.securityService.signOut(body.JWT);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/SecurityService.html":{"url":"injectables/SecurityService.html","title":"injectable - SecurityService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  SecurityService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/business/services/security/security.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                signIn\n                            \n                            \n                                signOut\n                            \n                            \n                                    Async\n                                signUp\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(customerRepository: CustomerRepository, documentTypeRepository: DocumentTypeRepository, accountService: AccountService, jwtService: JwtService)\n                    \n                \n                        \n                            \n                                Defined in src/business/services/security/security.service.ts:24\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        customerRepository\n                                                  \n                                                        \n                                                                        CustomerRepository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        documentTypeRepository\n                                                  \n                                                        \n                                                                        DocumentTypeRepository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        accountService\n                                                  \n                                                        \n                                                                        AccountService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        jwtService\n                                                  \n                                                        \n                                                                    JwtService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        signIn\n                        \n                    \n                \n            \n            \n                \n                        \n                    signIn(user: SignDTO)\n                \n            \n\n\n                    \n                        \n                            Defined in src/business/services/security/security.service.ts:39\n                        \n                    \n\n\n            \n                \n                        Identificarse en el sistema\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                user\n                                            \n                                                            SignDTO\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                {string}\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        signOut\n                        \n                    \n                \n            \n            \n                \nsignOut(JWT: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/business/services/security/security.service.ts:100\n                        \n                    \n\n\n            \n                \n                        Salir del sistema\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                JWT\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         boolean\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        signUp\n                        \n                    \n                \n            \n            \n                \n                        \n                    signUp(user: CustomerDTO)\n                \n            \n\n\n                    \n                        \n                            Defined in src/business/services/security/security.service.ts:58\n                        \n                    \n\n\n            \n                \n                        Crear usuario en el sistema\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                user\n                                            \n                                                            CustomerDTO\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                {string}\n\n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {\n  Injectable,\n  InternalServerErrorException,\n  NotFoundException,\n  UnauthorizedException,\n} from '@nestjs/common';\nimport { JwtService } from '@nestjs/jwt';\n\n// Repositories\nimport {\n  CustomerRepository,\n  DocumentTypeRepository,\n} from '../../../data/persistence/repositories';\n\n// Services\nimport { AccountService } from '../account';\n\n// Entities\nimport { AccountDTO, CustomerDTO, SignDTO } from '../../dtos';\nimport { CustomerEntity } from '../../../data/persistence/entities';\n\n@Injectable()\nexport class SecurityService {\n  constructor(\n    private readonly customerRepository: CustomerRepository,\n    private readonly documentTypeRepository: DocumentTypeRepository,\n    private readonly accountService: AccountService,\n    private jwtService: JwtService,\n  ) {}\n\n  /**\n   * Identificarse en el sistema\n   *\n   * @param {CustomerModel} user\n   * @return {*}  {string}\n   * @memberof SecurityService\n   */\n  async signIn(user: SignDTO) {\n    const answer = await this.customerRepository.findOneByEmailAndPassword(\n      user.email,\n      user.password,\n    );\n    if (answer) {\n      const customer = await this.customerRepository.findOneByEmail(user.email);\n      const payload = { email: customer.email, sub: customer.id };\n      return { access_token: this.jwtService.sign(payload), id: customer.id };\n    } else throw new UnauthorizedException('Datos de identificación inválidos');\n  }\n\n  /**\n   * Crear usuario en el sistema\n   *\n   * @param {CustomerModel} user\n   * @return {*}  {string}\n   * @memberof SecurityService\n   */\n  async signUp(user: CustomerDTO) {\n    const newCustomer = new CustomerEntity();\n    newCustomer.documentType = await this.documentTypeRepository.findOneById(\n      user.documentTypeId,\n    );\n    newCustomer.document = user.document;\n    newCustomer.fullName = user.fullName;\n    newCustomer.email = user.email;\n    newCustomer.phone = user.phone;\n    newCustomer.password = user.password;\n    if (await this.customerRepository.existEmail(user.email)) {\n      throw new NotFoundException(\n        `El email ${user.email} ya  existe en base de datos`,\n      );\n    }\n\n    const customer = await this.customerRepository.register(newCustomer);\n\n    if (customer) {\n      const newAccount = new AccountDTO();\n      newAccount.customerId = customer.id;\n      newAccount.accountTypeId = 'ab27c9ac-a01c-4c22-a6d6-ce5ab3b79185';\n\n      const account = await this.accountService.createAccount(newAccount);\n      account.balance = 0;\n      if (account) {\n        const payload = { email: customer.email, sub: customer.id };\n        return {\n          access_token: this.jwtService.sign(payload),\n          account: account,\n        };\n      } else\n        throw new UnauthorizedException('Datos de identificación inválidos');\n    } else throw new InternalServerErrorException();\n  }\n\n  /**\n   * Salir del sistema\n   *\n   * @param {string} JWToken\n   * @memberof SecurityService\n   */\n  signOut(JWT: string): boolean {\n    if (this.jwtService.verify(JWT)) return true;\n\n    return false;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/SignDTO.html":{"url":"classes/SignDTO.html","title":"class - SignDTO","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  SignDTO\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/business/dtos/sign.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                Data Transfer Object para los datos de inicio de sesión.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                email\n                            \n                            \n                                    \n                                password\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/business/dtos/sign.dto.ts:20\n                        \n                    \n\n            \n                \n                    Correo electrónico del usuario.\nDebe ser una cadena.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/business/dtos/sign.dto.ts:32\n                        \n                    \n\n            \n                \n                    Contraseña del usuario.\nDebe ser una cadena.\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsString } from 'class-validator';\n\n/**\n * Data Transfer Object para los datos de inicio de sesión.\n *\n * @export\n * @class SignDTO\n */\nexport class SignDTO {\n  /**\n   * Correo electrónico del usuario.\n   * \n   * Debe ser una cadena.\n   *\n   * @type {string}\n   * @memberof SignDTO\n   * @decorator IsString\n   */\n  @IsString()\n  email: string;\n\n  /**\n   * Contraseña del usuario.\n   * \n   * Debe ser una cadena.\n   *\n   * @type {string}\n   * @memberof SignDTO\n   * @decorator IsString\n   */\n  @IsString()\n  password: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/TransferController.html":{"url":"controllers/TransferController.html","title":"controller - TransferController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  TransferController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/presentation/controllers/transfer/transfer.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                transfer\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    Async\n                                createTransfer\n                            \n                            \n                                    \n                                    Async\n                                deleteTransfer\n                            \n                            \n                                    \n                                    \n                                getHistory\n                            \n                            \n                                    \n                                    \n                                    Async\n                                getHistoryIn\n                            \n                            \n                                    \n                                    \n                                    Async\n                                getHistoryOut\n                            \n                            \n                                    \n                                    \n                                    Async\n                                selectTransfer\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Async\n                        createTransfer\n                        \n                    \n                \n            \n            \n                \n                        \n                    createTransfer(transfer: TransferDTO)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post()@UseGuards(GuardsGuard)\n                \n            \n\n                    \n                        \n                            Defined in src/presentation/controllers/transfer/transfer.controller.ts:21\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                transfer\n                                            \n                                                            TransferDTO\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        deleteTransfer\n                        \n                    \n                \n            \n            \n                \n                        \n                    deleteTransfer(id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete(':id')\n                \n            \n\n                    \n                        \n                            Defined in src/presentation/controllers/transfer/transfer.controller.ts:32\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        getHistory\n                        \n                    \n                \n            \n            \n                \n                        \n                    getHistory(body: literal type)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('history')@UseGuards(GuardsGuard)\n                \n            \n\n                    \n                        \n                            Defined in src/presentation/controllers/transfer/transfer.controller.ts:74\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                body\n                                            \n                                                        literal type\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Async\n                        getHistoryIn\n                        \n                    \n                \n            \n            \n                \n                        \n                    getHistoryIn(body: literal type)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('income')@UseGuards(GuardsGuard)\n                \n            \n\n                    \n                        \n                            Defined in src/presentation/controllers/transfer/transfer.controller.ts:40\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                body\n                                            \n                                                        literal type\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Async\n                        getHistoryOut\n                        \n                    \n                \n            \n            \n                \n                        \n                    getHistoryOut(body: literal type)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('outcome')@UseGuards(GuardsGuard)\n                \n            \n\n                    \n                        \n                            Defined in src/presentation/controllers/transfer/transfer.controller.ts:57\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                body\n                                            \n                                                        literal type\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Async\n                        selectTransfer\n                        \n                    \n                \n            \n            \n                \n                        \n                    selectTransfer(id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/select/:id')@UseGuards(GuardsGuard)\n                \n            \n\n                    \n                        \n                            Defined in src/presentation/controllers/transfer/transfer.controller.ts:27\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Body,\n  Controller,\n  Delete,\n  Get,\n  Param,\n  Post,\n  UseGuards,\n} from '@nestjs/common';\nimport { DataRangeDTO, PaginationDTO, TransferDTO } from 'src/business/dtos';\nimport { GuardsGuard } from 'src/presentation/guards/guards.guard';\nimport { TransferService } from '../../../business/services';\nimport { TransferEntity } from '../../../data/persistence/entities';\n\n@Controller('transfer')\nexport class TransferController {\n  constructor(private readonly transferService: TransferService) {}\n\n  @Post()\n  @UseGuards(GuardsGuard)\n  async createTransfer(@Body() transfer: TransferDTO): Promise {\n    return this.transferService.createTransfer(transfer);\n  }\n\n  @Get('/select/:id')\n  @UseGuards(GuardsGuard)\n  async selectTransfer(@Param('id') id: string): Promise {\n    return this.transferService.selectTransfer(id);\n  }\n\n  @Delete(':id')\n  async deleteTransfer(@Param('id') id: string): Promise {\n    const transfer = await this.transferService.selectTransfer(id);\n    this.transferService.deleteTransfer(id);\n    return transfer;\n  }\n\n  @Post('income')\n  @UseGuards(GuardsGuard)\n  async getHistoryIn(\n    @Body()\n    body: {\n      accountId: string;\n      pagination: PaginationDTO;\n      dataRange?: DataRangeDTO;\n    },\n  ): Promise {\n    return this.transferService.getHistoryIn(\n      body.accountId,\n      body.pagination,\n      body.dataRange,\n    );\n  }\n\n  @Post('outcome')\n  @UseGuards(GuardsGuard)\n  async getHistoryOut(\n    @Body()\n    body: {\n      accountId: string;\n      pagination: PaginationDTO;\n      dataRange?: DataRangeDTO;\n    },\n  ): Promise {\n    return this.transferService.getHistoryOut(\n      body.accountId,\n      body.pagination,\n      body.dataRange,\n    );\n  }\n\n  @Post('history')\n  @UseGuards(GuardsGuard)\n  getHistory(\n    @Body()\n    body: {\n      accountId: string;\n      pagination: PaginationDTO;\n      dataRange?: DataRangeDTO;\n    },\n  ): Promise {\n    return this.transferService.getHistory(\n      body.accountId,\n      body.pagination,\n      body.dataRange,\n    );\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/TransferDTO.html":{"url":"classes/TransferDTO.html","title":"class - TransferDTO","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  TransferDTO\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/business/dtos/transfer.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                Data Transfer Object para representar una transferencia.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                amount\n                            \n                            \n                                    \n                                inComeId\n                            \n                            \n                                    \n                                outComeId\n                            \n                            \n                                    \n                                    \n                                reason\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        amount\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNumberString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/business/dtos/transfer.dto.ts:44\n                        \n                    \n\n            \n                \n                    Monto de la transferencia.\nDebe ser una cadena que representa un número.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        inComeId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNumberString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/business/dtos/transfer.dto.ts:32\n                        \n                    \n\n            \n                \n                    Identificador de la cuenta de destino.\nDebe ser una cadena que representa un número.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        outComeId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNumberString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/business/dtos/transfer.dto.ts:20\n                        \n                    \n\n            \n                \n                    Identificador de la cuenta de origen.\nDebe ser una cadena que representa un número.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        reason\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@MaxLength(500)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/business/dtos/transfer.dto.ts:58\n                        \n                    \n\n            \n                \n                    Razón o motivo de la transferencia.\nDebe ser una cadena con un máximo de 500 caracteres.\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsNumberString, IsString, MaxLength } from 'class-validator';\n\n/**\n * Data Transfer Object para representar una transferencia.\n *\n * @export\n * @class TransferDTO\n */\nexport class TransferDTO {\n  /**\n   * Identificador de la cuenta de origen.\n   * \n   * Debe ser una cadena que representa un número.\n   *\n   * @type {string}\n   * @memberof TransferDTO\n   * @decorator IsNumberString\n   */\n  @IsNumberString()\n  outComeId: string;\n\n  /**\n   * Identificador de la cuenta de destino.\n   * \n   * Debe ser una cadena que representa un número.\n   *\n   * @type {string}\n   * @memberof TransferDTO\n   * @decorator IsNumberString\n   */\n  @IsNumberString()\n  inComeId: string;\n\n  /**\n   * Monto de la transferencia.\n   * \n   * Debe ser una cadena que representa un número.\n   *\n   * @type {string}\n   * @memberof TransferDTO\n   * @decorator IsNumberString\n   */\n  @IsNumberString()\n  amount: string;\n\n  /**\n   * Razón o motivo de la transferencia.\n   * \n   * Debe ser una cadena con un máximo de 500 caracteres.\n   *\n   * @type {string}\n   * @memberof TransferDTO\n   * @decorator IsString\n   * @decorator MaxLength\n   */\n  @IsString()\n  @MaxLength(500)\n  reason: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/TransferEntity.html":{"url":"entities/TransferEntity.html","title":"entity - TransferEntity","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  TransferEntity\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/data/persistence/entities/transfer.entitty.ts\n        \n\n\n            \n                Description\n            \n            \n                Entidad para la transferencia de fondos entre cuentas\n\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                amount\n                            \n                            \n                                    \n                                dateTime\n                            \n                            \n                                    \n                                    Optional\n                                deletedAt\n                            \n                            \n                                    \n                                id\n                            \n                            \n                                    \n                                    \n                                inCome\n                            \n                            \n                                    \n                                    \n                                outCome\n                            \n                            \n                                    \n                                reason\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        amount\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 0\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({name: 'amount', type: 'numeric'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/data/persistence/entities/transfer.entitty.ts:61\n                        \n                    \n\n            \n                \n                    Monto de la transferencia\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        dateTime\n                        \n                    \n                \n            \n                \n                    \n                        Type :     number | Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({name: 'date_time', type: 'numeric'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/data/persistence/entities/transfer.entitty.ts:86\n                        \n                    \n\n            \n                \n                    Fecha y hora de la transferencia\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        deletedAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :     number | Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({name: 'deleted_at', type: 'timestamp', nullable: true, select: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/data/persistence/entities/transfer.entitty.ts:100\n                        \n                    \n\n            \n                \n                    Fecha de eliminación de la transferencia (si se elimina)\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Default value : uuid()\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({name: 'id', type: 'uuid', primary: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/data/persistence/entities/transfer.entitty.ts:29\n                        \n                    \n\n            \n                \n                    Identificador único de la transferencia\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        inCome\n                        \n                    \n                \n            \n                \n                    \n                        Type :         AccountEntity\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ManyToOne(undefined)@JoinColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/data/persistence/entities/transfer.entitty.ts:49\n                        \n                    \n\n            \n                \n                    Cuenta a donde llega el dinero\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        outCome\n                        \n                    \n                \n            \n                \n                    \n                        Type :         AccountEntity\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ManyToOne(undefined)@JoinColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/data/persistence/entities/transfer.entitty.ts:39\n                        \n                    \n\n            \n                \n                    Cuenta de donde sale el dinero\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        reason\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({name: 'reason', type: 'varchar', length: 100})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/data/persistence/entities/transfer.entitty.ts:74\n                        \n                    \n\n            \n                \n                    Motivo de la transferencia\n\n                \n            \n\n        \n    \n\n    \n\n\n    \n        import { Column, Entity, JoinColumn, ManyToOne } from 'typeorm';\nimport { v4 as uuid } from 'uuid';\nimport { TransferModel } from '../../models';\nimport { AccountEntity } from './';\n\n/**\n * Entidad para la transferencia de fondos entre cuentas\n *\n * @export\n * @class TransferEntity\n * @implements {TransferModel}\n */\n@Entity({\n  name: 'transfer',\n  schema: 'public',\n})\nexport class TransferEntity implements TransferModel {\n  /**\n   * Identificador único de la transferencia\n   *\n   * @type {string}\n   * @memberof TransferEntity\n   */\n  @Column({\n    name: 'id',\n    type: 'uuid',\n    primary: true,\n  })\n  id = uuid();\n\n  /**\n   * Cuenta de donde sale el dinero\n   *\n   * @type {AccountEntity}\n   * @memberof TransferEntity\n   */\n  @ManyToOne(() => AccountEntity)\n  @JoinColumn()\n  outCome: AccountEntity;\n\n  /**\n   * Cuenta a donde llega el dinero\n   *\n   * @type {AccountEntity}\n   * @memberof TransferEntity\n   */\n  @ManyToOne(() => AccountEntity)\n  @JoinColumn()\n  inCome: AccountEntity;\n\n  /**\n   * Monto de la transferencia\n   *\n   * @type {number}\n   * @memberof TransferEntity\n   */\n  @Column({\n    name: 'amount',\n    type: 'numeric',\n  })\n  amount = 0;\n\n  /**\n   * Motivo de la transferencia\n   *\n   * @type {string}\n   * @memberof TransferEntity\n   */\n  @Column({\n    name: 'reason',\n    type: 'varchar',\n    length: 100,\n  })\n  reason: string;\n\n  /**\n   * Fecha y hora de la transferencia\n   *\n   * @type {(number | Date)}\n   * @memberof TransferEntity\n   */\n  @Column({\n    name: 'date_time',\n    type: 'numeric',\n  })\n  dateTime: number | Date;\n\n  /**\n   * Fecha de eliminación de la transferencia (si se elimina)\n   *\n   * @type {(number | Date)}\n   * @memberof TransferEntity\n   */\n  @Column({\n    name: 'deleted_at',\n    type: 'timestamp',\n    nullable: true,\n    select: false,\n  })\n  deletedAt?: number | Date;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/TransferModel.html":{"url":"interfaces/TransferModel.html","title":"interface - TransferModel","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  TransferModel\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/data/models/transfer.model.ts\n        \n\n\n            \n                Description\n            \n            \n                Interfaz para el modelo de transferencia\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            amount\n                                        \n                                \n                                \n                                        \n                                            dateTime\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            deletedAt\n                                        \n                                \n                                \n                                        \n                                            id\n                                        \n                                \n                                \n                                        \n                                            inCome\n                                        \n                                \n                                \n                                        \n                                            outCome\n                                        \n                                \n                                \n                                        \n                                            reason\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        amount\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        amount:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        dateTime\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        dateTime:     Date | number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     Date | number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        deletedAt\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        deletedAt:     Date | number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     Date | number\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        id\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        id:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        inCome\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        inCome:         AccountModel\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         AccountModel\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        outCome\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        outCome:         AccountModel\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         AccountModel\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        reason\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        reason:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { AccountModel } from '.';\n\n/**\n * Interfaz para el modelo de transferencia\n *\n * @export\n * @interface TransferModel\n */\nexport interface TransferModel {\n  id: string;\n  outCome: AccountModel;\n  inCome: AccountModel;\n  amount: number;\n  reason: string;\n  dateTime: Date | number;\n  deletedAt?: Date | number;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/TransferRepository.html":{"url":"injectables/TransferRepository.html","title":"injectable - TransferRepository","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  TransferRepository\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/data/persistence/repositories/transfer.repository.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                delete\n                            \n                            \n                                findAll\n                            \n                            \n                                findByDataRange\n                            \n                            \n                                findIncomeByDataRange\n                            \n                            \n                                    Async\n                                findOneById\n                            \n                            \n                                findOutcomeByDataRange\n                            \n                            \n                                    Private\n                                hardDelete\n                            \n                            \n                                register\n                            \n                            \n                                    Private\n                                    Async\n                                softDelete\n                            \n                            \n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(transferRepository: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/data/persistence/repositories/transfer.repository.ts:8\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        transferRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        delete\n                        \n                    \n                \n            \n            \n                \ndelete(id: string, soft?: boolean)\n                \n            \n\n\n                    \n                        \n                            Defined in src/data/persistence/repositories/transfer.repository.ts:44\n                        \n                    \n\n\n            \n                \n                        Elimina una transferencia de la base de datos.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    El ID de la transferencia a eliminar.\n\n                                            \n                                        \n                                        \n                                                soft\n                                            \n                                                            boolean\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                            \n                                                    Opcional. Indica si se debe realizar un borrado suave o no. Por defecto es true.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findAll\n                        \n                    \n                \n            \n            \n                \nfindAll()\n                \n            \n\n\n                    \n                        \n                            Defined in src/data/persistence/repositories/transfer.repository.ts:85\n                        \n                    \n\n\n            \n                \n                        Encuentra todas las transferencias en la base de datos.\n\n\n                        \n                            Returns :         Promise\n\n                        \n                            \n                                Una promesa que resuelve en un arreglo de todas las transferencias.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findByDataRange\n                        \n                    \n                \n            \n            \n                \nfindByDataRange(dateInit: Date | number, dateEnd: Date | number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/data/persistence/repositories/transfer.repository.ts:156\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                dateInit\n                                            \n                                                        Date | number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                dateEnd\n                                            \n                                                        Date | number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findIncomeByDataRange\n                        \n                    \n                \n            \n            \n                \nfindIncomeByDataRange(accountId: string, dateInit: Date | number, dateEnd: Date | number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/data/persistence/repositories/transfer.repository.ts:141\n                        \n                    \n\n\n            \n                \n                        Encuentra las transferencias de entrada por rango de fechas y cuenta en la base de datos.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                accountId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    El ID de la cuenta de entrada.\n\n                                            \n                                        \n                                        \n                                                dateInit\n                                            \n                                                        Date | number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    La fecha de inicio del rango.\n\n                                            \n                                        \n                                        \n                                                dateEnd\n                                            \n                                                        Date | number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    La fecha de fin del rango.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                Una promesa que resuelve en un arreglo de transferencias de entrada.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        findOneById\n                        \n                    \n                \n            \n            \n                \n                        \n                    findOneById(id: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/data/persistence/repositories/transfer.repository.ts:98\n                        \n                    \n\n\n            \n                \n                        Encuentra una transferencia por su ID en la base de datos.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    El ID de la transferencia a encontrar.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                Una promesa que resuelve en la transferencia encontrada.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findOutcomeByDataRange\n                        \n                    \n                \n            \n            \n                \nfindOutcomeByDataRange(accountId: string, dateInit: Date | number, dateEnd: Date | number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/data/persistence/repositories/transfer.repository.ts:120\n                        \n                    \n\n\n            \n                \n                        Encuentra las transferencias de salida por rango de fechas y cuenta en la base de datos.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                accountId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    El ID de la cuenta de salida.\n\n                                            \n                                        \n                                        \n                                                dateInit\n                                            \n                                                        Date | number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    La fecha de inicio del rango.\n\n                                            \n                                        \n                                        \n                                                dateEnd\n                                            \n                                                        Date | number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    La fecha de fin del rango.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                Una promesa que resuelve en un arreglo de transferencias de salida.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        hardDelete\n                        \n                    \n                \n            \n            \n                \n                        \n                    hardDelete(id: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/data/persistence/repositories/transfer.repository.ts:53\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        register\n                        \n                    \n                \n            \n            \n                \nregister(entity: TransferEntity)\n                \n            \n\n\n                    \n                        \n                            Defined in src/data/persistence/repositories/transfer.repository.ts:19\n                        \n                    \n\n\n            \n                \n                        Registra una nueva transferencia en la base de datos.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                entity\n                                            \n                                                            TransferEntity\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Los datos de la transferencia a registrar.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                Una promesa que resuelve en la transferencia registrada.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Async\n                        softDelete\n                        \n                    \n                \n            \n            \n                \n                        \n                    softDelete(id: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/data/persistence/repositories/transfer.repository.ts:59\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        update\n                        \n                    \n                \n            \n            \n                \nupdate(id: string, entity: TransferEntity)\n                \n            \n\n\n                    \n                        \n                            Defined in src/data/persistence/repositories/transfer.repository.ts:30\n                        \n                    \n\n\n            \n                \n                        Actualiza una transferencia existente en la base de datos.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    El ID de la transferencia a actualizar.\n\n                                            \n                                        \n                                        \n                                                entity\n                                            \n                                                            TransferEntity\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Los nuevos datos de la transferencia.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                Una promesa que resuelve en la transferencia actualizada.\n\n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, NotFoundException } from '@nestjs/common';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { Between, Repository } from 'typeorm';\nimport { TransferEntity } from '../entities';\nimport { TransferRepositoryInterface } from './interfaces';\n\n@Injectable()\nexport class TransferRepository implements TransferRepositoryInterface {\n  constructor(\n    @InjectRepository(TransferEntity)\n    private readonly transferRepository: Repository,\n  ) {}\n\n  /**\n   * Registra una nueva transferencia en la base de datos.\n   * @param entity Los datos de la transferencia a registrar.\n   * @returns Una promesa que resuelve en la transferencia registrada.\n   */\n  register(entity: TransferEntity): Promise {\n    return this.transferRepository.save(entity);\n  }\n\n  /**\n   * Actualiza una transferencia existente en la base de datos.\n   * @param id El ID de la transferencia a actualizar.\n   * @param entity Los nuevos datos de la transferencia.\n   * @returns Una promesa que resuelve en la transferencia actualizada.\n   * @throws `NotFoundException` si la transferencia no existe.\n   */\n  update(id: string, entity: TransferEntity): Promise {\n    return this.transferRepository.update(id, entity).then((result) => {\n      if (result.affected === 0) {\n        throw new NotFoundException(`El ID ${id} no existe en la base de datos`);\n      }\n      return entity;\n    });\n  }\n\n  /**\n   * Elimina una transferencia de la base de datos.\n   * @param id El ID de la transferencia a eliminar.\n   * @param soft Opcional. Indica si se debe realizar un borrado suave o no. Por defecto es `true`.\n   */\n  delete(id: string, soft?: boolean) {\n    this.findOneById(id);\n    if (soft || soft === undefined) {\n      this.softDelete(id);\n    } else {\n      this.hardDelete(id);\n    }\n  }\n\n  private hardDelete(id: string) {\n    this.transferRepository.delete({\n      id,\n    });\n  }\n\n  private async softDelete(id: string) {\n    let newTransfer = new TransferEntity();\n    const transfer = await this.transferRepository\n      .findOne({\n        where: { id },\n      })\n      .then((result) => {\n        if (result) {\n          return result;\n        } else {\n          throw new NotFoundException(`El ID ${id} no existe en la base de datos`);\n        }\n      });\n    newTransfer = {\n      ...newTransfer,\n      ...transfer,\n      id: transfer.id,\n    };\n    newTransfer.deletedAt = Date.now();\n    this.update(transfer.id, newTransfer);\n  }\n\n  /**\n   * Encuentra todas las transferencias en la base de datos.\n   * @returns Una promesa que resuelve en un arreglo de todas las transferencias.\n   */\n  findAll(): Promise {\n    return this.transferRepository.find({\n      where: { deletedAt: undefined },\n      relations: ['inCome', 'outCome'],\n    });\n  }\n\n  /**\n   * Encuentra una transferencia por su ID en la base de datos.\n   * @param id El ID de la transferencia a encontrar.\n   * @returns Una promesa que resuelve en la transferencia encontrada.\n   * @throws `NotFoundException` si la transferencia no existe.\n   */\n  async findOneById(id: string): Promise {\n    return this.transferRepository\n      .findOne({\n        where: { id, deletedAt: undefined },\n        relations: ['inCome', 'outCome'],\n      })\n      .then((result) => {\n        if (result) {\n          return result;\n        } else {\n          throw new NotFoundException(`El ID ${id} no existe en la base de datos`);\n        }\n      });\n  }\n\n  /**\n   * Encuentra las transferencias de salida por rango de fechas y cuenta en la base de datos.\n   * @param accountId El ID de la cuenta de salida.\n   * @param dateInit La fecha de inicio del rango.\n   * @param dateEnd La fecha de fin del rango.\n   * @returns Una promesa que resuelve en un arreglo de transferencias de salida.\n   */\n  findOutcomeByDataRange(\n    accountId: string,\n    dateInit: Date | number,\n    dateEnd: Date | number,\n  ): Promise {\n    return this.transferRepository.find({\n      where: {\n        dateTime: Between(dateInit, dateEnd),\n        outCome: { id: accountId },\n      },\n      relations: ['inCome', 'outCome'],\n    });\n  }\n\n  /**\n   * Encuentra las transferencias de entrada por rango de fechas y cuenta en la base de datos.\n   * @param accountId El ID de la cuenta de entrada.\n   * @param dateInit La fecha de inicio del rango.\n   * @param dateEnd La fecha de fin del rango.\n   * @returns Una promesa que resuelve en un arreglo de transferencias de entrada.\n   */\n  findIncomeByDataRange(\n    accountId: string,\n    dateInit: Date | number,\n    dateEnd: Date | number,\n  ): Promise {\n    return this.transferRepository.find({\n      where: {\n        dateTime: Between(dateInit, dateEnd),\n        inCome: { id: accountId },\n      },\n      relations: ['inCome', 'outCome'],\n\n    });\n  }\n\n  findByDataRange(\n    dateInit: Date | number,\n    dateEnd: Date | number,\n  ): Promise {\n    return this.transferRepository.find({\n      where: {\n        dateTime: Between(dateInit, dateEnd),\n      },\n      relations: ['inCome', 'outCome'],\n\n    });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/TransferRepositoryInterface.html":{"url":"interfaces/TransferRepositoryInterface.html","title":"interface - TransferRepositoryInterface","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  TransferRepositoryInterface\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/data/persistence/repositories/interfaces/transfer-repository.interface.ts\n        \n\n\n            \n                Description\n            \n            \n                Interfaz para el repositorio de transferencias.\nExtiende la interfaz base de repositorio y define métodos adicionales específicos para las transferencias.\n\n            \n\n            \n                Extends\n            \n            \n                            BaseRepositoryInterface\n            \n\n        \n            Index\n            \n                \n                    \n                        \n                            Methods\n                        \n                    \n                    \n                        \n                            \n                                \n                                    \n                                        findAll\n                                    \n                                \n                                \n                                    \n                                        findIncomeByDataRange\n                                    \n                                \n                                \n                                    \n                                        findOneById\n                                    \n                                \n                                \n                                    \n                                        findOutcomeByDataRange\n                                    \n                                \n                            \n                        \n                    \n                \n            \n        \n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        findAll\n                        \n                    \n                \n            \n            \n                \nfindAll()\n                \n            \n\n\n                    \n                        \n                            Defined in src/data/persistence/repositories/interfaces/transfer-repository.interface.ts:20\n                        \n                    \n\n\n            \n                \n                        Encuentra todas las transferencias.\n\n\n                        \n                            Returns :         Promise\n\n                        \n                            \n                                Promesa que resuelve con un arreglo de todas las transferencias\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findIncomeByDataRange\n                        \n                    \n                \n            \n            \n                \nfindIncomeByDataRange(accountId: string, dateInit: Date | number, dateEnd: Date | number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/data/persistence/repositories/interfaces/transfer-repository.interface.ts:55\n                        \n                    \n\n\n            \n                \n                        Encuentra las transferencias de entrada para una cuenta dentro de un rango de fechas.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                accountId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    ID de la cuenta\n\n                                            \n                                        \n                                        \n                                                dateInit\n                                            \n                                                        Date | number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Fecha inicial del rango\n\n                                            \n                                        \n                                        \n                                                dateEnd\n                                            \n                                                        Date | number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Fecha final del rango\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                Promesa que resuelve con un arreglo de transferencias de entrada dentro del rango de fechas especificado\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findOneById\n                        \n                    \n                \n            \n            \n                \nfindOneById(id: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/data/persistence/repositories/interfaces/transfer-repository.interface.ts:29\n                        \n                    \n\n\n            \n                \n                        Encuentra una transferencia por su ID.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    ID de la transferencia a buscar\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                Promesa que resuelve con la transferencia encontrada\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findOutcomeByDataRange\n                        \n                    \n                \n            \n            \n                \nfindOutcomeByDataRange(accountId: string, dateInit: Date | number, dateEnd: Date | number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/data/persistence/repositories/interfaces/transfer-repository.interface.ts:40\n                        \n                    \n\n\n            \n                \n                        Encuentra las transferencias de salida para una cuenta dentro de un rango de fechas.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                accountId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    ID de la cuenta\n\n                                            \n                                        \n                                        \n                                                dateInit\n                                            \n                                                        Date | number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Fecha inicial del rango\n\n                                            \n                                        \n                                        \n                                                dateEnd\n                                            \n                                                        Date | number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Fecha final del rango\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                Promesa que resuelve con un arreglo de transferencias de salida dentro del rango de fechas especificado\n\n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { TransferEntity } from '../../entities';\nimport { BaseRepositoryInterface } from './base/';\n\n/**\n * Interfaz para el repositorio de transferencias.\n *\n * Extiende la interfaz base de repositorio y define métodos adicionales específicos para las transferencias.\n *\n * @export\n * @interface TransferRepositoryInterface\n * @extends {BaseRepositoryInterface} Interfaz base de repositorio para transferencias\n */\nexport interface TransferRepositoryInterface extends BaseRepositoryInterface {\n  /**\n   * Encuentra todas las transferencias.\n   *\n   * @returns {Promise} Promesa que resuelve con un arreglo de todas las transferencias\n   * @memberof TransferRepositoryInterface\n   */\n  findAll(): Promise;\n\n  /**\n   * Encuentra una transferencia por su ID.\n   *\n   * @param {string} id ID de la transferencia a buscar\n   * @returns {Promise} Promesa que resuelve con la transferencia encontrada\n   * @memberof TransferRepositoryInterface\n   */\n  findOneById(id: string): Promise;\n\n  /**\n   * Encuentra las transferencias de salida para una cuenta dentro de un rango de fechas.\n   *\n   * @param {string} accountId ID de la cuenta\n   * @param {(Date | number)} dateInit Fecha inicial del rango\n   * @param {(Date | number)} dateEnd Fecha final del rango\n   * @returns {Promise} Promesa que resuelve con un arreglo de transferencias de salida dentro del rango de fechas especificado\n   * @memberof TransferRepositoryInterface\n   */\n  findOutcomeByDataRange(\n    accountId: string,\n    dateInit: Date | number,\n    dateEnd: Date | number,\n  ): Promise;\n\n  /**\n   * Encuentra las transferencias de entrada para una cuenta dentro de un rango de fechas.\n   *\n   * @param {string} accountId ID de la cuenta\n   * @param {(Date | number)} dateInit Fecha inicial del rango\n   * @param {(Date | number)} dateEnd Fecha final del rango\n   * @returns {Promise} Promesa que resuelve con un arreglo de transferencias de entrada dentro del rango de fechas especificado\n   * @memberof TransferRepositoryInterface\n   */\n  findIncomeByDataRange(\n    accountId: string,\n    dateInit: Date | number,\n    dateEnd: Date | number,\n  ): Promise;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/TransferService.html":{"url":"injectables/TransferService.html","title":"injectable - TransferService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  TransferService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/business/services/transfer/transfer.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                createTransfer\n                            \n                            \n                                deleteTransfer\n                            \n                            \n                                    Async\n                                getHistory\n                            \n                            \n                                    Async\n                                getHistoryIn\n                            \n                            \n                                    Async\n                                getHistoryOut\n                            \n                            \n                                    Async\n                                selectTransfer\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(transferRepository: TransferRepository, accountRepository: AccountRepository, depositRepository: DepositRepository)\n                    \n                \n                        \n                            \n                                Defined in src/business/services/transfer/transfer.service.ts:15\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        transferRepository\n                                                  \n                                                        \n                                                                        TransferRepository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        accountRepository\n                                                  \n                                                        \n                                                                        AccountRepository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        depositRepository\n                                                  \n                                                        \n                                                                        DepositRepository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        createTransfer\n                        \n                    \n                \n            \n            \n                \n                        \n                    createTransfer(transfer: TransferDTO)\n                \n            \n\n\n                    \n                        \n                            Defined in src/business/services/transfer/transfer.service.ts:28\n                        \n                    \n\n\n            \n                \n                        Crear una transferencia entre cuentas del banco\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                transfer\n                                            \n                                                            TransferDTO\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                {TransferEntity}\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        deleteTransfer\n                        \n                    \n                \n            \n            \n                \ndeleteTransfer(transferId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/business/services/transfer/transfer.service.ts:167\n                        \n                    \n\n\n            \n                \n                        Borrar una transacción\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                transferId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        getHistory\n                        \n                    \n                \n            \n            \n                \n                        \n                    getHistory(accountId: string, pagination: PaginationModel, dataRange?: DataRangeModel)\n                \n            \n\n\n                    \n                        \n                            Defined in src/business/services/transfer/transfer.service.ts:130\n                        \n                    \n\n\n            \n                \n                        Obtener historial de transacciones de una cuenta\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                accountId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                pagination\n                                            \n                                                            PaginationModel\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                dataRange\n                                            \n                                                            DataRangeModel\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                {TransferEntity[]}\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        getHistoryIn\n                        \n                    \n                \n            \n            \n                \n                        \n                    getHistoryIn(accountId: string, pagination: PaginationModel, dataRange?: DataRangeModel)\n                \n            \n\n\n                    \n                        \n                            Defined in src/business/services/transfer/transfer.service.ts:95\n                        \n                    \n\n\n            \n                \n                        Obtener historial de transacciones de entrada en una cuenta\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                accountId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                pagination\n                                            \n                                                            PaginationModel\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                dataRange\n                                            \n                                                            DataRangeModel\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                {TransferEntity[]}\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        getHistoryOut\n                        \n                    \n                \n            \n            \n                \n                        \n                    getHistoryOut(accountId: string, pagination: PaginationModel, dataRange?: DataRangeModel)\n                \n            \n\n\n                    \n                        \n                            Defined in src/business/services/transfer/transfer.service.ts:60\n                        \n                    \n\n\n            \n                \n                        Obtener historial de transacciones de salida de una cuenta\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                accountId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                pagination\n                                            \n                                                            PaginationModel\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                dataRange\n                                            \n                                                            DataRangeModel\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                {TransferEntity[]}\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        selectTransfer\n                        \n                    \n                \n            \n            \n                \n                        \n                    selectTransfer(transferId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/business/services/transfer/transfer.service.ts:171\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                transferId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, NotFoundException } from '@nestjs/common';\nimport { TransferDTO } from 'src/business/dtos';\nimport {\n  DataRangeModel,\n  PaginationModel,\n  TransferModel\n} from '../../../data/models';\nimport { TransferEntity } from '../../../data/persistence/entities';\nimport {\n  AccountRepository,\n  DepositRepository,\n  TransferRepository\n} from '../../../data/persistence/repositories';\n@Injectable()\nexport class TransferService {\n  constructor(\n    private readonly transferRepository: TransferRepository,\n    private readonly accountRepository: AccountRepository,\n    private readonly depositRepository: DepositRepository,\n  ) {}\n  /**\n   * Crear una transferencia entre cuentas del banco\n   *\n   * @param {TransferModel} transfer\n   * @return {*}  {TransferEntity}\n   * @memberof TransferService\n   */\n  async createTransfer(transfer: TransferDTO): Promise {\n    const newTransfer = new TransferEntity();\n    const inCome = await this.accountRepository.findOneById(transfer.inComeId);\n    const outCome = await this.accountRepository.findOneById(\n      transfer.outComeId,\n    );\n    if (outCome.balance > Number(transfer.amount)) {\n      newTransfer.inCome = inCome;\n      newTransfer.outCome = outCome;\n      newTransfer.amount = Number(transfer.amount);\n      newTransfer.reason = transfer.reason;\n      outCome.balance = Number(outCome.balance) - Number(transfer.amount);\n      this.accountRepository.update(outCome.id, outCome);\n      this.accountRepository.update(outCome.id, outCome);\n      inCome.balance = Number(inCome.balance) +Number(transfer.amount);\n      this.accountRepository.update(inCome.id, inCome);\n      newTransfer.dateTime = Date.now();\n      return this.transferRepository.register(newTransfer);\n    } else {\n      throw new NotFoundException(`fondos insuficientes`);\n    }\n  }\n\n  /**\n   * Obtener historial de transacciones de salida de una cuenta\n   *\n   * @param {string} accountId\n   * @param {PaginationModel} pagination\n   * @param {DataRangeModel} [dataRange]\n   * @return {*}  {TransferEntity[]}\n   * @memberof TransferService\n   */\n  async getHistoryOut(\n    accountId: string,\n    pagination: PaginationModel,\n    dataRange?: DataRangeModel,\n  ): Promise {\n    if (dataRange) {\n      const array = (\n        await this.transferRepository.findOutcomeByDataRange(\n          accountId,\n          dataRange.startDate ?? 0,\n          dataRange.endDate ?? Date.now(),\n        )\n      ).filter(\n        (item) =>\n          item.outCome.id === accountId &&\n          item.amount > (dataRange.startAmount ?? 0) &&\n          item.amount  {\n    if (dataRange) {\n      const array = (\n        await this.transferRepository.findIncomeByDataRange(\n          accountId,\n          dataRange.startDate ?? 0,\n          dataRange.endDate ?? Date.now(),\n        )\n      ).filter(\n        (item) =>\n          item.inCome.id === accountId &&\n          item.amount > (dataRange.startAmount ?? 0) &&\n          item.amount  {\n    if (dataRange) {\n      const newArray = this.transferRepository.findByDataRange(\n        dataRange.startDate ?? 0,\n        dataRange.endDate ?? Date.now(),\n      );\n      const array = (await newArray).filter(\n        (item) =>\n          (item.inCome.id === accountId || item.outCome.id === accountId) &&\n          (item.amount >= Number(dataRange.startAmount) ?? 0) &&\n          (item.amount  item.inCome.id === accountId || item.outCome.id === accountId,\n      )\n      .slice(start, end);\n    return array;\n  }\n\n  /**\n   * Borrar una transacción\n   *\n   * @param {string} transferId\n   * @memberof TransferService\n   */\n  deleteTransfer(transferId: string): void {\n    this.transferRepository.delete(transferId);\n  }\n\n  async selectTransfer(transferId: string): Promise {\n    return await this.transferRepository.findOneById(transferId);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/TypeOrmExceptionFilter.html":{"url":"classes/TypeOrmExceptionFilter.html","title":"class - TypeOrmExceptionFilter","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  TypeOrmExceptionFilter\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/data/persistence/utils/exception-filters/typeorm.exception-filters.ts\n        \n\n\n            \n                Description\n            \n            \n                Clase que representa un filtro de excepciones para errores de TypeORM.\n\n            \n\n\n            \n                Implements\n            \n            \n                        ExceptionFilter\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                catch\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        catch\n                        \n                    \n                \n            \n            \n                \ncatch(exception: TypeORMError, host: ArgumentsHost)\n                \n            \n\n\n                    \n                        \n                            Defined in src/data/persistence/utils/exception-filters/typeorm.exception-filters.ts:14\n                        \n                    \n\n\n            \n                \n                        Método para manejar la excepción de TypeORM.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                exception\n                                            \n                                                        TypeORMError\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    La excepción capturada.\n\n                                            \n                                        \n                                        \n                                                host\n                                            \n                                                        ArgumentsHost\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    El contexto de los argumentos de la solicitud.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { ArgumentsHost, Catch, ExceptionFilter } from '@nestjs/common';\nimport { TypeORMError } from 'typeorm';\n\n/**\n * Clase que representa un filtro de excepciones para errores de TypeORM.\n */\n@Catch(TypeORMError)\nexport class TypeOrmExceptionFilter implements ExceptionFilter {\n  /**\n   * Método para manejar la excepción de TypeORM.\n   * @param exception La excepción capturada.\n   * @param host El contexto de los argumentos de la solicitud.\n   */\n  catch(exception: TypeORMError, host: ArgumentsHost) {\n    const response = host.switchToHttp().getResponse();\n    const message = exception.message;\n    const code: number = (exception as any).code;\n    const aditional = (exception as any).detail;\n\n    // Crear una respuesta personalizada para el error de TypeORM.\n    const customResponse = {\n      status: 500,\n      message: 'Ocurrió un error',\n      type: 'Internal Server Error',\n      errors: [{ message: message, detail: aditional }],\n      errorCode: code,\n      timestamp: new Date().toISOString(),\n    };\n\n    // Enviar la respuesta personalizada al cliente.\n    response.status(customResponse.status).json(customResponse);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/TypesOrmPostgresConfigService.html":{"url":"injectables/TypesOrmPostgresConfigService.html","title":"injectable - TypesOrmPostgresConfigService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  TypesOrmPostgresConfigService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/data/persistence/configs/types-orm-postgres-config.service.ts\n        \n\n\n            \n                Description\n            \n            \n                Servicio para la configuración de opciones de TypeORM para PostgreSQL\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                createTypeOrmOptions\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(configService: ConfigService)\n                    \n                \n                        \n                            \n                                Defined in src/data/persistence/configs/types-orm-postgres-config.service.ts:21\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        createTypeOrmOptions\n                        \n                    \n                \n            \n            \n                \ncreateTypeOrmOptions()\n                \n            \n\n\n                    \n                        \n                            Defined in src/data/persistence/configs/types-orm-postgres-config.service.ts:30\n                        \n                    \n\n\n            \n                \n                        Método para crear las opciones de configuración de TypeORM para PostgreSQL\n\n\n                        \n                            Returns :     TypeOrmModuleOptions\n\n                        \n                            \n                                Opciones de configuración de TypeORM\n\n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { ConfigService } from '@nestjs/config';\nimport { TypeOrmModuleOptions, TypeOrmOptionsFactory } from '@nestjs/typeorm';\nimport {\n  AccountEntity,\n  AccountTypeEntity,\n  CustomerEntity,\n  DepositEntity,\n  DocumentTypeEntity,\n  TransferEntity,\n} from '../entities';\n\n/**\n * Servicio para la configuración de opciones de TypeORM para PostgreSQL\n *\n * @export\n * @class TypesOrmPostgresConfigService\n * @implements {TypeOrmOptionsFactory}\n */\n@Injectable()\nexport class TypesOrmPostgresConfigService implements TypeOrmOptionsFactory {\n  constructor(private readonly configService: ConfigService) {}\n\n  /**\n   * Método para crear las opciones de configuración de TypeORM para PostgreSQL\n   *\n   * @returns {TypeOrmModuleOptions} Opciones de configuración de TypeORM\n   * @memberof TypesOrmPostgresConfigService\n   */\n  createTypeOrmOptions(): TypeOrmModuleOptions {\n    return {\n      type: 'postgres',\n      host: this.configService.get('DB_HOST'),\n      port: this.configService.get('DB_PORT'),\n      username: this.configService.get('DB_USER'),\n      password: this.configService.get('DB_PASSWORD'),\n      database: this.configService.get('DB_NAME'),\n      entities: [\n        AccountTypeEntity,\n        AccountEntity,\n        CustomerEntity,\n        DepositEntity,\n        DocumentTypeEntity,\n        TransferEntity,\n      ],\n      synchronize: true,\n      // logging: true,\n    };\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/UserController.html":{"url":"controllers/UserController.html","title":"controller - UserController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  UserController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/presentation/controllers/user/user.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                user\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    Async\n                                deleteUser\n                            \n                            \n                                    \n                                    Async\n                                findAllUsers\n                            \n                            \n                                    \n                                    Async\n                                findAllUsersDeleted\n                            \n                            \n                                    \n                                    Async\n                                findUser\n                            \n                            \n                                    \n                                    Async\n                                findUserByEmail\n                            \n                            \n                                    \n                                    Async\n                                registerUser\n                            \n                            \n                                    \n                                    Async\n                                unsuscribeUser\n                            \n                            \n                                    \n                                    Async\n                                updateUser\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        deleteUser\n                        \n                    \n                \n            \n            \n                \n                        \n                    deleteUser(id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete(':id')\n                \n            \n\n                    \n                        \n                            Defined in src/presentation/controllers/user/user.controller.ts:61\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        findAllUsers\n                        \n                    \n                \n            \n            \n                \n                        \n                    findAllUsers()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()\n                \n            \n\n                    \n                        \n                            Defined in src/presentation/controllers/user/user.controller.ts:23\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         Promise\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        findAllUsersDeleted\n                        \n                    \n                \n            \n            \n                \n                        \n                    findAllUsersDeleted()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('deleted')\n                \n            \n\n                    \n                        \n                            Defined in src/presentation/controllers/user/user.controller.ts:27\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         Promise\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        findUser\n                        \n                    \n                \n            \n            \n                \n                        \n                    findUser(id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get(':id')\n                \n            \n\n                    \n                        \n                            Defined in src/presentation/controllers/user/user.controller.ts:32\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        findUserByEmail\n                        \n                    \n                \n            \n            \n                \n                        \n                    findUserByEmail(email: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('email/:email')\n                \n            \n\n                    \n                        \n                            Defined in src/presentation/controllers/user/user.controller.ts:36\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                email\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        registerUser\n                        \n                    \n                \n            \n            \n                \n                        \n                    registerUser(customer: CustomerDTO)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post()\n                \n            \n\n                    \n                        \n                            Defined in src/presentation/controllers/user/user.controller.ts:43\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                customer\n                                            \n                                                            CustomerDTO\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        unsuscribeUser\n                        \n                    \n                \n            \n            \n                \n                        \n                    unsuscribeUser(id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Put('unsuscribe/:id')\n                \n            \n\n                    \n                        \n                            Defined in src/presentation/controllers/user/user.controller.ts:66\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        updateUser\n                        \n                    \n                \n            \n            \n                \n                        \n                    updateUser(id: string, customer: CustomerUpdateDTO)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Put(':id')\n                \n            \n\n                    \n                        \n                            Defined in src/presentation/controllers/user/user.controller.ts:52\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                customer\n                                            \n                                                            CustomerUpdateDTO\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Body,\n  Controller,\n  Delete,\n  Get,\n  Param,\n  Post,\n  Put,\n  UseGuards,\n} from '@nestjs/common';\nimport { CustomerUpdateDTO } from 'src/business/dtos/update-customer.dto';\nimport { GuardsGuard } from 'src/presentation/guards/guards.guard';\nimport { CustomerDTO } from '../../../business/dtos';\nimport { CustomerService } from '../../../business/services/customer/customer.service';\nimport { AccountEntity } from '../../../data/persistence/entities/account.entity';\nimport { CustomerEntity } from '../../../data/persistence/entities/customer.entity';\n\n@Controller('user')\nexport class UserController {\n  constructor(private readonly customerService: CustomerService) {}\n\n  @Get()\n  async findAllUsers(): Promise {\n    return this.customerService.findAll();\n  }\n  @Get('deleted')\n  async findAllUsersDeleted(): Promise {\n    return this.customerService.findAllDeleted();\n  }\n\n  @Get(':id')\n  async findUser(@Param('id') id: string): Promise {\n    return this.customerService.getCustomerInfo(id);\n  }\n  @Get('email/:email')\n  async findUserByEmail(\n    @Param('email') email: string,\n  ): Promise {\n    return this.customerService.getCustomerInfoByEmail(email);\n  }\n\n  @Post()\n  async registerUser(@Body() customer: CustomerDTO): Promise {\n    return this.customerService.newCustomer(customer);\n  }\n\n  @Put(':id')\n  // @UseGuards(GuardsGuard)\n  async updateUser(\n    @Param('id') id: string,\n    @Body() customer: CustomerUpdateDTO,\n  ): Promise {\n    return this.customerService.updatedCustomer(id, customer);\n  }\n\n  @Delete(':id')\n  // @UseGuards(GuardsGuard)\n  async deleteUser(@Param('id') id: string): Promise {\n    return this.customerService.deleteCustomer(id);\n  }\n\n  @Put('unsuscribe/:id')\n  async unsuscribeUser(@Param('id') id: string): Promise {\n    return this.customerService.unsuscribe(id);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                src/business/dtos/account.dto.ts\n            \n            class\n            AccountDTO\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                src/business/dtos/customer.dto.ts\n            \n            class\n            CustomerDTO\n            \n                100 %\n                (7/7)\n            \n        \n        \n            \n                \n                src/business/dtos/data-range.dto.ts\n            \n            class\n            DataRangeDTO\n            \n                100 %\n                (5/5)\n            \n        \n        \n            \n                \n                src/business/dtos/deposit.dto.ts\n            \n            class\n            DepositDTO\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                src/business/dtos/pagination.dto.ts\n            \n            class\n            PaginationDTO\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                src/business/dtos/sign.dto.ts\n            \n            class\n            SignDTO\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                src/business/dtos/transfer.dto.ts\n            \n            class\n            TransferDTO\n            \n                100 %\n                (5/5)\n            \n        \n        \n            \n                \n                src/business/dtos/update-customer.dto.ts\n            \n            class\n            CustomerUpdateDTO\n            \n                100 %\n                (5/5)\n            \n        \n        \n            \n                \n                src/business/services/account/account.service.ts\n            \n            injectable\n            AccountService\n            \n                66 %\n                (10/15)\n            \n        \n        \n            \n                \n                src/business/services/customer/customer.service.ts\n            \n            injectable\n            CustomerService\n            \n                81 %\n                (9/11)\n            \n        \n        \n            \n                \n                src/business/services/deposit/deposit.service.ts\n            \n            injectable\n            DepositService\n            \n                60 %\n                (3/5)\n            \n        \n        \n            \n                \n                src/business/services/security/secret.ts\n            \n            variable\n            jwtConstants\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/business/services/security/security.service.ts\n            \n            injectable\n            SecurityService\n            \n                60 %\n                (3/5)\n            \n        \n        \n            \n                \n                src/business/services/transfer/transfer.service.ts\n            \n            injectable\n            TransferService\n            \n                62 %\n                (5/8)\n            \n        \n        \n            \n                \n                src/common/decorators/decorators.decorator.ts\n            \n            variable\n            Decorators\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/common/exception-filters/exception-filters.filter.ts\n            \n            class\n            ExceptionFiltersFilter\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                src/data/models/account-type.mode.ts\n            \n            interface\n            AccountTypeModel\n            \n                25 %\n                (1/4)\n            \n        \n        \n            \n                \n                src/data/models/account.model.ts\n            \n            interface\n            AccountModel\n            \n                14 %\n                (1/7)\n            \n        \n        \n            \n                \n                src/data/models/customer.model.ts\n            \n            interface\n            CustomerModel\n            \n                9 %\n                (1/11)\n            \n        \n        \n            \n                \n                src/data/models/data-range.model.ts\n            \n            interface\n            DataRangeModel\n            \n                20 %\n                (1/5)\n            \n        \n        \n            \n                \n                src/data/models/deposit.model.ts\n            \n            interface\n            DepositModel\n            \n                16 %\n                (1/6)\n            \n        \n        \n            \n                \n                src/data/models/document-type.model.ts\n            \n            interface\n            DocumentTypeModel\n            \n                25 %\n                (1/4)\n            \n        \n        \n            \n                \n                src/data/models/pagination.model.ts\n            \n            interface\n            PaginationModel\n            \n                33 %\n                (1/3)\n            \n        \n        \n            \n                \n                src/data/models/transfer.model.ts\n            \n            interface\n            TransferModel\n            \n                12 %\n                (1/8)\n            \n        \n        \n            \n                \n                src/data/persistence/configs/types-orm-postgres-config.service.ts\n            \n            injectable\n            TypesOrmPostgresConfigService\n            \n                66 %\n                (2/3)\n            \n        \n        \n            \n                \n                src/data/persistence/entities/account-type.entity.ts\n            \n            entity\n            AccountTypeEntity\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/data/persistence/entities/account.entity.ts\n            \n            entity\n            AccountEntity\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/data/persistence/entities/account.entity.ts\n            \n            function\n            generateID\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/data/persistence/entities/customer.entity.ts\n            \n            entity\n            CustomerEntity\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/data/persistence/entities/deposit.entity.ts\n            \n            entity\n            DepositEntity\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/data/persistence/entities/document-type.entity.ts\n            \n            entity\n            DocumentTypeEntity\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/data/persistence/entities/transfer.entitty.ts\n            \n            entity\n            TransferEntity\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/data/persistence/repositories/account-type.repository.ts\n            \n            injectable\n            AccountTypeRepository\n            \n                88 %\n                (8/9)\n            \n        \n        \n            \n                \n                src/data/persistence/repositories/account.repository.ts\n            \n            injectable\n            AccountRepository\n            \n                75 %\n                (9/12)\n            \n        \n        \n            \n                \n                src/data/persistence/repositories/customer.repository.ts\n            \n            injectable\n            CustomerRepository\n            \n                17 %\n                (3/17)\n            \n        \n        \n            \n                \n                src/data/persistence/repositories/deposit.repository.ts\n            \n            injectable\n            DepositRepository\n            \n                63 %\n                (7/11)\n            \n        \n        \n            \n                \n                src/data/persistence/repositories/document-type.repository.ts\n            \n            injectable\n            DocumentTypeRepository\n            \n                77 %\n                (7/9)\n            \n        \n        \n            \n                \n                src/data/persistence/repositories/interfaces/account-repository.interface.ts\n            \n            interface\n            AccountRepositoryInterface\n            \n                100 %\n                (4/4)\n            \n        \n        \n            \n                \n                src/data/persistence/repositories/interfaces/account-type-repository.interface.ts\n            \n            interface\n            AccountTypeRepositoryInterface\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                src/data/persistence/repositories/interfaces/base/base-repositories.interface.ts\n            \n            interface\n            BaseRepositoryInterface\n            \n                100 %\n                (6/6)\n            \n        \n        \n            \n                \n                src/data/persistence/repositories/interfaces/customer-repository.interface.ts\n            \n            interface\n            CustomerRepositoryInterface\n            \n                100 %\n                (7/7)\n            \n        \n        \n            \n                \n                src/data/persistence/repositories/interfaces/deposit-repository.interface.ts\n            \n            interface\n            DepositRepositoryInterface\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                src/data/persistence/repositories/interfaces/document-type-repository.interface.ts\n            \n            interface\n            DocumentTypeRepositoryInterface\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                src/data/persistence/repositories/interfaces/transfer-repository.interface.ts\n            \n            interface\n            TransferRepositoryInterface\n            \n                100 %\n                (5/5)\n            \n        \n        \n            \n                \n                src/data/persistence/repositories/transfer.repository.ts\n            \n            injectable\n            TransferRepository\n            \n                58 %\n                (7/12)\n            \n        \n        \n            \n                \n                src/data/persistence/utils/exception-filters/typeorm.exception-filters.ts\n            \n            class\n            TypeOrmExceptionFilter\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                src/main.ts\n            \n            function\n            bootstrap\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/presentation/controllers/account/account.controller.ts\n            \n            controller\n            AccountController\n            \n                0 %\n                (0/13)\n            \n        \n        \n            \n                \n                src/presentation/controllers/deposit/deposit.controller.ts\n            \n            controller\n            DepositController\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/presentation/controllers/security/security.controller.ts\n            \n            controller\n            SecurityController\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/presentation/controllers/transfer/transfer.controller.ts\n            \n            controller\n            TransferController\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                src/presentation/controllers/user/user.controller.ts\n            \n            controller\n            UserController\n            \n                0 %\n                (0/9)\n            \n        \n        \n            \n                \n                src/presentation/guards/guards.guard.ts\n            \n            guard\n            GuardsGuard\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/presentation/interceptors/interceptors.interceptor.ts\n            \n            injectable\n            InterceptorsInterceptor\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/presentation/middlewares/middlewares.middleware.ts\n            \n            injectable\n            MiddlewaresMiddleware\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/presentation/pipes/pipes.pipe.ts\n            \n            injectable\n            PipesPipe\n            \n                0 %\n                (0/2)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            @nestjs/common : ^10.3.8\n        \n            @nestjs/config : ^3.2.2\n        \n            @nestjs/core : ^10.3.8\n        \n            @nestjs/jwt : ^10.2.0\n        \n            @nestjs/platform-express : ^10.3.8\n        \n            @nestjs/typeorm : ^10.0.2\n        \n            class-transformer : ^0.5.1\n        \n            class-validator : ^0.14.1\n        \n            passport-jwt : ^4.0.1\n        \n            pg : ^8.11.5\n        \n            reflect-metadata : ^0.2.2\n        \n            rxjs : ^7.8.1\n        \n            typeorm : ^0.3.20\n    \n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/functions.html":{"url":"miscellaneous/functions.html","title":"miscellaneous-functions - functions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Functions\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            bootstrap   (src/.../main.ts)\n                        \n                        \n                            generateID   (src/.../account.entity.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/main.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        bootstrap\n                        \n                    \n                \n            \n            \n                \nbootstrap()\n                \n            \n\n\n\n\n        \n    \n    src/data/persistence/entities/account.entity.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        generateID\n                        \n                    \n                \n            \n            \n                \ngenerateID()\n                \n            \n\n\n\n\n            \n                \n                        Genera un identificador único para la cuenta\n\n\n                        \n                            Returns :         string\n\n                        \n                            \n                                ID generado\n\n                            \n                \n            \n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\n\n  \n\n\n  A progressive Node.js framework for building efficient and scalable server-side applications.\n    \n\n\n\n\n\n\n\n\n  \n    \n  \n\n  \n\nDescription\nNest framework TypeScript starter repository.\nInstallation\nExample :$ npm installRunning the app\nExample :# development\n$ npm run start\n\n# watch mode\n$ npm run start:dev\n\n# production mode\n$ npm run start:prodHow to deliver the workshop\nExample :# Title of the delivery\n[Workshop Week 1 - Day 1] - Nest (Estructura de proyecto)\n\n# Body of the delivery\n[Any short description]Workshop\nThe following are the guidelines that should be taken into account for the development of the workshop to be submitted:\n\nIdentify missing folders.\nCreate missing folders.\nCreate files corresponding to each folder.\n\nTo identify the missing folders, you can use the documentation in the following link:\nNest documentation.\nPlease use the information from the following link to create the corresponding files in each folder using the Nest CLI.\nImportant note\nDo not forget that for this workshop, you should make at least 2 commits properly documented (title and message body).\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n            \n                \n                    \n                        AppModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n  \n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AppModule\n\n\n\ncluster_AppModule_providers\n\n\n\n\nAccountRepository\n\nAccountRepository\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAccountRepository->AppModule\n\n\n\n\n\nAccountService\n\nAccountService\n\nAppModule -->\n\nAccountService->AppModule\n\n\n\n\n\nAccountTypeRepository\n\nAccountTypeRepository\n\nAppModule -->\n\nAccountTypeRepository->AppModule\n\n\n\n\n\nCustomerRepository\n\nCustomerRepository\n\nAppModule -->\n\nCustomerRepository->AppModule\n\n\n\n\n\nCustomerService\n\nCustomerService\n\nAppModule -->\n\nCustomerService->AppModule\n\n\n\n\n\nDepositRepository\n\nDepositRepository\n\nAppModule -->\n\nDepositRepository->AppModule\n\n\n\n\n\nDepositService\n\nDepositService\n\nAppModule -->\n\nDepositService->AppModule\n\n\n\n\n\nDocumentTypeRepository\n\nDocumentTypeRepository\n\nAppModule -->\n\nDocumentTypeRepository->AppModule\n\n\n\n\n\nSecurityService\n\nSecurityService\n\nAppModule -->\n\nSecurityService->AppModule\n\n\n\n\n\nTransferRepository\n\nTransferRepository\n\nAppModule -->\n\nTransferRepository->AppModule\n\n\n\n\n\nTransferService\n\nTransferService\n\nAppModule -->\n\nTransferService->AppModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n  \n\n    \n        \n            \n                \n                    \n                    \n                        1 Module\n                    \n                \n            \n        \n        \n            \n                \n                    \n                    5 Controllers\n                \n            \n        \n        \n            \n                \n                    \n                    6 Entities\n                \n            \n        \n        \n            \n                \n                    \n                    15 Injectables\n                \n            \n        \n        \n            \n                \n                    \n                    10 Classes\n                \n            \n        \n        \n            \n                \n                    \n                    1 Guard\n                \n            \n        \n        \n            \n                \n                    \n                    15 Interfaces\n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"properties.html":{"url":"properties.html","title":"package-properties - properties","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Properties\n    \n    \n        \n            Version : 0.0.1\n        \n            Description : \n        \n            License : UNLICENSED\n        \n            Author : \n    \n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/variables.html":{"url":"miscellaneous/variables.html","title":"miscellaneous-variables - variables","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Variables\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            Decorators   (src/.../decorators.decorator.ts)\n                        \n                        \n                            jwtConstants   (src/.../secret.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/common/decorators/decorators.decorator.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        Decorators\n                        \n                    \n                \n            \n                \n                    \n                        Default value : (...args: string[]) =>\n  SetMetadata('decorators', args)\n                    \n                \n\n            \n                \n                    Decorador para agregar metadatos a un controlador o método\n\n                \n            \n\n        \n    \n\n    src/business/services/security/secret.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        jwtConstants\n                        \n                    \n                \n            \n                \n                    \n                        Type :         object\n\n                    \n                \n                \n                    \n                        Default value : {\n  secret: process.env.JWT_SECRET ?? 'secretKey',\n}\n                    \n                \n\n\n        \n    \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
