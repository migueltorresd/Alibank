var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.9","fields":["title","body"],"fieldVectors":[["title/controllers/AccountController.html",[0,1.712,1,2.666]],["body/controllers/AccountController.html",[0,1.101,1,2.643,2,1.381,3,0.096,4,0.096,5,0.084,6,2.099,7,1.583,8,2.072,9,0.072,10,0.682,11,2.765,12,3.949,13,4.577,14,3.949,15,3.949,16,3.236,17,3.236,18,3.236,19,4.438,20,3.236,21,3.751,22,3.236,23,3.236,24,2.432,25,0.778,26,4.412,27,4.667,28,0.219,29,1.946,30,0.017,31,2.432,32,0.569,33,2.432,34,1.226,35,0.816,36,0.727,37,1.581,38,1.187,39,1.926,40,2.432,41,3.751,42,2.432,43,2.432,44,3.751,45,2.432,46,2.432,47,3.236,48,2.432,49,2.099,50,3.118,51,2.099,52,2.432,53,2.432,54,2.643,55,2.432,56,2.432,57,2.432,58,2.432,59,2.432,60,2.432,61,2.432,62,3.751,63,2.432,64,2.432,65,2.432,66,2.432,67,2.432,68,3.751,69,2.432,70,2.432,71,2.432,72,2.432,73,0.936,74,0.387,75,1.101,76,1.226,77,2.441,78,2.099,79,1.879,80,0.581,81,1.381,82,1.474,83,1.879,84,2.598,85,1.583,86,2.598,87,2.099,88,0.95,89,1.226,90,2.432,91,0.096,92,0.134,93,0.95,94,1.614,95,1.275,96,2.432,97,1.884,98,2.77,99,2.432,100,2.432,101,3.973,102,2.432,103,2.432,104,2.432,105,2.432,106,2.432,107,2.432,108,4.438,109,2.003,110,1.166,111,3.751,112,2.432,113,2.432,114,0.79,115,2.432,116,2.432,117,2.099,118,2.432,119,2.432,120,2.432,121,1.583,122,2.432,123,2.432,124,2.003,125,2.432,126,2.432,127,2.432,128,2.432,129,0.008,130,0.008]],["title/classes/AccountDTO.html",[50,2.292,92,0.209]],["body/classes/AccountDTO.html",[3,0.177,4,0.177,5,0.155,9,0.133,25,0.729,28,0.202,29,1.645,30,0.017,32,0.48,50,4.253,74,0.295,91,0.229,92,0.353,121,4.17,124,3.618,129,0.013,130,0.013,131,2.021,132,3.852,133,2.131,134,3.086,135,2.487,136,2.913,137,3.086,138,3.761,139,2.616,140,1.442,141,4.17,142,5.651,143,4.465,144,4.776,145,5.846,146,3.618,147,4.463,148,1.718,149,4.465,150,4.073,151,4.465,152,3.852,153,2.534,154,2.251,155,2.367,156,3.086]],["title/entities/AccountEntity.html",[88,1.477,157,1.125]],["body/entities/AccountEntity.html",[3,0.148,4,0.148,5,0.129,8,1.691,9,0.111,25,0.379,28,0.222,29,1.944,30,0.017,32,0.568,35,0.801,36,0.553,37,1.444,73,1.28,74,0.387,88,2.003,91,0.148,92,0.206,97,1.063,110,1.821,114,2.148,129,0.011,130,0.011,140,1.28,157,1.525,158,1.111,159,2.885,160,4.13,161,5.106,162,2.953,163,2.521,164,3.179,165,3.962,166,3.735,167,3.325,168,3.128,169,2.003,170,3.822,171,3.962,172,3.735,173,2.855,174,3.735,175,2.003,176,3.616,177,3.109,178,3.616,179,2.667,180,3.616,181,2.739,182,3.735,183,4.525,184,3.339,185,3.109,186,3.735,187,3.735,188,4.006,189,4.13,190,4.13,191,1.458,192,2.911,193,2.263,194,2.263,195,2.263,196,1.111,197,3.222,198,1.53,199,5.13,200,3.735,201,3.735,202,3.735,203,3.735]],["title/interfaces/AccountModel.html",[192,2.147,204,0.688]],["body/interfaces/AccountModel.html",[3,0.192,4,0.192,5,0.168,9,0.144,25,0.675,28,0.218,30,0.017,36,0.656,37,1.524,73,1.659,74,0.401,91,0.192,110,2.281,114,2.268,129,0.013,130,0.013,140,1.517,160,4.919,161,5.39,162,3.518,163,3.003,175,2.597,192,3.451,204,0.88,205,1.317,206,4.173,207,4.543,208,3.961]],["title/injectables/AccountRepository.html",[209,0.656,210,1.907]],["body/injectables/AccountRepository.html",[3,0.102,4,0.102,5,0.089,8,1.769,9,0.076,10,0.711,11,2.234,25,0.752,28,0.2,30,0.017,32,0.568,34,1.222,35,0.814,36,0.724,37,1.531,38,1.166,39,1.928,73,1.496,74,0.376,75,1.769,80,0.613,88,2.509,91,0.102,92,0.141,93,1.525,94,2.683,95,0.872,97,1.874,98,1.162,114,1.27,121,2.543,129,0.009,130,0.009,141,2.543,148,1.162,157,1.693,158,0.763,160,2.754,162,1.293,163,2.89,169,1.002,191,1.002,196,0.763,198,2.457,205,0.699,209,0.678,210,1.969,211,0.913,212,2.214,213,2.524,214,3.371,215,3.371,216,2.086,217,2.086,218,2.754,219,2.218,220,2.754,221,2.218,222,2.214,223,3.002,224,2.566,225,3.371,226,2.218,227,3.705,228,2.566,229,1.456,230,1.97,231,2.566,232,3.371,233,2.566,234,3.371,235,2.566,236,2.086,237,2.566,238,2.086,239,2.566,240,2.754,241,2.566,242,2.218,243,2.566,244,2.754,245,2.566,246,2.218,247,2.566,248,1.969,249,1.555,250,1.293,251,2.754,252,2.566,253,2.214,254,2.214,255,1.555,256,1.555,257,1.864,258,1.938,259,1.555,260,2.086,261,1.681,262,1.525,263,1.864,264,3.904,265,2.214,266,1.555,267,1.555,268,2.368,269,1.224,270,2.543,271,1.808,272,1.808,273,2.566,274,3.728,275,2.566,276,2.566,277,1.456,278,2.566,279,4.564,280,1.982]],["title/interfaces/AccountRepositoryInterface.html",[204,0.688,251,2.666]],["body/interfaces/AccountRepositoryInterface.html",[3,0.19,4,0.19,5,0.166,9,0.143,10,1.101,25,0.743,28,0.197,30,0.017,32,0.551,34,1.206,35,0.803,36,0.715,38,1.15,39,1.995,73,1.654,74,0.399,88,1.874,91,0.19,114,1.56,121,3.125,129,0.013,130,0.013,141,3.125,158,1.428,204,0.873,205,1.307,214,5.222,215,5.222,216,3.232,232,5.222,234,5.222,236,3.232,251,4.266,262,1.874,281,5.375,282,2.725,283,3.668,284,3.341,285,4.142,286,2.909,287,2.909]],["title/injectables/AccountService.html",[84,2.147,209,0.656]],["body/injectables/AccountService.html",[3,0.067,4,0.067,5,0.059,8,1.268,9,0.05,10,0.51,11,2.74,12,2.416,14,3.095,15,2.416,16,2.416,17,2.416,18,2.416,20,2.416,22,2.416,23,2.416,25,0.761,28,0.188,30,0.017,32,0.534,34,1.15,35,0.765,36,0.681,37,0.612,38,1.096,39,1.798,49,2.416,50,2.529,73,1.318,74,0.305,76,3.184,80,0.403,81,0.959,84,3.356,88,2.368,89,0.851,91,0.067,92,0.093,93,1.093,94,1.544,95,1.219,97,1.764,98,2.988,109,3.429,110,1.964,114,1.504,117,3.095,121,3.012,124,3.721,129,0.006,130,0.006,139,3.054,141,1.099,147,3.223,148,1.91,155,2.265,160,2.528,161,3.574,164,2.663,169,0.659,192,0.959,198,1.71,209,0.486,210,2.515,211,0.601,213,1.991,230,1.043,257,2.521,258,2.669,261,1.205,269,2.638,274,4.799,288,1.457,289,2.8,290,2.8,291,3.587,292,1.689,293,2.999,294,2.821,295,1.689,296,2.8,297,1.689,298,2.8,299,3.219,300,1.689,301,1.689,302,4.173,303,2.8,304,1.689,305,1.689,306,1.974,307,2.8,308,1.689,309,2.8,310,1.689,311,2.163,312,1.689,313,2.8,314,1.689,315,2.8,316,1.689,317,2.942,318,1.689,319,1.689,320,1.689,321,1.689,322,2.8,323,1.689,324,2.8,325,1.689,326,1.689,327,2.8,328,1.974,329,2.8,330,1.336,331,2.163,332,2.8,333,1.689,334,1.689,335,1.024,336,1.689,337,1.689,338,1.689,339,3.587,340,2.8,341,1.689,342,1.689,343,1.305,344,1.689,345,1.305,346,1.689,347,1.689,348,1.689,349,5.284,350,5.284,351,5.284,352,5.284,353,3.601,354,1.689,355,1.689,356,4.173,357,1.689,358,1.689,359,1.689,360,1.689,361,1.689]],["title/entities/AccountTypeEntity.html",[157,1.125,164,1.907]],["body/entities/AccountTypeEntity.html",[3,0.177,4,0.177,5,0.155,9,0.133,25,0.587,28,0.218,29,1.825,30,0.017,32,0.533,35,0.908,37,1.534,73,1.444,74,0.423,91,0.177,92,0.247,114,2.282,129,0.013,130,0.013,140,1.444,157,1.721,158,1.331,164,2.917,167,3.285,168,3.09,170,3.887,179,2.648,184,3.767,185,3.507,188,4.11,191,1.747,193,2.712,194,2.712,195,2.712,196,1.331,207,3.767,362,5.851,363,3.457,364,4.682,365,3.861,366,3.507,367,4.993,368,3.861,369,3.861,370,2.913,371,4.476]],["title/interfaces/AccountTypeModel.html",[204,0.688,207,2.462]],["body/interfaces/AccountTypeModel.html",[3,0.216,4,0.216,5,0.188,9,0.162,25,0.766,28,0.209,30,0.017,35,0.881,37,1.588,73,1.748,91,0.216,114,2.362,129,0.014,130,0.014,140,1.631,204,0.99,205,1.482,207,4.255,372,4.694,373,4.694]],["title/injectables/AccountTypeRepository.html",[209,0.656,293,2.147]],["body/injectables/AccountTypeRepository.html",[3,0.117,4,0.117,5,0.102,9,0.088,10,0.788,11,2.352,25,0.723,28,0.194,30,0.017,32,0.557,34,1.188,35,0.854,36,0.704,37,1.573,38,1.133,39,1.942,73,1.282,74,0.398,75,1.96,80,0.703,91,0.117,92,0.162,93,1.691,94,1.267,95,1.001,97,1.906,114,1.841,124,2.312,129,0.009,130,0.009,148,1.685,157,1.795,164,3.29,169,1.691,179,1.691,191,1.149,196,0.875,205,0.802,209,0.752,211,1.047,213,2.703,216,2.312,217,2.312,219,2.458,221,2.916,222,2.54,223,3.215,225,3.736,226,2.458,230,1.613,236,2.312,238,2.312,242,2.458,246,1.671,248,2.183,249,1.784,250,1.484,253,2.54,254,2.54,255,1.784,256,2.624,257,2.451,258,2.104,259,2.624,260,2.743,261,2.211,262,2.006,263,2.451,265,2.54,266,1.784,267,1.784,268,2.624,269,1.405,279,4.432,293,2.458,374,5.897,375,2.274,376,3.052,377,2.944,378,2.944,379,2.944,380,3.052,381,2.944,382,2.944,383,2.944,384,2.944,385,2.944,386,2.944,387,2.944,388,3.052,389,2.944,390,4.331,391,2.274,392,2.274,393,2.274,394,2.274,395,2.274,396,2.944,397,2.944,398,2.944,399,2.944,400,2.944,401,2.944,402,2.944,403,2.944]],["title/interfaces/AccountTypeRepositoryInterface.html",[204,0.688,388,2.666]],["body/interfaces/AccountTypeRepositoryInterface.html",[3,0.199,4,0.199,5,0.174,9,0.149,10,1.132,25,0.686,28,0.216,30,0.017,32,0.517,34,1.132,35,0.819,36,0.671,38,1.079,39,1.925,73,1.687,74,0.41,91,0.199,114,1.629,129,0.014,130,0.014,158,1.491,164,2.527,204,0.912,205,1.366,216,3.321,236,3.321,262,1.958,281,5.222,282,2.846,283,3.769,284,3.408,286,3.038,287,3.038,376,4.383,380,4.383,388,4.383]],["title/modules/AppModule.html",[404,2.921,405,2.666]],["body/modules/AppModule.html",[1,3.826,2,2.636,3,0.128,4,0.128,5,0.112,10,0.59,28,0.138,30,0.017,32,0.27,34,0.59,35,0.393,36,0.35,38,0.563,74,0.479,80,0.774,84,3.705,85,3.024,86,3.705,88,1.814,89,1.634,91,0.128,92,0.179,129,0.01,130,0.01,164,2.341,173,2.103,179,1.814,196,0.964,210,3.29,230,1.208,250,1.634,293,3.705,294,3.486,335,1.965,404,4.192,405,5.451,406,2.504,407,2.285,408,2.797,409,2.797,410,2.285,411,4.683,412,2.797,413,2.797,414,2.797,415,3.705,416,3.956,417,3.956,418,3.956,419,3.956,420,3.956,421,4.008,422,2.797,423,2.797,424,3.242,425,3.826,426,3.826,427,3.826,428,3.826,429,3.242,430,4.645,431,5.928,432,3.242,433,3.242,434,4.645,435,3.242,436,2.504,437,4.645,438,2.797,439,3.242,440,2.285,441,3.242,442,2.504,443,2.341,444,2.341,445,2.341,446,3.274,447,3.242,448,2.504,449,3.242,450,3.242,451,2.285,452,3.242,453,3.242,454,3.242,455,3.242,456,2.797,457,3.242,458,3.242,459,2.504,460,2.285,461,3.242,462,2.797,463,3.242,464,2.797,465,3.242,466,1.634,467,3.242,468,2.797,469,3.242,470,2.797,471,3.242,472,3.242,473,3.242,474,3.242,475,2.285,476,3.242]],["title/interfaces/BaseRepositoryInterface.html",[204,0.688,284,1.907]],["body/interfaces/BaseRepositoryInterface.html",[3,0.177,4,0.177,5,0.155,9,0.133,10,1.051,25,0.76,28,0.202,30,0.017,32,0.583,34,1.233,35,0.821,36,0.731,37,1.4,38,1.218,39,2.02,73,1.598,75,2.616,91,0.177,129,0.013,130,0.013,157,2.015,204,0.812,205,1.216,213,3.233,217,3.086,219,3.28,221,3.28,226,3.28,227,4.17,229,2.534,230,2.153,238,3.086,242,3.28,246,3.28,284,2.913,477,6.202,478,3.852,479,4.465,480,4.465,481,4.465,482,7.189,483,4.465,484,4.465]],["title/classes/CustomerDTO.html",[92,0.209,485,2.147]],["body/classes/CustomerDTO.html",[3,0.122,4,0.122,5,0.107,9,0.092,25,0.761,28,0.214,29,1.825,30,0.017,32,0.533,74,0.203,91,0.177,92,0.29,129,0.01,130,0.01,131,1.393,133,1.468,134,2.388,135,1.924,136,2.254,137,2.388,138,2.911,139,2.619,140,1.116,142,4.468,144,3.152,145,3.858,146,3.84,147,3.454,148,1.907,150,4.948,153,3.639,154,1.55,155,2.626,156,3.69,330,3.059,466,2.656,485,3.923,486,2.654,487,3.193,488,4.069,489,2.656,490,3.193,491,3.193,492,3.076,493,3.886,494,4.991,495,3.076,496,4.991,497,3.076,498,3.858,499,3.858,500,2.376,501,3.076,502,3.858,503,3.858,504,3.858,505,2.654,506,3.076,507,3.454,508,2.538,509,3.858,510,3.858,511,3.858,512,4.991,513,3.858,514,3.858,515,3.858,516,3.858,517,3.858,518,3.858,519,3.454,520,2.654,521,3.076,522,3.858,523,3.714,524,3.858,525,4.069,526,3.858,527,2.376,528,2.654,529,2.654,530,3.858,531,2.654,532,2.654,533,2.654]],["title/entities/CustomerEntity.html",[157,1.125,173,1.712]],["body/entities/CustomerEntity.html",[3,0.123,4,0.123,5,0.107,9,0.092,25,0.731,28,0.229,29,2.001,30,0.017,32,0.585,35,0.852,36,0.626,37,1.346,73,1.121,74,0.383,91,0.123,92,0.171,110,1.396,114,2.002,129,0.01,130,0.01,140,1.121,157,1.336,158,0.921,162,1.56,163,2.276,167,2.55,168,2.399,170,4.195,173,2.034,175,1.754,176,3.167,177,2.723,178,4.089,179,2.651,180,3.167,181,2.824,184,4.687,185,2.723,188,4.261,189,3.167,190,3.167,191,1.209,193,1.876,194,1.876,195,1.876,196,0.921,208,2.55,364,4.183,366,4.364,370,2.015,444,2.924,466,3.105,487,3.734,489,3.105,490,3.205,491,3.734,534,2.671,535,4.563,536,3.727,537,4.493,538,4.493,539,3.096,540,3.096,541,5.802,542,3.096,543,3.096,544,4.493,545,3.096,546,3.096,547,4.963,548,3.096,549,4.493,550,3.096,551,3.096,552,3.096,553,3.096,554,3.096]],["title/interfaces/CustomerModel.html",[204,0.688,208,2.147]],["body/interfaces/CustomerModel.html",[3,0.177,4,0.177,5,0.155,9,0.133,25,0.799,28,0.225,30,0.017,36,0.731,37,1.48,73,1.598,74,0.295,91,0.177,110,1.991,114,2.202,129,0.013,130,0.013,140,1.442,163,2.916,175,2.501,204,0.812,205,1.216,208,3.28,466,3.415,487,4.106,489,3.415,490,4.106,491,4.106,535,5.846,536,4.776,555,3.852,556,4.41]],["title/injectables/CustomerRepository.html",[209,0.656,294,2.02]],["body/injectables/CustomerRepository.html",[3,0.075,4,0.075,5,0.066,9,0.057,10,0.562,11,2.681,25,0.766,28,0.197,30,0.017,32,0.564,34,1.205,35,0.802,36,0.714,37,1.466,38,1.164,39,1.96,73,1.317,74,0.325,75,1.397,80,0.454,91,0.075,92,0.105,93,1.205,94,2.393,95,0.646,97,2,98,1.764,114,1.003,129,0.007,130,0.007,148,1.57,157,1.466,158,0.566,162,2.485,163,2.709,169,1.521,173,2.623,179,1.205,181,1.648,191,0.742,196,0.566,198,1.836,205,0.518,209,0.536,211,0.676,213,2.139,216,1.648,217,1.648,218,2.176,219,1.752,220,2.176,221,1.752,223,2.544,226,1.752,227,3.208,229,1.079,230,1.451,236,1.648,238,1.648,240,2.176,242,1.752,244,2.176,246,1.752,248,1.556,249,1.153,250,0.959,255,1.153,256,1.153,257,2.519,258,2.278,259,1.871,260,2.819,261,2.272,262,2.061,263,2.519,264,4.098,266,2.361,267,2.987,268,3.629,269,0.907,270,1.238,271,1.34,272,1.34,277,1.079,294,2.394,466,2.26,487,2.717,488,3.009,489,2.803,490,1.871,491,1.871,536,1.34,557,1.641,558,3.087,559,3.868,560,2.663,561,3.361,562,2.663,563,3.361,564,2.663,565,1.469,566,1.902,567,1.902,568,3.087,569,1.902,570,1.902,571,1.902,572,2.663,573,1.902,574,1.902,575,1.641,576,1.902,577,2.663,578,1.902,579,1.641,580,1.902,581,1.902,582,2.663,583,1.902,584,1.902,585,1.902,586,1.902,587,1.902,588,2.176,589,1.902,590,1.902,591,1.902,592,1.641,593,1.641,594,3.463,595,4.929,596,1.641,597,1.902,598,1.902,599,4.483,600,3.087,601,3.087,602,3.087,603,3.896]],["title/interfaces/CustomerRepositoryInterface.html",[204,0.688,588,2.666]],["body/interfaces/CustomerRepositoryInterface.html",[3,0.16,4,0.16,5,0.14,9,0.121,10,0.986,25,0.792,28,0.208,30,0.017,32,0.582,34,1.273,35,0.848,36,0.755,38,1.214,39,2.055,73,1.524,74,0.358,91,0.16,114,1.316,129,0.012,130,0.012,158,1.204,173,1.834,204,0.737,205,1.103,216,2.894,236,2.894,262,1.581,282,2.299,283,3.284,284,3.079,286,2.455,287,2.455,466,3.079,487,3.701,488,4.186,489,2.732,490,2.455,491,2.455,560,4.676,561,5.27,562,4.676,563,4.676,564,4.676,572,4.676,575,3.495,577,4.676,579,4.676,582,4.676,588,3.82,604,6.164,605,3.495,606,4.05,607,4.05,608,4.05]],["title/injectables/CustomerService.html",[86,2.147,209,0.656]],["body/injectables/CustomerService.html",[3,0.086,4,0.086,5,0.075,8,1.549,9,0.064,10,0.623,11,2.693,25,0.719,28,0.181,30,0.017,32,0.532,34,1.105,35,0.736,36,0.655,37,1.222,38,1.085,39,1.899,73,0.854,74,0.347,76,2.433,80,0.516,81,1.228,86,2.985,88,1.336,89,1.09,91,0.086,92,0.119,93,1.336,94,1.827,95,1.443,97,1.965,98,3.008,129,0.007,130,0.007,141,2.228,148,1.742,150,3.942,155,1.739,162,3.152,173,2.958,179,1.885,181,2.267,198,2.623,208,1.228,209,0.594,210,2.952,211,0.77,213,2.303,248,1.725,257,1.032,258,2.488,260,1.155,261,1.827,262,0.845,263,1.032,264,2.228,269,2.026,277,1.228,293,3.325,294,2.986,317,2.412,330,2.668,335,1.311,391,1.671,392,1.671,393,1.671,394,1.671,395,1.671,444,2.14,485,3.325,489,1.725,536,3.402,559,4.165,565,1.671,592,2.953,593,1.867,594,5.133,609,1.867,610,3.423,611,3.423,612,3.423,613,2.953,614,3.423,615,4.246,616,2.164,617,3.423,618,2.164,619,2.164,620,2.164,621,3.423,622,2.164,623,4.165,624,3.423,625,2.164,626,3.423,627,2.164,628,3.423,629,2.164,630,3.423,631,2.164,632,3.423,633,3.423,634,2.953,635,2.164,636,3.142,637,2.164,638,2.953,639,1.525,640,1.867,641,2.164,642,2.164,643,2.164,644,1.671,645,2.164,646,2.164,647,3.423,648,3.423,649,2.953,650,3.664,651,4.246,652,3.664,653,4.246,654,2.953,655,3.664,656,3.664,657,4.246,658,3.664,659,4.246,660,2.164,661,1.867,662,2.164,663,2.164,664,2.164,665,2.164,666,1.867,667,2.164,668,3.423,669,3.423,670,2.164,671,2.164,672,2.164,673,2.164]],["title/classes/CustomerUpdateDTO.html",[92,0.209,636,2.462]],["body/classes/CustomerUpdateDTO.html",[3,0.12,4,0.12,5,0.105,9,0.09,25,0.728,28,0.201,29,1.635,30,0.017,32,0.478,74,0.2,91,0.175,92,0.288,129,0.01,130,0.01,131,1.373,133,1.447,134,2.363,135,1.904,136,2.231,137,2.363,139,3.168,140,1.104,142,2.342,146,3.736,148,2.081,150,4.932,153,3.621,154,1.528,155,2.353,156,3.517,330,3.422,466,2.634,487,3.167,490,3.167,491,3.167,493,4.241,494,3.818,496,2.616,500,2.342,502,3.818,503,3.818,504,3.818,505,2.616,507,3.418,508,3.832,509,3.818,510,3.818,511,3.818,512,4.957,513,3.818,514,3.818,515,3.818,516,3.818,517,3.818,518,3.818,519,4.927,520,2.616,522,3.818,523,3.683,524,3.818,525,4.036,526,3.818,527,2.342,528,2.616,529,2.616,530,3.818,531,2.616,532,2.616,533,2.616,623,3.818,636,4.288,638,3.818,639,4.306,674,2.616,675,3.032,676,3.866,677,3.866,678,3.74,679,3.74,680,3.032,681,4.957,682,4.957,683,3.418,684,3.032,685,3.032,686,4.426]],["title/classes/DataRangeDTO.html",[92,0.209,687,2.292]],["body/classes/DataRangeDTO.html",[3,0.126,4,0.126,5,0.11,9,0.094,28,0.203,29,1.67,30,0.017,32,0.488,36,0.737,74,0.209,91,0.181,92,0.296,110,2.249,129,0.01,130,0.01,131,1.436,133,1.514,134,2.442,135,1.968,136,2.305,137,2.442,138,2.977,139,2.657,140,1.141,146,3.65,148,2.102,152,5.763,153,3.791,154,1.599,155,2.404,156,3.133,175,2.76,177,3.556,263,2.182,330,3.51,493,4.143,508,3.331,676,4.143,677,3.556,678,3.82,679,3.82,687,4.048,688,5.367,689,2.737,690,7.07,691,4.626,692,4.626,693,4.626,694,4.626,695,3.173,696,5.869,697,5.869,698,3.173,699,5.869,700,5.869,701,5.063,702,5.869,703,3.173,704,5.063,705,3.173]],["title/interfaces/DataRangeModel.html",[204,0.688,706,2.462]],["body/interfaces/DataRangeModel.html",[3,0.199,4,0.199,5,0.174,9,0.15,28,0.211,30,0.017,36,0.819,91,0.199,110,2.418,129,0.014,130,0.014,140,1.554,175,2.893,204,0.915,205,1.369,691,6.104,692,6.104,693,6.104,694,6.104,706,4.055,707,4.337,708,4.337]],["title/controllers/DepositController.html",[0,1.712,428,2.666]],["body/controllers/DepositController.html",[0,1.869,2,2.343,3,0.164,4,0.164,5,0.143,7,2.687,8,2.485,9,0.123,10,0.999,11,2.621,19,5.321,25,0.667,26,3.983,27,3.869,28,0.204,29,1.755,30,0.017,32,0.513,34,1.122,35,0.747,36,0.665,37,1.199,38,1.07,39,1.79,54,3.869,74,0.434,75,1.869,76,2.081,77,4.014,80,0.986,81,2.343,85,2.687,89,2.081,91,0.164,92,0.228,95,1.403,97,1.562,98,2.485,129,0.012,130,0.012,230,2.045,299,1.97,416,3.737,428,3.869,443,2.081,687,3.327,709,3.562,710,3.189,711,4.736,712,4.736,713,4.129,714,4.278,715,4.129,716,4.129,717,4.129,718,4.129,719,5.49,720,4.129,721,3.327,722,4.129,723,2.502,724,4.129,725,4.129,726,2.91,727,2.91,728,4.129,729,3.562,730,3.562,731,3.562,732,4.129,733,4.129]],["title/classes/DepositDTO.html",[92,0.209,714,2.462]],["body/classes/DepositDTO.html",[3,0.166,4,0.166,5,0.146,9,0.125,25,0.717,28,0.197,29,1.58,30,0.017,32,0.462,74,0.277,91,0.22,92,0.343,109,3.321,124,2.965,129,0.012,130,0.012,131,1.902,133,2.005,134,2.965,135,2.389,136,2.799,137,2.965,138,3.614,139,2.996,140,1.385,144,3.914,146,2.965,148,1.651,153,4.092,154,2.118,155,2.275,156,2.965,299,2.968,328,3.914,330,3.373,331,4.289,493,4.01,508,3.756,676,4.01,677,4.01,678,4.307,679,4.307,714,4.479,734,3.625,735,6.618,736,4.201,737,4.201]],["title/entities/DepositEntity.html",[157,1.125,443,1.907]],["body/entities/DepositEntity.html",[3,0.157,4,0.157,5,0.137,8,2.73,9,0.118,28,0.224,29,1.918,30,0.017,32,0.56,35,0.817,36,0.575,37,1.473,74,0.426,88,2.521,91,0.157,92,0.218,109,3.599,110,2.095,129,0.012,130,0.012,140,1.33,157,1.585,158,1.175,163,2.595,165,3.051,167,3.025,168,2.845,169,2.081,170,3.913,171,4.986,175,2.521,176,3.756,177,3.23,178,3.756,179,2.521,180,3.756,181,2.845,185,3.23,188,4.085,189,3.756,190,3.756,191,1.542,193,2.394,194,2.394,195,2.394,196,1.175,364,4.521,370,2.571,443,2.686,710,3.051,738,3.408,739,3.655,740,3.95,741,3.95,742,4.598,743,3.95,744,3.95,745,3.95,746,3.469]],["title/interfaces/DepositModel.html",[204,0.688,746,2.462]],["body/interfaces/DepositModel.html",[3,0.196,4,0.196,5,0.171,8,3.183,9,0.147,25,0.681,28,0.215,30,0.017,36,0.664,37,1.536,74,0.326,91,0.196,109,3.754,110,2.371,129,0.013,130,0.013,140,1.537,163,3.025,175,2.88,192,3.99,204,0.898,205,1.345,739,4.26,746,4.009,747,4.259]],["title/injectables/DepositRepository.html",[209,0.656,415,2.147]],["body/injectables/DepositRepository.html",[3,0.102,4,0.102,5,0.089,8,2.585,9,0.077,10,0.715,11,1.77,25,0.741,28,0.196,30,0.017,32,0.559,34,1.2,35,0.799,36,0.712,37,1.575,38,1.145,39,1.889,73,1.185,74,0.377,75,1.778,80,0.617,91,0.102,92,0.142,93,1.533,94,2.689,95,0.878,97,1.833,110,1.869,129,0.009,130,0.009,148,1.413,157,1.698,158,0.768,163,2.044,169,1.008,175,2.348,191,1.008,196,0.768,205,0.704,209,0.682,211,0.919,213,2.533,217,2.097,218,2.768,219,2.229,220,2.768,221,2.229,223,3.013,226,2.229,227,3.717,229,1.466,230,1.977,238,2.097,240,2.768,242,2.229,244,2.768,246,2.229,248,1.979,249,1.565,250,1.302,255,1.565,256,1.565,257,2.267,258,2.174,259,2.38,260,2.537,261,2.044,262,1.855,263,2.267,264,3.455,266,2.38,267,2.38,268,3.217,269,1.233,270,1.681,271,1.821,272,1.821,277,1.466,280,4.1,299,1.874,415,3.013,443,3.246,739,1.565,748,2.229,749,3.388,750,3.67,751,2.229,752,2.583,753,2.583,754,2.583,755,3.388,756,2.583,757,1.995,758,3.741,759,2.583,760,2.768,761,2.583,762,2.583,763,2.583,764,2.583,765,2.583,766,2.229,767,2.768,768,2.583,769,2.583,770,2.583,771,2.583,772,5.308,773,3.927,774,2.583,775,2.583,776,2.583,777,4.751,778,2.229]],["title/interfaces/DepositRepositoryInterface.html",[204,0.688,767,2.666]],["body/interfaces/DepositRepositoryInterface.html",[3,0.19,4,0.19,5,0.166,9,0.143,10,1.101,25,0.673,28,0.18,30,0.017,32,0.503,34,1.101,35,0.733,36,0.653,38,1.05,39,1.896,74,0.399,91,0.19,110,2.277,129,0.013,130,0.013,158,1.428,175,2.86,204,0.873,205,1.307,262,1.874,282,2.725,283,3.668,284,3.341,286,2.909,287,2.909,299,2.291,443,2.42,749,5.222,750,5.12,755,5.222,757,3.708,758,4.672,760,4.266,767,4.266,779,5.719]],["title/injectables/DepositService.html",[209,0.656,416,2.292]],["body/injectables/DepositService.html",[3,0.124,4,0.124,5,0.108,9,0.093,10,0.822,11,2.4,25,0.691,28,0.173,30,0.017,32,0.484,34,1.06,35,0.706,36,0.628,38,0.922,39,1.586,74,0.384,76,3.115,80,0.745,81,1.771,88,1.764,89,1.573,91,0.124,92,0.172,93,1.764,94,1.945,95,1.536,97,1.657,98,2.405,124,2.413,129,0.01,130,0.01,139,2.046,148,1.344,155,2.176,169,1.764,198,2.176,209,0.784,210,3.35,211,1.11,229,1.771,230,1.683,258,1.851,261,1.945,269,2.156,274,3.745,277,2.565,299,2.949,306,3.185,311,3.491,317,3.185,330,2.779,335,1.891,343,3.491,353,2.693,415,3.657,416,3.746,443,3.35,644,2.411,687,3.529,706,2.032,710,3.491,711,3.899,712,3.899,714,3.791,721,3.529,726,4.105,727,4.356,746,2.032,751,2.693,780,2.693,781,4.103,782,3.121,783,4.519,784,3.121,785,5.824,786,4.519,787,3.121,788,4.519,789,2.693,790,3.121,791,3.899,792,3.491,793,4.519,794,3.121,795,2.693,796,3.121,797,3.121,798,4.519,799,3.121,800,3.121,801,3.121,802,3.121,803,3.121,804,3.121,805,2.032,806,2.693,807,3.121,808,2.693,809,2.693,810,2.693,811,4.519,812,3.899,813,2.693,814,2.693,815,2.693]],["title/entities/DocumentTypeEntity.html",[157,1.125,444,1.907]],["body/entities/DocumentTypeEntity.html",[3,0.177,4,0.177,5,0.155,9,0.133,25,0.587,28,0.218,29,1.825,30,0.017,32,0.533,35,0.908,37,1.534,73,1.444,74,0.423,91,0.177,92,0.247,114,2.282,129,0.013,130,0.013,140,1.444,157,1.721,158,1.331,167,3.285,168,3.09,170,3.887,179,2.648,184,3.767,185,3.507,188,4.11,191,1.747,193,2.712,194,2.712,195,2.712,196,1.331,363,3.457,364,4.682,365,3.861,366,3.507,367,4.993,368,3.861,369,3.861,370,2.913,444,2.917,556,3.767,816,5.851,817,4.476]],["title/interfaces/DocumentTypeModel.html",[204,0.688,556,2.462]],["body/interfaces/DocumentTypeModel.html",[3,0.216,4,0.216,5,0.188,9,0.162,25,0.766,28,0.209,30,0.017,35,0.881,37,1.588,73,1.748,91,0.216,114,2.362,129,0.014,130,0.014,140,1.631,204,0.99,205,1.482,556,4.255,818,4.694,819,4.694]],["title/injectables/DocumentTypeRepository.html",[209,0.656,417,2.292]],["body/injectables/DocumentTypeRepository.html",[3,0.118,4,0.118,5,0.103,9,0.089,10,0.795,25,0.725,28,0.195,30,0.017,32,0.559,34,1.192,35,0.856,36,0.707,37,1.561,38,1.137,39,1.947,73,1.291,74,0.4,75,1.978,80,0.712,91,0.118,92,0.164,93,1.706,94,1.282,95,1.013,97,1.912,114,1.852,129,0.01,130,0.01,148,1.804,157,1.804,158,0.886,169,1.706,179,1.706,191,1.164,196,0.886,205,0.812,209,0.758,211,1.06,213,2.719,216,2.333,217,2.333,219,2.48,221,2.48,223,3.234,226,2.48,230,1.11,236,2.333,238,2.333,242,2.48,246,2.48,248,2.203,249,1.806,250,1.502,255,1.806,256,2.648,257,2.469,258,2.119,259,2.648,260,2.763,261,2.226,262,2.02,263,2.469,266,1.806,267,1.806,268,2.648,269,1.422,270,1.94,375,2.302,376,3.08,380,3.08,417,3.453,444,3.303,820,5.916,821,2.98,822,2.98,823,2.98,824,2.98,825,2.98,826,2.98,827,2.98,828,2.98,829,2.98,830,3.08,831,2.98,832,4.37,833,2.98,834,2.98,835,2.98,836,2.98,837,2.98,838,4.37,839,2.98,840,2.98,841,2.98,842,2.98,843,2.98,844,2.98,845,2.98,846,2.98,847,2.98,848,2.98,849,5.174,850,2.98]],["title/interfaces/DocumentTypeRepositoryInterface.html",[204,0.688,830,2.666]],["body/interfaces/DocumentTypeRepositoryInterface.html",[3,0.199,4,0.199,5,0.174,9,0.149,10,1.132,25,0.686,28,0.216,30,0.017,32,0.517,34,1.132,35,0.819,36,0.671,38,1.079,39,1.925,73,1.687,74,0.41,91,0.199,114,1.629,129,0.014,130,0.014,158,1.491,204,0.912,205,1.366,216,3.321,236,3.321,262,1.958,282,2.846,283,3.769,284,3.408,286,3.038,287,3.038,376,4.383,380,4.383,444,2.527,830,4.383,851,5.833]],["title/classes/ExceptionFiltersFilter.html",[92,0.209,852,2.921]],["body/classes/ExceptionFiltersFilter.html",[3,0.208,4,0.208,5,0.182,9,0.156,10,1.164,28,0.156,30,0.017,32,0.436,34,0.955,35,0.636,36,0.566,38,0.911,74,0.346,80,1.253,91,0.208,92,0.289,129,0.014,130,0.014,131,2.375,196,1.902,230,1.955,460,4.862,852,4.94,853,5.518,854,5.518,855,4.527,856,5.952,857,5.547,858,5.518,859,6.899,860,6.196,861,5.247,862,4.527]],["title/guards/GuardsGuard.html",[82,2.292,863,2.921]],["body/guards/GuardsGuard.html",[3,0.179,4,0.179,5,0.157,9,0.135,10,1.061,11,2.403,28,0.174,30,0.017,32,0.485,34,1.061,35,0.706,36,0.629,38,0.786,39,1.588,74,0.426,80,1.081,82,3.534,91,0.179,92,0.25,93,1.768,97,1.836,129,0.013,130,0.013,179,1.768,181,3.114,196,1.347,198,2.79,209,1.012,440,3.192,723,2.744,857,3.498,864,4.529,865,3.907,866,6.812,867,4.529,868,6.226,869,4.529,870,5.832,871,5.877,872,4.529,873,3.907,874,3.907,875,3.498,876,3.907,877,4.529,878,5.031,879,4.529,880,3.907,881,3.907,882,4.529,883,3.498,884,4.529,885,5.031,886,4.529,887,4.529,888,4.529]],["title/injectables/InterceptorsInterceptor.html",[209,0.656,889,2.921]],["body/injectables/InterceptorsInterceptor.html",[3,0.206,4,0.206,5,0.18,9,0.154,10,1.156,28,0.154,30,0.017,32,0.432,34,0.944,35,0.629,36,0.56,38,0.901,74,0.419,80,1.239,91,0.206,92,0.286,97,1.477,129,0.014,130,0.014,196,1.543,209,1.103,211,1.846,871,6.173,873,4.478,874,5.924,875,4.009,889,4.907,890,4.478,891,6.353,892,6.353,893,5.924,894,7.155,895,5.19,896,6.353,897,5.19]],["title/injectables/MiddlewaresMiddleware.html",[209,0.656,451,2.666]],["body/injectables/MiddlewaresMiddleware.html",[3,0.194,4,0.194,5,0.17,9,0.146,10,1.115,28,0.146,30,0.017,32,0.407,34,0.891,35,0.593,36,0.528,38,0.85,74,0.404,80,1.169,91,0.194,92,0.27,129,0.013,130,0.013,196,1.457,198,2.511,209,1.064,211,1.742,230,1.825,451,4.32,876,6.049,878,5.289,880,4.226,881,5.289,893,6.049,898,4.226,899,5.289,900,6.13,901,6.69,902,6.049,903,7.011,904,4.899,905,4.899,906,6.13,907,4.226,908,4.899,909,4.899,910,4.899,911,4.226]],["title/classes/PaginationDTO.html",[92,0.209,721,2.292]],["body/classes/PaginationDTO.html",[3,0.165,4,0.165,5,0.144,9,0.124,28,0.196,29,1.571,30,0.017,32,0.459,74,0.275,91,0.219,92,0.341,110,2.192,129,0.012,130,0.012,131,1.885,133,1.987,134,2.948,135,2.376,136,2.783,137,2.948,139,3.193,140,1.377,148,1.961,153,4.083,154,2.099,155,2.262,156,2.948,261,2.376,328,3.891,330,3.147,366,3.753,493,4.274,508,3.743,676,3.997,677,3.997,678,4.293,679,4.293,721,4.158,792,4.264,912,3.593,913,5.521,914,5.343,915,4.165,916,5.521,917,5.521,918,6.595,919,4.165]],["title/interfaces/PaginationModel.html",[204,0.688,805,2.462]],["body/interfaces/PaginationModel.html",[3,0.222,4,0.222,5,0.194,9,0.167,28,0.198,30,0.017,91,0.222,110,2.363,129,0.014,130,0.014,140,1.659,204,1.019,205,1.525,366,4.448,805,4.329,914,6.332,920,4.831]],["title/injectables/PipesPipe.html",[209,0.656,921,2.921]],["body/injectables/PipesPipe.html",[3,0.212,4,0.212,5,0.185,9,0.159,10,1.177,28,0.159,30,0.017,32,0.445,34,0.973,35,0.648,36,0.577,38,0.928,74,0.353,80,1.277,91,0.212,92,0.295,97,1.522,129,0.014,130,0.014,168,3.455,196,1.591,209,1.123,211,1.903,613,5.583,921,4.998,922,4.615,923,6.471,924,6.002,925,7.229,926,5.35,927,6.471]],["title/controllers/SecurityController.html",[0,1.712,427,2.666]],["body/controllers/SecurityController.html",[0,1.985,2,2.488,3,0.174,4,0.174,5,0.152,7,2.853,9,0.13,10,1.039,25,0.445,26,3.849,27,4.025,28,0.208,29,1.807,30,0.017,32,0.528,34,1.155,35,0.769,36,0.685,38,1.102,73,1.425,74,0.419,77,2.853,80,1.047,85,2.853,91,0.174,92,0.242,95,1.49,97,1.807,129,0.012,130,0.012,162,3.391,418,3.849,427,4.025,485,3.819,723,2.657,928,3.782,929,4.384,930,5.71,931,4.926,932,4.926,933,4.384,934,5.71,935,4.384,936,4.384,937,4.379,938,6.728,939,4.384,940,4.384,941,5.71,942,4.384,943,3.782,944,4.384,945,4.384,946,4.384,947,4.384,948,4.384,949,4.384,950,3.386,951,4.384]],["title/injectables/SecurityService.html",[209,0.656,418,2.292]],["body/injectables/SecurityService.html",[3,0.11,4,0.11,5,0.097,8,2.671,9,0.083,10,0.756,11,2.305,25,0.669,28,0.164,30,0.017,32,0.458,34,1.003,35,0.668,36,0.595,37,0.608,38,0.863,50,2.519,73,1.037,74,0.408,76,2.507,80,0.665,84,3.639,89,1.404,91,0.11,92,0.154,93,1.623,94,2.373,95,1.69,97,1.761,98,2.801,129,0.009,130,0.009,146,2.22,148,1.479,155,2.037,158,0.828,162,2.507,169,1.088,173,1.882,179,1.088,181,1.487,198,2.699,208,2.359,209,0.721,211,0.991,248,2.095,257,2.631,258,2.535,260,1.487,261,2.539,262,1.088,263,1.329,269,2.815,274,1.963,294,3.304,306,2.93,335,1.688,345,4.259,391,2.151,392,2.151,393,2.151,394,2.151,395,2.151,417,3.885,418,3.575,440,1.963,485,3.13,489,2.507,565,2.151,594,2.151,596,4.757,634,5.338,649,2.403,650,2.403,652,2.403,654,2.403,655,3.586,656,2.403,658,2.403,661,2.403,666,2.403,868,5.531,885,3.586,911,3.586,931,3.586,932,3.586,937,3.589,950,2.151,952,2.403,953,4.157,954,2.786,955,4.157,956,2.786,957,4.157,958,4.157,959,4.157,960,2.786,961,4.157,962,4.157,963,2.786,964,3.586,965,4.157,966,2.786,967,2.786,968,2.786,969,2.786,970,4.157,971,2.786,972,4.973,973,4.157,974,2.786,975,4.157,976,4.157,977,4.157,978,4.157,979,4.157,980,2.786,981,2.786,982,2.786,983,2.786,984,2.786,985,2.786,986,2.786,987,2.786,988,2.786,989,2.786,990,2.786,991,2.786]],["title/classes/SignDTO.html",[92,0.209,937,2.462]],["body/classes/SignDTO.html",[3,0.17,4,0.17,5,0.149,9,0.128,25,0.722,28,0.199,29,1.603,30,0.017,32,0.468,74,0.283,91,0.223,92,0.347,129,0.012,130,0.012,131,1.945,133,2.049,134,3.008,135,2.425,136,2.84,137,3.008,139,3.022,140,1.406,146,3.564,148,1.985,154,2.165,155,2.308,156,3.008,263,2.689,466,3.169,489,3.169,498,4.861,499,4.861,507,4.352,508,3.789,523,5.109,676,4.045,677,4.045,704,4.861,792,4.352,937,4.512,964,5.759,992,3.706,993,5.635,994,4.295,995,4.295]],["title/controllers/TransferController.html",[0,1.712,426,2.666]],["body/controllers/TransferController.html",[0,1.439,2,1.804,3,0.126,4,0.126,5,0.11,7,2.069,9,0.095,10,0.833,11,2.76,25,0.707,26,4.286,27,4.57,28,0.215,29,1.845,30,0.017,32,0.539,34,1.18,35,0.785,36,0.699,37,1.283,38,1.125,39,1.971,51,2.742,54,3.227,74,0.411,75,1.439,76,1.602,77,2.98,79,2.454,80,0.759,81,1.804,82,1.926,83,2.454,85,2.069,89,1.602,91,0.126,92,0.175,95,1.08,97,1.845,98,1.439,101,4.808,129,0.01,130,0.01,135,2.679,198,1.302,299,2.561,420,3.253,426,3.227,445,1.602,687,3.559,721,3.559,723,1.926,726,3.783,727,3.783,729,4.631,730,4.631,731,4.631,781,4.145,996,2.742,997,3.95,998,3.95,999,4.631,1000,4.631,1001,3.95,1002,2.742,1003,3.823,1004,3.178,1005,3.178,1006,3.178,1007,3.178,1008,3.178,1009,3.178,1010,3.178,1011,3.178,1012,3.178,1013,3.178,1014,3.178,1015,3.178,1016,3.178,1017,3.178,1018,3.178,1019,3.178,1020,3.178,1021,3.178,1022,3.178,1023,3.178,1024,4.579,1025,3.178,1026,3.178,1027,3.178,1028,3.178,1029,3.178,1030,3.178,1031,3.178,1032,3.178]],["title/classes/TransferDTO.html",[92,0.209,1003,2.462]],["body/classes/TransferDTO.html",[3,0.13,4,0.13,5,0.114,9,0.098,25,0.739,28,0.205,29,1.696,30,0.017,32,0.496,74,0.217,91,0.186,92,0.301,109,2.917,124,3.182,129,0.01,130,0.01,131,1.485,133,1.566,134,2.501,135,2.016,136,2.361,137,2.501,138,3.049,139,3.224,140,1.169,144,4.201,148,2.2,153,4.042,154,1.654,155,2.441,156,3.365,328,4.862,330,3.291,331,3.618,493,3.972,500,2.534,508,3.915,519,3.618,523,3.851,525,3.618,527,2.534,676,4.18,677,4.18,678,4.266,679,4.266,681,4.042,682,4.042,683,3.618,701,4.042,1003,4.391,1033,2.831,1034,5.655,1035,5.464,1036,5.464,1037,4.22,1038,3.281,1039,3.281,1040,4.685,1041,3.281,1042,4.685,1043,3.281,1044,4.685,1045,4.685]],["title/entities/TransferEntity.html",[157,1.125,445,1.907]],["body/entities/TransferEntity.html",[3,0.144,4,0.144,5,0.126,9,0.108,25,0.512,28,0.226,29,1.978,30,0.017,32,0.578,35,0.821,36,0.544,37,1.431,74,0.412,88,2.713,91,0.144,92,0.201,109,3.499,110,2.037,129,0.011,130,0.011,135,1.567,140,1.258,157,1.499,158,1.083,163,2.488,165,3.894,167,2.862,168,2.692,169,1.969,170,3.971,171,4.82,175,2.437,176,3.554,177,3.056,178,3.554,179,2.437,180,3.554,181,2.692,184,3.282,185,3.056,188,4.108,189,4.076,190,4.076,191,1.422,193,2.208,194,2.208,195,2.208,196,1.083,364,4.412,366,3.056,370,2.371,445,2.541,547,3.894,739,3.504,742,4.35,1037,5.061,1046,3.143,1047,4.076,1048,4.076,1049,3.643,1050,3.643,1051,3.643,1052,3.643,1053,3.643,1054,3.643,1055,3.643,1056,3.282]],["title/interfaces/TransferModel.html",[204,0.688,1056,2.462]],["body/interfaces/TransferModel.html",[3,0.187,4,0.187,5,0.163,9,0.14,25,0.74,28,0.22,30,0.017,36,0.646,37,1.511,74,0.311,91,0.187,109,3.693,110,2.353,129,0.013,130,0.013,140,1.493,163,2.976,175,2.848,192,4.205,204,0.858,205,1.285,739,4.191,1037,5.342,1047,4.875,1048,4.875,1056,3.896,1057,4.07]],["title/injectables/TransferRepository.html",[209,0.656,419,2.292]],["body/injectables/TransferRepository.html",[3,0.09,4,0.09,5,0.079,9,0.068,10,0.648,11,2.128,25,0.739,28,0.193,30,0.017,32,0.551,34,1.182,35,0.787,36,0.701,37,1.551,38,1.128,39,1.881,73,1.094,74,0.355,75,1.611,80,0.543,91,0.09,92,0.125,93,1.39,94,2.569,95,0.773,97,1.849,98,1.029,110,2.224,129,0.008,130,0.008,135,1.531,148,1.304,157,1.602,158,0.676,163,1.531,169,0.888,175,2.793,191,0.888,196,0.676,198,0.931,205,0.619,209,0.618,211,0.809,213,2.367,217,1.9,218,2.509,219,2.02,220,2.509,221,2.02,223,2.816,226,2.02,227,3.506,229,1.291,230,1.326,238,1.9,240,2.509,242,2.02,244,2.509,246,2.02,248,2.21,249,1.378,250,1.146,255,1.378,256,1.378,257,2.093,258,2.032,259,1.378,260,2.342,261,1.887,262,1.712,263,2.093,264,2.855,266,2.157,267,2.157,268,3.007,269,1.698,270,1.48,271,1.603,272,1.603,277,1.291,280,3.832,299,2.725,419,3.007,445,3.114,739,2.658,750,3.387,757,1.756,758,4.743,760,4.355,766,1.962,778,3.784,1047,3.796,1048,3.796,1058,1.962,1059,3.784,1060,3.784,1061,1.962,1062,2.274,1063,2.274,1064,2.274,1065,2.274,1066,1.962,1067,2.274,1068,2.274,1069,1.962,1070,2.274,1071,2.274,1072,2.274,1073,2.274,1074,2.274,1075,2.509,1076,2.274,1077,2.274,1078,2.274,1079,2.274,1080,4.281,1081,3.559,1082,2.274,1083,2.274,1084,2.274,1085,4.962]],["title/interfaces/TransferRepositoryInterface.html",[204,0.688,1075,2.666]],["body/interfaces/TransferRepositoryInterface.html",[3,0.164,4,0.164,5,0.144,9,0.123,10,1.002,25,0.75,28,0.184,30,0.017,32,0.547,34,1.124,35,0.749,36,0.667,37,0.906,38,1.143,39,1.988,74,0.363,91,0.164,110,2.354,129,0.012,130,0.012,158,1.233,175,2.956,204,0.754,205,1.129,213,3.141,217,2.939,238,2.939,262,1.619,282,2.354,283,3.336,284,3.115,285,3.578,286,2.513,287,2.513,299,3.141,445,2.09,605,3.578,758,4.964,760,4.964,1059,5.332,1060,5.332,1066,3.578,1069,3.578,1075,3.88,1086,5.912]],["title/injectables/TransferService.html",[209,0.656,420,2.292]],["body/injectables/TransferService.html",[3,0.091,4,0.091,5,0.08,9,0.069,10,0.655,11,2.55,25,0.71,28,0.179,30,0.017,32,0.499,34,1.092,35,0.727,36,0.647,38,0.997,39,1.691,74,0.358,76,2.733,80,0.551,81,1.309,89,1.163,91,0.091,92,0.127,93,1.405,94,1.905,95,1.504,97,1.543,98,2.601,124,2.67,129,0.008,130,0.008,135,1.549,139,2.811,146,1.922,148,1.94,155,1.813,169,2.243,198,2.458,209,0.625,210,3.025,211,0.82,229,2.512,230,1.341,248,1.163,257,1.101,258,1.474,261,0.993,277,2.838,299,3.266,306,2.537,311,2.78,317,3.524,335,1.398,343,3.862,415,3.406,419,3.482,420,3.286,445,3.129,644,3.418,706,4.153,726,4.376,727,4.685,781,2.78,789,1.99,791,4.314,795,1.99,805,4.153,806,1.99,808,3.819,809,3.819,810,1.99,812,4.957,813,1.99,814,1.99,815,1.99,997,3.105,998,3.105,999,3.105,1000,3.819,1001,3.105,1002,3.105,1003,3.255,1034,3.105,1047,3.12,1048,3.524,1056,2.343,1061,1.99,1080,1.99,1087,1.99,1088,2.307,1089,2.307,1090,3.599,1091,3.599,1092,3.599,1093,3.599,1094,2.307,1095,3.599,1096,4.426,1097,2.307,1098,5,1099,2.307,1100,2.307,1101,2.307,1102,2.307,1103,2.307,1104,3.599,1105,3.599,1106,2.307,1107,2.307,1108,2.307,1109,2.307,1110,3.599,1111,5,1112,2.307,1113,2.307,1114,2.307,1115,2.307,1116,2.307,1117,2.307,1118,3.599,1119,2.307,1120,2.307,1121,2.307,1122,2.307,1123,2.307,1124,2.307,1125,2.307,1126,2.307,1127,3.599,1128,4.426,1129,3.599,1130,2.307,1131,4.426,1132,2.307,1133,2.307,1134,2.307]],["title/classes/TypeOrmExceptionFilter.html",[92,0.209,446,2.666]],["body/classes/TypeOrmExceptionFilter.html",[3,0.182,4,0.182,5,0.159,9,0.136,10,1.069,28,0.175,30,0.017,32,0.381,34,0.834,35,0.555,36,0.494,38,0.795,74,0.388,80,1.094,91,0.182,92,0.253,110,1.424,129,0.013,130,0.013,131,2.075,177,2.777,191,1.789,196,1.747,198,2.898,230,1.707,258,1.877,330,2.187,446,4.142,448,4.539,460,4.572,683,3.539,856,5.596,857,5.01,858,5.07,860,5.903,862,5.596,902,3.954,1135,5.07,1136,3.954,1137,6.842,1138,4.583,1139,4.583,1140,4.583,1141,5.903,1142,4.583,1143,5.876,1144,4.583,1145,5.876,1146,4.583,1147,4.583,1148,4.583,1149,4.583,1150,5.876,1151,4.583,1152,3.954,1153,4.583,1154,4.583,1155,4.583,1156,4.583,1157,4.583]],["title/injectables/TypesOrmPostgresConfigService.html",[209,0.656,475,2.666]],["body/injectables/TypesOrmPostgresConfigService.html",[3,0.181,4,0.181,5,0.158,9,0.136,10,1.066,28,0.174,30,0.017,32,0.487,34,0.83,35,0.553,36,0.492,38,0.792,74,0.451,80,1.089,88,2.287,91,0.181,92,0.251,93,1.781,95,1.55,97,1.298,129,0.013,130,0.013,158,1.742,164,2.953,173,2.652,179,2.287,196,1.356,209,1.017,211,1.622,250,2.299,436,3.523,443,2.953,444,2.953,445,2.953,459,5.275,460,3.215,462,3.935,464,3.935,466,2.299,468,3.935,470,3.935,475,4.129,723,2.764,1158,5.584,1159,5.584,1160,3.935,1161,6.83,1162,4.561,1163,7.23,1164,4.561,1165,4.561,1166,6.472,1167,5.858,1168,4.561,1169,4.561,1170,4.561,1171,4.561,1172,4.561,1173,4.561]],["title/controllers/UserController.html",[0,1.712,425,2.666]],["body/controllers/UserController.html",[0,1.408,2,1.766,3,0.123,4,0.123,5,0.108,7,2.025,9,0.093,10,0.82,11,2.856,25,0.749,26,2.732,28,0.192,29,1.935,30,0.017,32,0.565,34,1.171,35,0.78,36,0.694,37,1.485,38,1.18,39,2.024,47,3.89,54,3.178,74,0.438,75,1.408,76,1.568,77,3.452,78,2.684,79,2.403,80,0.743,82,1.885,83,2.403,86,3.01,87,2.684,88,1.215,91,0.123,92,0.171,95,1.057,97,1.935,101,3.482,108,2.684,129,0.01,130,0.01,162,3.244,173,1.408,345,2.403,425,3.178,485,3.3,489,2.273,636,3.785,639,2.193,640,2.684,723,1.885,943,2.684,1174,2.684,1175,4.509,1176,5.815,1177,5.815,1178,4.509,1179,5.303,1180,4.509,1181,4.509,1182,5.303,1183,3.111,1184,3.111,1185,3.111,1186,4.509,1187,3.111,1188,3.111,1189,4.509,1190,3.111,1191,3.111,1192,4.509,1193,3.111,1194,3.111,1195,3.111,1196,3.111,1197,4.509,1198,3.111,1199,3.111,1200,3.111,1201,3.111,1202,3.111,1203,3.111,1204,3.111,1205,3.111,1206,3.111,1207,3.111,1208,3.111,1209,3.111,1210,3.111,1211,3.111,1212,3.111,1213,3.111,1214,3.111,1215,3.111,1216,3.111]],["title/coverage.html",[1217,4.464]],["body/coverage.html",[0,2.684,1,1.986,5,0.098,6,2.432,28,0.149,29,0.802,30,0.017,50,1.708,82,1.708,84,1.6,86,1.6,88,1.1,92,0.379,129,0.009,130,0.009,132,2.432,157,1.848,159,3.239,164,1.421,169,3.061,173,1.276,183,2.177,192,1.6,197,3.618,204,1.322,206,2.432,207,1.834,208,1.6,209,1.261,210,1.421,212,2.432,251,1.986,258,1.154,281,3.239,282,3.527,284,1.421,288,2.432,293,1.6,294,1.505,362,2.432,363,3.239,372,2.432,373,2.432,374,2.432,375,3.239,388,1.986,410,1.986,415,1.6,416,1.708,417,1.708,418,1.708,419,1.708,420,1.708,425,1.986,426,1.986,427,1.986,428,1.986,442,2.177,443,1.421,444,1.421,445,1.421,446,1.986,448,2.177,451,1.986,459,2.177,475,1.986,477,2.432,478,2.432,485,1.6,486,2.432,534,2.432,547,5.107,555,2.432,556,1.834,557,2.432,588,1.986,604,2.432,609,2.432,636,1.834,639,1.986,674,2.432,687,1.708,688,2.432,689,2.432,706,1.834,707,2.432,708,2.432,709,2.432,714,1.834,721,1.708,734,2.432,738,2.432,746,1.834,747,2.432,748,2.432,767,1.986,779,2.432,780,2.432,805,1.834,816,2.432,818,2.432,819,2.432,820,2.432,830,1.986,851,2.432,852,2.177,853,2.432,854,2.432,855,2.432,863,2.177,865,2.432,889,2.177,890,2.432,898,2.432,912,2.432,920,2.432,921,2.177,922,2.432,928,2.432,937,1.834,952,2.432,992,2.432,996,2.432,1003,1.834,1033,2.432,1046,2.432,1056,1.834,1057,2.432,1058,2.432,1075,1.986,1086,2.432,1087,2.432,1135,2.432,1136,2.432,1158,2.432,1159,2.432,1160,2.432,1174,2.432,1217,2.432,1218,2.432,1219,2.818,1220,2.818,1221,5.546,1222,2.818,1223,5.008,1224,2.818,1225,2.818,1226,2.818,1227,2.818,1228,4.193,1229,4.193,1230,2.432,1231,4.193,1232,6.877,1233,2.818,1234,2.818,1235,2.432,1236,5.929,1237,5.929,1238,5.008,1239,4.193,1240,4.193,1241,4.193,1242,6.215,1243,2.818,1244,5.008,1245,4.193,1246,2.818,1247,2.432,1248,2.818,1249,2.818,1250,2.818]],["title/dependencies.html",[407,3.209,1251,2.72]],["body/dependencies.html",[30,0.017,80,1.288,92,0.359,129,0.014,130,0.014,154,2.719,191,2.106,250,2.719,407,3.802,436,4.167,438,4.654,440,3.802,875,4.167,907,4.654,924,4.654,950,4.167,1252,6.983,1253,5.395,1254,5.395,1255,5.395,1256,5.395,1257,5.395,1258,5.395,1259,5.395,1260,5.395,1261,5.395,1262,5.395,1263,5.395,1264,5.395,1265,5.395,1266,5.395,1267,5.395]],["title/miscellaneous/functions.html",[1268,2.222,1269,3.928]],["body/miscellaneous/functions.html",[9,0.175,25,0.596,30,0.016,38,1.019,129,0.015,130,0.015,159,4.537,183,5.59,410,5.101,1247,5.068,1268,4.14,1269,5.068,1270,5.874,1271,5.874]],["title/index.html",[9,0.094,1272,3.153,1273,3.153]],["body/index.html",[8,2.045,26,3.529,30,0.017,129,0.013,130,0.013,133,2.156,148,1.344,223,2.564,883,4.497,899,5.024,1141,3.898,1152,3.898,1218,5.024,1274,4.518,1275,4.518,1276,5.823,1277,4.518,1278,4.518,1279,4.518,1280,4.518,1281,4.518,1282,6.806,1283,4.518,1284,4.518,1285,4.518,1286,6.443,1287,6.806,1288,4.518,1289,4.518,1290,5.823,1291,6.443,1292,4.518,1293,4.518,1294,5.823,1295,4.518,1296,4.518,1297,4.518,1298,4.518,1299,6.806,1300,5.823,1301,5.823,1302,4.518,1303,4.518,1304,4.518,1305,4.518,1306,4.518,1307,4.518,1308,6.443,1309,4.518,1310,4.518,1311,4.518,1312,5.823,1313,6.443,1314,6.443,1315,6.443,1316,5.823,1317,5.823,1318,5.823,1319,5.823,1320,5.823,1321,4.518,1322,4.518,1323,4.518,1324,4.518,1325,4.518,1326,4.518,1327,4.518,1328,4.518,1329,4.518,1330,4.518,1331,4.518,1332,4.518]],["title/modules.html",[406,3.997]],["body/modules.html",[30,0.015,129,0.015,130,0.015,405,4.271,406,4.68,1333,6.059,1334,6.059,1335,6.059,1336,6.059]],["title/overview.html",[1337,4.464]],["body/overview.html",[2,2.678,30,0.017,84,3.732,86,3.732,129,0.013,130,0.013,131,2.136,158,1.403,205,1.285,210,3.314,211,1.678,293,3.732,294,3.511,404,4.624,405,5.599,407,3.325,408,4.07,409,4.07,410,3.325,411,4.07,412,4.07,413,4.07,414,4.07,415,3.732,416,3.985,417,3.985,418,3.985,419,3.985,420,3.985,421,5.165,422,4.07,423,4.07,863,3.644,883,4.624,1337,4.07,1338,4.718,1339,4.718,1340,5.986,1341,4.718]],["title/properties.html",[140,1.136,1251,2.72]],["body/properties.html",[30,0.017,129,0.015,130,0.015,133,2.846,140,1.488,1342,5.965,1343,5.965,1344,5.965,1345,5.965,1346,5.965]],["title/miscellaneous/variables.html",[1268,2.222,1347,3.928]],["body/miscellaneous/variables.html",[9,0.167,25,0.57,28,0.167,29,1.896,30,0.017,129,0.014,130,0.014,136,2.831,167,3.781,168,3.557,442,5.145,456,4.845,1230,4.845,1235,4.845,1268,3.958,1347,4.845,1348,5.616,1349,5.616,1350,6.662,1351,5.616,1352,5.616,1353,5.616]]],"invertedIndex":[["",{"_index":30,"title":{},"body":{"controllers/AccountController.html":{},"classes/AccountDTO.html":{},"entities/AccountEntity.html":{},"interfaces/AccountModel.html":{},"injectables/AccountRepository.html":{},"interfaces/AccountRepositoryInterface.html":{},"injectables/AccountService.html":{},"entities/AccountTypeEntity.html":{},"interfaces/AccountTypeModel.html":{},"injectables/AccountTypeRepository.html":{},"interfaces/AccountTypeRepositoryInterface.html":{},"modules/AppModule.html":{},"interfaces/BaseRepositoryInterface.html":{},"classes/CustomerDTO.html":{},"entities/CustomerEntity.html":{},"interfaces/CustomerModel.html":{},"injectables/CustomerRepository.html":{},"interfaces/CustomerRepositoryInterface.html":{},"injectables/CustomerService.html":{},"classes/CustomerUpdateDTO.html":{},"classes/DataRangeDTO.html":{},"interfaces/DataRangeModel.html":{},"controllers/DepositController.html":{},"classes/DepositDTO.html":{},"entities/DepositEntity.html":{},"interfaces/DepositModel.html":{},"injectables/DepositRepository.html":{},"interfaces/DepositRepositoryInterface.html":{},"injectables/DepositService.html":{},"entities/DocumentTypeEntity.html":{},"interfaces/DocumentTypeModel.html":{},"injectables/DocumentTypeRepository.html":{},"interfaces/DocumentTypeRepositoryInterface.html":{},"classes/ExceptionFiltersFilter.html":{},"guards/GuardsGuard.html":{},"injectables/InterceptorsInterceptor.html":{},"injectables/MiddlewaresMiddleware.html":{},"classes/PaginationDTO.html":{},"interfaces/PaginationModel.html":{},"injectables/PipesPipe.html":{},"controllers/SecurityController.html":{},"injectables/SecurityService.html":{},"classes/SignDTO.html":{},"controllers/TransferController.html":{},"classes/TransferDTO.html":{},"entities/TransferEntity.html":{},"interfaces/TransferModel.html":{},"injectables/TransferRepository.html":{},"interfaces/TransferRepositoryInterface.html":{},"injectables/TransferService.html":{},"classes/TypeOrmExceptionFilter.html":{},"injectables/TypesOrmPostgresConfigService.html":{},"controllers/UserController.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/variables.html":{}}}],["0",{"_index":169,"title":{},"body":{"entities/AccountEntity.html":{},"injectables/AccountRepository.html":{},"injectables/AccountService.html":{},"injectables/AccountTypeRepository.html":{},"injectables/CustomerRepository.html":{},"entities/DepositEntity.html":{},"injectables/DepositRepository.html":{},"injectables/DepositService.html":{},"injectables/DocumentTypeRepository.html":{},"injectables/SecurityService.html":{},"entities/TransferEntity.html":{},"injectables/TransferRepository.html":{},"injectables/TransferService.html":{},"coverage.html":{}}}],["0.0.1",{"_index":1343,"title":{},"body":{"properties.html":{}}}],["0.14.1",{"_index":1259,"title":{},"body":{"dependencies.html":{}}}],["0.2.2",{"_index":1265,"title":{},"body":{"dependencies.html":{}}}],["0.3.20",{"_index":1267,"title":{},"body":{"dependencies.html":{}}}],["0.5.1",{"_index":1258,"title":{},"body":{"dependencies.html":{}}}],["0/1",{"_index":1232,"title":{},"body":{"coverage.html":{}}}],["0/11",{"_index":1239,"title":{},"body":{"coverage.html":{}}}],["0/12",{"_index":1245,"title":{},"body":{"coverage.html":{}}}],["0/13",{"_index":1248,"title":{},"body":{"coverage.html":{}}}],["0/17",{"_index":1246,"title":{},"body":{"coverage.html":{}}}],["0/2",{"_index":1236,"title":{},"body":{"coverage.html":{}}}],["0/3",{"_index":1242,"title":{},"body":{"coverage.html":{}}}],["0/4",{"_index":1237,"title":{},"body":{"coverage.html":{}}}],["0/5",{"_index":1240,"title":{},"body":{"coverage.html":{}}}],["0/6",{"_index":1241,"title":{},"body":{"coverage.html":{}}}],["0/7",{"_index":1238,"title":{},"body":{"coverage.html":{}}}],["0/8",{"_index":1243,"title":{},"body":{"coverage.html":{}}}],["0/9",{"_index":1244,"title":{},"body":{"coverage.html":{}}}],["1",{"_index":883,"title":{},"body":{"guards/GuardsGuard.html":{},"index.html":{},"overview.html":{}}}],["10",{"_index":1341,"title":{},"body":{"overview.html":{}}}],["10.0.2",{"_index":1256,"title":{},"body":{"dependencies.html":{}}}],["10.2.0",{"_index":1254,"title":{},"body":{"dependencies.html":{}}}],["10.3.8",{"_index":1252,"title":{},"body":{"dependencies.html":{}}}],["10/15",{"_index":1225,"title":{},"body":{"coverage.html":{}}}],["100",{"_index":547,"title":{},"body":{"entities/CustomerEntity.html":{},"entities/TransferEntity.html":{},"coverage.html":{}}}],["10000",{"_index":203,"title":{},"body":{"entities/AccountEntity.html":{}}}],["10b6c590",{"_index":397,"title":{},"body":{"injectables/AccountTypeRepository.html":{}}}],["15",{"_index":1340,"title":{},"body":{"overview.html":{}}}],["2",{"_index":1329,"title":{},"body":{"index.html":{}}}],["20",{"_index":541,"title":{},"body":{"entities/CustomerEntity.html":{}}}],["20000",{"_index":201,"title":{},"body":{"entities/AccountEntity.html":{}}}],["255",{"_index":538,"title":{},"body":{"entities/CustomerEntity.html":{}}}],["27",{"_index":1226,"title":{},"body":{"coverage.html":{}}}],["283f",{"_index":841,"title":{},"body":{"injectables/DocumentTypeRepository.html":{}}}],["3.2.2",{"_index":1253,"title":{},"body":{"dependencies.html":{}}}],["3/11",{"_index":1227,"title":{},"body":{"coverage.html":{}}}],["3/3",{"_index":1221,"title":{},"body":{"coverage.html":{}}}],["3/5",{"_index":1229,"title":{},"body":{"coverage.html":{}}}],["30",{"_index":686,"title":{},"body":{"classes/CustomerUpdateDTO.html":{}}}],["4.0.1",{"_index":1261,"title":{},"body":{"dependencies.html":{}}}],["4021e882c080",{"_index":401,"title":{},"body":{"injectables/AccountTypeRepository.html":{}}}],["4621",{"_index":399,"title":{},"body":{"injectables/AccountTypeRepository.html":{}}}],["4a49",{"_index":835,"title":{},"body":{"injectables/DocumentTypeRepository.html":{}}}],["4c22",{"_index":393,"title":{},"body":{"injectables/AccountTypeRepository.html":{},"injectables/CustomerService.html":{},"injectables/SecurityService.html":{}}}],["4e71",{"_index":842,"title":{},"body":{"injectables/DocumentTypeRepository.html":{}}}],["5",{"_index":1338,"title":{},"body":{"overview.html":{}}}],["5/5",{"_index":1223,"title":{},"body":{"coverage.html":{}}}],["5/8",{"_index":1234,"title":{},"body":{"coverage.html":{}}}],["50",{"_index":367,"title":{},"body":{"entities/AccountTypeEntity.html":{},"entities/DocumentTypeEntity.html":{}}}],["500",{"_index":683,"title":{},"body":{"classes/CustomerUpdateDTO.html":{},"classes/TransferDTO.html":{},"classes/TypeOrmExceptionFilter.html":{}}}],["50ce60b300b1",{"_index":837,"title":{},"body":{"injectables/DocumentTypeRepository.html":{}}}],["5432",{"_index":463,"title":{},"body":{"modules/AppModule.html":{}}}],["5e89",{"_index":834,"title":{},"body":{"injectables/DocumentTypeRepository.html":{}}}],["6",{"_index":1339,"title":{},"body":{"overview.html":{}}}],["60",{"_index":1228,"title":{},"body":{"coverage.html":{}}}],["62",{"_index":1233,"title":{},"body":{"coverage.html":{}}}],["64911806",{"_index":840,"title":{},"body":{"injectables/DocumentTypeRepository.html":{}}}],["66",{"_index":1224,"title":{},"body":{"coverage.html":{}}}],["7.8.1",{"_index":1266,"title":{},"body":{"dependencies.html":{}}}],["7/7",{"_index":1222,"title":{},"body":{"coverage.html":{}}}],["8",{"_index":518,"title":{},"body":{"classes/CustomerDTO.html":{},"classes/CustomerUpdateDTO.html":{}}}],["8.11.5",{"_index":1263,"title":{},"body":{"dependencies.html":{}}}],["85fa",{"_index":398,"title":{},"body":{"injectables/AccountTypeRepository.html":{}}}],["98d5",{"_index":836,"title":{},"body":{"injectables/DocumentTypeRepository.html":{}}}],["a01c",{"_index":392,"title":{},"body":{"injectables/AccountTypeRepository.html":{},"injectables/CustomerService.html":{},"injectables/SecurityService.html":{}}}],["a6d6",{"_index":394,"title":{},"body":{"injectables/AccountTypeRepository.html":{},"injectables/CustomerService.html":{},"injectables/SecurityService.html":{}}}],["ab27c9ac",{"_index":391,"title":{},"body":{"injectables/AccountTypeRepository.html":{},"injectables/CustomerService.html":{},"injectables/SecurityService.html":{}}}],["ab94",{"_index":843,"title":{},"body":{"injectables/DocumentTypeRepository.html":{}}}],["access_token",{"_index":911,"title":{},"body":{"injectables/MiddlewaresMiddleware.html":{},"injectables/SecurityService.html":{}}}],["account",{"_index":8,"title":{},"body":{"controllers/AccountController.html":{},"entities/AccountEntity.html":{},"injectables/AccountRepository.html":{},"injectables/AccountService.html":{},"injectables/CustomerService.html":{},"controllers/DepositController.html":{},"entities/DepositEntity.html":{},"interfaces/DepositModel.html":{},"injectables/DepositRepository.html":{},"injectables/SecurityService.html":{},"index.html":{}}}],["account.accounttype",{"_index":663,"title":{},"body":{"injectables/CustomerService.html":{}}}],["account.accounttypeid",{"_index":341,"title":{},"body":{"injectables/AccountService.html":{}}}],["account.balance",{"_index":989,"title":{},"body":{"injectables/SecurityService.html":{}}}],["account.customer",{"_index":665,"title":{},"body":{"injectables/CustomerService.html":{}}}],["account.customerid",{"_index":338,"title":{},"body":{"injectables/AccountService.html":{}}}],["account.id",{"_index":275,"title":{},"body":{"injectables/AccountRepository.html":{}}}],["account_type",{"_index":371,"title":{},"body":{"entities/AccountTypeEntity.html":{}}}],["accountcontroller",{"_index":1,"title":{"controllers/AccountController.html":{}},"body":{"controllers/AccountController.html":{},"modules/AppModule.html":{},"coverage.html":{}}}],["accountdto",{"_index":50,"title":{"classes/AccountDTO.html":{}},"body":{"controllers/AccountController.html":{},"classes/AccountDTO.html":{},"injectables/AccountService.html":{},"injectables/SecurityService.html":{},"coverage.html":{}}}],["accountentity",{"_index":88,"title":{"entities/AccountEntity.html":{}},"body":{"controllers/AccountController.html":{},"entities/AccountEntity.html":{},"injectables/AccountRepository.html":{},"interfaces/AccountRepositoryInterface.html":{},"injectables/AccountService.html":{},"modules/AppModule.html":{},"injectables/CustomerService.html":{},"entities/DepositEntity.html":{},"injectables/DepositService.html":{},"entities/TransferEntity.html":{},"injectables/TypesOrmPostgresConfigService.html":{},"controllers/UserController.html":{},"coverage.html":{}}}],["accountid",{"_index":299,"title":{},"body":{"injectables/AccountService.html":{},"controllers/DepositController.html":{},"classes/DepositDTO.html":{},"injectables/DepositRepository.html":{},"interfaces/DepositRepositoryInterface.html":{},"injectables/DepositService.html":{},"controllers/TransferController.html":{},"injectables/TransferRepository.html":{},"interfaces/TransferRepositoryInterface.html":{},"injectables/TransferService.html":{}}}],["accountmodel",{"_index":192,"title":{"interfaces/AccountModel.html":{}},"body":{"entities/AccountEntity.html":{},"interfaces/AccountModel.html":{},"injectables/AccountService.html":{},"interfaces/DepositModel.html":{},"interfaces/TransferModel.html":{},"coverage.html":{}}}],["accountrepository",{"_index":210,"title":{"injectables/AccountRepository.html":{}},"body":{"injectables/AccountRepository.html":{},"injectables/AccountService.html":{},"modules/AppModule.html":{},"injectables/CustomerService.html":{},"injectables/DepositService.html":{},"injectables/TransferService.html":{},"coverage.html":{},"overview.html":{}}}],["accountrepositoryinterface",{"_index":251,"title":{"interfaces/AccountRepositoryInterface.html":{}},"body":{"injectables/AccountRepository.html":{},"interfaces/AccountRepositoryInterface.html":{},"coverage.html":{}}}],["accountservice",{"_index":84,"title":{"injectables/AccountService.html":{}},"body":{"controllers/AccountController.html":{},"injectables/AccountService.html":{},"modules/AppModule.html":{},"injectables/SecurityService.html":{},"coverage.html":{},"overview.html":{}}}],["accounttype",{"_index":160,"title":{},"body":{"entities/AccountEntity.html":{},"interfaces/AccountModel.html":{},"injectables/AccountRepository.html":{},"injectables/AccountService.html":{}}}],["accounttypeentity",{"_index":164,"title":{"entities/AccountTypeEntity.html":{}},"body":{"entities/AccountEntity.html":{},"injectables/AccountService.html":{},"entities/AccountTypeEntity.html":{},"injectables/AccountTypeRepository.html":{},"interfaces/AccountTypeRepositoryInterface.html":{},"modules/AppModule.html":{},"injectables/TypesOrmPostgresConfigService.html":{},"coverage.html":{}}}],["accounttypeid",{"_index":121,"title":{},"body":{"controllers/AccountController.html":{},"classes/AccountDTO.html":{},"injectables/AccountRepository.html":{},"interfaces/AccountRepositoryInterface.html":{},"injectables/AccountService.html":{}}}],["accounttypemodel",{"_index":207,"title":{"interfaces/AccountTypeModel.html":{}},"body":{"interfaces/AccountModel.html":{},"entities/AccountTypeEntity.html":{},"interfaces/AccountTypeModel.html":{},"coverage.html":{}}}],["accounttyperepository",{"_index":293,"title":{"injectables/AccountTypeRepository.html":{}},"body":{"injectables/AccountService.html":{},"injectables/AccountTypeRepository.html":{},"modules/AppModule.html":{},"injectables/CustomerService.html":{},"coverage.html":{},"overview.html":{}}}],["accounttyperepositoryinterface",{"_index":388,"title":{"interfaces/AccountTypeRepositoryInterface.html":{}},"body":{"injectables/AccountTypeRepository.html":{},"interfaces/AccountTypeRepositoryInterface.html":{},"coverage.html":{}}}],["actualizar",{"_index":638,"title":{},"body":{"injectables/CustomerService.html":{},"classes/CustomerUpdateDTO.html":{}}}],["addbalance",{"_index":12,"title":{},"body":{"controllers/AccountController.html":{},"injectables/AccountService.html":{}}}],["addbalance(accountid",{"_index":296,"title":{},"body":{"injectables/AccountService.html":{}}}],["addbalance(id",{"_index":24,"title":{},"body":{"controllers/AccountController.html":{}}}],["aditional",{"_index":1145,"title":{},"body":{"classes/TypeOrmExceptionFilter.html":{}}}],["agregar",{"_index":298,"title":{},"body":{"injectables/AccountService.html":{}}}],["ahorros",{"_index":396,"title":{},"body":{"injectables/AccountTypeRepository.html":{}}}],["al",{"_index":510,"title":{},"body":{"classes/CustomerDTO.html":{},"classes/CustomerUpdateDTO.html":{}}}],["amount",{"_index":109,"title":{},"body":{"controllers/AccountController.html":{},"injectables/AccountService.html":{},"classes/DepositDTO.html":{},"entities/DepositEntity.html":{},"interfaces/DepositModel.html":{},"classes/TransferDTO.html":{},"entities/TransferEntity.html":{},"interfaces/TransferModel.html":{}}}],["amountbalance",{"_index":13,"title":{},"body":{"controllers/AccountController.html":{}}}],["amountbalance(id",{"_index":40,"title":{},"body":{"controllers/AccountController.html":{}}}],["answer",{"_index":970,"title":{},"body":{"injectables/SecurityService.html":{}}}],["any).code",{"_index":1144,"title":{},"body":{"classes/TypeOrmExceptionFilter.html":{}}}],["any).detail",{"_index":1146,"title":{},"body":{"classes/TypeOrmExceptionFilter.html":{}}}],["app",{"_index":1289,"title":{},"body":{"index.html":{}}}],["app_filter",{"_index":437,"title":{},"body":{"modules/AppModule.html":{}}}],["applications",{"_index":1281,"title":{},"body":{"index.html":{}}}],["appmodule",{"_index":405,"title":{"modules/AppModule.html":{}},"body":{"modules/AppModule.html":{},"modules.html":{},"overview.html":{}}}],["args",{"_index":1350,"title":{},"body":{"miscellaneous/variables.html":{}}}],["argumentmetadata",{"_index":925,"title":{},"body":{"injectables/PipesPipe.html":{}}}],["argumentshost",{"_index":860,"title":{},"body":{"classes/ExceptionFiltersFilter.html":{},"classes/TypeOrmExceptionFilter.html":{}}}],["array",{"_index":343,"title":{},"body":{"injectables/AccountService.html":{},"injectables/DepositService.html":{},"injectables/TransferService.html":{}}}],["array.length",{"_index":348,"title":{},"body":{"injectables/AccountService.html":{}}}],["async",{"_index":11,"title":{},"body":{"controllers/AccountController.html":{},"injectables/AccountRepository.html":{},"injectables/AccountService.html":{},"injectables/AccountTypeRepository.html":{},"injectables/CustomerRepository.html":{},"injectables/CustomerService.html":{},"controllers/DepositController.html":{},"injectables/DepositRepository.html":{},"injectables/DepositService.html":{},"guards/GuardsGuard.html":{},"injectables/SecurityService.html":{},"controllers/TransferController.html":{},"injectables/TransferRepository.html":{},"injectables/TransferService.html":{},"controllers/UserController.html":{}}}],["authheader",{"_index":878,"title":{},"body":{"guards/GuardsGuard.html":{},"injectables/MiddlewaresMiddleware.html":{}}}],["authheader.split",{"_index":882,"title":{},"body":{"guards/GuardsGuard.html":{}}}],["authheader.startswith('access_token",{"_index":880,"title":{},"body":{"guards/GuardsGuard.html":{},"injectables/MiddlewaresMiddleware.html":{}}}],["authheader.substring(7",{"_index":909,"title":{},"body":{"injectables/MiddlewaresMiddleware.html":{}}}],["author",{"_index":1346,"title":{},"body":{"properties.html":{}}}],["autoloadentities",{"_index":471,"title":{},"body":{"modules/AppModule.html":{}}}],["avatar_url",{"_index":537,"title":{},"body":{"entities/CustomerEntity.html":{}}}],["avatarurl",{"_index":535,"title":{},"body":{"entities/CustomerEntity.html":{},"interfaces/CustomerModel.html":{}}}],["await",{"_index":98,"title":{},"body":{"controllers/AccountController.html":{},"injectables/AccountRepository.html":{},"injectables/AccountService.html":{},"injectables/CustomerRepository.html":{},"injectables/CustomerService.html":{},"controllers/DepositController.html":{},"injectables/DepositService.html":{},"injectables/SecurityService.html":{},"controllers/TransferController.html":{},"injectables/TransferRepository.html":{},"injectables/TransferService.html":{}}}],["b85a",{"_index":400,"title":{},"body":{"injectables/AccountTypeRepository.html":{}}}],["baja",{"_index":633,"title":{},"body":{"injectables/CustomerService.html":{}}}],["balance",{"_index":161,"title":{},"body":{"entities/AccountEntity.html":{},"interfaces/AccountModel.html":{},"injectables/AccountService.html":{}}}],["banco",{"_index":1092,"title":{},"body":{"injectables/TransferService.html":{}}}],["bank",{"_index":199,"title":{},"body":{"entities/AccountEntity.html":{}}}],["base",{"_index":262,"title":{},"body":{"injectables/AccountRepository.html":{},"interfaces/AccountRepositoryInterface.html":{},"injectables/AccountTypeRepository.html":{},"interfaces/AccountTypeRepositoryInterface.html":{},"injectables/CustomerRepository.html":{},"interfaces/CustomerRepositoryInterface.html":{},"injectables/CustomerService.html":{},"injectables/DepositRepository.html":{},"interfaces/DepositRepositoryInterface.html":{},"injectables/DocumentTypeRepository.html":{},"interfaces/DocumentTypeRepositoryInterface.html":{},"injectables/SecurityService.html":{},"injectables/TransferRepository.html":{},"interfaces/TransferRepositoryInterface.html":{}}}],["baserepositoryinterface",{"_index":284,"title":{"interfaces/BaseRepositoryInterface.html":{}},"body":{"interfaces/AccountRepositoryInterface.html":{},"interfaces/AccountTypeRepositoryInterface.html":{},"interfaces/BaseRepositoryInterface.html":{},"interfaces/CustomerRepositoryInterface.html":{},"interfaces/DepositRepositoryInterface.html":{},"interfaces/DocumentTypeRepositoryInterface.html":{},"interfaces/TransferRepositoryInterface.html":{},"coverage.html":{}}}],["between",{"_index":766,"title":{},"body":{"injectables/DepositRepository.html":{},"injectables/TransferRepository.html":{}}}],["between(dateinit",{"_index":778,"title":{},"body":{"injectables/DepositRepository.html":{},"injectables/TransferRepository.html":{}}}],["body",{"_index":26,"title":{},"body":{"controllers/AccountController.html":{},"controllers/DepositController.html":{},"controllers/SecurityController.html":{},"controllers/TransferController.html":{},"controllers/UserController.html":{},"index.html":{}}}],["body.accountid",{"_index":729,"title":{},"body":{"controllers/DepositController.html":{},"controllers/TransferController.html":{}}}],["body.accounttypeid",{"_index":123,"title":{},"body":{"controllers/AccountController.html":{}}}],["body.amount",{"_index":111,"title":{},"body":{"controllers/AccountController.html":{}}}],["body.datarange",{"_index":731,"title":{},"body":{"controllers/DepositController.html":{},"controllers/TransferController.html":{}}}],["body.pagination",{"_index":730,"title":{},"body":{"controllers/DepositController.html":{},"controllers/TransferController.html":{}}}],["body.state",{"_index":116,"title":{},"body":{"controllers/AccountController.html":{}}}],["boolean",{"_index":73,"title":{},"body":{"controllers/AccountController.html":{},"entities/AccountEntity.html":{},"interfaces/AccountModel.html":{},"injectables/AccountRepository.html":{},"interfaces/AccountRepositoryInterface.html":{},"injectables/AccountService.html":{},"entities/AccountTypeEntity.html":{},"interfaces/AccountTypeModel.html":{},"injectables/AccountTypeRepository.html":{},"interfaces/AccountTypeRepositoryInterface.html":{},"interfaces/BaseRepositoryInterface.html":{},"entities/CustomerEntity.html":{},"interfaces/CustomerModel.html":{},"injectables/CustomerRepository.html":{},"interfaces/CustomerRepositoryInterface.html":{},"injectables/CustomerService.html":{},"injectables/DepositRepository.html":{},"entities/DocumentTypeEntity.html":{},"interfaces/DocumentTypeModel.html":{},"injectables/DocumentTypeRepository.html":{},"interfaces/DocumentTypeRepositoryInterface.html":{},"controllers/SecurityController.html":{},"injectables/SecurityService.html":{},"injectables/TransferRepository.html":{}}}],["bootstrap",{"_index":410,"title":{},"body":{"modules/AppModule.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"overview.html":{}}}],["borrar",{"_index":311,"title":{},"body":{"injectables/AccountService.html":{},"injectables/DepositService.html":{},"injectables/TransferService.html":{}}}],["browse",{"_index":1336,"title":{},"body":{"modules.html":{}}}],["browser",{"_index":1333,"title":{},"body":{"modules.html":{}}}],["building",{"_index":1277,"title":{},"body":{"index.html":{}}}],["business/dtos",{"_index":943,"title":{},"body":{"controllers/SecurityController.html":{},"controllers/UserController.html":{}}}],["business/services",{"_index":85,"title":{},"body":{"controllers/AccountController.html":{},"modules/AppModule.html":{},"controllers/DepositController.html":{},"controllers/SecurityController.html":{},"controllers/TransferController.html":{}}}],["business/services/customer/customer.service",{"_index":87,"title":{},"body":{"controllers/AccountController.html":{},"controllers/UserController.html":{}}}],["c822487e",{"_index":833,"title":{},"body":{"injectables/DocumentTypeRepository.html":{}}}],["cadena",{"_index":677,"title":{},"body":{"classes/CustomerUpdateDTO.html":{},"classes/DataRangeDTO.html":{},"classes/DepositDTO.html":{},"classes/PaginationDTO.html":{},"classes/SignDTO.html":{},"classes/TransferDTO.html":{}}}],["callhandler",{"_index":894,"title":{},"body":{"injectables/InterceptorsInterceptor.html":{}}}],["cambiada",{"_index":125,"title":{},"body":{"controllers/AccountController.html":{}}}],["cambiado",{"_index":118,"title":{},"body":{"controllers/AccountController.html":{}}}],["cambiar",{"_index":302,"title":{},"body":{"injectables/AccountService.html":{}}}],["canactivate",{"_index":866,"title":{},"body":{"guards/GuardsGuard.html":{}}}],["canactivate(context",{"_index":870,"title":{},"body":{"guards/GuardsGuard.html":{}}}],["cantidad",{"_index":696,"title":{},"body":{"classes/DataRangeDTO.html":{}}}],["caracteres",{"_index":519,"title":{},"body":{"classes/CustomerDTO.html":{},"classes/CustomerUpdateDTO.html":{},"classes/TransferDTO.html":{}}}],["cascade",{"_index":544,"title":{},"body":{"entities/CustomerEntity.html":{}}}],["catch",{"_index":857,"title":{},"body":{"classes/ExceptionFiltersFilter.html":{},"guards/GuardsGuard.html":{},"classes/TypeOrmExceptionFilter.html":{}}}],["catch(exception",{"_index":858,"title":{},"body":{"classes/ExceptionFiltersFilter.html":{},"classes/TypeOrmExceptionFilter.html":{}}}],["catch(typeormerror",{"_index":1139,"title":{},"body":{"classes/TypeOrmExceptionFilter.html":{}}}],["ce5ab3b79185",{"_index":395,"title":{},"body":{"injectables/AccountTypeRepository.html":{},"injectables/CustomerService.html":{},"injectables/SecurityService.html":{}}}],["changeaccounttype",{"_index":14,"title":{},"body":{"controllers/AccountController.html":{},"injectables/AccountService.html":{}}}],["changeaccounttype(accountid",{"_index":300,"title":{},"body":{"injectables/AccountService.html":{}}}],["changeaccounttype(id",{"_index":43,"title":{},"body":{"controllers/AccountController.html":{}}}],["changestate",{"_index":15,"title":{},"body":{"controllers/AccountController.html":{},"injectables/AccountService.html":{}}}],["changestate(accountid",{"_index":303,"title":{},"body":{"injectables/AccountService.html":{}}}],["changestate(id",{"_index":46,"title":{},"body":{"controllers/AccountController.html":{}}}],["ciudadanía",{"_index":839,"title":{},"body":{"injectables/DocumentTypeRepository.html":{}}}],["class",{"_index":92,"title":{"classes/AccountDTO.html":{},"classes/CustomerDTO.html":{},"classes/CustomerUpdateDTO.html":{},"classes/DataRangeDTO.html":{},"classes/DepositDTO.html":{},"classes/ExceptionFiltersFilter.html":{},"classes/PaginationDTO.html":{},"classes/SignDTO.html":{},"classes/TransferDTO.html":{},"classes/TypeOrmExceptionFilter.html":{}},"body":{"controllers/AccountController.html":{},"classes/AccountDTO.html":{},"entities/AccountEntity.html":{},"injectables/AccountRepository.html":{},"injectables/AccountService.html":{},"entities/AccountTypeEntity.html":{},"injectables/AccountTypeRepository.html":{},"modules/AppModule.html":{},"classes/CustomerDTO.html":{},"entities/CustomerEntity.html":{},"injectables/CustomerRepository.html":{},"injectables/CustomerService.html":{},"classes/CustomerUpdateDTO.html":{},"classes/DataRangeDTO.html":{},"controllers/DepositController.html":{},"classes/DepositDTO.html":{},"entities/DepositEntity.html":{},"injectables/DepositRepository.html":{},"injectables/DepositService.html":{},"entities/DocumentTypeEntity.html":{},"injectables/DocumentTypeRepository.html":{},"classes/ExceptionFiltersFilter.html":{},"guards/GuardsGuard.html":{},"injectables/InterceptorsInterceptor.html":{},"injectables/MiddlewaresMiddleware.html":{},"classes/PaginationDTO.html":{},"injectables/PipesPipe.html":{},"controllers/SecurityController.html":{},"injectables/SecurityService.html":{},"classes/SignDTO.html":{},"controllers/TransferController.html":{},"classes/TransferDTO.html":{},"entities/TransferEntity.html":{},"injectables/TransferRepository.html":{},"injectables/TransferService.html":{},"classes/TypeOrmExceptionFilter.html":{},"injectables/TypesOrmPostgresConfigService.html":{},"controllers/UserController.html":{},"coverage.html":{},"dependencies.html":{}}}],["classes",{"_index":131,"title":{},"body":{"classes/AccountDTO.html":{},"classes/CustomerDTO.html":{},"classes/CustomerUpdateDTO.html":{},"classes/DataRangeDTO.html":{},"classes/DepositDTO.html":{},"classes/ExceptionFiltersFilter.html":{},"classes/PaginationDTO.html":{},"classes/SignDTO.html":{},"classes/TransferDTO.html":{},"classes/TypeOrmExceptionFilter.html":{},"overview.html":{}}}],["cli",{"_index":1324,"title":{},"body":{"index.html":{}}}],["cliente",{"_index":150,"title":{},"body":{"classes/AccountDTO.html":{},"classes/CustomerDTO.html":{},"injectables/CustomerService.html":{},"classes/CustomerUpdateDTO.html":{}}}],["cluster_appmodule",{"_index":413,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_providers",{"_index":414,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["code",{"_index":1143,"title":{},"body":{"classes/TypeOrmExceptionFilter.html":{}}}],["column",{"_index":188,"title":{},"body":{"entities/AccountEntity.html":{},"entities/AccountTypeEntity.html":{},"entities/CustomerEntity.html":{},"entities/DepositEntity.html":{},"entities/DocumentTypeEntity.html":{},"entities/TransferEntity.html":{}}}],["column({name",{"_index":170,"title":{},"body":{"entities/AccountEntity.html":{},"entities/AccountTypeEntity.html":{},"entities/CustomerEntity.html":{},"entities/DepositEntity.html":{},"entities/DocumentTypeEntity.html":{},"entities/TransferEntity.html":{}}}],["commits",{"_index":1330,"title":{},"body":{"index.html":{}}}],["completo",{"_index":503,"title":{},"body":{"classes/CustomerDTO.html":{},"classes/CustomerUpdateDTO.html":{}}}],["con",{"_index":681,"title":{},"body":{"classes/CustomerUpdateDTO.html":{},"classes/TransferDTO.html":{}}}],["config.service.ts",{"_index":1160,"title":{},"body":{"injectables/TypesOrmPostgresConfigService.html":{},"coverage.html":{}}}],["config.service.ts:14",{"_index":1164,"title":{},"body":{"injectables/TypesOrmPostgresConfigService.html":{}}}],["config.service.ts:17",{"_index":1165,"title":{},"body":{"injectables/TypesOrmPostgresConfigService.html":{}}}],["configmodule",{"_index":435,"title":{},"body":{"modules/AppModule.html":{}}}],["configmodule.forroot",{"_index":454,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice",{"_index":1163,"title":{},"body":{"injectables/TypesOrmPostgresConfigService.html":{}}}],["configure",{"_index":429,"title":{},"body":{"modules/AppModule.html":{}}}],["configure(consumer",{"_index":430,"title":{},"body":{"modules/AppModule.html":{}}}],["conflictexception",{"_index":333,"title":{},"body":{"injectables/AccountService.html":{}}}],["conflictexception(`cuenta",{"_index":350,"title":{},"body":{"injectables/AccountService.html":{}}}],["console.log(entity",{"_index":590,"title":{},"body":{"injectables/CustomerRepository.html":{}}}],["const",{"_index":198,"title":{},"body":{"entities/AccountEntity.html":{},"injectables/AccountRepository.html":{},"injectables/AccountService.html":{},"injectables/CustomerRepository.html":{},"injectables/CustomerService.html":{},"injectables/DepositService.html":{},"guards/GuardsGuard.html":{},"injectables/MiddlewaresMiddleware.html":{},"injectables/SecurityService.html":{},"controllers/TransferController.html":{},"injectables/TransferRepository.html":{},"injectables/TransferService.html":{},"classes/TypeOrmExceptionFilter.html":{}}}],["constructor",{"_index":93,"title":{},"body":{"controllers/AccountController.html":{},"injectables/AccountRepository.html":{},"injectables/AccountService.html":{},"injectables/AccountTypeRepository.html":{},"injectables/CustomerRepository.html":{},"injectables/CustomerService.html":{},"injectables/DepositRepository.html":{},"injectables/DepositService.html":{},"injectables/DocumentTypeRepository.html":{},"guards/GuardsGuard.html":{},"injectables/SecurityService.html":{},"injectables/TransferRepository.html":{},"injectables/TransferService.html":{},"injectables/TypesOrmPostgresConfigService.html":{}}}],["constructor(accountrepository",{"_index":292,"title":{},"body":{"injectables/AccountService.html":{}}}],["constructor(configservice",{"_index":1162,"title":{},"body":{"injectables/TypesOrmPostgresConfigService.html":{}}}],["constructor(customerrepository",{"_index":565,"title":{},"body":{"injectables/CustomerRepository.html":{},"injectables/CustomerService.html":{},"injectables/SecurityService.html":{}}}],["constructor(depositrepository",{"_index":751,"title":{},"body":{"injectables/DepositRepository.html":{},"injectables/DepositService.html":{}}}],["constructor(documenttyperepository",{"_index":821,"title":{},"body":{"injectables/DocumentTypeRepository.html":{}}}],["constructor(jwtservice",{"_index":867,"title":{},"body":{"guards/GuardsGuard.html":{}}}],["constructor(private",{"_index":723,"title":{},"body":{"controllers/DepositController.html":{},"guards/GuardsGuard.html":{},"controllers/SecurityController.html":{},"controllers/TransferController.html":{},"injectables/TypesOrmPostgresConfigService.html":{},"controllers/UserController.html":{}}}],["constructor(transferrepository",{"_index":1061,"title":{},"body":{"injectables/TransferRepository.html":{},"injectables/TransferService.html":{}}}],["constructor(userrepository",{"_index":222,"title":{},"body":{"injectables/AccountRepository.html":{},"injectables/AccountTypeRepository.html":{}}}],["consumer",{"_index":433,"title":{},"body":{"modules/AppModule.html":{}}}],["consumer.apply(middlewaresmiddleware).forroutes",{"_index":476,"title":{},"body":{"modules/AppModule.html":{}}}],["contener",{"_index":509,"title":{},"body":{"classes/CustomerDTO.html":{},"classes/CustomerUpdateDTO.html":{}}}],["context",{"_index":873,"title":{},"body":{"guards/GuardsGuard.html":{},"injectables/InterceptorsInterceptor.html":{}}}],["context.switchtohttp().getrequest",{"_index":877,"title":{},"body":{"guards/GuardsGuard.html":{}}}],["contraseña",{"_index":507,"title":{},"body":{"classes/CustomerDTO.html":{},"classes/CustomerUpdateDTO.html":{},"classes/SignDTO.html":{}}}],["controller",{"_index":0,"title":{"controllers/AccountController.html":{},"controllers/DepositController.html":{},"controllers/SecurityController.html":{},"controllers/TransferController.html":{},"controllers/UserController.html":{}},"body":{"controllers/AccountController.html":{},"controllers/DepositController.html":{},"controllers/SecurityController.html":{},"controllers/TransferController.html":{},"controllers/UserController.html":{},"coverage.html":{}}}],["controller('account",{"_index":90,"title":{},"body":{"controllers/AccountController.html":{}}}],["controller('deposit",{"_index":722,"title":{},"body":{"controllers/DepositController.html":{}}}],["controller('security",{"_index":944,"title":{},"body":{"controllers/SecurityController.html":{}}}],["controller('transfer",{"_index":1019,"title":{},"body":{"controllers/TransferController.html":{}}}],["controller('user",{"_index":1203,"title":{},"body":{"controllers/UserController.html":{}}}],["controllers",{"_index":2,"title":{},"body":{"controllers/AccountController.html":{},"modules/AppModule.html":{},"controllers/DepositController.html":{},"controllers/SecurityController.html":{},"controllers/TransferController.html":{},"controllers/UserController.html":{},"overview.html":{}}}],["correo",{"_index":498,"title":{},"body":{"classes/CustomerDTO.html":{},"classes/SignDTO.html":{}}}],["corresponding",{"_index":1317,"title":{},"body":{"index.html":{}}}],["corriente",{"_index":402,"title":{},"body":{"injectables/AccountTypeRepository.html":{}}}],["coverage",{"_index":1217,"title":{"coverage.html":{}},"body":{"coverage.html":{}}}],["crear",{"_index":306,"title":{},"body":{"injectables/AccountService.html":{},"injectables/DepositService.html":{},"injectables/SecurityService.html":{},"injectables/TransferService.html":{}}}],["create",{"_index":1315,"title":{},"body":{"index.html":{}}}],["createaccount",{"_index":16,"title":{},"body":{"controllers/AccountController.html":{},"injectables/AccountService.html":{}}}],["createaccount(@body",{"_index":105,"title":{},"body":{"controllers/AccountController.html":{}}}],["createaccount(account",{"_index":49,"title":{},"body":{"controllers/AccountController.html":{},"injectables/AccountService.html":{}}}],["createdeposit",{"_index":711,"title":{},"body":{"controllers/DepositController.html":{},"injectables/DepositService.html":{}}}],["createdeposit(@body",{"_index":724,"title":{},"body":{"controllers/DepositController.html":{}}}],["createdeposit(account",{"_index":713,"title":{},"body":{"controllers/DepositController.html":{}}}],["createdeposit(deposit",{"_index":783,"title":{},"body":{"injectables/DepositService.html":{}}}],["createtransfer",{"_index":997,"title":{},"body":{"controllers/TransferController.html":{},"injectables/TransferService.html":{}}}],["createtransfer(@body",{"_index":1020,"title":{},"body":{"controllers/TransferController.html":{}}}],["createtransfer(transfer",{"_index":1002,"title":{},"body":{"controllers/TransferController.html":{},"injectables/TransferService.html":{}}}],["createtypeormoptions",{"_index":1161,"title":{},"body":{"injectables/TypesOrmPostgresConfigService.html":{}}}],["cuenta",{"_index":124,"title":{},"body":{"controllers/AccountController.html":{},"classes/AccountDTO.html":{},"injectables/AccountService.html":{},"injectables/AccountTypeRepository.html":{},"classes/DepositDTO.html":{},"injectables/DepositService.html":{},"classes/TransferDTO.html":{},"injectables/TransferService.html":{}}}],["cuentas",{"_index":1091,"title":{},"body":{"injectables/TransferService.html":{}}}],["customer",{"_index":162,"title":{},"body":{"entities/AccountEntity.html":{},"interfaces/AccountModel.html":{},"injectables/AccountRepository.html":{},"entities/CustomerEntity.html":{},"injectables/CustomerRepository.html":{},"injectables/CustomerService.html":{},"controllers/SecurityController.html":{},"injectables/SecurityService.html":{},"controllers/UserController.html":{}}}],["customer.document",{"_index":651,"title":{},"body":{"injectables/CustomerService.html":{}}}],["customer.documenttypeid",{"_index":648,"title":{},"body":{"injectables/CustomerService.html":{}}}],["customer.dto",{"_index":640,"title":{},"body":{"injectables/CustomerService.html":{},"controllers/UserController.html":{}}}],["customer.dto.ts",{"_index":674,"title":{},"body":{"classes/CustomerUpdateDTO.html":{},"coverage.html":{}}}],["customer.dto.ts:29",{"_index":675,"title":{},"body":{"classes/CustomerUpdateDTO.html":{}}}],["customer.dto.ts:43",{"_index":680,"title":{},"body":{"classes/CustomerUpdateDTO.html":{}}}],["customer.dto.ts:57",{"_index":685,"title":{},"body":{"classes/CustomerUpdateDTO.html":{}}}],["customer.dto.ts:70",{"_index":684,"title":{},"body":{"classes/CustomerUpdateDTO.html":{}}}],["customer.email",{"_index":655,"title":{},"body":{"injectables/CustomerService.html":{},"injectables/SecurityService.html":{}}}],["customer.fullname",{"_index":653,"title":{},"body":{"injectables/CustomerService.html":{}}}],["customer.id",{"_index":596,"title":{},"body":{"injectables/CustomerRepository.html":{},"injectables/SecurityService.html":{}}}],["customer.password",{"_index":659,"title":{},"body":{"injectables/CustomerService.html":{}}}],["customer.phone",{"_index":657,"title":{},"body":{"injectables/CustomerService.html":{}}}],["customer.state",{"_index":670,"title":{},"body":{"injectables/CustomerService.html":{}}}],["customerbalance",{"_index":289,"title":{},"body":{"injectables/AccountService.html":{}}}],["customerbalance(id",{"_index":307,"title":{},"body":{"injectables/AccountService.html":{}}}],["customerdto",{"_index":485,"title":{"classes/CustomerDTO.html":{}},"body":{"classes/CustomerDTO.html":{},"injectables/CustomerService.html":{},"controllers/SecurityController.html":{},"injectables/SecurityService.html":{},"controllers/UserController.html":{},"coverage.html":{}}}],["customerentity",{"_index":173,"title":{"entities/CustomerEntity.html":{}},"body":{"entities/AccountEntity.html":{},"modules/AppModule.html":{},"entities/CustomerEntity.html":{},"injectables/CustomerRepository.html":{},"interfaces/CustomerRepositoryInterface.html":{},"injectables/CustomerService.html":{},"injectables/SecurityService.html":{},"injectables/TypesOrmPostgresConfigService.html":{},"controllers/UserController.html":{},"coverage.html":{}}}],["customerid",{"_index":141,"title":{},"body":{"classes/AccountDTO.html":{},"injectables/AccountRepository.html":{},"interfaces/AccountRepositoryInterface.html":{},"injectables/AccountService.html":{},"injectables/CustomerService.html":{}}}],["customermodel",{"_index":208,"title":{"interfaces/CustomerModel.html":{}},"body":{"interfaces/AccountModel.html":{},"entities/CustomerEntity.html":{},"interfaces/CustomerModel.html":{},"injectables/CustomerService.html":{},"injectables/SecurityService.html":{},"coverage.html":{}}}],["customerrepository",{"_index":294,"title":{"injectables/CustomerRepository.html":{}},"body":{"injectables/AccountService.html":{},"modules/AppModule.html":{},"injectables/CustomerRepository.html":{},"injectables/CustomerService.html":{},"injectables/SecurityService.html":{},"coverage.html":{},"overview.html":{}}}],["customerrepositoryinterface",{"_index":588,"title":{"interfaces/CustomerRepositoryInterface.html":{}},"body":{"injectables/CustomerRepository.html":{},"interfaces/CustomerRepositoryInterface.html":{},"coverage.html":{}}}],["customerservice",{"_index":86,"title":{"injectables/CustomerService.html":{}},"body":{"controllers/AccountController.html":{},"modules/AppModule.html":{},"injectables/CustomerService.html":{},"controllers/UserController.html":{},"coverage.html":{},"overview.html":{}}}],["customerupdatedto",{"_index":636,"title":{"classes/CustomerUpdateDTO.html":{}},"body":{"injectables/CustomerService.html":{},"classes/CustomerUpdateDTO.html":{},"controllers/UserController.html":{},"coverage.html":{}}}],["customresponse",{"_index":1147,"title":{},"body":{"classes/TypeOrmExceptionFilter.html":{}}}],["cédula",{"_index":838,"title":{},"body":{"injectables/DocumentTypeRepository.html":{}}}],["dar",{"_index":632,"title":{},"body":{"injectables/CustomerService.html":{}}}],["data",{"_index":134,"title":{},"body":{"classes/AccountDTO.html":{},"classes/CustomerDTO.html":{},"classes/CustomerUpdateDTO.html":{},"classes/DataRangeDTO.html":{},"classes/DepositDTO.html":{},"classes/PaginationDTO.html":{},"classes/SignDTO.html":{},"classes/TransferDTO.html":{}}}],["data/models",{"_index":1107,"title":{},"body":{"injectables/TransferService.html":{}}}],["data/persistence/entities",{"_index":89,"title":{},"body":{"controllers/AccountController.html":{},"injectables/AccountService.html":{},"modules/AppModule.html":{},"injectables/CustomerService.html":{},"controllers/DepositController.html":{},"injectables/DepositService.html":{},"injectables/SecurityService.html":{},"controllers/TransferController.html":{},"injectables/TransferService.html":{}}}],["data/persistence/entities/account.entity",{"_index":1201,"title":{},"body":{"controllers/UserController.html":{}}}],["data/persistence/entities/customer.entity",{"_index":1202,"title":{},"body":{"controllers/UserController.html":{}}}],["data/persistence/repositories",{"_index":335,"title":{},"body":{"injectables/AccountService.html":{},"modules/AppModule.html":{},"injectables/CustomerService.html":{},"injectables/DepositService.html":{},"injectables/SecurityService.html":{},"injectables/TransferService.html":{}}}],["data/persistence/utils/exception",{"_index":447,"title":{},"body":{"modules/AppModule.html":{}}}],["database",{"_index":468,"title":{},"body":{"modules/AppModule.html":{},"injectables/TypesOrmPostgresConfigService.html":{}}}],["datarange",{"_index":727,"title":{},"body":{"controllers/DepositController.html":{},"injectables/DepositService.html":{},"controllers/TransferController.html":{},"injectables/TransferService.html":{}}}],["datarange.enddate",{"_index":809,"title":{},"body":{"injectables/DepositService.html":{},"injectables/TransferService.html":{}}}],["datarange.startamount",{"_index":1129,"title":{},"body":{"injectables/TransferService.html":{}}}],["datarange.startdate",{"_index":808,"title":{},"body":{"injectables/DepositService.html":{},"injectables/TransferService.html":{}}}],["datarangedto",{"_index":687,"title":{"classes/DataRangeDTO.html":{}},"body":{"classes/DataRangeDTO.html":{},"controllers/DepositController.html":{},"injectables/DepositService.html":{},"controllers/TransferController.html":{},"coverage.html":{}}}],["datarangemodel",{"_index":706,"title":{"interfaces/DataRangeModel.html":{}},"body":{"interfaces/DataRangeModel.html":{},"injectables/DepositService.html":{},"injectables/TransferService.html":{},"coverage.html":{}}}],["date",{"_index":175,"title":{},"body":{"entities/AccountEntity.html":{},"interfaces/AccountModel.html":{},"entities/CustomerEntity.html":{},"interfaces/CustomerModel.html":{},"classes/DataRangeDTO.html":{},"interfaces/DataRangeModel.html":{},"entities/DepositEntity.html":{},"interfaces/DepositModel.html":{},"injectables/DepositRepository.html":{},"interfaces/DepositRepositoryInterface.html":{},"entities/TransferEntity.html":{},"interfaces/TransferModel.html":{},"injectables/TransferRepository.html":{},"interfaces/TransferRepositoryInterface.html":{}}}],["date().toisostring",{"_index":1156,"title":{},"body":{"classes/TypeOrmExceptionFilter.html":{}}}],["date.now",{"_index":277,"title":{},"body":{"injectables/AccountRepository.html":{},"injectables/CustomerRepository.html":{},"injectables/CustomerService.html":{},"injectables/DepositRepository.html":{},"injectables/DepositService.html":{},"injectables/TransferRepository.html":{},"injectables/TransferService.html":{}}}],["date_time",{"_index":742,"title":{},"body":{"entities/DepositEntity.html":{},"entities/TransferEntity.html":{}}}],["dateend",{"_index":758,"title":{},"body":{"injectables/DepositRepository.html":{},"interfaces/DepositRepositoryInterface.html":{},"injectables/TransferRepository.html":{},"interfaces/TransferRepositoryInterface.html":{}}}],["dateinit",{"_index":760,"title":{},"body":{"injectables/DepositRepository.html":{},"interfaces/DepositRepositoryInterface.html":{},"injectables/TransferRepository.html":{},"interfaces/TransferRepositoryInterface.html":{}}}],["datetime",{"_index":739,"title":{},"body":{"entities/DepositEntity.html":{},"interfaces/DepositModel.html":{},"injectables/DepositRepository.html":{},"entities/TransferEntity.html":{},"interfaces/TransferModel.html":{},"injectables/TransferRepository.html":{}}}],["datos",{"_index":263,"title":{},"body":{"injectables/AccountRepository.html":{},"injectables/AccountTypeRepository.html":{},"injectables/CustomerRepository.html":{},"injectables/CustomerService.html":{},"classes/DataRangeDTO.html":{},"injectables/DepositRepository.html":{},"injectables/DocumentTypeRepository.html":{},"injectables/SecurityService.html":{},"classes/SignDTO.html":{},"injectables/TransferRepository.html":{}}}],["day",{"_index":1303,"title":{},"body":{"index.html":{}}}],["de",{"_index":148,"title":{},"body":{"classes/AccountDTO.html":{},"injectables/AccountRepository.html":{},"injectables/AccountService.html":{},"injectables/AccountTypeRepository.html":{},"classes/CustomerDTO.html":{},"injectables/CustomerRepository.html":{},"injectables/CustomerService.html":{},"classes/CustomerUpdateDTO.html":{},"classes/DataRangeDTO.html":{},"classes/DepositDTO.html":{},"injectables/DepositRepository.html":{},"injectables/DepositService.html":{},"injectables/DocumentTypeRepository.html":{},"classes/PaginationDTO.html":{},"injectables/SecurityService.html":{},"classes/SignDTO.html":{},"classes/TransferDTO.html":{},"injectables/TransferRepository.html":{},"injectables/TransferService.html":{},"index.html":{}}}],["debe",{"_index":508,"title":{},"body":{"classes/CustomerDTO.html":{},"classes/CustomerUpdateDTO.html":{},"classes/DataRangeDTO.html":{},"classes/DepositDTO.html":{},"classes/PaginationDTO.html":{},"classes/SignDTO.html":{},"classes/TransferDTO.html":{}}}],["declarations",{"_index":409,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["decorator",{"_index":156,"title":{},"body":{"classes/AccountDTO.html":{},"classes/CustomerDTO.html":{},"classes/CustomerUpdateDTO.html":{},"classes/DataRangeDTO.html":{},"classes/DepositDTO.html":{},"classes/PaginationDTO.html":{},"classes/SignDTO.html":{},"classes/TransferDTO.html":{}}}],["decorators",{"_index":29,"title":{},"body":{"controllers/AccountController.html":{},"classes/AccountDTO.html":{},"entities/AccountEntity.html":{},"entities/AccountTypeEntity.html":{},"classes/CustomerDTO.html":{},"entities/CustomerEntity.html":{},"classes/CustomerUpdateDTO.html":{},"classes/DataRangeDTO.html":{},"controllers/DepositController.html":{},"classes/DepositDTO.html":{},"entities/DepositEntity.html":{},"entities/DocumentTypeEntity.html":{},"classes/PaginationDTO.html":{},"controllers/SecurityController.html":{},"classes/SignDTO.html":{},"controllers/TransferController.html":{},"classes/TransferDTO.html":{},"entities/TransferEntity.html":{},"controllers/UserController.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["default",{"_index":167,"title":{},"body":{"entities/AccountEntity.html":{},"entities/AccountTypeEntity.html":{},"entities/CustomerEntity.html":{},"entities/DepositEntity.html":{},"entities/DocumentTypeEntity.html":{},"entities/TransferEntity.html":{},"miscellaneous/variables.html":{}}}],["defined",{"_index":32,"title":{},"body":{"controllers/AccountController.html":{},"classes/AccountDTO.html":{},"entities/AccountEntity.html":{},"injectables/AccountRepository.html":{},"interfaces/AccountRepositoryInterface.html":{},"injectables/AccountService.html":{},"entities/AccountTypeEntity.html":{},"injectables/AccountTypeRepository.html":{},"interfaces/AccountTypeRepositoryInterface.html":{},"modules/AppModule.html":{},"interfaces/BaseRepositoryInterface.html":{},"classes/CustomerDTO.html":{},"entities/CustomerEntity.html":{},"injectables/CustomerRepository.html":{},"interfaces/CustomerRepositoryInterface.html":{},"injectables/CustomerService.html":{},"classes/CustomerUpdateDTO.html":{},"classes/DataRangeDTO.html":{},"controllers/DepositController.html":{},"classes/DepositDTO.html":{},"entities/DepositEntity.html":{},"injectables/DepositRepository.html":{},"interfaces/DepositRepositoryInterface.html":{},"injectables/DepositService.html":{},"entities/DocumentTypeEntity.html":{},"injectables/DocumentTypeRepository.html":{},"interfaces/DocumentTypeRepositoryInterface.html":{},"classes/ExceptionFiltersFilter.html":{},"guards/GuardsGuard.html":{},"injectables/InterceptorsInterceptor.html":{},"injectables/MiddlewaresMiddleware.html":{},"classes/PaginationDTO.html":{},"injectables/PipesPipe.html":{},"controllers/SecurityController.html":{},"injectables/SecurityService.html":{},"classes/SignDTO.html":{},"controllers/TransferController.html":{},"classes/TransferDTO.html":{},"entities/TransferEntity.html":{},"injectables/TransferRepository.html":{},"interfaces/TransferRepositoryInterface.html":{},"injectables/TransferService.html":{},"classes/TypeOrmExceptionFilter.html":{},"injectables/TypesOrmPostgresConfigService.html":{},"controllers/UserController.html":{}}}],["del",{"_index":146,"title":{},"body":{"classes/AccountDTO.html":{},"classes/CustomerDTO.html":{},"classes/CustomerUpdateDTO.html":{},"classes/DataRangeDTO.html":{},"classes/DepositDTO.html":{},"injectables/SecurityService.html":{},"classes/SignDTO.html":{},"injectables/TransferService.html":{}}}],["delete",{"_index":75,"title":{},"body":{"controllers/AccountController.html":{},"injectables/AccountRepository.html":{},"injectables/AccountTypeRepository.html":{},"interfaces/BaseRepositoryInterface.html":{},"injectables/CustomerRepository.html":{},"controllers/DepositController.html":{},"injectables/DepositRepository.html":{},"injectables/DocumentTypeRepository.html":{},"controllers/TransferController.html":{},"injectables/TransferRepository.html":{},"controllers/UserController.html":{}}}],["delete(':id",{"_index":54,"title":{},"body":{"controllers/AccountController.html":{},"controllers/DepositController.html":{},"controllers/TransferController.html":{},"controllers/UserController.html":{}}}],["delete(id",{"_index":226,"title":{},"body":{"injectables/AccountRepository.html":{},"injectables/AccountTypeRepository.html":{},"interfaces/BaseRepositoryInterface.html":{},"injectables/CustomerRepository.html":{},"injectables/DepositRepository.html":{},"injectables/DocumentTypeRepository.html":{},"injectables/TransferRepository.html":{}}}],["deleteaccount",{"_index":17,"title":{},"body":{"controllers/AccountController.html":{},"injectables/AccountService.html":{}}}],["deleteaccount(@param('id",{"_index":126,"title":{},"body":{"controllers/AccountController.html":{}}}],["deleteaccount(accountid",{"_index":309,"title":{},"body":{"injectables/AccountService.html":{}}}],["deleteaccount(id",{"_index":53,"title":{},"body":{"controllers/AccountController.html":{}}}],["deletecustomer",{"_index":610,"title":{},"body":{"injectables/CustomerService.html":{}}}],["deletecustomer(id",{"_index":617,"title":{},"body":{"injectables/CustomerService.html":{}}}],["deleted_at",{"_index":176,"title":{},"body":{"entities/AccountEntity.html":{},"entities/CustomerEntity.html":{},"entities/DepositEntity.html":{},"entities/TransferEntity.html":{}}}],["deletedat",{"_index":163,"title":{},"body":{"entities/AccountEntity.html":{},"interfaces/AccountModel.html":{},"injectables/AccountRepository.html":{},"entities/CustomerEntity.html":{},"interfaces/CustomerModel.html":{},"injectables/CustomerRepository.html":{},"entities/DepositEntity.html":{},"interfaces/DepositModel.html":{},"injectables/DepositRepository.html":{},"entities/TransferEntity.html":{},"interfaces/TransferModel.html":{},"injectables/TransferRepository.html":{}}}],["deletedeposit",{"_index":712,"title":{},"body":{"controllers/DepositController.html":{},"injectables/DepositService.html":{}}}],["deletedeposit(@param('id",{"_index":732,"title":{},"body":{"controllers/DepositController.html":{}}}],["deletedeposit(depositid",{"_index":786,"title":{},"body":{"injectables/DepositService.html":{}}}],["deletedeposit(id",{"_index":716,"title":{},"body":{"controllers/DepositController.html":{}}}],["deletetransfer",{"_index":998,"title":{},"body":{"controllers/TransferController.html":{},"injectables/TransferService.html":{}}}],["deletetransfer(@param('id",{"_index":1025,"title":{},"body":{"controllers/TransferController.html":{}}}],["deletetransfer(id",{"_index":1005,"title":{},"body":{"controllers/TransferController.html":{}}}],["deletetransfer(transferid",{"_index":1093,"title":{},"body":{"injectables/TransferService.html":{}}}],["deleteuser",{"_index":1175,"title":{},"body":{"controllers/UserController.html":{}}}],["deleteuser(@param('id",{"_index":1213,"title":{},"body":{"controllers/UserController.html":{}}}],["deleteuser(id",{"_index":1183,"title":{},"body":{"controllers/UserController.html":{}}}],["deliver",{"_index":1298,"title":{},"body":{"index.html":{}}}],["delivery",{"_index":1301,"title":{},"body":{"index.html":{}}}],["dependencies",{"_index":407,"title":{"dependencies.html":{}},"body":{"modules/AppModule.html":{},"dependencies.html":{},"overview.html":{}}}],["deposit",{"_index":710,"title":{},"body":{"controllers/DepositController.html":{},"entities/DepositEntity.html":{},"injectables/DepositService.html":{}}}],["deposit.accountid",{"_index":796,"title":{},"body":{"injectables/DepositService.html":{}}}],["depositcontroller",{"_index":428,"title":{"controllers/DepositController.html":{}},"body":{"modules/AppModule.html":{},"controllers/DepositController.html":{},"coverage.html":{}}}],["depositdto",{"_index":714,"title":{"classes/DepositDTO.html":{}},"body":{"controllers/DepositController.html":{},"classes/DepositDTO.html":{},"injectables/DepositService.html":{},"coverage.html":{}}}],["depositentity",{"_index":443,"title":{"entities/DepositEntity.html":{}},"body":{"modules/AppModule.html":{},"controllers/DepositController.html":{},"entities/DepositEntity.html":{},"injectables/DepositRepository.html":{},"interfaces/DepositRepositoryInterface.html":{},"injectables/DepositService.html":{},"injectables/TypesOrmPostgresConfigService.html":{},"coverage.html":{}}}],["depositentity.account",{"_index":794,"title":{},"body":{"injectables/DepositService.html":{}}}],["depositentity.amount",{"_index":797,"title":{},"body":{"injectables/DepositService.html":{}}}],["depositentity.datetime",{"_index":799,"title":{},"body":{"injectables/DepositService.html":{}}}],["depositid",{"_index":788,"title":{},"body":{"injectables/DepositService.html":{}}}],["depositmodel",{"_index":746,"title":{"interfaces/DepositModel.html":{}},"body":{"entities/DepositEntity.html":{},"interfaces/DepositModel.html":{},"injectables/DepositService.html":{},"coverage.html":{}}}],["deposito",{"_index":785,"title":{},"body":{"injectables/DepositService.html":{}}}],["depositrepository",{"_index":415,"title":{"injectables/DepositRepository.html":{}},"body":{"modules/AppModule.html":{},"injectables/DepositRepository.html":{},"injectables/DepositService.html":{},"injectables/TransferService.html":{},"coverage.html":{},"overview.html":{}}}],["depositrepositoryinterface",{"_index":767,"title":{"interfaces/DepositRepositoryInterface.html":{}},"body":{"injectables/DepositRepository.html":{},"interfaces/DepositRepositoryInterface.html":{},"coverage.html":{}}}],["depositservice",{"_index":416,"title":{"injectables/DepositService.html":{}},"body":{"modules/AppModule.html":{},"controllers/DepositController.html":{},"injectables/DepositService.html":{},"coverage.html":{},"overview.html":{}}}],["depósito",{"_index":735,"title":{},"body":{"classes/DepositDTO.html":{}}}],["depósitos",{"_index":793,"title":{},"body":{"injectables/DepositService.html":{}}}],["desactivada",{"_index":351,"title":{},"body":{"injectables/AccountService.html":{}}}],["description",{"_index":133,"title":{},"body":{"classes/AccountDTO.html":{},"classes/CustomerDTO.html":{},"classes/CustomerUpdateDTO.html":{},"classes/DataRangeDTO.html":{},"classes/DepositDTO.html":{},"classes/PaginationDTO.html":{},"classes/SignDTO.html":{},"classes/TransferDTO.html":{},"index.html":{},"properties.html":{}}}],["description]workshop",{"_index":1307,"title":{},"body":{"index.html":{}}}],["destino",{"_index":1040,"title":{},"body":{"classes/TransferDTO.html":{}}}],["detail",{"_index":1154,"title":{},"body":{"classes/TypeOrmExceptionFilter.html":{}}}],["development",{"_index":1290,"title":{},"body":{"index.html":{}}}],["disponibilidad",{"_index":329,"title":{},"body":{"injectables/AccountService.html":{}}}],["document",{"_index":487,"title":{},"body":{"classes/CustomerDTO.html":{},"entities/CustomerEntity.html":{},"interfaces/CustomerModel.html":{},"injectables/CustomerRepository.html":{},"interfaces/CustomerRepositoryInterface.html":{},"classes/CustomerUpdateDTO.html":{}}}],["document_type",{"_index":817,"title":{},"body":{"entities/DocumentTypeEntity.html":{}}}],["documentation",{"_index":1218,"title":{},"body":{"coverage.html":{},"index.html":{}}}],["documented",{"_index":1332,"title":{},"body":{"index.html":{}}}],["documento",{"_index":494,"title":{},"body":{"classes/CustomerDTO.html":{},"classes/CustomerUpdateDTO.html":{}}}],["documenttype",{"_index":536,"title":{},"body":{"entities/CustomerEntity.html":{},"interfaces/CustomerModel.html":{},"injectables/CustomerRepository.html":{},"injectables/CustomerService.html":{}}}],["documenttype.id",{"_index":647,"title":{},"body":{"injectables/CustomerService.html":{}}}],["documenttypeentity",{"_index":444,"title":{"entities/DocumentTypeEntity.html":{}},"body":{"modules/AppModule.html":{},"entities/CustomerEntity.html":{},"injectables/CustomerService.html":{},"entities/DocumentTypeEntity.html":{},"injectables/DocumentTypeRepository.html":{},"interfaces/DocumentTypeRepositoryInterface.html":{},"injectables/TypesOrmPostgresConfigService.html":{},"coverage.html":{}}}],["documenttypeid",{"_index":488,"title":{},"body":{"classes/CustomerDTO.html":{},"injectables/CustomerRepository.html":{},"interfaces/CustomerRepositoryInterface.html":{}}}],["documenttypemodel",{"_index":556,"title":{"interfaces/DocumentTypeModel.html":{}},"body":{"interfaces/CustomerModel.html":{},"entities/DocumentTypeEntity.html":{},"interfaces/DocumentTypeModel.html":{},"coverage.html":{}}}],["documenttyperepository",{"_index":417,"title":{"injectables/DocumentTypeRepository.html":{}},"body":{"modules/AppModule.html":{},"injectables/DocumentTypeRepository.html":{},"injectables/SecurityService.html":{},"coverage.html":{},"overview.html":{}}}],["documenttyperepositoryinterface",{"_index":830,"title":{"interfaces/DocumentTypeRepositoryInterface.html":{}},"body":{"injectables/DocumentTypeRepository.html":{},"interfaces/DocumentTypeRepositoryInterface.html":{},"coverage.html":{}}}],["dtos",{"_index":969,"title":{},"body":{"injectables/SecurityService.html":{}}}],["e",{"_index":482,"title":{},"body":{"interfaces/BaseRepositoryInterface.html":{}}}],["each",{"_index":1318,"title":{},"body":{"index.html":{}}}],["efficient",{"_index":1278,"title":{},"body":{"index.html":{}}}],["el",{"_index":269,"title":{},"body":{"injectables/AccountRepository.html":{},"injectables/AccountService.html":{},"injectables/AccountTypeRepository.html":{},"injectables/CustomerRepository.html":{},"injectables/CustomerService.html":{},"injectables/DepositRepository.html":{},"injectables/DepositService.html":{},"injectables/DocumentTypeRepository.html":{},"injectables/SecurityService.html":{},"injectables/TransferRepository.html":{}}}],["electrónico",{"_index":499,"title":{},"body":{"classes/CustomerDTO.html":{},"classes/SignDTO.html":{}}}],["elementos",{"_index":917,"title":{},"body":{"classes/PaginationDTO.html":{}}}],["eliminada",{"_index":128,"title":{},"body":{"controllers/AccountController.html":{}}}],["email",{"_index":489,"title":{},"body":{"classes/CustomerDTO.html":{},"entities/CustomerEntity.html":{},"interfaces/CustomerModel.html":{},"injectables/CustomerRepository.html":{},"interfaces/CustomerRepositoryInterface.html":{},"injectables/CustomerService.html":{},"injectables/SecurityService.html":{},"classes/SignDTO.html":{},"controllers/UserController.html":{}}}],["en",{"_index":261,"title":{},"body":{"injectables/AccountRepository.html":{},"injectables/AccountService.html":{},"injectables/AccountTypeRepository.html":{},"injectables/CustomerRepository.html":{},"injectables/CustomerService.html":{},"injectables/DepositRepository.html":{},"injectables/DepositService.html":{},"injectables/DocumentTypeRepository.html":{},"classes/PaginationDTO.html":{},"injectables/SecurityService.html":{},"injectables/TransferRepository.html":{},"injectables/TransferService.html":{}}}],["end",{"_index":815,"title":{},"body":{"injectables/DepositService.html":{},"injectables/TransferService.html":{}}}],["endamount",{"_index":691,"title":{},"body":{"classes/DataRangeDTO.html":{},"interfaces/DataRangeModel.html":{}}}],["enddate",{"_index":692,"title":{},"body":{"classes/DataRangeDTO.html":{},"interfaces/DataRangeModel.html":{}}}],["entities",{"_index":158,"title":{},"body":{"entities/AccountEntity.html":{},"injectables/AccountRepository.html":{},"interfaces/AccountRepositoryInterface.html":{},"entities/AccountTypeEntity.html":{},"interfaces/AccountTypeRepositoryInterface.html":{},"entities/CustomerEntity.html":{},"injectables/CustomerRepository.html":{},"interfaces/CustomerRepositoryInterface.html":{},"entities/DepositEntity.html":{},"injectables/DepositRepository.html":{},"interfaces/DepositRepositoryInterface.html":{},"entities/DocumentTypeEntity.html":{},"injectables/DocumentTypeRepository.html":{},"interfaces/DocumentTypeRepositoryInterface.html":{},"injectables/SecurityService.html":{},"entities/TransferEntity.html":{},"injectables/TransferRepository.html":{},"interfaces/TransferRepositoryInterface.html":{},"injectables/TypesOrmPostgresConfigService.html":{},"overview.html":{}}}],["entities/account",{"_index":386,"title":{},"body":{"injectables/AccountTypeRepository.html":{}}}],["entity",{"_index":157,"title":{"entities/AccountEntity.html":{},"entities/AccountTypeEntity.html":{},"entities/CustomerEntity.html":{},"entities/DepositEntity.html":{},"entities/DocumentTypeEntity.html":{},"entities/TransferEntity.html":{}},"body":{"entities/AccountEntity.html":{},"injectables/AccountRepository.html":{},"entities/AccountTypeEntity.html":{},"injectables/AccountTypeRepository.html":{},"interfaces/BaseRepositoryInterface.html":{},"entities/CustomerEntity.html":{},"injectables/CustomerRepository.html":{},"entities/DepositEntity.html":{},"injectables/DepositRepository.html":{},"entities/DocumentTypeEntity.html":{},"injectables/DocumentTypeRepository.html":{},"entities/TransferEntity.html":{},"injectables/TransferRepository.html":{},"coverage.html":{}}}],["entity).then((result",{"_index":255,"title":{},"body":{"injectables/AccountRepository.html":{},"injectables/AccountTypeRepository.html":{},"injectables/CustomerRepository.html":{},"injectables/DepositRepository.html":{},"injectables/DocumentTypeRepository.html":{},"injectables/TransferRepository.html":{}}}],["entrada",{"_index":1101,"title":{},"body":{"injectables/TransferService.html":{}}}],["entre",{"_index":1090,"title":{},"body":{"injectables/TransferService.html":{}}}],["err",{"_index":888,"title":{},"body":{"guards/GuardsGuard.html":{}}}],["error",{"_index":1150,"title":{},"body":{"classes/TypeOrmExceptionFilter.html":{}}}],["errorcode",{"_index":1155,"title":{},"body":{"classes/TypeOrmExceptionFilter.html":{}}}],["errors",{"_index":1153,"title":{},"body":{"classes/TypeOrmExceptionFilter.html":{}}}],["estado",{"_index":117,"title":{},"body":{"controllers/AccountController.html":{},"injectables/AccountService.html":{}}}],["estructura",{"_index":1304,"title":{},"body":{"index.html":{}}}],["example",{"_index":1286,"title":{},"body":{"index.html":{}}}],["exception",{"_index":862,"title":{},"body":{"classes/ExceptionFiltersFilter.html":{},"classes/TypeOrmExceptionFilter.html":{}}}],["exception.message",{"_index":1142,"title":{},"body":{"classes/TypeOrmExceptionFilter.html":{}}}],["exceptionfilter",{"_index":856,"title":{},"body":{"classes/ExceptionFiltersFilter.html":{},"classes/TypeOrmExceptionFilter.html":{}}}],["exceptionfiltersfilter",{"_index":852,"title":{"classes/ExceptionFiltersFilter.html":{}},"body":{"classes/ExceptionFiltersFilter.html":{},"coverage.html":{}}}],["executioncontext",{"_index":871,"title":{},"body":{"guards/GuardsGuard.html":{},"injectables/InterceptorsInterceptor.html":{}}}],["existe",{"_index":260,"title":{},"body":{"injectables/AccountRepository.html":{},"injectables/AccountTypeRepository.html":{},"injectables/CustomerRepository.html":{},"injectables/CustomerService.html":{},"injectables/DepositRepository.html":{},"injectables/DocumentTypeRepository.html":{},"injectables/SecurityService.html":{},"injectables/TransferRepository.html":{}}}],["existemail",{"_index":558,"title":{},"body":{"injectables/CustomerRepository.html":{}}}],["existemail(email",{"_index":568,"title":{},"body":{"injectables/CustomerRepository.html":{}}}],["export",{"_index":91,"title":{},"body":{"controllers/AccountController.html":{},"classes/AccountDTO.html":{},"entities/AccountEntity.html":{},"interfaces/AccountModel.html":{},"injectables/AccountRepository.html":{},"interfaces/AccountRepositoryInterface.html":{},"injectables/AccountService.html":{},"entities/AccountTypeEntity.html":{},"interfaces/AccountTypeModel.html":{},"injectables/AccountTypeRepository.html":{},"interfaces/AccountTypeRepositoryInterface.html":{},"modules/AppModule.html":{},"interfaces/BaseRepositoryInterface.html":{},"classes/CustomerDTO.html":{},"entities/CustomerEntity.html":{},"interfaces/CustomerModel.html":{},"injectables/CustomerRepository.html":{},"interfaces/CustomerRepositoryInterface.html":{},"injectables/CustomerService.html":{},"classes/CustomerUpdateDTO.html":{},"classes/DataRangeDTO.html":{},"interfaces/DataRangeModel.html":{},"controllers/DepositController.html":{},"classes/DepositDTO.html":{},"entities/DepositEntity.html":{},"interfaces/DepositModel.html":{},"injectables/DepositRepository.html":{},"interfaces/DepositRepositoryInterface.html":{},"injectables/DepositService.html":{},"entities/DocumentTypeEntity.html":{},"interfaces/DocumentTypeModel.html":{},"injectables/DocumentTypeRepository.html":{},"interfaces/DocumentTypeRepositoryInterface.html":{},"classes/ExceptionFiltersFilter.html":{},"guards/GuardsGuard.html":{},"injectables/InterceptorsInterceptor.html":{},"injectables/MiddlewaresMiddleware.html":{},"classes/PaginationDTO.html":{},"interfaces/PaginationModel.html":{},"injectables/PipesPipe.html":{},"controllers/SecurityController.html":{},"injectables/SecurityService.html":{},"classes/SignDTO.html":{},"controllers/TransferController.html":{},"classes/TransferDTO.html":{},"entities/TransferEntity.html":{},"interfaces/TransferModel.html":{},"injectables/TransferRepository.html":{},"interfaces/TransferRepositoryInterface.html":{},"injectables/TransferService.html":{},"classes/TypeOrmExceptionFilter.html":{},"injectables/TypesOrmPostgresConfigService.html":{},"controllers/UserController.html":{}}}],["exports",{"_index":412,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["express",{"_index":907,"title":{},"body":{"injectables/MiddlewaresMiddleware.html":{},"dependencies.html":{}}}],["extends",{"_index":283,"title":{},"body":{"interfaces/AccountRepositoryInterface.html":{},"interfaces/AccountTypeRepositoryInterface.html":{},"interfaces/CustomerRepositoryInterface.html":{},"interfaces/DepositRepositoryInterface.html":{},"interfaces/DocumentTypeRepositoryInterface.html":{},"interfaces/TransferRepositoryInterface.html":{}}}],["extranjería",{"_index":845,"title":{},"body":{"injectables/DocumentTypeRepository.html":{}}}],["f9098e18cf9a",{"_index":844,"title":{},"body":{"injectables/DocumentTypeRepository.html":{}}}],["false",{"_index":181,"title":{},"body":{"entities/AccountEntity.html":{},"entities/CustomerEntity.html":{},"injectables/CustomerRepository.html":{},"injectables/CustomerService.html":{},"entities/DepositEntity.html":{},"guards/GuardsGuard.html":{},"injectables/SecurityService.html":{},"entities/TransferEntity.html":{}}}],["false})@joincolumn",{"_index":545,"title":{},"body":{"entities/CustomerEntity.html":{}}}],["fecha",{"_index":699,"title":{},"body":{"classes/DataRangeDTO.html":{}}}],["file",{"_index":5,"title":{},"body":{"controllers/AccountController.html":{},"classes/AccountDTO.html":{},"entities/AccountEntity.html":{},"interfaces/AccountModel.html":{},"injectables/AccountRepository.html":{},"interfaces/AccountRepositoryInterface.html":{},"injectables/AccountService.html":{},"entities/AccountTypeEntity.html":{},"interfaces/AccountTypeModel.html":{},"injectables/AccountTypeRepository.html":{},"interfaces/AccountTypeRepositoryInterface.html":{},"modules/AppModule.html":{},"interfaces/BaseRepositoryInterface.html":{},"classes/CustomerDTO.html":{},"entities/CustomerEntity.html":{},"interfaces/CustomerModel.html":{},"injectables/CustomerRepository.html":{},"interfaces/CustomerRepositoryInterface.html":{},"injectables/CustomerService.html":{},"classes/CustomerUpdateDTO.html":{},"classes/DataRangeDTO.html":{},"interfaces/DataRangeModel.html":{},"controllers/DepositController.html":{},"classes/DepositDTO.html":{},"entities/DepositEntity.html":{},"interfaces/DepositModel.html":{},"injectables/DepositRepository.html":{},"interfaces/DepositRepositoryInterface.html":{},"injectables/DepositService.html":{},"entities/DocumentTypeEntity.html":{},"interfaces/DocumentTypeModel.html":{},"injectables/DocumentTypeRepository.html":{},"interfaces/DocumentTypeRepositoryInterface.html":{},"classes/ExceptionFiltersFilter.html":{},"guards/GuardsGuard.html":{},"injectables/InterceptorsInterceptor.html":{},"injectables/MiddlewaresMiddleware.html":{},"classes/PaginationDTO.html":{},"interfaces/PaginationModel.html":{},"injectables/PipesPipe.html":{},"controllers/SecurityController.html":{},"injectables/SecurityService.html":{},"classes/SignDTO.html":{},"controllers/TransferController.html":{},"classes/TransferDTO.html":{},"entities/TransferEntity.html":{},"interfaces/TransferModel.html":{},"injectables/TransferRepository.html":{},"interfaces/TransferRepositoryInterface.html":{},"injectables/TransferService.html":{},"classes/TypeOrmExceptionFilter.html":{},"injectables/TypesOrmPostgresConfigService.html":{},"controllers/UserController.html":{},"coverage.html":{}}}],["files",{"_index":1316,"title":{},"body":{"index.html":{}}}],["filter",{"_index":1127,"title":{},"body":{"injectables/TransferService.html":{}}}],["filters",{"_index":449,"title":{},"body":{"modules/AppModule.html":{}}}],["filters.filter.ts",{"_index":855,"title":{},"body":{"classes/ExceptionFiltersFilter.html":{},"coverage.html":{}}}],["filters.filter.ts:5",{"_index":861,"title":{},"body":{"classes/ExceptionFiltersFilter.html":{}}}],["filters.ts",{"_index":1136,"title":{},"body":{"classes/TypeOrmExceptionFilter.html":{},"coverage.html":{}}}],["filters.ts:6",{"_index":1138,"title":{},"body":{"classes/TypeOrmExceptionFilter.html":{}}}],["filters/exception",{"_index":854,"title":{},"body":{"classes/ExceptionFiltersFilter.html":{},"coverage.html":{}}}],["filters/typeorm.exception",{"_index":448,"title":{},"body":{"modules/AppModule.html":{},"classes/TypeOrmExceptionFilter.html":{},"coverage.html":{}}}],["fin",{"_index":697,"title":{},"body":{"classes/DataRangeDTO.html":{}}}],["find",{"_index":601,"title":{},"body":{"injectables/CustomerRepository.html":{}}}],["findall",{"_index":213,"title":{},"body":{"injectables/AccountRepository.html":{},"injectables/AccountService.html":{},"injectables/AccountTypeRepository.html":{},"interfaces/BaseRepositoryInterface.html":{},"injectables/CustomerRepository.html":{},"injectables/CustomerService.html":{},"injectables/DepositRepository.html":{},"injectables/DocumentTypeRepository.html":{},"injectables/TransferRepository.html":{},"interfaces/TransferRepositoryInterface.html":{}}}],["findalldeleted",{"_index":559,"title":{},"body":{"injectables/CustomerRepository.html":{},"injectables/CustomerService.html":{}}}],["findallusers",{"_index":1176,"title":{},"body":{"controllers/UserController.html":{}}}],["findallusersdeleted",{"_index":1177,"title":{},"body":{"controllers/UserController.html":{}}}],["findbyaccountid",{"_index":749,"title":{},"body":{"injectables/DepositRepository.html":{},"interfaces/DepositRepositoryInterface.html":{}}}],["findbyaccountid(accountid",{"_index":755,"title":{},"body":{"injectables/DepositRepository.html":{},"interfaces/DepositRepositoryInterface.html":{}}}],["findbyaccounttype",{"_index":214,"title":{},"body":{"injectables/AccountRepository.html":{},"interfaces/AccountRepositoryInterface.html":{}}}],["findbyaccounttype(accounttypeid",{"_index":232,"title":{},"body":{"injectables/AccountRepository.html":{},"interfaces/AccountRepositoryInterface.html":{}}}],["findbycustomer",{"_index":215,"title":{},"body":{"injectables/AccountRepository.html":{},"interfaces/AccountRepositoryInterface.html":{}}}],["findbycustomer(customerid",{"_index":234,"title":{},"body":{"injectables/AccountRepository.html":{},"interfaces/AccountRepositoryInterface.html":{}}}],["findbydatarange",{"_index":750,"title":{},"body":{"injectables/DepositRepository.html":{},"interfaces/DepositRepositoryInterface.html":{},"injectables/TransferRepository.html":{}}}],["findbydatarange(dateinit",{"_index":757,"title":{},"body":{"injectables/DepositRepository.html":{},"interfaces/DepositRepositoryInterface.html":{},"injectables/TransferRepository.html":{}}}],["findbyfullname",{"_index":560,"title":{},"body":{"injectables/CustomerRepository.html":{},"interfaces/CustomerRepositoryInterface.html":{}}}],["findbyfullname(fullname",{"_index":572,"title":{},"body":{"injectables/CustomerRepository.html":{},"interfaces/CustomerRepositoryInterface.html":{}}}],["findbyname",{"_index":376,"title":{},"body":{"injectables/AccountTypeRepository.html":{},"interfaces/AccountTypeRepositoryInterface.html":{},"injectables/DocumentTypeRepository.html":{},"interfaces/DocumentTypeRepositoryInterface.html":{}}}],["findbyname(name",{"_index":380,"title":{},"body":{"injectables/AccountTypeRepository.html":{},"interfaces/AccountTypeRepositoryInterface.html":{},"injectables/DocumentTypeRepository.html":{},"interfaces/DocumentTypeRepositoryInterface.html":{}}}],["findbystate",{"_index":216,"title":{},"body":{"injectables/AccountRepository.html":{},"interfaces/AccountRepositoryInterface.html":{},"injectables/AccountTypeRepository.html":{},"interfaces/AccountTypeRepositoryInterface.html":{},"injectables/CustomerRepository.html":{},"interfaces/CustomerRepositoryInterface.html":{},"injectables/DocumentTypeRepository.html":{},"interfaces/DocumentTypeRepositoryInterface.html":{}}}],["findbystate(state",{"_index":236,"title":{},"body":{"injectables/AccountRepository.html":{},"interfaces/AccountRepositoryInterface.html":{},"injectables/AccountTypeRepository.html":{},"interfaces/AccountTypeRepositoryInterface.html":{},"injectables/CustomerRepository.html":{},"interfaces/CustomerRepositoryInterface.html":{},"injectables/DocumentTypeRepository.html":{},"interfaces/DocumentTypeRepositoryInterface.html":{}}}],["findincomebydatarange",{"_index":1059,"title":{},"body":{"injectables/TransferRepository.html":{},"interfaces/TransferRepositoryInterface.html":{}}}],["findincomebydatarange(accountid",{"_index":1066,"title":{},"body":{"injectables/TransferRepository.html":{},"interfaces/TransferRepositoryInterface.html":{}}}],["findone",{"_index":266,"title":{},"body":{"injectables/AccountRepository.html":{},"injectables/AccountTypeRepository.html":{},"injectables/CustomerRepository.html":{},"injectables/DepositRepository.html":{},"injectables/DocumentTypeRepository.html":{},"injectables/TransferRepository.html":{}}}],["findonebydocumenttypeanddocument",{"_index":561,"title":{},"body":{"injectables/CustomerRepository.html":{},"interfaces/CustomerRepositoryInterface.html":{}}}],["findonebydocumenttypeanddocument(documenttypeid",{"_index":575,"title":{},"body":{"injectables/CustomerRepository.html":{},"interfaces/CustomerRepositoryInterface.html":{}}}],["findonebyemail",{"_index":562,"title":{},"body":{"injectables/CustomerRepository.html":{},"interfaces/CustomerRepositoryInterface.html":{}}}],["findonebyemail(email",{"_index":577,"title":{},"body":{"injectables/CustomerRepository.html":{},"interfaces/CustomerRepositoryInterface.html":{}}}],["findonebyemailandpassword",{"_index":563,"title":{},"body":{"injectables/CustomerRepository.html":{},"interfaces/CustomerRepositoryInterface.html":{}}}],["findonebyemailandpassword(email",{"_index":579,"title":{},"body":{"injectables/CustomerRepository.html":{},"interfaces/CustomerRepositoryInterface.html":{}}}],["findonebyid",{"_index":217,"title":{},"body":{"injectables/AccountRepository.html":{},"injectables/AccountTypeRepository.html":{},"interfaces/BaseRepositoryInterface.html":{},"injectables/CustomerRepository.html":{},"injectables/DepositRepository.html":{},"injectables/DocumentTypeRepository.html":{},"injectables/TransferRepository.html":{},"interfaces/TransferRepositoryInterface.html":{}}}],["findonebyid(id",{"_index":238,"title":{},"body":{"injectables/AccountRepository.html":{},"injectables/AccountTypeRepository.html":{},"interfaces/BaseRepositoryInterface.html":{},"injectables/CustomerRepository.html":{},"injectables/DepositRepository.html":{},"injectables/DocumentTypeRepository.html":{},"injectables/TransferRepository.html":{},"interfaces/TransferRepositoryInterface.html":{}}}],["findonebyphone",{"_index":564,"title":{},"body":{"injectables/CustomerRepository.html":{},"interfaces/CustomerRepositoryInterface.html":{}}}],["findonebyphone(phone",{"_index":582,"title":{},"body":{"injectables/CustomerRepository.html":{},"interfaces/CustomerRepositoryInterface.html":{}}}],["findoutcomebydatarange",{"_index":1060,"title":{},"body":{"injectables/TransferRepository.html":{},"interfaces/TransferRepositoryInterface.html":{}}}],["findoutcomebydatarange(accountid",{"_index":1069,"title":{},"body":{"injectables/TransferRepository.html":{},"interfaces/TransferRepositoryInterface.html":{}}}],["finduser",{"_index":1178,"title":{},"body":{"controllers/UserController.html":{}}}],["finduser(@param('id",{"_index":1206,"title":{},"body":{"controllers/UserController.html":{}}}],["finduser(id",{"_index":1188,"title":{},"body":{"controllers/UserController.html":{}}}],["finduserbyemail",{"_index":1179,"title":{},"body":{"controllers/UserController.html":{}}}],["finduserbyemail(email",{"_index":1191,"title":{},"body":{"controllers/UserController.html":{}}}],["folder",{"_index":1319,"title":{},"body":{"index.html":{}}}],["folders",{"_index":1314,"title":{},"body":{"index.html":{}}}],["following",{"_index":1308,"title":{},"body":{"index.html":{}}}],["forget",{"_index":1327,"title":{},"body":{"index.html":{}}}],["framework",{"_index":1276,"title":{},"body":{"index.html":{}}}],["full_name",{"_index":549,"title":{},"body":{"entities/CustomerEntity.html":{}}}],["fullname",{"_index":490,"title":{},"body":{"classes/CustomerDTO.html":{},"entities/CustomerEntity.html":{},"interfaces/CustomerModel.html":{},"injectables/CustomerRepository.html":{},"interfaces/CustomerRepositoryInterface.html":{},"classes/CustomerUpdateDTO.html":{}}}],["function",{"_index":197,"title":{},"body":{"entities/AccountEntity.html":{},"coverage.html":{}}}],["functions",{"_index":1269,"title":{"miscellaneous/functions.html":{}},"body":{"miscellaneous/functions.html":{}}}],["generateid",{"_index":183,"title":{},"body":{"entities/AccountEntity.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["get('/account/:id",{"_index":41,"title":{},"body":{"controllers/AccountController.html":{}}}],["get('/customer/:id",{"_index":57,"title":{},"body":{"controllers/AccountController.html":{}}}],["get('/select/:id",{"_index":1022,"title":{},"body":{"controllers/TransferController.html":{}}}],["get('/select/:id')@useguards(guardsguard",{"_index":1017,"title":{},"body":{"controllers/TransferController.html":{}}}],["get(':id",{"_index":1189,"title":{},"body":{"controllers/UserController.html":{}}}],["get('amount/:id",{"_index":100,"title":{},"body":{"controllers/AccountController.html":{}}}],["get('amount/:id')@useguards(guardsguard",{"_index":65,"title":{},"body":{"controllers/AccountController.html":{}}}],["get('balance/:id",{"_index":62,"title":{},"body":{"controllers/AccountController.html":{}}}],["get('deleted",{"_index":1186,"title":{},"body":{"controllers/UserController.html":{}}}],["get('email/:email",{"_index":1192,"title":{},"body":{"controllers/UserController.html":{}}}],["get('logout",{"_index":934,"title":{},"body":{"controllers/SecurityController.html":{}}}],["get('state/:id",{"_index":68,"title":{},"body":{"controllers/AccountController.html":{}}}],["get()@useguards(guardsguard",{"_index":59,"title":{},"body":{"controllers/AccountController.html":{}}}],["getaccountbycustomerid",{"_index":18,"title":{},"body":{"controllers/AccountController.html":{},"injectables/AccountService.html":{}}}],["getaccountbycustomerid(customerid",{"_index":313,"title":{},"body":{"injectables/AccountService.html":{}}}],["getaccountbycustomerid(id",{"_index":56,"title":{},"body":{"controllers/AccountController.html":{}}}],["getaccounttype",{"_index":290,"title":{},"body":{"injectables/AccountService.html":{}}}],["getaccounttype(accountid",{"_index":315,"title":{},"body":{"injectables/AccountService.html":{}}}],["getall",{"_index":19,"title":{},"body":{"controllers/AccountController.html":{},"controllers/DepositController.html":{}}}],["getall(body",{"_index":718,"title":{},"body":{"controllers/DepositController.html":{}}}],["getbalance",{"_index":20,"title":{},"body":{"controllers/AccountController.html":{},"injectables/AccountService.html":{}}}],["getbalance(@param('id",{"_index":96,"title":{},"body":{"controllers/AccountController.html":{}}}],["getbalance(accountid",{"_index":318,"title":{},"body":{"injectables/AccountService.html":{}}}],["getbalance(id",{"_index":61,"title":{},"body":{"controllers/AccountController.html":{}}}],["getbalanceall",{"_index":21,"title":{},"body":{"controllers/AccountController.html":{}}}],["getbalanceall(@param('id",{"_index":102,"title":{},"body":{"controllers/AccountController.html":{}}}],["getbalanceall(id",{"_index":64,"title":{},"body":{"controllers/AccountController.html":{}}}],["getcustomerinfo",{"_index":611,"title":{},"body":{"injectables/CustomerService.html":{}}}],["getcustomerinfo(customerid",{"_index":621,"title":{},"body":{"injectables/CustomerService.html":{}}}],["getcustomerinfobyemail",{"_index":612,"title":{},"body":{"injectables/CustomerService.html":{}}}],["getcustomerinfobyemail(email",{"_index":624,"title":{},"body":{"injectables/CustomerService.html":{}}}],["gethistory",{"_index":781,"title":{},"body":{"injectables/DepositService.html":{},"controllers/TransferController.html":{},"injectables/TransferService.html":{}}}],["gethistory(accountid",{"_index":789,"title":{},"body":{"injectables/DepositService.html":{},"injectables/TransferService.html":{}}}],["gethistory(body",{"_index":1007,"title":{},"body":{"controllers/TransferController.html":{}}}],["gethistoryin",{"_index":999,"title":{},"body":{"controllers/TransferController.html":{},"injectables/TransferService.html":{}}}],["gethistoryin(accountid",{"_index":1099,"title":{},"body":{"injectables/TransferService.html":{}}}],["gethistoryin(body",{"_index":1010,"title":{},"body":{"controllers/TransferController.html":{}}}],["gethistoryout",{"_index":1000,"title":{},"body":{"controllers/TransferController.html":{},"injectables/TransferService.html":{}}}],["gethistoryout(accountid",{"_index":1102,"title":{},"body":{"injectables/TransferService.html":{}}}],["gethistoryout(body",{"_index":1013,"title":{},"body":{"controllers/TransferController.html":{}}}],["getstate",{"_index":22,"title":{},"body":{"controllers/AccountController.html":{},"injectables/AccountService.html":{}}}],["getstate(@param('id",{"_index":119,"title":{},"body":{"controllers/AccountController.html":{}}}],["getstate(accountid",{"_index":320,"title":{},"body":{"injectables/AccountService.html":{}}}],["getstate(id",{"_index":67,"title":{},"body":{"controllers/AccountController.html":{}}}],["getting",{"_index":1272,"title":{"index.html":{}},"body":{}}],["guard",{"_index":863,"title":{"guards/GuardsGuard.html":{}},"body":{"coverage.html":{},"overview.html":{}}}],["guards",{"_index":864,"title":{},"body":{"guards/GuardsGuard.html":{}}}],["guardsguard",{"_index":82,"title":{"guards/GuardsGuard.html":{}},"body":{"controllers/AccountController.html":{},"guards/GuardsGuard.html":{},"controllers/TransferController.html":{},"controllers/UserController.html":{},"coverage.html":{}}}],["guidelines",{"_index":1309,"title":{},"body":{"index.html":{}}}],["harddelete",{"_index":218,"title":{},"body":{"injectables/AccountRepository.html":{},"injectables/CustomerRepository.html":{},"injectables/DepositRepository.html":{},"injectables/TransferRepository.html":{}}}],["harddelete(id",{"_index":240,"title":{},"body":{"injectables/AccountRepository.html":{},"injectables/CustomerRepository.html":{},"injectables/DepositRepository.html":{},"injectables/TransferRepository.html":{}}}],["historial",{"_index":791,"title":{},"body":{"injectables/DepositService.html":{},"injectables/TransferService.html":{}}}],["host",{"_index":460,"title":{},"body":{"modules/AppModule.html":{},"classes/ExceptionFiltersFilter.html":{},"classes/TypeOrmExceptionFilter.html":{},"injectables/TypesOrmPostgresConfigService.html":{}}}],["host.switchtohttp().getresponse",{"_index":1140,"title":{},"body":{"classes/TypeOrmExceptionFilter.html":{}}}],["id",{"_index":37,"title":{},"body":{"controllers/AccountController.html":{},"entities/AccountEntity.html":{},"interfaces/AccountModel.html":{},"injectables/AccountRepository.html":{},"injectables/AccountService.html":{},"entities/AccountTypeEntity.html":{},"interfaces/AccountTypeModel.html":{},"injectables/AccountTypeRepository.html":{},"interfaces/BaseRepositoryInterface.html":{},"entities/CustomerEntity.html":{},"interfaces/CustomerModel.html":{},"injectables/CustomerRepository.html":{},"injectables/CustomerService.html":{},"controllers/DepositController.html":{},"entities/DepositEntity.html":{},"interfaces/DepositModel.html":{},"injectables/DepositRepository.html":{},"entities/DocumentTypeEntity.html":{},"interfaces/DocumentTypeModel.html":{},"injectables/DocumentTypeRepository.html":{},"injectables/SecurityService.html":{},"controllers/TransferController.html":{},"entities/TransferEntity.html":{},"interfaces/TransferModel.html":{},"injectables/TransferRepository.html":{},"interfaces/TransferRepositoryInterface.html":{},"controllers/UserController.html":{}}}],["identificación",{"_index":978,"title":{},"body":{"injectables/SecurityService.html":{}}}],["identificador",{"_index":144,"title":{},"body":{"classes/AccountDTO.html":{},"classes/CustomerDTO.html":{},"classes/DepositDTO.html":{},"classes/TransferDTO.html":{}}}],["identificarse",{"_index":957,"title":{},"body":{"injectables/SecurityService.html":{}}}],["identifier",{"_index":1219,"title":{},"body":{"coverage.html":{}}}],["identify",{"_index":1312,"title":{},"body":{"index.html":{}}}],["implements",{"_index":196,"title":{},"body":{"entities/AccountEntity.html":{},"injectables/AccountRepository.html":{},"entities/AccountTypeEntity.html":{},"injectables/AccountTypeRepository.html":{},"modules/AppModule.html":{},"entities/CustomerEntity.html":{},"injectables/CustomerRepository.html":{},"entities/DepositEntity.html":{},"injectables/DepositRepository.html":{},"entities/DocumentTypeEntity.html":{},"injectables/DocumentTypeRepository.html":{},"classes/ExceptionFiltersFilter.html":{},"guards/GuardsGuard.html":{},"injectables/InterceptorsInterceptor.html":{},"injectables/MiddlewaresMiddleware.html":{},"injectables/PipesPipe.html":{},"entities/TransferEntity.html":{},"injectables/TransferRepository.html":{},"classes/TypeOrmExceptionFilter.html":{},"injectables/TypesOrmPostgresConfigService.html":{}}}],["import",{"_index":74,"title":{},"body":{"controllers/AccountController.html":{},"classes/AccountDTO.html":{},"entities/AccountEntity.html":{},"interfaces/AccountModel.html":{},"injectables/AccountRepository.html":{},"interfaces/AccountRepositoryInterface.html":{},"injectables/AccountService.html":{},"entities/AccountTypeEntity.html":{},"injectables/AccountTypeRepository.html":{},"interfaces/AccountTypeRepositoryInterface.html":{},"modules/AppModule.html":{},"classes/CustomerDTO.html":{},"entities/CustomerEntity.html":{},"interfaces/CustomerModel.html":{},"injectables/CustomerRepository.html":{},"interfaces/CustomerRepositoryInterface.html":{},"injectables/CustomerService.html":{},"classes/CustomerUpdateDTO.html":{},"classes/DataRangeDTO.html":{},"controllers/DepositController.html":{},"classes/DepositDTO.html":{},"entities/DepositEntity.html":{},"interfaces/DepositModel.html":{},"injectables/DepositRepository.html":{},"interfaces/DepositRepositoryInterface.html":{},"injectables/DepositService.html":{},"entities/DocumentTypeEntity.html":{},"injectables/DocumentTypeRepository.html":{},"interfaces/DocumentTypeRepositoryInterface.html":{},"classes/ExceptionFiltersFilter.html":{},"guards/GuardsGuard.html":{},"injectables/InterceptorsInterceptor.html":{},"injectables/MiddlewaresMiddleware.html":{},"classes/PaginationDTO.html":{},"injectables/PipesPipe.html":{},"controllers/SecurityController.html":{},"injectables/SecurityService.html":{},"classes/SignDTO.html":{},"controllers/TransferController.html":{},"classes/TransferDTO.html":{},"entities/TransferEntity.html":{},"interfaces/TransferModel.html":{},"injectables/TransferRepository.html":{},"interfaces/TransferRepositoryInterface.html":{},"injectables/TransferService.html":{},"classes/TypeOrmExceptionFilter.html":{},"injectables/TypesOrmPostgresConfigService.html":{},"controllers/UserController.html":{}}}],["important",{"_index":1325,"title":{},"body":{"index.html":{}}}],["imports",{"_index":453,"title":{},"body":{"modules/AppModule.html":{}}}],["income",{"_index":1047,"title":{},"body":{"entities/TransferEntity.html":{},"interfaces/TransferModel.html":{},"injectables/TransferRepository.html":{},"injectables/TransferService.html":{}}}],["income.balance",{"_index":1119,"title":{},"body":{"injectables/TransferService.html":{}}}],["incomeid",{"_index":1035,"title":{},"body":{"classes/TransferDTO.html":{}}}],["index",{"_index":9,"title":{"index.html":{}},"body":{"controllers/AccountController.html":{},"classes/AccountDTO.html":{},"entities/AccountEntity.html":{},"interfaces/AccountModel.html":{},"injectables/AccountRepository.html":{},"interfaces/AccountRepositoryInterface.html":{},"injectables/AccountService.html":{},"entities/AccountTypeEntity.html":{},"interfaces/AccountTypeModel.html":{},"injectables/AccountTypeRepository.html":{},"interfaces/AccountTypeRepositoryInterface.html":{},"interfaces/BaseRepositoryInterface.html":{},"classes/CustomerDTO.html":{},"entities/CustomerEntity.html":{},"interfaces/CustomerModel.html":{},"injectables/CustomerRepository.html":{},"interfaces/CustomerRepositoryInterface.html":{},"injectables/CustomerService.html":{},"classes/CustomerUpdateDTO.html":{},"classes/DataRangeDTO.html":{},"interfaces/DataRangeModel.html":{},"controllers/DepositController.html":{},"classes/DepositDTO.html":{},"entities/DepositEntity.html":{},"interfaces/DepositModel.html":{},"injectables/DepositRepository.html":{},"interfaces/DepositRepositoryInterface.html":{},"injectables/DepositService.html":{},"entities/DocumentTypeEntity.html":{},"interfaces/DocumentTypeModel.html":{},"injectables/DocumentTypeRepository.html":{},"interfaces/DocumentTypeRepositoryInterface.html":{},"classes/ExceptionFiltersFilter.html":{},"guards/GuardsGuard.html":{},"injectables/InterceptorsInterceptor.html":{},"injectables/MiddlewaresMiddleware.html":{},"classes/PaginationDTO.html":{},"interfaces/PaginationModel.html":{},"injectables/PipesPipe.html":{},"controllers/SecurityController.html":{},"injectables/SecurityService.html":{},"classes/SignDTO.html":{},"controllers/TransferController.html":{},"classes/TransferDTO.html":{},"entities/TransferEntity.html":{},"interfaces/TransferModel.html":{},"injectables/TransferRepository.html":{},"interfaces/TransferRepositoryInterface.html":{},"injectables/TransferService.html":{},"classes/TypeOrmExceptionFilter.html":{},"injectables/TypesOrmPostgresConfigService.html":{},"controllers/UserController.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["info",{"_index":3,"title":{},"body":{"controllers/AccountController.html":{},"classes/AccountDTO.html":{},"entities/AccountEntity.html":{},"interfaces/AccountModel.html":{},"injectables/AccountRepository.html":{},"interfaces/AccountRepositoryInterface.html":{},"injectables/AccountService.html":{},"entities/AccountTypeEntity.html":{},"interfaces/AccountTypeModel.html":{},"injectables/AccountTypeRepository.html":{},"interfaces/AccountTypeRepositoryInterface.html":{},"modules/AppModule.html":{},"interfaces/BaseRepositoryInterface.html":{},"classes/CustomerDTO.html":{},"entities/CustomerEntity.html":{},"interfaces/CustomerModel.html":{},"injectables/CustomerRepository.html":{},"interfaces/CustomerRepositoryInterface.html":{},"injectables/CustomerService.html":{},"classes/CustomerUpdateDTO.html":{},"classes/DataRangeDTO.html":{},"interfaces/DataRangeModel.html":{},"controllers/DepositController.html":{},"classes/DepositDTO.html":{},"entities/DepositEntity.html":{},"interfaces/DepositModel.html":{},"injectables/DepositRepository.html":{},"interfaces/DepositRepositoryInterface.html":{},"injectables/DepositService.html":{},"entities/DocumentTypeEntity.html":{},"interfaces/DocumentTypeModel.html":{},"injectables/DocumentTypeRepository.html":{},"interfaces/DocumentTypeRepositoryInterface.html":{},"classes/ExceptionFiltersFilter.html":{},"guards/GuardsGuard.html":{},"injectables/InterceptorsInterceptor.html":{},"injectables/MiddlewaresMiddleware.html":{},"classes/PaginationDTO.html":{},"interfaces/PaginationModel.html":{},"injectables/PipesPipe.html":{},"controllers/SecurityController.html":{},"injectables/SecurityService.html":{},"classes/SignDTO.html":{},"controllers/TransferController.html":{},"classes/TransferDTO.html":{},"entities/TransferEntity.html":{},"interfaces/TransferModel.html":{},"injectables/TransferRepository.html":{},"interfaces/TransferRepositoryInterface.html":{},"injectables/TransferService.html":{},"classes/TypeOrmExceptionFilter.html":{},"injectables/TypesOrmPostgresConfigService.html":{},"controllers/UserController.html":{}}}],["información",{"_index":623,"title":{},"body":{"injectables/CustomerService.html":{},"classes/CustomerUpdateDTO.html":{}}}],["information",{"_index":1322,"title":{},"body":{"index.html":{}}}],["inicio",{"_index":704,"title":{},"body":{"classes/DataRangeDTO.html":{},"classes/SignDTO.html":{}}}],["injectable",{"_index":209,"title":{"injectables/AccountRepository.html":{},"injectables/AccountService.html":{},"injectables/AccountTypeRepository.html":{},"injectables/CustomerRepository.html":{},"injectables/CustomerService.html":{},"injectables/DepositRepository.html":{},"injectables/DepositService.html":{},"injectables/DocumentTypeRepository.html":{},"injectables/InterceptorsInterceptor.html":{},"injectables/MiddlewaresMiddleware.html":{},"injectables/PipesPipe.html":{},"injectables/SecurityService.html":{},"injectables/TransferRepository.html":{},"injectables/TransferService.html":{},"injectables/TypesOrmPostgresConfigService.html":{}},"body":{"injectables/AccountRepository.html":{},"injectables/AccountService.html":{},"injectables/AccountTypeRepository.html":{},"injectables/CustomerRepository.html":{},"injectables/CustomerService.html":{},"injectables/DepositRepository.html":{},"injectables/DepositService.html":{},"injectables/DocumentTypeRepository.html":{},"guards/GuardsGuard.html":{},"injectables/InterceptorsInterceptor.html":{},"injectables/MiddlewaresMiddleware.html":{},"injectables/PipesPipe.html":{},"injectables/SecurityService.html":{},"injectables/TransferRepository.html":{},"injectables/TransferService.html":{},"injectables/TypesOrmPostgresConfigService.html":{},"coverage.html":{}}}],["injectables",{"_index":211,"title":{},"body":{"injectables/AccountRepository.html":{},"injectables/AccountService.html":{},"injectables/AccountTypeRepository.html":{},"injectables/CustomerRepository.html":{},"injectables/CustomerService.html":{},"injectables/DepositRepository.html":{},"injectables/DepositService.html":{},"injectables/DocumentTypeRepository.html":{},"injectables/InterceptorsInterceptor.html":{},"injectables/MiddlewaresMiddleware.html":{},"injectables/PipesPipe.html":{},"injectables/SecurityService.html":{},"injectables/TransferRepository.html":{},"injectables/TransferService.html":{},"injectables/TypesOrmPostgresConfigService.html":{},"overview.html":{}}}],["injectrepository",{"_index":249,"title":{},"body":{"injectables/AccountRepository.html":{},"injectables/AccountTypeRepository.html":{},"injectables/CustomerRepository.html":{},"injectables/DepositRepository.html":{},"injectables/DocumentTypeRepository.html":{},"injectables/TransferRepository.html":{}}}],["injectrepository(accountentity",{"_index":252,"title":{},"body":{"injectables/AccountRepository.html":{}}}],["injectrepository(accounttypeentity",{"_index":389,"title":{},"body":{"injectables/AccountTypeRepository.html":{}}}],["injectrepository(customerentity",{"_index":589,"title":{},"body":{"injectables/CustomerRepository.html":{}}}],["injectrepository(depositentity",{"_index":768,"title":{},"body":{"injectables/DepositRepository.html":{}}}],["injectrepository(documenttypeentity",{"_index":831,"title":{},"body":{"injectables/DocumentTypeRepository.html":{}}}],["injectrepository(transferentity",{"_index":1076,"title":{},"body":{"injectables/TransferRepository.html":{}}}],["installation",{"_index":1285,"title":{},"body":{"index.html":{}}}],["installrunning",{"_index":1288,"title":{},"body":{"index.html":{}}}],["insuficientes",{"_index":1125,"title":{},"body":{"injectables/TransferService.html":{}}}],["intercept",{"_index":891,"title":{},"body":{"injectables/InterceptorsInterceptor.html":{}}}],["intercept(context",{"_index":892,"title":{},"body":{"injectables/InterceptorsInterceptor.html":{}}}],["interceptorsinterceptor",{"_index":889,"title":{"injectables/InterceptorsInterceptor.html":{}},"body":{"injectables/InterceptorsInterceptor.html":{},"coverage.html":{}}}],["interface",{"_index":204,"title":{"interfaces/AccountModel.html":{},"interfaces/AccountRepositoryInterface.html":{},"interfaces/AccountTypeModel.html":{},"interfaces/AccountTypeRepositoryInterface.html":{},"interfaces/BaseRepositoryInterface.html":{},"interfaces/CustomerModel.html":{},"interfaces/CustomerRepositoryInterface.html":{},"interfaces/DataRangeModel.html":{},"interfaces/DepositModel.html":{},"interfaces/DepositRepositoryInterface.html":{},"interfaces/DocumentTypeModel.html":{},"interfaces/DocumentTypeRepositoryInterface.html":{},"interfaces/PaginationModel.html":{},"interfaces/TransferModel.html":{},"interfaces/TransferRepositoryInterface.html":{}},"body":{"interfaces/AccountModel.html":{},"interfaces/AccountRepositoryInterface.html":{},"interfaces/AccountTypeModel.html":{},"interfaces/AccountTypeRepositoryInterface.html":{},"interfaces/BaseRepositoryInterface.html":{},"interfaces/CustomerModel.html":{},"interfaces/CustomerRepositoryInterface.html":{},"interfaces/DataRangeModel.html":{},"interfaces/DepositModel.html":{},"interfaces/DepositRepositoryInterface.html":{},"interfaces/DocumentTypeModel.html":{},"interfaces/DocumentTypeRepositoryInterface.html":{},"interfaces/PaginationModel.html":{},"interfaces/TransferModel.html":{},"interfaces/TransferRepositoryInterface.html":{},"coverage.html":{}}}],["interfaces",{"_index":205,"title":{},"body":{"interfaces/AccountModel.html":{},"injectables/AccountRepository.html":{},"interfaces/AccountRepositoryInterface.html":{},"interfaces/AccountTypeModel.html":{},"injectables/AccountTypeRepository.html":{},"interfaces/AccountTypeRepositoryInterface.html":{},"interfaces/BaseRepositoryInterface.html":{},"interfaces/CustomerModel.html":{},"injectables/CustomerRepository.html":{},"interfaces/CustomerRepositoryInterface.html":{},"interfaces/DataRangeModel.html":{},"interfaces/DepositModel.html":{},"injectables/DepositRepository.html":{},"interfaces/DepositRepositoryInterface.html":{},"interfaces/DocumentTypeModel.html":{},"injectables/DocumentTypeRepository.html":{},"interfaces/DocumentTypeRepositoryInterface.html":{},"interfaces/PaginationModel.html":{},"interfaces/TransferModel.html":{},"injectables/TransferRepository.html":{},"interfaces/TransferRepositoryInterface.html":{},"overview.html":{}}}],["internal",{"_index":1151,"title":{},"body":{"classes/TypeOrmExceptionFilter.html":{}}}],["internalservererrorexception",{"_index":965,"title":{},"body":{"injectables/SecurityService.html":{}}}],["inválidos",{"_index":979,"title":{},"body":{"injectables/SecurityService.html":{}}}],["isboolean",{"_index":151,"title":{},"body":{"classes/AccountDTO.html":{}}}],["isdatestring",{"_index":152,"title":{},"body":{"classes/AccountDTO.html":{},"classes/DataRangeDTO.html":{}}}],["isemail",{"_index":496,"title":{},"body":{"classes/CustomerDTO.html":{},"classes/CustomerUpdateDTO.html":{}}}],["isnumberstring",{"_index":153,"title":{},"body":{"classes/AccountDTO.html":{},"classes/CustomerDTO.html":{},"classes/CustomerUpdateDTO.html":{},"classes/DataRangeDTO.html":{},"classes/DepositDTO.html":{},"classes/PaginationDTO.html":{},"classes/TransferDTO.html":{}}}],["isnumberstring()@maxlength(30",{"_index":520,"title":{},"body":{"classes/CustomerDTO.html":{},"classes/CustomerUpdateDTO.html":{}}}],["isstring",{"_index":523,"title":{},"body":{"classes/CustomerDTO.html":{},"classes/CustomerUpdateDTO.html":{},"classes/SignDTO.html":{},"classes/TransferDTO.html":{}}}],["isstring()@maxlength(500",{"_index":500,"title":{},"body":{"classes/CustomerDTO.html":{},"classes/CustomerUpdateDTO.html":{},"classes/TransferDTO.html":{}}}],["isuuid",{"_index":142,"title":{},"body":{"classes/AccountDTO.html":{},"classes/CustomerDTO.html":{},"classes/CustomerUpdateDTO.html":{}}}],["item",{"_index":644,"title":{},"body":{"injectables/CustomerService.html":{},"injectables/DepositService.html":{},"injectables/TransferService.html":{}}}],["item.account.id",{"_index":811,"title":{},"body":{"injectables/DepositService.html":{}}}],["item.amount",{"_index":812,"title":{},"body":{"injectables/DepositService.html":{},"injectables/TransferService.html":{}}}],["item.deletedat",{"_index":645,"title":{},"body":{"injectables/CustomerService.html":{}}}],["item.income.id",{"_index":1131,"title":{},"body":{"injectables/TransferService.html":{}}}],["item.outcome.id",{"_index":1128,"title":{},"body":{"injectables/TransferService.html":{}}}],["joincolumn",{"_index":189,"title":{},"body":{"entities/AccountEntity.html":{},"entities/CustomerEntity.html":{},"entities/DepositEntity.html":{},"entities/TransferEntity.html":{}}}],["jwt",{"_index":950,"title":{},"body":{"controllers/SecurityController.html":{},"injectables/SecurityService.html":{},"dependencies.html":{}}}],["jwtconstants",{"_index":442,"title":{},"body":{"modules/AppModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["jwtconstants.secret",{"_index":457,"title":{},"body":{"modules/AppModule.html":{}}}],["jwtmodule",{"_index":439,"title":{},"body":{"modules/AppModule.html":{}}}],["jwtmodule.register",{"_index":455,"title":{},"body":{"modules/AppModule.html":{}}}],["jwtoken",{"_index":990,"title":{},"body":{"injectables/SecurityService.html":{}}}],["jwtservice",{"_index":868,"title":{},"body":{"guards/GuardsGuard.html":{},"injectables/SecurityService.html":{}}}],["la",{"_index":328,"title":{},"body":{"injectables/AccountService.html":{},"classes/DepositDTO.html":{},"classes/PaginationDTO.html":{},"classes/TransferDTO.html":{}}}],["legend",{"_index":408,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["length",{"_index":366,"title":{},"body":{"entities/AccountTypeEntity.html":{},"entities/CustomerEntity.html":{},"entities/DocumentTypeEntity.html":{},"classes/PaginationDTO.html":{},"interfaces/PaginationModel.html":{},"entities/TransferEntity.html":{}}}],["letra",{"_index":512,"title":{},"body":{"classes/CustomerDTO.html":{},"classes/CustomerUpdateDTO.html":{}}}],["license",{"_index":1344,"title":{},"body":{"properties.html":{}}}],["link",{"_index":1320,"title":{},"body":{"index.html":{}}}],["literal",{"_index":27,"title":{},"body":{"controllers/AccountController.html":{},"controllers/DepositController.html":{},"controllers/SecurityController.html":{},"controllers/TransferController.html":{}}}],["logging",{"_index":1173,"title":{},"body":{"injectables/TypesOrmPostgresConfigService.html":{}}}],["logout",{"_index":930,"title":{},"body":{"controllers/SecurityController.html":{}}}],["logout(@body",{"_index":949,"title":{},"body":{"controllers/SecurityController.html":{}}}],["logout(body",{"_index":933,"title":{},"body":{"controllers/SecurityController.html":{}}}],["longitud",{"_index":916,"title":{},"body":{"classes/PaginationDTO.html":{}}}],["los",{"_index":792,"title":{},"body":{"injectables/DepositService.html":{},"classes/PaginationDTO.html":{},"classes/SignDTO.html":{}}}],["make",{"_index":1328,"title":{},"body":{"index.html":{}}}],["manytoone",{"_index":190,"title":{},"body":{"entities/AccountEntity.html":{},"entities/CustomerEntity.html":{},"entities/DepositEntity.html":{},"entities/TransferEntity.html":{}}}],["manytoone(undefined",{"_index":543,"title":{},"body":{"entities/CustomerEntity.html":{}}}],["manytoone(undefined)@joincolumn",{"_index":165,"title":{},"body":{"entities/AccountEntity.html":{},"entities/DepositEntity.html":{},"entities/TransferEntity.html":{}}}],["mapa",{"_index":672,"title":{},"body":{"injectables/CustomerService.html":{}}}],["mapa.deletedat",{"_index":673,"title":{},"body":{"injectables/CustomerService.html":{}}}],["matches",{"_index":524,"title":{},"body":{"classes/CustomerDTO.html":{},"classes/CustomerUpdateDTO.html":{}}}],["matches(new",{"_index":504,"title":{},"body":{"classes/CustomerDTO.html":{},"classes/CustomerUpdateDTO.html":{}}}],["matching",{"_index":130,"title":{},"body":{"controllers/AccountController.html":{},"classes/AccountDTO.html":{},"entities/AccountEntity.html":{},"interfaces/AccountModel.html":{},"injectables/AccountRepository.html":{},"interfaces/AccountRepositoryInterface.html":{},"injectables/AccountService.html":{},"entities/AccountTypeEntity.html":{},"interfaces/AccountTypeModel.html":{},"injectables/AccountTypeRepository.html":{},"interfaces/AccountTypeRepositoryInterface.html":{},"modules/AppModule.html":{},"interfaces/BaseRepositoryInterface.html":{},"classes/CustomerDTO.html":{},"entities/CustomerEntity.html":{},"interfaces/CustomerModel.html":{},"injectables/CustomerRepository.html":{},"interfaces/CustomerRepositoryInterface.html":{},"injectables/CustomerService.html":{},"classes/CustomerUpdateDTO.html":{},"classes/DataRangeDTO.html":{},"interfaces/DataRangeModel.html":{},"controllers/DepositController.html":{},"classes/DepositDTO.html":{},"entities/DepositEntity.html":{},"interfaces/DepositModel.html":{},"injectables/DepositRepository.html":{},"interfaces/DepositRepositoryInterface.html":{},"injectables/DepositService.html":{},"entities/DocumentTypeEntity.html":{},"interfaces/DocumentTypeModel.html":{},"injectables/DocumentTypeRepository.html":{},"interfaces/DocumentTypeRepositoryInterface.html":{},"classes/ExceptionFiltersFilter.html":{},"guards/GuardsGuard.html":{},"injectables/InterceptorsInterceptor.html":{},"injectables/MiddlewaresMiddleware.html":{},"classes/PaginationDTO.html":{},"interfaces/PaginationModel.html":{},"injectables/PipesPipe.html":{},"controllers/SecurityController.html":{},"injectables/SecurityService.html":{},"classes/SignDTO.html":{},"controllers/TransferController.html":{},"classes/TransferDTO.html":{},"entities/TransferEntity.html":{},"interfaces/TransferModel.html":{},"injectables/TransferRepository.html":{},"interfaces/TransferRepositoryInterface.html":{},"injectables/TransferService.html":{},"classes/TypeOrmExceptionFilter.html":{},"injectables/TypesOrmPostgresConfigService.html":{},"controllers/UserController.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/variables.html":{}}}],["math.floor(math.random",{"_index":202,"title":{},"body":{"entities/AccountEntity.html":{}}}],["maxlength",{"_index":525,"title":{},"body":{"classes/CustomerDTO.html":{},"classes/CustomerUpdateDTO.html":{},"classes/TransferDTO.html":{}}}],["maxlength(30",{"_index":528,"title":{},"body":{"classes/CustomerDTO.html":{},"classes/CustomerUpdateDTO.html":{}}}],["maxlength(500",{"_index":527,"title":{},"body":{"classes/CustomerDTO.html":{},"classes/CustomerUpdateDTO.html":{},"classes/TransferDTO.html":{}}}],["mayúscula",{"_index":513,"title":{},"body":{"classes/CustomerDTO.html":{},"classes/CustomerUpdateDTO.html":{}}}],["memberof",{"_index":155,"title":{},"body":{"classes/AccountDTO.html":{},"injectables/AccountService.html":{},"classes/CustomerDTO.html":{},"injectables/CustomerService.html":{},"classes/CustomerUpdateDTO.html":{},"classes/DataRangeDTO.html":{},"classes/DepositDTO.html":{},"injectables/DepositService.html":{},"classes/PaginationDTO.html":{},"injectables/SecurityService.html":{},"classes/SignDTO.html":{},"classes/TransferDTO.html":{},"injectables/TransferService.html":{}}}],["menos",{"_index":511,"title":{},"body":{"classes/CustomerDTO.html":{},"classes/CustomerUpdateDTO.html":{}}}],["message",{"_index":1141,"title":{},"body":{"classes/TypeOrmExceptionFilter.html":{},"index.html":{}}}],["metadata",{"_index":924,"title":{},"body":{"injectables/PipesPipe.html":{},"dependencies.html":{}}}],["methods",{"_index":10,"title":{},"body":{"controllers/AccountController.html":{},"injectables/AccountRepository.html":{},"interfaces/AccountRepositoryInterface.html":{},"injectables/AccountService.html":{},"injectables/AccountTypeRepository.html":{},"interfaces/AccountTypeRepositoryInterface.html":{},"modules/AppModule.html":{},"interfaces/BaseRepositoryInterface.html":{},"injectables/CustomerRepository.html":{},"interfaces/CustomerRepositoryInterface.html":{},"injectables/CustomerService.html":{},"controllers/DepositController.html":{},"injectables/DepositRepository.html":{},"interfaces/DepositRepositoryInterface.html":{},"injectables/DepositService.html":{},"injectables/DocumentTypeRepository.html":{},"interfaces/DocumentTypeRepositoryInterface.html":{},"classes/ExceptionFiltersFilter.html":{},"guards/GuardsGuard.html":{},"injectables/InterceptorsInterceptor.html":{},"injectables/MiddlewaresMiddleware.html":{},"injectables/PipesPipe.html":{},"controllers/SecurityController.html":{},"injectables/SecurityService.html":{},"controllers/TransferController.html":{},"injectables/TransferRepository.html":{},"interfaces/TransferRepositoryInterface.html":{},"injectables/TransferService.html":{},"classes/TypeOrmExceptionFilter.html":{},"injectables/TypesOrmPostgresConfigService.html":{},"controllers/UserController.html":{}}}],["middlewareconsumer",{"_index":431,"title":{},"body":{"modules/AppModule.html":{}}}],["middlewaresmiddleware",{"_index":451,"title":{"injectables/MiddlewaresMiddleware.html":{}},"body":{"modules/AppModule.html":{},"injectables/MiddlewaresMiddleware.html":{},"coverage.html":{}}}],["minlength",{"_index":526,"title":{},"body":{"classes/CustomerDTO.html":{},"classes/CustomerUpdateDTO.html":{}}}],["minlength(8",{"_index":533,"title":{},"body":{"classes/CustomerDTO.html":{},"classes/CustomerUpdateDTO.html":{}}}],["minúscula",{"_index":514,"title":{},"body":{"classes/CustomerDTO.html":{},"classes/CustomerUpdateDTO.html":{}}}],["miscellaneous",{"_index":1268,"title":{"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}},"body":{"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["missing",{"_index":1313,"title":{},"body":{"index.html":{}}}],["mode",{"_index":1294,"title":{},"body":{"index.html":{}}}],["models",{"_index":193,"title":{},"body":{"entities/AccountEntity.html":{},"entities/AccountTypeEntity.html":{},"entities/CustomerEntity.html":{},"entities/DepositEntity.html":{},"entities/DocumentTypeEntity.html":{},"entities/TransferEntity.html":{}}}],["module",{"_index":404,"title":{"modules/AppModule.html":{}},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["modules",{"_index":406,"title":{"modules.html":{}},"body":{"modules/AppModule.html":{},"modules.html":{}}}],["monto",{"_index":331,"title":{},"body":{"injectables/AccountService.html":{},"classes/DepositDTO.html":{},"classes/TransferDTO.html":{}}}],["motivo",{"_index":1045,"title":{},"body":{"classes/TransferDTO.html":{}}}],["máximo",{"_index":682,"title":{},"body":{"classes/CustomerUpdateDTO.html":{},"classes/TransferDTO.html":{}}}],["mínimo",{"_index":517,"title":{},"body":{"classes/CustomerDTO.html":{},"classes/CustomerUpdateDTO.html":{}}}],["name",{"_index":35,"title":{},"body":{"controllers/AccountController.html":{},"entities/AccountEntity.html":{},"injectables/AccountRepository.html":{},"interfaces/AccountRepositoryInterface.html":{},"injectables/AccountService.html":{},"entities/AccountTypeEntity.html":{},"interfaces/AccountTypeModel.html":{},"injectables/AccountTypeRepository.html":{},"interfaces/AccountTypeRepositoryInterface.html":{},"modules/AppModule.html":{},"interfaces/BaseRepositoryInterface.html":{},"entities/CustomerEntity.html":{},"injectables/CustomerRepository.html":{},"interfaces/CustomerRepositoryInterface.html":{},"injectables/CustomerService.html":{},"controllers/DepositController.html":{},"entities/DepositEntity.html":{},"injectables/DepositRepository.html":{},"interfaces/DepositRepositoryInterface.html":{},"injectables/DepositService.html":{},"entities/DocumentTypeEntity.html":{},"interfaces/DocumentTypeModel.html":{},"injectables/DocumentTypeRepository.html":{},"interfaces/DocumentTypeRepositoryInterface.html":{},"classes/ExceptionFiltersFilter.html":{},"guards/GuardsGuard.html":{},"injectables/InterceptorsInterceptor.html":{},"injectables/MiddlewaresMiddleware.html":{},"injectables/PipesPipe.html":{},"controllers/SecurityController.html":{},"injectables/SecurityService.html":{},"controllers/TransferController.html":{},"entities/TransferEntity.html":{},"injectables/TransferRepository.html":{},"interfaces/TransferRepositoryInterface.html":{},"injectables/TransferService.html":{},"classes/TypeOrmExceptionFilter.html":{},"injectables/TypesOrmPostgresConfigService.html":{},"controllers/UserController.html":{}}}],["nest",{"_index":1282,"title":{},"body":{"index.html":{}}}],["nestinterceptor",{"_index":896,"title":{},"body":{"injectables/InterceptorsInterceptor.html":{}}}],["nestjs/common",{"_index":80,"title":{},"body":{"controllers/AccountController.html":{},"injectables/AccountRepository.html":{},"injectables/AccountService.html":{},"injectables/AccountTypeRepository.html":{},"modules/AppModule.html":{},"injectables/CustomerRepository.html":{},"injectables/CustomerService.html":{},"controllers/DepositController.html":{},"injectables/DepositRepository.html":{},"injectables/DepositService.html":{},"injectables/DocumentTypeRepository.html":{},"classes/ExceptionFiltersFilter.html":{},"guards/GuardsGuard.html":{},"injectables/InterceptorsInterceptor.html":{},"injectables/MiddlewaresMiddleware.html":{},"injectables/PipesPipe.html":{},"controllers/SecurityController.html":{},"injectables/SecurityService.html":{},"controllers/TransferController.html":{},"injectables/TransferRepository.html":{},"injectables/TransferService.html":{},"classes/TypeOrmExceptionFilter.html":{},"injectables/TypesOrmPostgresConfigService.html":{},"controllers/UserController.html":{},"dependencies.html":{}}}],["nestjs/common/exceptions",{"_index":334,"title":{},"body":{"injectables/AccountService.html":{}}}],["nestjs/config",{"_index":436,"title":{},"body":{"modules/AppModule.html":{},"injectables/TypesOrmPostgresConfigService.html":{},"dependencies.html":{}}}],["nestjs/core",{"_index":438,"title":{},"body":{"modules/AppModule.html":{},"dependencies.html":{}}}],["nestjs/jwt",{"_index":440,"title":{},"body":{"modules/AppModule.html":{},"guards/GuardsGuard.html":{},"injectables/SecurityService.html":{},"dependencies.html":{}}}],["nestjs/platform",{"_index":1255,"title":{},"body":{"dependencies.html":{}}}],["nestjs/typeorm",{"_index":250,"title":{},"body":{"injectables/AccountRepository.html":{},"injectables/AccountTypeRepository.html":{},"modules/AppModule.html":{},"injectables/CustomerRepository.html":{},"injectables/DepositRepository.html":{},"injectables/DocumentTypeRepository.html":{},"injectables/TransferRepository.html":{},"injectables/TypesOrmPostgresConfigService.html":{},"dependencies.html":{}}}],["nestmiddleware",{"_index":906,"title":{},"body":{"injectables/MiddlewaresMiddleware.html":{}}}],["nestmodule",{"_index":434,"title":{},"body":{"modules/AppModule.html":{}}}],["new",{"_index":258,"title":{},"body":{"injectables/AccountRepository.html":{},"injectables/AccountService.html":{},"injectables/AccountTypeRepository.html":{},"injectables/CustomerRepository.html":{},"injectables/CustomerService.html":{},"injectables/DepositRepository.html":{},"injectables/DepositService.html":{},"injectables/DocumentTypeRepository.html":{},"injectables/SecurityService.html":{},"injectables/TransferRepository.html":{},"injectables/TransferService.html":{},"classes/TypeOrmExceptionFilter.html":{},"coverage.html":{}}}],["newaccount",{"_index":274,"title":{},"body":{"injectables/AccountRepository.html":{},"injectables/AccountService.html":{},"injectables/DepositService.html":{},"injectables/SecurityService.html":{}}}],["newaccount.accounttype",{"_index":339,"title":{},"body":{"injectables/AccountService.html":{}}}],["newaccount.accounttypeid",{"_index":987,"title":{},"body":{"injectables/SecurityService.html":{}}}],["newaccount.balance",{"_index":353,"title":{},"body":{"injectables/AccountService.html":{},"injectables/DepositService.html":{}}}],["newaccount.customer",{"_index":336,"title":{},"body":{"injectables/AccountService.html":{}}}],["newaccount.customerid",{"_index":986,"title":{},"body":{"injectables/SecurityService.html":{}}}],["newaccount.deletedat",{"_index":276,"title":{},"body":{"injectables/AccountRepository.html":{}}}],["newaccount.state",{"_index":360,"title":{},"body":{"injectables/AccountService.html":{}}}],["newarray",{"_index":806,"title":{},"body":{"injectables/DepositService.html":{},"injectables/TransferService.html":{}}}],["newarray).filter",{"_index":810,"title":{},"body":{"injectables/DepositService.html":{},"injectables/TransferService.html":{}}}],["newcustomer",{"_index":594,"title":{},"body":{"injectables/CustomerRepository.html":{},"injectables/CustomerService.html":{},"injectables/SecurityService.html":{}}}],["newcustomer(customer",{"_index":626,"title":{},"body":{"injectables/CustomerService.html":{}}}],["newcustomer.deletedat",{"_index":597,"title":{},"body":{"injectables/CustomerRepository.html":{}}}],["newcustomer.document",{"_index":650,"title":{},"body":{"injectables/CustomerService.html":{},"injectables/SecurityService.html":{}}}],["newcustomer.documenttype",{"_index":649,"title":{},"body":{"injectables/CustomerService.html":{},"injectables/SecurityService.html":{}}}],["newcustomer.email",{"_index":654,"title":{},"body":{"injectables/CustomerService.html":{},"injectables/SecurityService.html":{}}}],["newcustomer.fullname",{"_index":652,"title":{},"body":{"injectables/CustomerService.html":{},"injectables/SecurityService.html":{}}}],["newcustomer.password",{"_index":658,"title":{},"body":{"injectables/CustomerService.html":{},"injectables/SecurityService.html":{}}}],["newcustomer.phone",{"_index":656,"title":{},"body":{"injectables/CustomerService.html":{},"injectables/SecurityService.html":{}}}],["newdeposit",{"_index":772,"title":{},"body":{"injectables/DepositRepository.html":{}}}],["newdeposit.deletedat",{"_index":775,"title":{},"body":{"injectables/DepositRepository.html":{}}}],["newtransfer",{"_index":1080,"title":{},"body":{"injectables/TransferRepository.html":{},"injectables/TransferService.html":{}}}],["newtransfer.amount",{"_index":1114,"title":{},"body":{"injectables/TransferService.html":{}}}],["newtransfer.datetime",{"_index":1122,"title":{},"body":{"injectables/TransferService.html":{}}}],["newtransfer.deletedat",{"_index":1083,"title":{},"body":{"injectables/TransferRepository.html":{}}}],["newtransfer.income",{"_index":1112,"title":{},"body":{"injectables/TransferService.html":{}}}],["newtransfer.outcome",{"_index":1113,"title":{},"body":{"injectables/TransferService.html":{}}}],["newtransfer.reason",{"_index":1115,"title":{},"body":{"injectables/TransferService.html":{}}}],["next",{"_index":893,"title":{},"body":{"injectables/InterceptorsInterceptor.html":{},"injectables/MiddlewaresMiddleware.html":{}}}],["next.handle",{"_index":897,"title":{},"body":{"injectables/InterceptorsInterceptor.html":{}}}],["nextfunction",{"_index":903,"title":{},"body":{"injectables/MiddlewaresMiddleware.html":{}}}],["nico",{"_index":145,"title":{},"body":{"classes/AccountDTO.html":{},"classes/CustomerDTO.html":{}}}],["node.js",{"_index":1275,"title":{},"body":{"index.html":{}}}],["nombre",{"_index":502,"title":{},"body":{"classes/CustomerDTO.html":{},"classes/CustomerUpdateDTO.html":{}}}],["note",{"_index":1326,"title":{},"body":{"index.html":{}}}],["notfoundexception",{"_index":248,"title":{},"body":{"injectables/AccountRepository.html":{},"injectables/AccountTypeRepository.html":{},"injectables/CustomerRepository.html":{},"injectables/CustomerService.html":{},"injectables/DepositRepository.html":{},"injectables/DocumentTypeRepository.html":{},"injectables/SecurityService.html":{},"injectables/TransferRepository.html":{},"injectables/TransferService.html":{}}}],["notfoundexception(`el",{"_index":259,"title":{},"body":{"injectables/AccountRepository.html":{},"injectables/AccountTypeRepository.html":{},"injectables/CustomerRepository.html":{},"injectables/DepositRepository.html":{},"injectables/DocumentTypeRepository.html":{},"injectables/TransferRepository.html":{}}}],["notfoundexception(`fondos",{"_index":1124,"title":{},"body":{"injectables/TransferService.html":{}}}],["notfoundexception(`no",{"_index":603,"title":{},"body":{"injectables/CustomerRepository.html":{}}}],["npm",{"_index":1287,"title":{},"body":{"index.html":{}}}],["nullable",{"_index":178,"title":{},"body":{"entities/AccountEntity.html":{},"entities/CustomerEntity.html":{},"entities/DepositEntity.html":{},"entities/TransferEntity.html":{}}}],["number",{"_index":110,"title":{},"body":{"controllers/AccountController.html":{},"entities/AccountEntity.html":{},"interfaces/AccountModel.html":{},"injectables/AccountService.html":{},"entities/CustomerEntity.html":{},"interfaces/CustomerModel.html":{},"classes/DataRangeDTO.html":{},"interfaces/DataRangeModel.html":{},"entities/DepositEntity.html":{},"interfaces/DepositModel.html":{},"injectables/DepositRepository.html":{},"interfaces/DepositRepositoryInterface.html":{},"classes/PaginationDTO.html":{},"interfaces/PaginationModel.html":{},"entities/TransferEntity.html":{},"interfaces/TransferModel.html":{},"injectables/TransferRepository.html":{},"interfaces/TransferRepositoryInterface.html":{},"classes/TypeOrmExceptionFilter.html":{}}}],["number(amount",{"_index":358,"title":{},"body":{"injectables/AccountService.html":{}}}],["number(datarange.startamount",{"_index":813,"title":{},"body":{"injectables/DepositService.html":{},"injectables/TransferService.html":{}}}],["number(deposit.amount",{"_index":798,"title":{},"body":{"injectables/DepositService.html":{}}}],["number(income.balance",{"_index":1120,"title":{},"body":{"injectables/TransferService.html":{}}}],["number(newaccount.balance",{"_index":801,"title":{},"body":{"injectables/DepositService.html":{}}}],["number(outcome.balance",{"_index":1117,"title":{},"body":{"injectables/TransferService.html":{}}}],["number(transfer.amount",{"_index":1111,"title":{},"body":{"injectables/TransferService.html":{}}}],["numeric",{"_index":171,"title":{},"body":{"entities/AccountEntity.html":{},"entities/DepositEntity.html":{},"entities/TransferEntity.html":{}}}],["número",{"_index":493,"title":{},"body":{"classes/CustomerDTO.html":{},"classes/CustomerUpdateDTO.html":{},"classes/DataRangeDTO.html":{},"classes/DepositDTO.html":{},"classes/PaginationDTO.html":{},"classes/TransferDTO.html":{}}}],["o",{"_index":701,"title":{},"body":{"classes/DataRangeDTO.html":{},"classes/TransferDTO.html":{}}}],["object",{"_index":136,"title":{},"body":{"classes/AccountDTO.html":{},"classes/CustomerDTO.html":{},"classes/CustomerUpdateDTO.html":{},"classes/DataRangeDTO.html":{},"classes/DepositDTO.html":{},"classes/PaginationDTO.html":{},"classes/SignDTO.html":{},"classes/TransferDTO.html":{},"miscellaneous/variables.html":{}}}],["objeto",{"_index":702,"title":{},"body":{"classes/DataRangeDTO.html":{}}}],["observable",{"_index":874,"title":{},"body":{"guards/GuardsGuard.html":{},"injectables/InterceptorsInterceptor.html":{}}}],["obtener",{"_index":317,"title":{},"body":{"injectables/AccountService.html":{},"injectables/CustomerService.html":{},"injectables/DepositService.html":{},"injectables/TransferService.html":{}}}],["ocurri",{"_index":1149,"title":{},"body":{"classes/TypeOrmExceptionFilter.html":{}}}],["optional",{"_index":36,"title":{},"body":{"controllers/AccountController.html":{},"entities/AccountEntity.html":{},"interfaces/AccountModel.html":{},"injectables/AccountRepository.html":{},"interfaces/AccountRepositoryInterface.html":{},"injectables/AccountService.html":{},"injectables/AccountTypeRepository.html":{},"interfaces/AccountTypeRepositoryInterface.html":{},"modules/AppModule.html":{},"interfaces/BaseRepositoryInterface.html":{},"entities/CustomerEntity.html":{},"interfaces/CustomerModel.html":{},"injectables/CustomerRepository.html":{},"interfaces/CustomerRepositoryInterface.html":{},"injectables/CustomerService.html":{},"classes/DataRangeDTO.html":{},"interfaces/DataRangeModel.html":{},"controllers/DepositController.html":{},"entities/DepositEntity.html":{},"interfaces/DepositModel.html":{},"injectables/DepositRepository.html":{},"interfaces/DepositRepositoryInterface.html":{},"injectables/DepositService.html":{},"injectables/DocumentTypeRepository.html":{},"interfaces/DocumentTypeRepositoryInterface.html":{},"classes/ExceptionFiltersFilter.html":{},"guards/GuardsGuard.html":{},"injectables/InterceptorsInterceptor.html":{},"injectables/MiddlewaresMiddleware.html":{},"injectables/PipesPipe.html":{},"controllers/SecurityController.html":{},"injectables/SecurityService.html":{},"controllers/TransferController.html":{},"entities/TransferEntity.html":{},"interfaces/TransferModel.html":{},"injectables/TransferRepository.html":{},"interfaces/TransferRepositoryInterface.html":{},"injectables/TransferService.html":{},"classes/TypeOrmExceptionFilter.html":{},"injectables/TypesOrmPostgresConfigService.html":{},"controllers/UserController.html":{}}}],["origen",{"_index":1042,"title":{},"body":{"classes/TransferDTO.html":{}}}],["orm",{"_index":1159,"title":{},"body":{"injectables/TypesOrmPostgresConfigService.html":{},"coverage.html":{}}}],["out",{"_index":423,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["outcome",{"_index":1048,"title":{},"body":{"entities/TransferEntity.html":{},"interfaces/TransferModel.html":{},"injectables/TransferRepository.html":{},"injectables/TransferService.html":{}}}],["outcome.balance",{"_index":1110,"title":{},"body":{"injectables/TransferService.html":{}}}],["outcomeid",{"_index":1036,"title":{},"body":{"classes/TransferDTO.html":{}}}],["overview",{"_index":1337,"title":{"overview.html":{}},"body":{"overview.html":{}}}],["package",{"_index":1251,"title":{"dependencies.html":{},"properties.html":{}},"body":{}}],["page",{"_index":914,"title":{},"body":{"classes/PaginationDTO.html":{},"interfaces/PaginationModel.html":{}}}],["paginación",{"_index":913,"title":{},"body":{"classes/PaginationDTO.html":{}}}],["pagination",{"_index":726,"title":{},"body":{"controllers/DepositController.html":{},"injectables/DepositService.html":{},"controllers/TransferController.html":{},"injectables/TransferService.html":{}}}],["paginationdto",{"_index":721,"title":{"classes/PaginationDTO.html":{}},"body":{"controllers/DepositController.html":{},"injectables/DepositService.html":{},"classes/PaginationDTO.html":{},"controllers/TransferController.html":{},"coverage.html":{}}}],["paginationmodel",{"_index":805,"title":{"interfaces/PaginationModel.html":{}},"body":{"injectables/DepositService.html":{},"interfaces/PaginationModel.html":{},"injectables/TransferService.html":{},"coverage.html":{}}}],["para",{"_index":137,"title":{},"body":{"classes/AccountDTO.html":{},"classes/CustomerDTO.html":{},"classes/CustomerUpdateDTO.html":{},"classes/DataRangeDTO.html":{},"classes/DepositDTO.html":{},"classes/PaginationDTO.html":{},"classes/SignDTO.html":{},"classes/TransferDTO.html":{}}}],["param",{"_index":76,"title":{},"body":{"controllers/AccountController.html":{},"injectables/AccountService.html":{},"injectables/CustomerService.html":{},"controllers/DepositController.html":{},"injectables/DepositService.html":{},"injectables/SecurityService.html":{},"controllers/TransferController.html":{},"injectables/TransferService.html":{},"controllers/UserController.html":{}}}],["param('email",{"_index":1208,"title":{},"body":{"controllers/UserController.html":{}}}],["param('id",{"_index":108,"title":{},"body":{"controllers/AccountController.html":{},"controllers/UserController.html":{}}}],["parameters",{"_index":34,"title":{},"body":{"controllers/AccountController.html":{},"injectables/AccountRepository.html":{},"interfaces/AccountRepositoryInterface.html":{},"injectables/AccountService.html":{},"injectables/AccountTypeRepository.html":{},"interfaces/AccountTypeRepositoryInterface.html":{},"modules/AppModule.html":{},"interfaces/BaseRepositoryInterface.html":{},"injectables/CustomerRepository.html":{},"interfaces/CustomerRepositoryInterface.html":{},"injectables/CustomerService.html":{},"controllers/DepositController.html":{},"injectables/DepositRepository.html":{},"interfaces/DepositRepositoryInterface.html":{},"injectables/DepositService.html":{},"injectables/DocumentTypeRepository.html":{},"interfaces/DocumentTypeRepositoryInterface.html":{},"classes/ExceptionFiltersFilter.html":{},"guards/GuardsGuard.html":{},"injectables/InterceptorsInterceptor.html":{},"injectables/MiddlewaresMiddleware.html":{},"injectables/PipesPipe.html":{},"controllers/SecurityController.html":{},"injectables/SecurityService.html":{},"controllers/TransferController.html":{},"injectables/TransferRepository.html":{},"interfaces/TransferRepositoryInterface.html":{},"injectables/TransferService.html":{},"classes/TypeOrmExceptionFilter.html":{},"injectables/TypesOrmPostgresConfigService.html":{},"controllers/UserController.html":{}}}],["passport",{"_index":1260,"title":{},"body":{"dependencies.html":{}}}],["password",{"_index":466,"title":{},"body":{"modules/AppModule.html":{},"classes/CustomerDTO.html":{},"entities/CustomerEntity.html":{},"interfaces/CustomerModel.html":{},"injectables/CustomerRepository.html":{},"interfaces/CustomerRepositoryInterface.html":{},"classes/CustomerUpdateDTO.html":{},"classes/SignDTO.html":{},"injectables/TypesOrmPostgresConfigService.html":{}}}],["payload",{"_index":885,"title":{},"body":{"guards/GuardsGuard.html":{},"injectables/SecurityService.html":{}}}],["pg",{"_index":1262,"title":{},"body":{"dependencies.html":{}}}],["phone",{"_index":491,"title":{},"body":{"classes/CustomerDTO.html":{},"entities/CustomerEntity.html":{},"interfaces/CustomerModel.html":{},"injectables/CustomerRepository.html":{},"interfaces/CustomerRepositoryInterface.html":{},"classes/CustomerUpdateDTO.html":{}}}],["pipespipe",{"_index":921,"title":{"injectables/PipesPipe.html":{}},"body":{"injectables/PipesPipe.html":{},"coverage.html":{}}}],["pipetransform",{"_index":927,"title":{},"body":{"injectables/PipesPipe.html":{}}}],["please",{"_index":1321,"title":{},"body":{"index.html":{}}}],["port",{"_index":462,"title":{},"body":{"modules/AppModule.html":{},"injectables/TypesOrmPostgresConfigService.html":{}}}],["post",{"_index":77,"title":{},"body":{"controllers/AccountController.html":{},"controllers/DepositController.html":{},"controllers/SecurityController.html":{},"controllers/TransferController.html":{},"controllers/UserController.html":{}}}],["post(':id",{"_index":107,"title":{},"body":{"controllers/AccountController.html":{}}}],["post(':id')@useguards(guardsguard",{"_index":31,"title":{},"body":{"controllers/AccountController.html":{}}}],["post('all",{"_index":719,"title":{},"body":{"controllers/DepositController.html":{}}}],["post('history",{"_index":1031,"title":{},"body":{"controllers/TransferController.html":{}}}],["post('history')@useguards(guardsguard",{"_index":1008,"title":{},"body":{"controllers/TransferController.html":{}}}],["post('income",{"_index":1027,"title":{},"body":{"controllers/TransferController.html":{}}}],["post('income')@useguards(guardsguard",{"_index":1011,"title":{},"body":{"controllers/TransferController.html":{}}}],["post('outcome",{"_index":1029,"title":{},"body":{"controllers/TransferController.html":{}}}],["post('outcome')@useguards(guardsguard",{"_index":1014,"title":{},"body":{"controllers/TransferController.html":{}}}],["post('sign",{"_index":938,"title":{},"body":{"controllers/SecurityController.html":{}}}],["post()@useguards(guardsguard",{"_index":51,"title":{},"body":{"controllers/AccountController.html":{},"controllers/TransferController.html":{}}}],["postgres",{"_index":459,"title":{},"body":{"modules/AppModule.html":{},"injectables/TypesOrmPostgresConfigService.html":{},"coverage.html":{}}}],["prefix",{"_index":7,"title":{},"body":{"controllers/AccountController.html":{},"controllers/DepositController.html":{},"controllers/SecurityController.html":{},"controllers/TransferController.html":{},"controllers/UserController.html":{}}}],["presentation/controllers",{"_index":450,"title":{},"body":{"modules/AppModule.html":{}}}],["presentation/middlewares/middlewares.middleware",{"_index":452,"title":{},"body":{"modules/AppModule.html":{}}}],["primary",{"_index":185,"title":{},"body":{"entities/AccountEntity.html":{},"entities/AccountTypeEntity.html":{},"entities/CustomerEntity.html":{},"entities/DepositEntity.html":{},"entities/DocumentTypeEntity.html":{},"entities/TransferEntity.html":{}}}],["private",{"_index":94,"title":{},"body":{"controllers/AccountController.html":{},"injectables/AccountRepository.html":{},"injectables/AccountService.html":{},"injectables/AccountTypeRepository.html":{},"injectables/CustomerRepository.html":{},"injectables/CustomerService.html":{},"injectables/DepositRepository.html":{},"injectables/DepositService.html":{},"injectables/DocumentTypeRepository.html":{},"injectables/SecurityService.html":{},"injectables/TransferRepository.html":{},"injectables/TransferService.html":{}}}],["process.env.bank_id",{"_index":200,"title":{},"body":{"entities/AccountEntity.html":{}}}],["process.env.db_host",{"_index":461,"title":{},"body":{"modules/AppModule.html":{}}}],["process.env.db_name",{"_index":469,"title":{},"body":{"modules/AppModule.html":{}}}],["process.env.db_password",{"_index":467,"title":{},"body":{"modules/AppModule.html":{}}}],["process.env.db_user",{"_index":465,"title":{},"body":{"modules/AppModule.html":{}}}],["process.env.jwt_secret",{"_index":1352,"title":{},"body":{"miscellaneous/variables.html":{}}}],["production",{"_index":1296,"title":{},"body":{"index.html":{}}}],["progressive",{"_index":1274,"title":{},"body":{"index.html":{}}}],["promise",{"_index":39,"title":{},"body":{"controllers/AccountController.html":{},"injectables/AccountRepository.html":{},"interfaces/AccountRepositoryInterface.html":{},"injectables/AccountService.html":{},"injectables/AccountTypeRepository.html":{},"interfaces/AccountTypeRepositoryInterface.html":{},"interfaces/BaseRepositoryInterface.html":{},"injectables/CustomerRepository.html":{},"interfaces/CustomerRepositoryInterface.html":{},"injectables/CustomerService.html":{},"controllers/DepositController.html":{},"injectables/DepositRepository.html":{},"interfaces/DepositRepositoryInterface.html":{},"injectables/DepositService.html":{},"injectables/DocumentTypeRepository.html":{},"interfaces/DocumentTypeRepositoryInterface.html":{},"guards/GuardsGuard.html":{},"controllers/TransferController.html":{},"injectables/TransferRepository.html":{},"interfaces/TransferRepositoryInterface.html":{},"injectables/TransferService.html":{},"controllers/UserController.html":{}}}],["properly",{"_index":1331,"title":{},"body":{"index.html":{}}}],["properties",{"_index":140,"title":{"properties.html":{}},"body":{"classes/AccountDTO.html":{},"entities/AccountEntity.html":{},"interfaces/AccountModel.html":{},"entities/AccountTypeEntity.html":{},"interfaces/AccountTypeModel.html":{},"classes/CustomerDTO.html":{},"entities/CustomerEntity.html":{},"interfaces/CustomerModel.html":{},"classes/CustomerUpdateDTO.html":{},"classes/DataRangeDTO.html":{},"interfaces/DataRangeModel.html":{},"classes/DepositDTO.html":{},"entities/DepositEntity.html":{},"interfaces/DepositModel.html":{},"entities/DocumentTypeEntity.html":{},"interfaces/DocumentTypeModel.html":{},"classes/PaginationDTO.html":{},"interfaces/PaginationModel.html":{},"classes/SignDTO.html":{},"classes/TransferDTO.html":{},"entities/TransferEntity.html":{},"interfaces/TransferModel.html":{},"properties.html":{}}}],["provide",{"_index":473,"title":{},"body":{"modules/AppModule.html":{}}}],["providers",{"_index":411,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["proyecto",{"_index":1305,"title":{},"body":{"index.html":{}}}],["public",{"_index":195,"title":{},"body":{"entities/AccountEntity.html":{},"entities/AccountTypeEntity.html":{},"entities/CustomerEntity.html":{},"entities/DepositEntity.html":{},"entities/DocumentTypeEntity.html":{},"entities/TransferEntity.html":{}}}],["puede",{"_index":700,"title":{},"body":{"classes/DataRangeDTO.html":{}}}],["put",{"_index":78,"title":{},"body":{"controllers/AccountController.html":{},"controllers/UserController.html":{}}}],["put(':id",{"_index":47,"title":{},"body":{"controllers/AccountController.html":{},"controllers/UserController.html":{}}}],["put('accountype/:id",{"_index":44,"title":{},"body":{"controllers/AccountController.html":{}}}],["put('removebalance/:id')@useguards(guardsguard",{"_index":71,"title":{},"body":{"controllers/AccountController.html":{}}}],["put('unsuscribe/:id",{"_index":1197,"title":{},"body":{"controllers/UserController.html":{}}}],["página",{"_index":918,"title":{},"body":{"classes/PaginationDTO.html":{}}}],["que",{"_index":678,"title":{},"body":{"classes/CustomerUpdateDTO.html":{},"classes/DataRangeDTO.html":{},"classes/DepositDTO.html":{},"classes/PaginationDTO.html":{},"classes/TransferDTO.html":{}}}],["range.dto.ts",{"_index":689,"title":{},"body":{"classes/DataRangeDTO.html":{},"coverage.html":{}}}],["range.dto.ts:20",{"_index":705,"title":{},"body":{"classes/DataRangeDTO.html":{}}}],["range.dto.ts:32",{"_index":698,"title":{},"body":{"classes/DataRangeDTO.html":{}}}],["range.dto.ts:44",{"_index":703,"title":{},"body":{"classes/DataRangeDTO.html":{}}}],["range.dto.ts:56",{"_index":695,"title":{},"body":{"classes/DataRangeDTO.html":{}}}],["range.model.ts",{"_index":708,"title":{},"body":{"interfaces/DataRangeModel.html":{},"coverage.html":{}}}],["rango",{"_index":690,"title":{},"body":{"classes/DataRangeDTO.html":{}}}],["razón",{"_index":1044,"title":{},"body":{"classes/TransferDTO.html":{}}}],["readonly",{"_index":95,"title":{},"body":{"controllers/AccountController.html":{},"injectables/AccountRepository.html":{},"injectables/AccountService.html":{},"injectables/AccountTypeRepository.html":{},"injectables/CustomerRepository.html":{},"injectables/CustomerService.html":{},"controllers/DepositController.html":{},"injectables/DepositRepository.html":{},"injectables/DepositService.html":{},"injectables/DocumentTypeRepository.html":{},"controllers/SecurityController.html":{},"injectables/SecurityService.html":{},"controllers/TransferController.html":{},"injectables/TransferRepository.html":{},"injectables/TransferService.html":{},"injectables/TypesOrmPostgresConfigService.html":{},"controllers/UserController.html":{}}}],["reason",{"_index":1037,"title":{},"body":{"classes/TransferDTO.html":{},"entities/TransferEntity.html":{},"interfaces/TransferModel.html":{}}}],["reflect",{"_index":1264,"title":{},"body":{"dependencies.html":{}}}],["regexp())@minlength(8",{"_index":505,"title":{},"body":{"classes/CustomerDTO.html":{},"classes/CustomerUpdateDTO.html":{}}}],["regexp(/^(?=.*\\d)(?=.*[a",{"_index":529,"title":{},"body":{"classes/CustomerDTO.html":{},"classes/CustomerUpdateDTO.html":{}}}],["register",{"_index":219,"title":{},"body":{"injectables/AccountRepository.html":{},"injectables/AccountTypeRepository.html":{},"interfaces/BaseRepositoryInterface.html":{},"injectables/CustomerRepository.html":{},"injectables/DepositRepository.html":{},"injectables/DocumentTypeRepository.html":{},"injectables/TransferRepository.html":{}}}],["register(entity",{"_index":242,"title":{},"body":{"injectables/AccountRepository.html":{},"injectables/AccountTypeRepository.html":{},"interfaces/BaseRepositoryInterface.html":{},"injectables/CustomerRepository.html":{},"injectables/DepositRepository.html":{},"injectables/DocumentTypeRepository.html":{},"injectables/TransferRepository.html":{}}}],["registeruser",{"_index":1180,"title":{},"body":{"controllers/UserController.html":{}}}],["registeruser(@body",{"_index":1210,"title":{},"body":{"controllers/UserController.html":{}}}],["registeruser(customer",{"_index":1194,"title":{},"body":{"controllers/UserController.html":{}}}],["relations",{"_index":280,"title":{},"body":{"injectables/AccountRepository.html":{},"injectables/DepositRepository.html":{},"injectables/TransferRepository.html":{}}}],["removebalance",{"_index":23,"title":{},"body":{"controllers/AccountController.html":{},"injectables/AccountService.html":{}}}],["removebalance(accountid",{"_index":322,"title":{},"body":{"injectables/AccountService.html":{}}}],["removebalance(id",{"_index":70,"title":{},"body":{"controllers/AccountController.html":{}}}],["remover",{"_index":324,"title":{},"body":{"injectables/AccountService.html":{}}}],["repositories",{"_index":967,"title":{},"body":{"injectables/SecurityService.html":{}}}],["repositories.interface.ts",{"_index":478,"title":{},"body":{"interfaces/BaseRepositoryInterface.html":{},"coverage.html":{}}}],["repositories.interface.ts:10",{"_index":481,"title":{},"body":{"interfaces/BaseRepositoryInterface.html":{}}}],["repositories.interface.ts:2",{"_index":483,"title":{},"body":{"interfaces/BaseRepositoryInterface.html":{}}}],["repositories.interface.ts:4",{"_index":484,"title":{},"body":{"interfaces/BaseRepositoryInterface.html":{}}}],["repositories.interface.ts:6",{"_index":479,"title":{},"body":{"interfaces/BaseRepositoryInterface.html":{}}}],["repositories.interface.ts:8",{"_index":480,"title":{},"body":{"interfaces/BaseRepositoryInterface.html":{}}}],["repository",{"_index":223,"title":{},"body":{"injectables/AccountRepository.html":{},"injectables/AccountTypeRepository.html":{},"injectables/CustomerRepository.html":{},"injectables/DepositRepository.html":{},"injectables/DocumentTypeRepository.html":{},"injectables/TransferRepository.html":{},"index.html":{}}}],["repository.interface.ts",{"_index":282,"title":{},"body":{"interfaces/AccountRepositoryInterface.html":{},"interfaces/AccountTypeRepositoryInterface.html":{},"interfaces/CustomerRepositoryInterface.html":{},"interfaces/DepositRepositoryInterface.html":{},"interfaces/DocumentTypeRepositoryInterface.html":{},"interfaces/TransferRepositoryInterface.html":{},"coverage.html":{}}}],["repository.interface.ts:11",{"_index":607,"title":{},"body":{"interfaces/CustomerRepositoryInterface.html":{}}}],["repository.interface.ts:12",{"_index":608,"title":{},"body":{"interfaces/CustomerRepositoryInterface.html":{}}}],["repository.interface.ts:13",{"_index":606,"title":{},"body":{"interfaces/CustomerRepositoryInterface.html":{}}}],["repository.interface.ts:14",{"_index":605,"title":{},"body":{"interfaces/CustomerRepositoryInterface.html":{},"interfaces/TransferRepositoryInterface.html":{}}}],["repository.interface.ts:6",{"_index":287,"title":{},"body":{"interfaces/AccountRepositoryInterface.html":{},"interfaces/AccountTypeRepositoryInterface.html":{},"interfaces/CustomerRepositoryInterface.html":{},"interfaces/DepositRepositoryInterface.html":{},"interfaces/DocumentTypeRepositoryInterface.html":{},"interfaces/TransferRepositoryInterface.html":{}}}],["repository.interface.ts:7",{"_index":286,"title":{},"body":{"interfaces/AccountRepositoryInterface.html":{},"interfaces/AccountTypeRepositoryInterface.html":{},"interfaces/CustomerRepositoryInterface.html":{},"interfaces/DepositRepositoryInterface.html":{},"interfaces/DocumentTypeRepositoryInterface.html":{},"interfaces/TransferRepositoryInterface.html":{}}}],["repository.interface.ts:8",{"_index":285,"title":{},"body":{"interfaces/AccountRepositoryInterface.html":{},"interfaces/TransferRepositoryInterface.html":{}}}],["representa",{"_index":679,"title":{},"body":{"classes/CustomerUpdateDTO.html":{},"classes/DataRangeDTO.html":{},"classes/DepositDTO.html":{},"classes/PaginationDTO.html":{},"classes/TransferDTO.html":{}}}],["representar",{"_index":138,"title":{},"body":{"classes/AccountDTO.html":{},"classes/CustomerDTO.html":{},"classes/DataRangeDTO.html":{},"classes/DepositDTO.html":{},"classes/TransferDTO.html":{}}}],["req",{"_index":905,"title":{},"body":{"injectables/MiddlewaresMiddleware.html":{}}}],["req.headers.authorization",{"_index":908,"title":{},"body":{"injectables/MiddlewaresMiddleware.html":{}}}],["req.headers['authorization",{"_index":910,"title":{},"body":{"injectables/MiddlewaresMiddleware.html":{}}}],["request",{"_index":876,"title":{},"body":{"guards/GuardsGuard.html":{},"injectables/MiddlewaresMiddleware.html":{}}}],["request.headers.authorization",{"_index":879,"title":{},"body":{"guards/GuardsGuard.html":{}}}],["request.user",{"_index":887,"title":{},"body":{"guards/GuardsGuard.html":{}}}],["res",{"_index":901,"title":{},"body":{"injectables/MiddlewaresMiddleware.html":{}}}],["reset",{"_index":422,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["response",{"_index":902,"title":{},"body":{"injectables/MiddlewaresMiddleware.html":{},"classes/TypeOrmExceptionFilter.html":{}}}],["response.status(customresponse.status).json(customresponse",{"_index":1157,"title":{},"body":{"classes/TypeOrmExceptionFilter.html":{}}}],["result",{"_index":268,"title":{},"body":{"injectables/AccountRepository.html":{},"injectables/AccountTypeRepository.html":{},"injectables/CustomerRepository.html":{},"injectables/DepositRepository.html":{},"injectables/DocumentTypeRepository.html":{},"injectables/TransferRepository.html":{}}}],["result.affected",{"_index":256,"title":{},"body":{"injectables/AccountRepository.html":{},"injectables/AccountTypeRepository.html":{},"injectables/CustomerRepository.html":{},"injectables/DepositRepository.html":{},"injectables/DocumentTypeRepository.html":{},"injectables/TransferRepository.html":{}}}],["result.id",{"_index":774,"title":{},"body":{"injectables/DepositRepository.html":{}}}],["result.length",{"_index":602,"title":{},"body":{"injectables/CustomerRepository.html":{}}}],["results",{"_index":129,"title":{},"body":{"controllers/AccountController.html":{},"classes/AccountDTO.html":{},"entities/AccountEntity.html":{},"interfaces/AccountModel.html":{},"injectables/AccountRepository.html":{},"interfaces/AccountRepositoryInterface.html":{},"injectables/AccountService.html":{},"entities/AccountTypeEntity.html":{},"interfaces/AccountTypeModel.html":{},"injectables/AccountTypeRepository.html":{},"interfaces/AccountTypeRepositoryInterface.html":{},"modules/AppModule.html":{},"interfaces/BaseRepositoryInterface.html":{},"classes/CustomerDTO.html":{},"entities/CustomerEntity.html":{},"interfaces/CustomerModel.html":{},"injectables/CustomerRepository.html":{},"interfaces/CustomerRepositoryInterface.html":{},"injectables/CustomerService.html":{},"classes/CustomerUpdateDTO.html":{},"classes/DataRangeDTO.html":{},"interfaces/DataRangeModel.html":{},"controllers/DepositController.html":{},"classes/DepositDTO.html":{},"entities/DepositEntity.html":{},"interfaces/DepositModel.html":{},"injectables/DepositRepository.html":{},"interfaces/DepositRepositoryInterface.html":{},"injectables/DepositService.html":{},"entities/DocumentTypeEntity.html":{},"interfaces/DocumentTypeModel.html":{},"injectables/DocumentTypeRepository.html":{},"interfaces/DocumentTypeRepositoryInterface.html":{},"classes/ExceptionFiltersFilter.html":{},"guards/GuardsGuard.html":{},"injectables/InterceptorsInterceptor.html":{},"injectables/MiddlewaresMiddleware.html":{},"classes/PaginationDTO.html":{},"interfaces/PaginationModel.html":{},"injectables/PipesPipe.html":{},"controllers/SecurityController.html":{},"injectables/SecurityService.html":{},"classes/SignDTO.html":{},"controllers/TransferController.html":{},"classes/TransferDTO.html":{},"entities/TransferEntity.html":{},"interfaces/TransferModel.html":{},"injectables/TransferRepository.html":{},"interfaces/TransferRepositoryInterface.html":{},"injectables/TransferService.html":{},"classes/TypeOrmExceptionFilter.html":{},"injectables/TypesOrmPostgresConfigService.html":{},"controllers/UserController.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/variables.html":{}}}],["retirar",{"_index":332,"title":{},"body":{"injectables/AccountService.html":{}}}],["return",{"_index":97,"title":{},"body":{"controllers/AccountController.html":{},"entities/AccountEntity.html":{},"injectables/AccountRepository.html":{},"injectables/AccountService.html":{},"injectables/AccountTypeRepository.html":{},"injectables/CustomerRepository.html":{},"injectables/CustomerService.html":{},"controllers/DepositController.html":{},"injectables/DepositRepository.html":{},"injectables/DepositService.html":{},"injectables/DocumentTypeRepository.html":{},"guards/GuardsGuard.html":{},"injectables/InterceptorsInterceptor.html":{},"injectables/PipesPipe.html":{},"controllers/SecurityController.html":{},"injectables/SecurityService.html":{},"controllers/TransferController.html":{},"injectables/TransferRepository.html":{},"injectables/TransferService.html":{},"injectables/TypesOrmPostgresConfigService.html":{},"controllers/UserController.html":{}}}],["returns",{"_index":38,"title":{},"body":{"controllers/AccountController.html":{},"injectables/AccountRepository.html":{},"interfaces/AccountRepositoryInterface.html":{},"injectables/AccountService.html":{},"injectables/AccountTypeRepository.html":{},"interfaces/AccountTypeRepositoryInterface.html":{},"modules/AppModule.html":{},"interfaces/BaseRepositoryInterface.html":{},"injectables/CustomerRepository.html":{},"interfaces/CustomerRepositoryInterface.html":{},"injectables/CustomerService.html":{},"controllers/DepositController.html":{},"injectables/DepositRepository.html":{},"interfaces/DepositRepositoryInterface.html":{},"injectables/DepositService.html":{},"injectables/DocumentTypeRepository.html":{},"interfaces/DocumentTypeRepositoryInterface.html":{},"classes/ExceptionFiltersFilter.html":{},"guards/GuardsGuard.html":{},"injectables/InterceptorsInterceptor.html":{},"injectables/MiddlewaresMiddleware.html":{},"injectables/PipesPipe.html":{},"controllers/SecurityController.html":{},"injectables/SecurityService.html":{},"controllers/TransferController.html":{},"injectables/TransferRepository.html":{},"interfaces/TransferRepositoryInterface.html":{},"injectables/TransferService.html":{},"classes/TypeOrmExceptionFilter.html":{},"injectables/TypesOrmPostgresConfigService.html":{},"controllers/UserController.html":{},"miscellaneous/functions.html":{}}}],["run",{"_index":1291,"title":{},"body":{"index.html":{}}}],["rxjs",{"_index":875,"title":{},"body":{"guards/GuardsGuard.html":{},"injectables/InterceptorsInterceptor.html":{},"dependencies.html":{}}}],["salida",{"_index":1104,"title":{},"body":{"injectables/TransferService.html":{}}}],["salir",{"_index":961,"title":{},"body":{"injectables/SecurityService.html":{}}}],["scalable",{"_index":1279,"title":{},"body":{"index.html":{}}}],["schema",{"_index":194,"title":{},"body":{"entities/AccountEntity.html":{},"entities/AccountTypeEntity.html":{},"entities/CustomerEntity.html":{},"entities/DepositEntity.html":{},"entities/DocumentTypeEntity.html":{},"entities/TransferEntity.html":{}}}],["secret",{"_index":456,"title":{},"body":{"modules/AppModule.html":{},"miscellaneous/variables.html":{}}}],["secretkey",{"_index":1353,"title":{},"body":{"miscellaneous/variables.html":{}}}],["security",{"_index":929,"title":{},"body":{"controllers/SecurityController.html":{}}}],["securitycontroller",{"_index":427,"title":{"controllers/SecurityController.html":{}},"body":{"modules/AppModule.html":{},"controllers/SecurityController.html":{},"coverage.html":{}}}],["securityservice",{"_index":418,"title":{"injectables/SecurityService.html":{}},"body":{"modules/AppModule.html":{},"controllers/SecurityController.html":{},"injectables/SecurityService.html":{},"coverage.html":{},"overview.html":{}}}],["select",{"_index":180,"title":{},"body":{"entities/AccountEntity.html":{},"entities/CustomerEntity.html":{},"entities/DepositEntity.html":{},"entities/TransferEntity.html":{}}}],["selecttransfer",{"_index":1001,"title":{},"body":{"controllers/TransferController.html":{},"injectables/TransferService.html":{}}}],["selecttransfer(@param('id",{"_index":1023,"title":{},"body":{"controllers/TransferController.html":{}}}],["selecttransfer(id",{"_index":1016,"title":{},"body":{"controllers/TransferController.html":{}}}],["selecttransfer(transferid",{"_index":1105,"title":{},"body":{"injectables/TransferService.html":{}}}],["ser",{"_index":676,"title":{},"body":{"classes/CustomerUpdateDTO.html":{},"classes/DataRangeDTO.html":{},"classes/DepositDTO.html":{},"classes/PaginationDTO.html":{},"classes/SignDTO.html":{},"classes/TransferDTO.html":{}}}],["server",{"_index":1152,"title":{},"body":{"classes/TypeOrmExceptionFilter.html":{},"index.html":{}}}],["services",{"_index":968,"title":{},"body":{"injectables/SecurityService.html":{}}}],["sesión",{"_index":993,"title":{},"body":{"classes/SignDTO.html":{}}}],["setmetadata('decorators",{"_index":1351,"title":{},"body":{"miscellaneous/variables.html":{}}}],["short",{"_index":1306,"title":{},"body":{"index.html":{}}}],["side",{"_index":1280,"title":{},"body":{"index.html":{}}}],["signdto",{"_index":937,"title":{"classes/SignDTO.html":{}},"body":{"controllers/SecurityController.html":{},"injectables/SecurityService.html":{},"classes/SignDTO.html":{},"coverage.html":{}}}],["signin",{"_index":931,"title":{},"body":{"controllers/SecurityController.html":{},"injectables/SecurityService.html":{}}}],["signin(@body",{"_index":947,"title":{},"body":{"controllers/SecurityController.html":{}}}],["signin(customer",{"_index":936,"title":{},"body":{"controllers/SecurityController.html":{}}}],["signin(user",{"_index":955,"title":{},"body":{"injectables/SecurityService.html":{}}}],["signout",{"_index":953,"title":{},"body":{"injectables/SecurityService.html":{}}}],["signout(jwt",{"_index":959,"title":{},"body":{"injectables/SecurityService.html":{}}}],["signup",{"_index":932,"title":{},"body":{"controllers/SecurityController.html":{},"injectables/SecurityService.html":{}}}],["signup(@body",{"_index":945,"title":{},"body":{"controllers/SecurityController.html":{}}}],["signup(customer",{"_index":940,"title":{},"body":{"controllers/SecurityController.html":{}}}],["signup(user",{"_index":962,"title":{},"body":{"injectables/SecurityService.html":{}}}],["sistema",{"_index":634,"title":{},"body":{"injectables/CustomerService.html":{},"injectables/SecurityService.html":{}}}],["slice(start",{"_index":814,"title":{},"body":{"injectables/DepositService.html":{},"injectables/TransferService.html":{}}}],["soft",{"_index":227,"title":{},"body":{"injectables/AccountRepository.html":{},"interfaces/BaseRepositoryInterface.html":{},"injectables/CustomerRepository.html":{},"injectables/DepositRepository.html":{},"injectables/TransferRepository.html":{}}}],["softdelete",{"_index":220,"title":{},"body":{"injectables/AccountRepository.html":{},"injectables/CustomerRepository.html":{},"injectables/DepositRepository.html":{},"injectables/TransferRepository.html":{}}}],["softdelete(id",{"_index":244,"title":{},"body":{"injectables/AccountRepository.html":{},"injectables/CustomerRepository.html":{},"injectables/DepositRepository.html":{},"injectables/TransferRepository.html":{}}}],["source",{"_index":4,"title":{},"body":{"controllers/AccountController.html":{},"classes/AccountDTO.html":{},"entities/AccountEntity.html":{},"interfaces/AccountModel.html":{},"injectables/AccountRepository.html":{},"interfaces/AccountRepositoryInterface.html":{},"injectables/AccountService.html":{},"entities/AccountTypeEntity.html":{},"interfaces/AccountTypeModel.html":{},"injectables/AccountTypeRepository.html":{},"interfaces/AccountTypeRepositoryInterface.html":{},"modules/AppModule.html":{},"interfaces/BaseRepositoryInterface.html":{},"classes/CustomerDTO.html":{},"entities/CustomerEntity.html":{},"interfaces/CustomerModel.html":{},"injectables/CustomerRepository.html":{},"interfaces/CustomerRepositoryInterface.html":{},"injectables/CustomerService.html":{},"classes/CustomerUpdateDTO.html":{},"classes/DataRangeDTO.html":{},"interfaces/DataRangeModel.html":{},"controllers/DepositController.html":{},"classes/DepositDTO.html":{},"entities/DepositEntity.html":{},"interfaces/DepositModel.html":{},"injectables/DepositRepository.html":{},"interfaces/DepositRepositoryInterface.html":{},"injectables/DepositService.html":{},"entities/DocumentTypeEntity.html":{},"interfaces/DocumentTypeModel.html":{},"injectables/DocumentTypeRepository.html":{},"interfaces/DocumentTypeRepositoryInterface.html":{},"classes/ExceptionFiltersFilter.html":{},"guards/GuardsGuard.html":{},"injectables/InterceptorsInterceptor.html":{},"injectables/MiddlewaresMiddleware.html":{},"classes/PaginationDTO.html":{},"interfaces/PaginationModel.html":{},"injectables/PipesPipe.html":{},"controllers/SecurityController.html":{},"injectables/SecurityService.html":{},"classes/SignDTO.html":{},"controllers/TransferController.html":{},"classes/TransferDTO.html":{},"entities/TransferEntity.html":{},"interfaces/TransferModel.html":{},"injectables/TransferRepository.html":{},"interfaces/TransferRepositoryInterface.html":{},"injectables/TransferService.html":{},"classes/TypeOrmExceptionFilter.html":{},"injectables/TypesOrmPostgresConfigService.html":{},"controllers/UserController.html":{}}}],["src/.../account.entity.ts",{"_index":1271,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../decorators.decorator.ts",{"_index":1348,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../main.ts",{"_index":1270,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../secret.ts",{"_index":1349,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/app.module.ts",{"_index":424,"title":{},"body":{"modules/AppModule.html":{}}}],["src/app.module.ts:92",{"_index":432,"title":{},"body":{"modules/AppModule.html":{}}}],["src/business/dtos",{"_index":81,"title":{},"body":{"controllers/AccountController.html":{},"injectables/AccountService.html":{},"injectables/CustomerService.html":{},"controllers/DepositController.html":{},"injectables/DepositService.html":{},"controllers/TransferController.html":{},"injectables/TransferService.html":{}}}],["src/business/dtos/account.dto.ts",{"_index":132,"title":{},"body":{"classes/AccountDTO.html":{},"coverage.html":{}}}],["src/business/dtos/account.dto.ts:23",{"_index":143,"title":{},"body":{"classes/AccountDTO.html":{}}}],["src/business/dtos/account.dto.ts:33",{"_index":149,"title":{},"body":{"classes/AccountDTO.html":{}}}],["src/business/dtos/customer.dto.ts",{"_index":486,"title":{},"body":{"classes/CustomerDTO.html":{},"coverage.html":{}}}],["src/business/dtos/customer.dto.ts:26",{"_index":495,"title":{},"body":{"classes/CustomerDTO.html":{}}}],["src/business/dtos/customer.dto.ts:36",{"_index":492,"title":{},"body":{"classes/CustomerDTO.html":{}}}],["src/business/dtos/customer.dto.ts:48",{"_index":501,"title":{},"body":{"classes/CustomerDTO.html":{}}}],["src/business/dtos/customer.dto.ts:58",{"_index":497,"title":{},"body":{"classes/CustomerDTO.html":{}}}],["src/business/dtos/customer.dto.ts:70",{"_index":521,"title":{},"body":{"classes/CustomerDTO.html":{}}}],["src/business/dtos/customer.dto.ts:83",{"_index":506,"title":{},"body":{"classes/CustomerDTO.html":{}}}],["src/business/dtos/data",{"_index":688,"title":{},"body":{"classes/DataRangeDTO.html":{},"coverage.html":{}}}],["src/business/dtos/deposit.dto.ts",{"_index":734,"title":{},"body":{"classes/DepositDTO.html":{},"coverage.html":{}}}],["src/business/dtos/deposit.dto.ts:20",{"_index":736,"title":{},"body":{"classes/DepositDTO.html":{}}}],["src/business/dtos/deposit.dto.ts:32",{"_index":737,"title":{},"body":{"classes/DepositDTO.html":{}}}],["src/business/dtos/pagination.dto.ts",{"_index":912,"title":{},"body":{"classes/PaginationDTO.html":{},"coverage.html":{}}}],["src/business/dtos/pagination.dto.ts:20",{"_index":915,"title":{},"body":{"classes/PaginationDTO.html":{}}}],["src/business/dtos/pagination.dto.ts:32",{"_index":919,"title":{},"body":{"classes/PaginationDTO.html":{}}}],["src/business/dtos/sign.dto.ts",{"_index":992,"title":{},"body":{"classes/SignDTO.html":{},"coverage.html":{}}}],["src/business/dtos/sign.dto.ts:20",{"_index":994,"title":{},"body":{"classes/SignDTO.html":{}}}],["src/business/dtos/sign.dto.ts:32",{"_index":995,"title":{},"body":{"classes/SignDTO.html":{}}}],["src/business/dtos/transfer.dto.ts",{"_index":1033,"title":{},"body":{"classes/TransferDTO.html":{},"coverage.html":{}}}],["src/business/dtos/transfer.dto.ts:20",{"_index":1041,"title":{},"body":{"classes/TransferDTO.html":{}}}],["src/business/dtos/transfer.dto.ts:32",{"_index":1039,"title":{},"body":{"classes/TransferDTO.html":{}}}],["src/business/dtos/transfer.dto.ts:44",{"_index":1038,"title":{},"body":{"classes/TransferDTO.html":{}}}],["src/business/dtos/transfer.dto.ts:58",{"_index":1043,"title":{},"body":{"classes/TransferDTO.html":{}}}],["src/business/dtos/update",{"_index":639,"title":{},"body":{"injectables/CustomerService.html":{},"classes/CustomerUpdateDTO.html":{},"controllers/UserController.html":{},"coverage.html":{}}}],["src/business/services/account/account.service.ts",{"_index":288,"title":{},"body":{"injectables/AccountService.html":{},"coverage.html":{}}}],["src/business/services/account/account.service.ts:115",{"_index":326,"title":{},"body":{"injectables/AccountService.html":{}}}],["src/business/services/account/account.service.ts:137",{"_index":321,"title":{},"body":{"injectables/AccountService.html":{}}}],["src/business/services/account/account.service.ts:148",{"_index":304,"title":{},"body":{"injectables/AccountService.html":{}}}],["src/business/services/account/account.service.ts:15",{"_index":295,"title":{},"body":{"injectables/AccountService.html":{}}}],["src/business/services/account/account.service.ts:162",{"_index":316,"title":{},"body":{"injectables/AccountService.html":{}}}],["src/business/services/account/account.service.ts:180",{"_index":301,"title":{},"body":{"injectables/AccountService.html":{}}}],["src/business/services/account/account.service.ts:204",{"_index":310,"title":{},"body":{"injectables/AccountService.html":{}}}],["src/business/services/account/account.service.ts:29",{"_index":305,"title":{},"body":{"injectables/AccountService.html":{}}}],["src/business/services/account/account.service.ts:40",{"_index":308,"title":{},"body":{"injectables/AccountService.html":{}}}],["src/business/services/account/account.service.ts:54",{"_index":319,"title":{},"body":{"injectables/AccountService.html":{}}}],["src/business/services/account/account.service.ts:63",{"_index":314,"title":{},"body":{"injectables/AccountService.html":{}}}],["src/business/services/account/account.service.ts:67",{"_index":312,"title":{},"body":{"injectables/AccountService.html":{}}}],["src/business/services/account/account.service.ts:78",{"_index":297,"title":{},"body":{"injectables/AccountService.html":{}}}],["src/business/services/account/account.service.ts:95",{"_index":323,"title":{},"body":{"injectables/AccountService.html":{}}}],["src/business/services/customer/customer.service.ts",{"_index":609,"title":{},"body":{"injectables/CustomerService.html":{},"coverage.html":{}}}],["src/business/services/customer/customer.service.ts:120",{"_index":631,"title":{},"body":{"injectables/CustomerService.html":{}}}],["src/business/services/customer/customer.service.ts:132",{"_index":618,"title":{},"body":{"injectables/CustomerService.html":{}}}],["src/business/services/customer/customer.service.ts:16",{"_index":616,"title":{},"body":{"injectables/CustomerService.html":{}}}],["src/business/services/customer/customer.service.ts:30",{"_index":622,"title":{},"body":{"injectables/CustomerService.html":{}}}],["src/business/services/customer/customer.service.ts:34",{"_index":625,"title":{},"body":{"injectables/CustomerService.html":{}}}],["src/business/services/customer/customer.service.ts:39",{"_index":619,"title":{},"body":{"injectables/CustomerService.html":{}}}],["src/business/services/customer/customer.service.ts:44",{"_index":620,"title":{},"body":{"injectables/CustomerService.html":{}}}],["src/business/services/customer/customer.service.ts:48",{"_index":629,"title":{},"body":{"injectables/CustomerService.html":{}}}],["src/business/services/customer/customer.service.ts:61",{"_index":627,"title":{},"body":{"injectables/CustomerService.html":{}}}],["src/business/services/customer/customer.service.ts:98",{"_index":637,"title":{},"body":{"injectables/CustomerService.html":{}}}],["src/business/services/deposit/deposit.service.ts",{"_index":780,"title":{},"body":{"injectables/DepositService.html":{},"coverage.html":{}}}],["src/business/services/deposit/deposit.service.ts:13",{"_index":782,"title":{},"body":{"injectables/DepositService.html":{}}}],["src/business/services/deposit/deposit.service.ts:26",{"_index":784,"title":{},"body":{"injectables/DepositService.html":{}}}],["src/business/services/deposit/deposit.service.ts:46",{"_index":787,"title":{},"body":{"injectables/DepositService.html":{}}}],["src/business/services/deposit/deposit.service.ts:59",{"_index":790,"title":{},"body":{"injectables/DepositService.html":{}}}],["src/business/services/security/secret.ts",{"_index":1230,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/business/services/security/security.service.ts",{"_index":952,"title":{},"body":{"injectables/SecurityService.html":{},"coverage.html":{}}}],["src/business/services/security/security.service.ts:100",{"_index":960,"title":{},"body":{"injectables/SecurityService.html":{}}}],["src/business/services/security/security.service.ts:24",{"_index":954,"title":{},"body":{"injectables/SecurityService.html":{}}}],["src/business/services/security/security.service.ts:39",{"_index":956,"title":{},"body":{"injectables/SecurityService.html":{}}}],["src/business/services/security/security.service.ts:58",{"_index":963,"title":{},"body":{"injectables/SecurityService.html":{}}}],["src/business/services/transfer/transfer.service.ts",{"_index":1087,"title":{},"body":{"injectables/TransferService.html":{},"coverage.html":{}}}],["src/business/services/transfer/transfer.service.ts:130",{"_index":1097,"title":{},"body":{"injectables/TransferService.html":{}}}],["src/business/services/transfer/transfer.service.ts:15",{"_index":1088,"title":{},"body":{"injectables/TransferService.html":{}}}],["src/business/services/transfer/transfer.service.ts:167",{"_index":1094,"title":{},"body":{"injectables/TransferService.html":{}}}],["src/business/services/transfer/transfer.service.ts:171",{"_index":1106,"title":{},"body":{"injectables/TransferService.html":{}}}],["src/business/services/transfer/transfer.service.ts:28",{"_index":1089,"title":{},"body":{"injectables/TransferService.html":{}}}],["src/business/services/transfer/transfer.service.ts:60",{"_index":1103,"title":{},"body":{"injectables/TransferService.html":{}}}],["src/business/services/transfer/transfer.service.ts:95",{"_index":1100,"title":{},"body":{"injectables/TransferService.html":{}}}],["src/common/decorators/decorators.decorator.ts",{"_index":1235,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/common/exception",{"_index":853,"title":{},"body":{"classes/ExceptionFiltersFilter.html":{},"coverage.html":{}}}],["src/data/models/account",{"_index":372,"title":{},"body":{"interfaces/AccountTypeModel.html":{},"coverage.html":{}}}],["src/data/models/account.model.ts",{"_index":206,"title":{},"body":{"interfaces/AccountModel.html":{},"coverage.html":{}}}],["src/data/models/customer.model.ts",{"_index":555,"title":{},"body":{"interfaces/CustomerModel.html":{},"coverage.html":{}}}],["src/data/models/data",{"_index":707,"title":{},"body":{"interfaces/DataRangeModel.html":{},"coverage.html":{}}}],["src/data/models/deposit.model.ts",{"_index":747,"title":{},"body":{"interfaces/DepositModel.html":{},"coverage.html":{}}}],["src/data/models/document",{"_index":818,"title":{},"body":{"interfaces/DocumentTypeModel.html":{},"coverage.html":{}}}],["src/data/models/pagination.model.ts",{"_index":920,"title":{},"body":{"interfaces/PaginationModel.html":{},"coverage.html":{}}}],["src/data/models/transfer.model.ts",{"_index":1057,"title":{},"body":{"interfaces/TransferModel.html":{},"coverage.html":{}}}],["src/data/persistence/configs/types",{"_index":1158,"title":{},"body":{"injectables/TypesOrmPostgresConfigService.html":{},"coverage.html":{}}}],["src/data/persistence/entities/account",{"_index":362,"title":{},"body":{"entities/AccountTypeEntity.html":{},"coverage.html":{}}}],["src/data/persistence/entities/account.entity.ts",{"_index":159,"title":{},"body":{"entities/AccountEntity.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/data/persistence/entities/account.entity.ts:15",{"_index":186,"title":{},"body":{"entities/AccountEntity.html":{}}}],["src/data/persistence/entities/account.entity.ts:19",{"_index":174,"title":{},"body":{"entities/AccountEntity.html":{}}}],["src/data/persistence/entities/account.entity.ts:23",{"_index":166,"title":{},"body":{"entities/AccountEntity.html":{}}}],["src/data/persistence/entities/account.entity.ts:29",{"_index":172,"title":{},"body":{"entities/AccountEntity.html":{}}}],["src/data/persistence/entities/account.entity.ts:35",{"_index":187,"title":{},"body":{"entities/AccountEntity.html":{}}}],["src/data/persistence/entities/account.entity.ts:43",{"_index":182,"title":{},"body":{"entities/AccountEntity.html":{}}}],["src/data/persistence/entities/customer.entity.ts",{"_index":534,"title":{},"body":{"entities/CustomerEntity.html":{},"coverage.html":{}}}],["src/data/persistence/entities/customer.entity.ts:16",{"_index":551,"title":{},"body":{"entities/CustomerEntity.html":{}}}],["src/data/persistence/entities/customer.entity.ts:22",{"_index":546,"title":{},"body":{"entities/CustomerEntity.html":{}}}],["src/data/persistence/entities/customer.entity.ts:29",{"_index":542,"title":{},"body":{"entities/CustomerEntity.html":{}}}],["src/data/persistence/entities/customer.entity.ts:36",{"_index":550,"title":{},"body":{"entities/CustomerEntity.html":{}}}],["src/data/persistence/entities/customer.entity.ts:43",{"_index":548,"title":{},"body":{"entities/CustomerEntity.html":{}}}],["src/data/persistence/entities/customer.entity.ts:50",{"_index":553,"title":{},"body":{"entities/CustomerEntity.html":{}}}],["src/data/persistence/entities/customer.entity.ts:57",{"_index":552,"title":{},"body":{"entities/CustomerEntity.html":{}}}],["src/data/persistence/entities/customer.entity.ts:65",{"_index":539,"title":{},"body":{"entities/CustomerEntity.html":{}}}],["src/data/persistence/entities/customer.entity.ts:71",{"_index":554,"title":{},"body":{"entities/CustomerEntity.html":{}}}],["src/data/persistence/entities/customer.entity.ts:79",{"_index":540,"title":{},"body":{"entities/CustomerEntity.html":{}}}],["src/data/persistence/entities/deposit.entity.ts",{"_index":738,"title":{},"body":{"entities/DepositEntity.html":{},"coverage.html":{}}}],["src/data/persistence/entities/deposit.entity.ts:16",{"_index":745,"title":{},"body":{"entities/DepositEntity.html":{}}}],["src/data/persistence/entities/deposit.entity.ts:22",{"_index":741,"title":{},"body":{"entities/DepositEntity.html":{}}}],["src/data/persistence/entities/deposit.entity.ts:26",{"_index":740,"title":{},"body":{"entities/DepositEntity.html":{}}}],["src/data/persistence/entities/deposit.entity.ts:32",{"_index":743,"title":{},"body":{"entities/DepositEntity.html":{}}}],["src/data/persistence/entities/deposit.entity.ts:40",{"_index":744,"title":{},"body":{"entities/DepositEntity.html":{}}}],["src/data/persistence/entities/document",{"_index":816,"title":{},"body":{"entities/DocumentTypeEntity.html":{},"coverage.html":{}}}],["src/data/persistence/entities/transfer.entitty.ts",{"_index":1046,"title":{},"body":{"entities/TransferEntity.html":{},"coverage.html":{}}}],["src/data/persistence/entities/transfer.entitty.ts:16",{"_index":1052,"title":{},"body":{"entities/TransferEntity.html":{}}}],["src/data/persistence/entities/transfer.entitty.ts:20",{"_index":1054,"title":{},"body":{"entities/TransferEntity.html":{}}}],["src/data/persistence/entities/transfer.entitty.ts:24",{"_index":1053,"title":{},"body":{"entities/TransferEntity.html":{}}}],["src/data/persistence/entities/transfer.entitty.ts:30",{"_index":1049,"title":{},"body":{"entities/TransferEntity.html":{}}}],["src/data/persistence/entities/transfer.entitty.ts:37",{"_index":1055,"title":{},"body":{"entities/TransferEntity.html":{}}}],["src/data/persistence/entities/transfer.entitty.ts:43",{"_index":1050,"title":{},"body":{"entities/TransferEntity.html":{}}}],["src/data/persistence/entities/transfer.entitty.ts:51",{"_index":1051,"title":{},"body":{"entities/TransferEntity.html":{}}}],["src/data/persistence/repositories/account",{"_index":374,"title":{},"body":{"injectables/AccountTypeRepository.html":{},"coverage.html":{}}}],["src/data/persistence/repositories/account.repository.ts",{"_index":212,"title":{},"body":{"injectables/AccountRepository.html":{},"coverage.html":{}}}],["src/data/persistence/repositories/account.repository.ts:14",{"_index":243,"title":{},"body":{"injectables/AccountRepository.html":{}}}],["src/data/persistence/repositories/account.repository.ts:18",{"_index":247,"title":{},"body":{"injectables/AccountRepository.html":{}}}],["src/data/persistence/repositories/account.repository.ts:27",{"_index":239,"title":{},"body":{"injectables/AccountRepository.html":{}}}],["src/data/persistence/repositories/account.repository.ts:44",{"_index":228,"title":{},"body":{"injectables/AccountRepository.html":{}}}],["src/data/persistence/repositories/account.repository.ts:53",{"_index":241,"title":{},"body":{"injectables/AccountRepository.html":{}}}],["src/data/persistence/repositories/account.repository.ts:57",{"_index":245,"title":{},"body":{"injectables/AccountRepository.html":{}}}],["src/data/persistence/repositories/account.repository.ts:69",{"_index":231,"title":{},"body":{"injectables/AccountRepository.html":{}}}],["src/data/persistence/repositories/account.repository.ts:76",{"_index":237,"title":{},"body":{"injectables/AccountRepository.html":{}}}],["src/data/persistence/repositories/account.repository.ts:8",{"_index":224,"title":{},"body":{"injectables/AccountRepository.html":{}}}],["src/data/persistence/repositories/account.repository.ts:81",{"_index":235,"title":{},"body":{"injectables/AccountRepository.html":{}}}],["src/data/persistence/repositories/account.repository.ts:91",{"_index":233,"title":{},"body":{"injectables/AccountRepository.html":{}}}],["src/data/persistence/repositories/customer.repository.ts",{"_index":557,"title":{},"body":{"injectables/CustomerRepository.html":{},"coverage.html":{}}}],["src/data/persistence/repositories/customer.repository.ts:100",{"_index":576,"title":{},"body":{"injectables/CustomerRepository.html":{}}}],["src/data/persistence/repositories/customer.repository.ts:118",{"_index":578,"title":{},"body":{"injectables/CustomerRepository.html":{}}}],["src/data/persistence/repositories/customer.repository.ts:131",{"_index":569,"title":{},"body":{"injectables/CustomerRepository.html":{}}}],["src/data/persistence/repositories/customer.repository.ts:14",{"_index":585,"title":{},"body":{"injectables/CustomerRepository.html":{}}}],["src/data/persistence/repositories/customer.repository.ts:145",{"_index":583,"title":{},"body":{"injectables/CustomerRepository.html":{}}}],["src/data/persistence/repositories/customer.repository.ts:159",{"_index":574,"title":{},"body":{"injectables/CustomerRepository.html":{}}}],["src/data/persistence/repositories/customer.repository.ts:165",{"_index":573,"title":{},"body":{"injectables/CustomerRepository.html":{}}}],["src/data/persistence/repositories/customer.repository.ts:19",{"_index":587,"title":{},"body":{"injectables/CustomerRepository.html":{}}}],["src/data/persistence/repositories/customer.repository.ts:28",{"_index":567,"title":{},"body":{"injectables/CustomerRepository.html":{}}}],["src/data/persistence/repositories/customer.repository.ts:37",{"_index":584,"title":{},"body":{"injectables/CustomerRepository.html":{}}}],["src/data/persistence/repositories/customer.repository.ts:41",{"_index":586,"title":{},"body":{"injectables/CustomerRepository.html":{}}}],["src/data/persistence/repositories/customer.repository.ts:65",{"_index":570,"title":{},"body":{"injectables/CustomerRepository.html":{}}}],["src/data/persistence/repositories/customer.repository.ts:69",{"_index":571,"title":{},"body":{"injectables/CustomerRepository.html":{}}}],["src/data/persistence/repositories/customer.repository.ts:75",{"_index":581,"title":{},"body":{"injectables/CustomerRepository.html":{}}}],["src/data/persistence/repositories/customer.repository.ts:8",{"_index":566,"title":{},"body":{"injectables/CustomerRepository.html":{}}}],["src/data/persistence/repositories/customer.repository.ts:83",{"_index":580,"title":{},"body":{"injectables/CustomerRepository.html":{}}}],["src/data/persistence/repositories/deposit.repository.ts",{"_index":748,"title":{},"body":{"injectables/DepositRepository.html":{},"coverage.html":{}}}],["src/data/persistence/repositories/deposit.repository.ts:13",{"_index":763,"title":{},"body":{"injectables/DepositRepository.html":{}}}],["src/data/persistence/repositories/deposit.repository.ts:17",{"_index":765,"title":{},"body":{"injectables/DepositRepository.html":{}}}],["src/data/persistence/repositories/deposit.repository.ts:26",{"_index":753,"title":{},"body":{"injectables/DepositRepository.html":{}}}],["src/data/persistence/repositories/deposit.repository.ts:35",{"_index":762,"title":{},"body":{"injectables/DepositRepository.html":{}}}],["src/data/persistence/repositories/deposit.repository.ts:41",{"_index":764,"title":{},"body":{"injectables/DepositRepository.html":{}}}],["src/data/persistence/repositories/deposit.repository.ts:64",{"_index":754,"title":{},"body":{"injectables/DepositRepository.html":{}}}],["src/data/persistence/repositories/deposit.repository.ts:68",{"_index":761,"title":{},"body":{"injectables/DepositRepository.html":{}}}],["src/data/persistence/repositories/deposit.repository.ts:8",{"_index":752,"title":{},"body":{"injectables/DepositRepository.html":{}}}],["src/data/persistence/repositories/deposit.repository.ts:83",{"_index":756,"title":{},"body":{"injectables/DepositRepository.html":{}}}],["src/data/persistence/repositories/deposit.repository.ts:90",{"_index":759,"title":{},"body":{"injectables/DepositRepository.html":{}}}],["src/data/persistence/repositories/document",{"_index":820,"title":{},"body":{"injectables/DocumentTypeRepository.html":{},"coverage.html":{}}}],["src/data/persistence/repositories/interfaces/account",{"_index":281,"title":{},"body":{"interfaces/AccountRepositoryInterface.html":{},"interfaces/AccountTypeRepositoryInterface.html":{},"coverage.html":{}}}],["src/data/persistence/repositories/interfaces/base/base",{"_index":477,"title":{},"body":{"interfaces/BaseRepositoryInterface.html":{},"coverage.html":{}}}],["src/data/persistence/repositories/interfaces/customer",{"_index":604,"title":{},"body":{"interfaces/CustomerRepositoryInterface.html":{},"coverage.html":{}}}],["src/data/persistence/repositories/interfaces/deposit",{"_index":779,"title":{},"body":{"interfaces/DepositRepositoryInterface.html":{},"coverage.html":{}}}],["src/data/persistence/repositories/interfaces/document",{"_index":851,"title":{},"body":{"interfaces/DocumentTypeRepositoryInterface.html":{},"coverage.html":{}}}],["src/data/persistence/repositories/interfaces/transfer",{"_index":1086,"title":{},"body":{"interfaces/TransferRepositoryInterface.html":{},"coverage.html":{}}}],["src/data/persistence/repositories/transfer.repository.ts",{"_index":1058,"title":{},"body":{"injectables/TransferRepository.html":{},"coverage.html":{}}}],["src/data/persistence/repositories/transfer.repository.ts:103",{"_index":1067,"title":{},"body":{"injectables/TransferRepository.html":{}}}],["src/data/persistence/repositories/transfer.repository.ts:118",{"_index":1065,"title":{},"body":{"injectables/TransferRepository.html":{}}}],["src/data/persistence/repositories/transfer.repository.ts:13",{"_index":1072,"title":{},"body":{"injectables/TransferRepository.html":{}}}],["src/data/persistence/repositories/transfer.repository.ts:17",{"_index":1074,"title":{},"body":{"injectables/TransferRepository.html":{}}}],["src/data/persistence/repositories/transfer.repository.ts:26",{"_index":1063,"title":{},"body":{"injectables/TransferRepository.html":{}}}],["src/data/persistence/repositories/transfer.repository.ts:35",{"_index":1071,"title":{},"body":{"injectables/TransferRepository.html":{}}}],["src/data/persistence/repositories/transfer.repository.ts:41",{"_index":1073,"title":{},"body":{"injectables/TransferRepository.html":{}}}],["src/data/persistence/repositories/transfer.repository.ts:65",{"_index":1064,"title":{},"body":{"injectables/TransferRepository.html":{}}}],["src/data/persistence/repositories/transfer.repository.ts:71",{"_index":1068,"title":{},"body":{"injectables/TransferRepository.html":{}}}],["src/data/persistence/repositories/transfer.repository.ts:8",{"_index":1062,"title":{},"body":{"injectables/TransferRepository.html":{}}}],["src/data/persistence/repositories/transfer.repository.ts:88",{"_index":1070,"title":{},"body":{"injectables/TransferRepository.html":{}}}],["src/data/persistence/utils/exception",{"_index":1135,"title":{},"body":{"classes/TypeOrmExceptionFilter.html":{},"coverage.html":{}}}],["src/main.ts",{"_index":1247,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/presentation/controllers/account/account.controller.ts",{"_index":6,"title":{},"body":{"controllers/AccountController.html":{},"coverage.html":{}}}],["src/presentation/controllers/account/account.controller.ts:104",{"_index":45,"title":{},"body":{"controllers/AccountController.html":{}}}],["src/presentation/controllers/account/account.controller.ts:113",{"_index":55,"title":{},"body":{"controllers/AccountController.html":{}}}],["src/presentation/controllers/account/account.controller.ts:25",{"_index":63,"title":{},"body":{"controllers/AccountController.html":{}}}],["src/presentation/controllers/account/account.controller.ts:31",{"_index":66,"title":{},"body":{"controllers/AccountController.html":{}}}],["src/presentation/controllers/account/account.controller.ts:37",{"_index":60,"title":{},"body":{"controllers/AccountController.html":{}}}],["src/presentation/controllers/account/account.controller.ts:43",{"_index":52,"title":{},"body":{"controllers/AccountController.html":{}}}],["src/presentation/controllers/account/account.controller.ts:49",{"_index":33,"title":{},"body":{"controllers/AccountController.html":{}}}],["src/presentation/controllers/account/account.controller.ts:60",{"_index":72,"title":{},"body":{"controllers/AccountController.html":{}}}],["src/presentation/controllers/account/account.controller.ts:75",{"_index":58,"title":{},"body":{"controllers/AccountController.html":{}}}],["src/presentation/controllers/account/account.controller.ts:82",{"_index":42,"title":{},"body":{"controllers/AccountController.html":{}}}],["src/presentation/controllers/account/account.controller.ts:90",{"_index":48,"title":{},"body":{"controllers/AccountController.html":{}}}],["src/presentation/controllers/account/account.controller.ts:99",{"_index":69,"title":{},"body":{"controllers/AccountController.html":{}}}],["src/presentation/controllers/deposit/deposit.controller.ts",{"_index":709,"title":{},"body":{"controllers/DepositController.html":{},"coverage.html":{}}}],["src/presentation/controllers/deposit/deposit.controller.ts:10",{"_index":715,"title":{},"body":{"controllers/DepositController.html":{}}}],["src/presentation/controllers/deposit/deposit.controller.ts:15",{"_index":720,"title":{},"body":{"controllers/DepositController.html":{}}}],["src/presentation/controllers/deposit/deposit.controller.ts:31",{"_index":717,"title":{},"body":{"controllers/DepositController.html":{}}}],["src/presentation/controllers/security/security.controller.ts",{"_index":928,"title":{},"body":{"controllers/SecurityController.html":{},"coverage.html":{}}}],["src/presentation/controllers/security/security.controller.ts:10",{"_index":942,"title":{},"body":{"controllers/SecurityController.html":{}}}],["src/presentation/controllers/security/security.controller.ts:15",{"_index":939,"title":{},"body":{"controllers/SecurityController.html":{}}}],["src/presentation/controllers/security/security.controller.ts:20",{"_index":935,"title":{},"body":{"controllers/SecurityController.html":{}}}],["src/presentation/controllers/transfer/transfer.controller.ts",{"_index":996,"title":{},"body":{"controllers/TransferController.html":{},"coverage.html":{}}}],["src/presentation/controllers/transfer/transfer.controller.ts:21",{"_index":1004,"title":{},"body":{"controllers/TransferController.html":{}}}],["src/presentation/controllers/transfer/transfer.controller.ts:27",{"_index":1018,"title":{},"body":{"controllers/TransferController.html":{}}}],["src/presentation/controllers/transfer/transfer.controller.ts:32",{"_index":1006,"title":{},"body":{"controllers/TransferController.html":{}}}],["src/presentation/controllers/transfer/transfer.controller.ts:40",{"_index":1012,"title":{},"body":{"controllers/TransferController.html":{}}}],["src/presentation/controllers/transfer/transfer.controller.ts:57",{"_index":1015,"title":{},"body":{"controllers/TransferController.html":{}}}],["src/presentation/controllers/transfer/transfer.controller.ts:74",{"_index":1009,"title":{},"body":{"controllers/TransferController.html":{}}}],["src/presentation/controllers/user/user.controller.ts",{"_index":1174,"title":{},"body":{"controllers/UserController.html":{},"coverage.html":{}}}],["src/presentation/controllers/user/user.controller.ts:23",{"_index":1185,"title":{},"body":{"controllers/UserController.html":{}}}],["src/presentation/controllers/user/user.controller.ts:27",{"_index":1187,"title":{},"body":{"controllers/UserController.html":{}}}],["src/presentation/controllers/user/user.controller.ts:32",{"_index":1190,"title":{},"body":{"controllers/UserController.html":{}}}],["src/presentation/controllers/user/user.controller.ts:36",{"_index":1193,"title":{},"body":{"controllers/UserController.html":{}}}],["src/presentation/controllers/user/user.controller.ts:43",{"_index":1195,"title":{},"body":{"controllers/UserController.html":{}}}],["src/presentation/controllers/user/user.controller.ts:52",{"_index":1200,"title":{},"body":{"controllers/UserController.html":{}}}],["src/presentation/controllers/user/user.controller.ts:61",{"_index":1184,"title":{},"body":{"controllers/UserController.html":{}}}],["src/presentation/controllers/user/user.controller.ts:66",{"_index":1198,"title":{},"body":{"controllers/UserController.html":{}}}],["src/presentation/guards/guards.guard",{"_index":83,"title":{},"body":{"controllers/AccountController.html":{},"controllers/TransferController.html":{},"controllers/UserController.html":{}}}],["src/presentation/guards/guards.guard.ts",{"_index":865,"title":{},"body":{"guards/GuardsGuard.html":{},"coverage.html":{}}}],["src/presentation/guards/guards.guard.ts:6",{"_index":869,"title":{},"body":{"guards/GuardsGuard.html":{}}}],["src/presentation/guards/guards.guard.ts:9",{"_index":872,"title":{},"body":{"guards/GuardsGuard.html":{}}}],["src/presentation/interceptors/interceptors.interceptor.ts",{"_index":890,"title":{},"body":{"injectables/InterceptorsInterceptor.html":{},"coverage.html":{}}}],["src/presentation/interceptors/interceptors.interceptor.ts:11",{"_index":895,"title":{},"body":{"injectables/InterceptorsInterceptor.html":{}}}],["src/presentation/middlewares/middlewares.middleware.ts",{"_index":898,"title":{},"body":{"injectables/MiddlewaresMiddleware.html":{},"coverage.html":{}}}],["src/presentation/middlewares/middlewares.middleware.ts:5",{"_index":904,"title":{},"body":{"injectables/MiddlewaresMiddleware.html":{}}}],["src/presentation/pipes/pipes.pipe.ts",{"_index":922,"title":{},"body":{"injectables/PipesPipe.html":{},"coverage.html":{}}}],["src/presentation/pipes/pipes.pipe.ts:5",{"_index":926,"title":{},"body":{"injectables/PipesPipe.html":{}}}],["start",{"_index":1292,"title":{},"body":{"index.html":{}}}],["start:dev",{"_index":1295,"title":{},"body":{"index.html":{}}}],["start:prodhow",{"_index":1297,"title":{},"body":{"index.html":{}}}],["startamount",{"_index":693,"title":{},"body":{"classes/DataRangeDTO.html":{},"interfaces/DataRangeModel.html":{}}}],["startdate",{"_index":694,"title":{},"body":{"classes/DataRangeDTO.html":{},"interfaces/DataRangeModel.html":{}}}],["started",{"_index":1273,"title":{"index.html":{}},"body":{}}],["starter",{"_index":1284,"title":{},"body":{"index.html":{}}}],["state",{"_index":114,"title":{},"body":{"controllers/AccountController.html":{},"entities/AccountEntity.html":{},"interfaces/AccountModel.html":{},"injectables/AccountRepository.html":{},"interfaces/AccountRepositoryInterface.html":{},"injectables/AccountService.html":{},"entities/AccountTypeEntity.html":{},"interfaces/AccountTypeModel.html":{},"injectables/AccountTypeRepository.html":{},"interfaces/AccountTypeRepositoryInterface.html":{},"entities/CustomerEntity.html":{},"interfaces/CustomerModel.html":{},"injectables/CustomerRepository.html":{},"interfaces/CustomerRepositoryInterface.html":{},"entities/DocumentTypeEntity.html":{},"interfaces/DocumentTypeModel.html":{},"injectables/DocumentTypeRepository.html":{},"interfaces/DocumentTypeRepositoryInterface.html":{}}}],["statements",{"_index":1220,"title":{},"body":{"coverage.html":{}}}],["status",{"_index":1148,"title":{},"body":{"classes/TypeOrmExceptionFilter.html":{}}}],["string",{"_index":25,"title":{},"body":{"controllers/AccountController.html":{},"classes/AccountDTO.html":{},"entities/AccountEntity.html":{},"interfaces/AccountModel.html":{},"injectables/AccountRepository.html":{},"interfaces/AccountRepositoryInterface.html":{},"injectables/AccountService.html":{},"entities/AccountTypeEntity.html":{},"interfaces/AccountTypeModel.html":{},"injectables/AccountTypeRepository.html":{},"interfaces/AccountTypeRepositoryInterface.html":{},"interfaces/BaseRepositoryInterface.html":{},"classes/CustomerDTO.html":{},"entities/CustomerEntity.html":{},"interfaces/CustomerModel.html":{},"injectables/CustomerRepository.html":{},"interfaces/CustomerRepositoryInterface.html":{},"injectables/CustomerService.html":{},"classes/CustomerUpdateDTO.html":{},"controllers/DepositController.html":{},"classes/DepositDTO.html":{},"interfaces/DepositModel.html":{},"injectables/DepositRepository.html":{},"interfaces/DepositRepositoryInterface.html":{},"injectables/DepositService.html":{},"entities/DocumentTypeEntity.html":{},"interfaces/DocumentTypeModel.html":{},"injectables/DocumentTypeRepository.html":{},"interfaces/DocumentTypeRepositoryInterface.html":{},"controllers/SecurityController.html":{},"injectables/SecurityService.html":{},"classes/SignDTO.html":{},"controllers/TransferController.html":{},"classes/TransferDTO.html":{},"entities/TransferEntity.html":{},"interfaces/TransferModel.html":{},"injectables/TransferRepository.html":{},"interfaces/TransferRepositoryInterface.html":{},"injectables/TransferService.html":{},"controllers/UserController.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["sub",{"_index":975,"title":{},"body":{"injectables/SecurityService.html":{}}}],["submitted",{"_index":1311,"title":{},"body":{"index.html":{}}}],["support",{"_index":1334,"title":{},"body":{"modules.html":{}}}],["svg",{"_index":1335,"title":{},"body":{"modules.html":{}}}],["synchronize",{"_index":470,"title":{},"body":{"modules/AppModule.html":{},"injectables/TypesOrmPostgresConfigService.html":{}}}],["t",{"_index":859,"title":{},"body":{"classes/ExceptionFiltersFilter.html":{}}}],["table",{"_index":1250,"title":{},"body":{"coverage.html":{}}}],["tablesort(document.getelementbyid('coverage",{"_index":1249,"title":{},"body":{"coverage.html":{}}}],["taken",{"_index":1310,"title":{},"body":{"index.html":{}}}],["teléfono",{"_index":522,"title":{},"body":{"classes/CustomerDTO.html":{},"classes/CustomerUpdateDTO.html":{}}}],["tener",{"_index":516,"title":{},"body":{"classes/CustomerDTO.html":{},"classes/CustomerUpdateDTO.html":{}}}],["then((result",{"_index":267,"title":{},"body":{"injectables/AccountRepository.html":{},"injectables/AccountTypeRepository.html":{},"injectables/CustomerRepository.html":{},"injectables/DepositRepository.html":{},"injectables/DocumentTypeRepository.html":{},"injectables/TransferRepository.html":{}}}],["this.accountrepository.delete(accountid",{"_index":361,"title":{},"body":{"injectables/AccountService.html":{}}}],["this.accountrepository.findall",{"_index":355,"title":{},"body":{"injectables/AccountService.html":{}}}],["this.accountrepository.findall()).filter",{"_index":344,"title":{},"body":{"injectables/AccountService.html":{}}}],["this.accountrepository.findall()).map",{"_index":671,"title":{},"body":{"injectables/CustomerService.html":{}}}],["this.accountrepository.findbycustomer(customerid",{"_index":354,"title":{},"body":{"injectables/AccountService.html":{}}}],["this.accountrepository.findonebyid",{"_index":795,"title":{},"body":{"injectables/DepositService.html":{},"injectables/TransferService.html":{}}}],["this.accountrepository.findonebyid(accountid",{"_index":352,"title":{},"body":{"injectables/AccountService.html":{}}}],["this.accountrepository.findonebyid(accountid)).state",{"_index":359,"title":{},"body":{"injectables/AccountService.html":{}}}],["this.accountrepository.findonebyid(deposit.accountid",{"_index":800,"title":{},"body":{"injectables/DepositService.html":{}}}],["this.accountrepository.findonebyid(transfer.incomeid",{"_index":1108,"title":{},"body":{"injectables/TransferService.html":{}}}],["this.accountrepository.register(account",{"_index":667,"title":{},"body":{"injectables/CustomerService.html":{}}}],["this.accountrepository.register(newaccount",{"_index":342,"title":{},"body":{"injectables/AccountService.html":{}}}],["this.accountrepository.update(accountid",{"_index":356,"title":{},"body":{"injectables/AccountService.html":{}}}],["this.accountrepository.update(deposit.accountid",{"_index":802,"title":{},"body":{"injectables/DepositService.html":{}}}],["this.accountrepository.update(income.id",{"_index":1121,"title":{},"body":{"injectables/TransferService.html":{}}}],["this.accountrepository.update(outcome.id",{"_index":1118,"title":{},"body":{"injectables/TransferService.html":{}}}],["this.accountservice.changeaccounttype(id",{"_index":122,"title":{},"body":{"controllers/AccountController.html":{}}}],["this.accountservice.changestate(id",{"_index":115,"title":{},"body":{"controllers/AccountController.html":{}}}],["this.accountservice.createaccount(account",{"_index":106,"title":{},"body":{"controllers/AccountController.html":{}}}],["this.accountservice.createaccount(newaccount",{"_index":988,"title":{},"body":{"injectables/SecurityService.html":{}}}],["this.accountservice.customerbalance(id",{"_index":103,"title":{},"body":{"controllers/AccountController.html":{}}}],["this.accountservice.deleteaccount(id",{"_index":127,"title":{},"body":{"controllers/AccountController.html":{}}}],["this.accountservice.findall",{"_index":104,"title":{},"body":{"controllers/AccountController.html":{}}}],["this.accountservice.getaccountbycustomerid(id",{"_index":112,"title":{},"body":{"controllers/AccountController.html":{}}}],["this.accountservice.getbalance(id",{"_index":99,"title":{},"body":{"controllers/AccountController.html":{}}}],["this.accountservice.getstate(id",{"_index":120,"title":{},"body":{"controllers/AccountController.html":{}}}],["this.accountservice.verifyamountintobalance(id",{"_index":113,"title":{},"body":{"controllers/AccountController.html":{}}}],["this.accounttyperepository.findonebyid",{"_index":340,"title":{},"body":{"injectables/AccountService.html":{}}}],["this.accounttyperepository.findonebyid(typeid",{"_index":664,"title":{},"body":{"injectables/CustomerService.html":{}}}],["this.configservice.get('db_host",{"_index":1168,"title":{},"body":{"injectables/TypesOrmPostgresConfigService.html":{}}}],["this.configservice.get('db_name",{"_index":1172,"title":{},"body":{"injectables/TypesOrmPostgresConfigService.html":{}}}],["this.configservice.get('db_password",{"_index":1171,"title":{},"body":{"injectables/TypesOrmPostgresConfigService.html":{}}}],["this.configservice.get('db_port",{"_index":1169,"title":{},"body":{"injectables/TypesOrmPostgresConfigService.html":{}}}],["this.configservice.get('db_user",{"_index":1170,"title":{},"body":{"injectables/TypesOrmPostgresConfigService.html":{}}}],["this.customerrepository",{"_index":595,"title":{},"body":{"injectables/CustomerRepository.html":{}}}],["this.customerrepository.delete(id",{"_index":593,"title":{},"body":{"injectables/CustomerRepository.html":{},"injectables/CustomerService.html":{}}}],["this.customerrepository.existemail(customer.email",{"_index":660,"title":{},"body":{"injectables/CustomerService.html":{}}}],["this.customerrepository.existemail(user.email",{"_index":985,"title":{},"body":{"injectables/SecurityService.html":{}}}],["this.customerrepository.find",{"_index":599,"title":{},"body":{"injectables/CustomerRepository.html":{}}}],["this.customerrepository.findall()).filter",{"_index":643,"title":{},"body":{"injectables/CustomerService.html":{}}}],["this.customerrepository.findalldeleted",{"_index":646,"title":{},"body":{"injectables/CustomerService.html":{}}}],["this.customerrepository.findone",{"_index":600,"title":{},"body":{"injectables/CustomerRepository.html":{}}}],["this.customerrepository.findonebyemail(email",{"_index":642,"title":{},"body":{"injectables/CustomerService.html":{}}}],["this.customerrepository.findonebyemail(user.email",{"_index":974,"title":{},"body":{"injectables/SecurityService.html":{}}}],["this.customerrepository.findonebyemailandpassword",{"_index":971,"title":{},"body":{"injectables/SecurityService.html":{}}}],["this.customerrepository.findonebyid",{"_index":337,"title":{},"body":{"injectables/AccountService.html":{}}}],["this.customerrepository.findonebyid(customerid",{"_index":641,"title":{},"body":{"injectables/CustomerService.html":{}}}],["this.customerrepository.findonebyid(id",{"_index":668,"title":{},"body":{"injectables/CustomerService.html":{}}}],["this.customerrepository.findonebyid(id)).deletedat",{"_index":669,"title":{},"body":{"injectables/CustomerService.html":{}}}],["this.customerrepository.register(newcustomer",{"_index":666,"title":{},"body":{"injectables/CustomerService.html":{},"injectables/SecurityService.html":{}}}],["this.customerrepository.save(entity",{"_index":591,"title":{},"body":{"injectables/CustomerRepository.html":{}}}],["this.customerrepository.update(id",{"_index":592,"title":{},"body":{"injectables/CustomerRepository.html":{},"injectables/CustomerService.html":{}}}],["this.customerservice.deletecustomer(id",{"_index":1214,"title":{},"body":{"controllers/UserController.html":{}}}],["this.customerservice.findall",{"_index":1204,"title":{},"body":{"controllers/UserController.html":{}}}],["this.customerservice.findalldeleted",{"_index":1205,"title":{},"body":{"controllers/UserController.html":{}}}],["this.customerservice.getcustomerinfo(id",{"_index":1207,"title":{},"body":{"controllers/UserController.html":{}}}],["this.customerservice.getcustomerinfobyemail(email",{"_index":1209,"title":{},"body":{"controllers/UserController.html":{}}}],["this.customerservice.newcustomer(customer",{"_index":1211,"title":{},"body":{"controllers/UserController.html":{}}}],["this.customerservice.unsuscribe(id",{"_index":1216,"title":{},"body":{"controllers/UserController.html":{}}}],["this.customerservice.updatedcustomer(id",{"_index":1212,"title":{},"body":{"controllers/UserController.html":{}}}],["this.depositrepository",{"_index":773,"title":{},"body":{"injectables/DepositRepository.html":{}}}],["this.depositrepository.delete",{"_index":771,"title":{},"body":{"injectables/DepositRepository.html":{}}}],["this.depositrepository.delete(depositid",{"_index":804,"title":{},"body":{"injectables/DepositService.html":{}}}],["this.depositrepository.find",{"_index":777,"title":{},"body":{"injectables/DepositRepository.html":{}}}],["this.depositrepository.findbydatarange",{"_index":807,"title":{},"body":{"injectables/DepositService.html":{}}}],["this.depositrepository.register(depositentity",{"_index":803,"title":{},"body":{"injectables/DepositService.html":{}}}],["this.depositrepository.save(entity",{"_index":769,"title":{},"body":{"injectables/DepositRepository.html":{}}}],["this.depositrepository.update(id",{"_index":770,"title":{},"body":{"injectables/DepositRepository.html":{}}}],["this.depositservice.createdeposit(account",{"_index":725,"title":{},"body":{"controllers/DepositController.html":{}}}],["this.depositservice.deletedeposit(id",{"_index":733,"title":{},"body":{"controllers/DepositController.html":{}}}],["this.depositservice.gethistory",{"_index":728,"title":{},"body":{"controllers/DepositController.html":{}}}],["this.documenttyperepository",{"_index":850,"title":{},"body":{"injectables/DocumentTypeRepository.html":{}}}],["this.documenttyperepository.delete(id).then((result",{"_index":848,"title":{},"body":{"injectables/DocumentTypeRepository.html":{}}}],["this.documenttyperepository.find",{"_index":849,"title":{},"body":{"injectables/DocumentTypeRepository.html":{}}}],["this.documenttyperepository.findonebyid",{"_index":980,"title":{},"body":{"injectables/SecurityService.html":{}}}],["this.documenttyperepository.save",{"_index":832,"title":{},"body":{"injectables/DocumentTypeRepository.html":{}}}],["this.documenttyperepository.save(entity",{"_index":846,"title":{},"body":{"injectables/DocumentTypeRepository.html":{}}}],["this.documenttyperepository.update(id",{"_index":847,"title":{},"body":{"injectables/DocumentTypeRepository.html":{}}}],["this.findonebyid(id",{"_index":270,"title":{},"body":{"injectables/AccountRepository.html":{},"injectables/CustomerRepository.html":{},"injectables/DepositRepository.html":{},"injectables/DocumentTypeRepository.html":{},"injectables/TransferRepository.html":{}}}],["this.getstate(accountid",{"_index":349,"title":{},"body":{"injectables/AccountService.html":{}}}],["this.harddelete(id",{"_index":272,"title":{},"body":{"injectables/AccountRepository.html":{},"injectables/CustomerRepository.html":{},"injectables/DepositRepository.html":{},"injectables/TransferRepository.html":{}}}],["this.jwtservice.sign(payload",{"_index":976,"title":{},"body":{"injectables/SecurityService.html":{}}}],["this.jwtservice.verify(jwt",{"_index":991,"title":{},"body":{"injectables/SecurityService.html":{}}}],["this.jwtservice.verify(token",{"_index":886,"title":{},"body":{"guards/GuardsGuard.html":{}}}],["this.register",{"_index":390,"title":{},"body":{"injectables/AccountTypeRepository.html":{}}}],["this.securityservice.signin(customer",{"_index":948,"title":{},"body":{"controllers/SecurityController.html":{}}}],["this.securityservice.signout(body.jwt",{"_index":951,"title":{},"body":{"controllers/SecurityController.html":{}}}],["this.securityservice.signup(customer",{"_index":946,"title":{},"body":{"controllers/SecurityController.html":{}}}],["this.softdelete(id",{"_index":271,"title":{},"body":{"injectables/AccountRepository.html":{},"injectables/CustomerRepository.html":{},"injectables/DepositRepository.html":{},"injectables/TransferRepository.html":{}}}],["this.transferrepository",{"_index":1081,"title":{},"body":{"injectables/TransferRepository.html":{}}}],["this.transferrepository.delete",{"_index":1079,"title":{},"body":{"injectables/TransferRepository.html":{}}}],["this.transferrepository.delete(transferid",{"_index":1133,"title":{},"body":{"injectables/TransferService.html":{}}}],["this.transferrepository.find",{"_index":1085,"title":{},"body":{"injectables/TransferRepository.html":{}}}],["this.transferrepository.findbydatarange",{"_index":1132,"title":{},"body":{"injectables/TransferService.html":{}}}],["this.transferrepository.findincomebydatarange",{"_index":1130,"title":{},"body":{"injectables/TransferService.html":{}}}],["this.transferrepository.findonebyid(transferid",{"_index":1134,"title":{},"body":{"injectables/TransferService.html":{}}}],["this.transferrepository.findoutcomebydatarange",{"_index":1126,"title":{},"body":{"injectables/TransferService.html":{}}}],["this.transferrepository.register(newtransfer",{"_index":1123,"title":{},"body":{"injectables/TransferService.html":{}}}],["this.transferrepository.save(entity",{"_index":1077,"title":{},"body":{"injectables/TransferRepository.html":{}}}],["this.transferrepository.update(id",{"_index":1078,"title":{},"body":{"injectables/TransferRepository.html":{}}}],["this.transferservice.createtransfer(transfer",{"_index":1021,"title":{},"body":{"controllers/TransferController.html":{}}}],["this.transferservice.deletetransfer(id",{"_index":1026,"title":{},"body":{"controllers/TransferController.html":{}}}],["this.transferservice.gethistory",{"_index":1032,"title":{},"body":{"controllers/TransferController.html":{}}}],["this.transferservice.gethistoryin",{"_index":1028,"title":{},"body":{"controllers/TransferController.html":{}}}],["this.transferservice.gethistoryout",{"_index":1030,"title":{},"body":{"controllers/TransferController.html":{}}}],["this.transferservice.selecttransfer(id",{"_index":1024,"title":{},"body":{"controllers/TransferController.html":{}}}],["this.update(account.id",{"_index":278,"title":{},"body":{"injectables/AccountRepository.html":{}}}],["this.update(customer.id",{"_index":598,"title":{},"body":{"injectables/CustomerRepository.html":{}}}],["this.update(result.id",{"_index":776,"title":{},"body":{"injectables/DepositRepository.html":{}}}],["this.update(transfer.id",{"_index":1084,"title":{},"body":{"injectables/TransferRepository.html":{}}}],["this.userrepository",{"_index":265,"title":{},"body":{"injectables/AccountRepository.html":{},"injectables/AccountTypeRepository.html":{}}}],["this.userrepository.delete(id",{"_index":273,"title":{},"body":{"injectables/AccountRepository.html":{}}}],["this.userrepository.delete(id).then((result",{"_index":403,"title":{},"body":{"injectables/AccountTypeRepository.html":{}}}],["this.userrepository.find",{"_index":279,"title":{},"body":{"injectables/AccountRepository.html":{},"injectables/AccountTypeRepository.html":{}}}],["this.userrepository.save(entity",{"_index":253,"title":{},"body":{"injectables/AccountRepository.html":{},"injectables/AccountTypeRepository.html":{}}}],["this.userrepository.update(id",{"_index":254,"title":{},"body":{"injectables/AccountRepository.html":{},"injectables/AccountTypeRepository.html":{}}}],["this.verifyamountintobalance(accountid",{"_index":357,"title":{},"body":{"injectables/AccountService.html":{}}}],["throw",{"_index":257,"title":{},"body":{"injectables/AccountRepository.html":{},"injectables/AccountService.html":{},"injectables/AccountTypeRepository.html":{},"injectables/CustomerRepository.html":{},"injectables/CustomerService.html":{},"injectables/DepositRepository.html":{},"injectables/DocumentTypeRepository.html":{},"injectables/SecurityService.html":{},"injectables/TransferRepository.html":{},"injectables/TransferService.html":{}}}],["timestamp",{"_index":177,"title":{},"body":{"entities/AccountEntity.html":{},"entities/CustomerEntity.html":{},"classes/DataRangeDTO.html":{},"entities/DepositEntity.html":{},"entities/TransferEntity.html":{},"classes/TypeOrmExceptionFilter.html":{}}}],["tipo",{"_index":147,"title":{},"body":{"classes/AccountDTO.html":{},"injectables/AccountService.html":{},"classes/CustomerDTO.html":{}}}],["title",{"_index":1300,"title":{},"body":{"index.html":{}}}],["token",{"_index":881,"title":{},"body":{"guards/GuardsGuard.html":{},"injectables/MiddlewaresMiddleware.html":{}}}],["transacciones",{"_index":1098,"title":{},"body":{"injectables/TransferService.html":{}}}],["transacción",{"_index":1095,"title":{},"body":{"injectables/TransferService.html":{}}}],["transfer",{"_index":135,"title":{},"body":{"classes/AccountDTO.html":{},"classes/CustomerDTO.html":{},"classes/CustomerUpdateDTO.html":{},"classes/DataRangeDTO.html":{},"classes/DepositDTO.html":{},"classes/PaginationDTO.html":{},"classes/SignDTO.html":{},"controllers/TransferController.html":{},"classes/TransferDTO.html":{},"entities/TransferEntity.html":{},"injectables/TransferRepository.html":{},"injectables/TransferService.html":{}}}],["transfer.id",{"_index":1082,"title":{},"body":{"injectables/TransferRepository.html":{}}}],["transfer.outcomeid",{"_index":1109,"title":{},"body":{"injectables/TransferService.html":{}}}],["transfer.reason",{"_index":1116,"title":{},"body":{"injectables/TransferService.html":{}}}],["transfercontroller",{"_index":426,"title":{"controllers/TransferController.html":{}},"body":{"modules/AppModule.html":{},"controllers/TransferController.html":{},"coverage.html":{}}}],["transferdto",{"_index":1003,"title":{"classes/TransferDTO.html":{}},"body":{"controllers/TransferController.html":{},"classes/TransferDTO.html":{},"injectables/TransferService.html":{},"coverage.html":{}}}],["transferencia",{"_index":1034,"title":{},"body":{"classes/TransferDTO.html":{},"injectables/TransferService.html":{}}}],["transferentity",{"_index":445,"title":{"entities/TransferEntity.html":{}},"body":{"modules/AppModule.html":{},"controllers/TransferController.html":{},"entities/TransferEntity.html":{},"injectables/TransferRepository.html":{},"interfaces/TransferRepositoryInterface.html":{},"injectables/TransferService.html":{},"injectables/TypesOrmPostgresConfigService.html":{},"coverage.html":{}}}],["transferid",{"_index":1096,"title":{},"body":{"injectables/TransferService.html":{}}}],["transfermodel",{"_index":1056,"title":{"interfaces/TransferModel.html":{}},"body":{"entities/TransferEntity.html":{},"interfaces/TransferModel.html":{},"injectables/TransferService.html":{},"coverage.html":{}}}],["transferrepository",{"_index":419,"title":{"injectables/TransferRepository.html":{}},"body":{"modules/AppModule.html":{},"injectables/TransferRepository.html":{},"injectables/TransferService.html":{},"coverage.html":{},"overview.html":{}}}],["transferrepositoryinterface",{"_index":1075,"title":{"interfaces/TransferRepositoryInterface.html":{}},"body":{"injectables/TransferRepository.html":{},"interfaces/TransferRepositoryInterface.html":{},"coverage.html":{}}}],["transferservice",{"_index":420,"title":{"injectables/TransferService.html":{}},"body":{"modules/AppModule.html":{},"controllers/TransferController.html":{},"injectables/TransferService.html":{},"coverage.html":{},"overview.html":{}}}],["transform",{"_index":613,"title":{},"body":{"injectables/CustomerService.html":{},"injectables/PipesPipe.html":{}}}],["transform(customer",{"_index":628,"title":{},"body":{"injectables/CustomerService.html":{}}}],["transform(value",{"_index":923,"title":{},"body":{"injectables/PipesPipe.html":{}}}],["transformer",{"_index":1257,"title":{},"body":{"dependencies.html":{}}}],["true",{"_index":179,"title":{},"body":{"entities/AccountEntity.html":{},"entities/AccountTypeEntity.html":{},"injectables/AccountTypeRepository.html":{},"modules/AppModule.html":{},"entities/CustomerEntity.html":{},"injectables/CustomerRepository.html":{},"injectables/CustomerService.html":{},"entities/DepositEntity.html":{},"entities/DocumentTypeEntity.html":{},"injectables/DocumentTypeRepository.html":{},"guards/GuardsGuard.html":{},"injectables/SecurityService.html":{},"entities/TransferEntity.html":{},"injectables/TypesOrmPostgresConfigService.html":{}}}],["try",{"_index":884,"title":{},"body":{"guards/GuardsGuard.html":{}}}],["type",{"_index":28,"title":{},"body":{"controllers/AccountController.html":{},"classes/AccountDTO.html":{},"entities/AccountEntity.html":{},"interfaces/AccountModel.html":{},"injectables/AccountRepository.html":{},"interfaces/AccountRepositoryInterface.html":{},"injectables/AccountService.html":{},"entities/AccountTypeEntity.html":{},"interfaces/AccountTypeModel.html":{},"injectables/AccountTypeRepository.html":{},"interfaces/AccountTypeRepositoryInterface.html":{},"modules/AppModule.html":{},"interfaces/BaseRepositoryInterface.html":{},"classes/CustomerDTO.html":{},"entities/CustomerEntity.html":{},"interfaces/CustomerModel.html":{},"injectables/CustomerRepository.html":{},"interfaces/CustomerRepositoryInterface.html":{},"injectables/CustomerService.html":{},"classes/CustomerUpdateDTO.html":{},"classes/DataRangeDTO.html":{},"interfaces/DataRangeModel.html":{},"controllers/DepositController.html":{},"classes/DepositDTO.html":{},"entities/DepositEntity.html":{},"interfaces/DepositModel.html":{},"injectables/DepositRepository.html":{},"interfaces/DepositRepositoryInterface.html":{},"injectables/DepositService.html":{},"entities/DocumentTypeEntity.html":{},"interfaces/DocumentTypeModel.html":{},"injectables/DocumentTypeRepository.html":{},"interfaces/DocumentTypeRepositoryInterface.html":{},"classes/ExceptionFiltersFilter.html":{},"guards/GuardsGuard.html":{},"injectables/InterceptorsInterceptor.html":{},"injectables/MiddlewaresMiddleware.html":{},"classes/PaginationDTO.html":{},"interfaces/PaginationModel.html":{},"injectables/PipesPipe.html":{},"controllers/SecurityController.html":{},"injectables/SecurityService.html":{},"classes/SignDTO.html":{},"controllers/TransferController.html":{},"classes/TransferDTO.html":{},"entities/TransferEntity.html":{},"interfaces/TransferModel.html":{},"injectables/TransferRepository.html":{},"interfaces/TransferRepositoryInterface.html":{},"injectables/TransferService.html":{},"classes/TypeOrmExceptionFilter.html":{},"injectables/TypesOrmPostgresConfigService.html":{},"controllers/UserController.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["type.entity",{"_index":387,"title":{},"body":{"injectables/AccountTypeRepository.html":{}}}],["type.entity.ts",{"_index":363,"title":{},"body":{"entities/AccountTypeEntity.html":{},"entities/DocumentTypeEntity.html":{},"coverage.html":{}}}],["type.entity.ts:15",{"_index":365,"title":{},"body":{"entities/AccountTypeEntity.html":{},"entities/DocumentTypeEntity.html":{}}}],["type.entity.ts:22",{"_index":368,"title":{},"body":{"entities/AccountTypeEntity.html":{},"entities/DocumentTypeEntity.html":{}}}],["type.entity.ts:28",{"_index":369,"title":{},"body":{"entities/AccountTypeEntity.html":{},"entities/DocumentTypeEntity.html":{}}}],["type.mode.ts",{"_index":373,"title":{},"body":{"interfaces/AccountTypeModel.html":{},"coverage.html":{}}}],["type.model.ts",{"_index":819,"title":{},"body":{"interfaces/DocumentTypeModel.html":{},"coverage.html":{}}}],["type.repository.ts",{"_index":375,"title":{},"body":{"injectables/AccountTypeRepository.html":{},"injectables/DocumentTypeRepository.html":{},"coverage.html":{}}}],["type.repository.ts:24",{"_index":379,"title":{},"body":{"injectables/AccountTypeRepository.html":{}}}],["type.repository.ts:25",{"_index":828,"title":{},"body":{"injectables/DocumentTypeRepository.html":{}}}],["type.repository.ts:28",{"_index":384,"title":{},"body":{"injectables/AccountTypeRepository.html":{}}}],["type.repository.ts:29",{"_index":829,"title":{},"body":{"injectables/DocumentTypeRepository.html":{}}}],["type.repository.ts:32",{"_index":385,"title":{},"body":{"injectables/AccountTypeRepository.html":{}}}],["type.repository.ts:38",{"_index":823,"title":{},"body":{"injectables/DocumentTypeRepository.html":{}}}],["type.repository.ts:44",{"_index":378,"title":{},"body":{"injectables/AccountTypeRepository.html":{}}}],["type.repository.ts:47",{"_index":824,"title":{},"body":{"injectables/DocumentTypeRepository.html":{}}}],["type.repository.ts:51",{"_index":827,"title":{},"body":{"injectables/DocumentTypeRepository.html":{}}}],["type.repository.ts:52",{"_index":383,"title":{},"body":{"injectables/AccountTypeRepository.html":{}}}],["type.repository.ts:65",{"_index":826,"title":{},"body":{"injectables/DocumentTypeRepository.html":{}}}],["type.repository.ts:68",{"_index":382,"title":{},"body":{"injectables/AccountTypeRepository.html":{}}}],["type.repository.ts:69",{"_index":825,"title":{},"body":{"injectables/DocumentTypeRepository.html":{}}}],["type.repository.ts:7",{"_index":377,"title":{},"body":{"injectables/AccountTypeRepository.html":{}}}],["type.repository.ts:72",{"_index":381,"title":{},"body":{"injectables/AccountTypeRepository.html":{}}}],["type.repository.ts:8",{"_index":822,"title":{},"body":{"injectables/DocumentTypeRepository.html":{}}}],["typeid",{"_index":662,"title":{},"body":{"injectables/CustomerService.html":{}}}],["typeorm",{"_index":191,"title":{},"body":{"entities/AccountEntity.html":{},"injectables/AccountRepository.html":{},"entities/AccountTypeEntity.html":{},"injectables/AccountTypeRepository.html":{},"entities/CustomerEntity.html":{},"injectables/CustomerRepository.html":{},"entities/DepositEntity.html":{},"injectables/DepositRepository.html":{},"entities/DocumentTypeEntity.html":{},"injectables/DocumentTypeRepository.html":{},"entities/TransferEntity.html":{},"injectables/TransferRepository.html":{},"classes/TypeOrmExceptionFilter.html":{},"dependencies.html":{}}}],["typeormerror",{"_index":1137,"title":{},"body":{"classes/TypeOrmExceptionFilter.html":{}}}],["typeormexceptionfilter",{"_index":446,"title":{"classes/TypeOrmExceptionFilter.html":{}},"body":{"modules/AppModule.html":{},"classes/TypeOrmExceptionFilter.html":{},"coverage.html":{}}}],["typeormmodule",{"_index":441,"title":{},"body":{"modules/AppModule.html":{}}}],["typeormmodule.forfeature",{"_index":472,"title":{},"body":{"modules/AppModule.html":{}}}],["typeormmodule.forroot",{"_index":458,"title":{},"body":{"modules/AppModule.html":{}}}],["typeormmoduleoptions",{"_index":1166,"title":{},"body":{"injectables/TypesOrmPostgresConfigService.html":{}}}],["typeormoptionsfactory",{"_index":1167,"title":{},"body":{"injectables/TypesOrmPostgresConfigService.html":{}}}],["typescript",{"_index":1283,"title":{},"body":{"index.html":{}}}],["typesormpostgresconfigservice",{"_index":475,"title":{"injectables/TypesOrmPostgresConfigService.html":{}},"body":{"modules/AppModule.html":{},"injectables/TypesOrmPostgresConfigService.html":{},"coverage.html":{}}}],["un",{"_index":330,"title":{},"body":{"injectables/AccountService.html":{},"classes/CustomerDTO.html":{},"injectables/CustomerService.html":{},"classes/CustomerUpdateDTO.html":{},"classes/DataRangeDTO.html":{},"classes/DepositDTO.html":{},"injectables/DepositService.html":{},"classes/PaginationDTO.html":{},"classes/TransferDTO.html":{},"classes/TypeOrmExceptionFilter.html":{}}}],["una",{"_index":139,"title":{},"body":{"classes/AccountDTO.html":{},"injectables/AccountService.html":{},"classes/CustomerDTO.html":{},"classes/CustomerUpdateDTO.html":{},"classes/DataRangeDTO.html":{},"classes/DepositDTO.html":{},"injectables/DepositService.html":{},"classes/PaginationDTO.html":{},"classes/SignDTO.html":{},"classes/TransferDTO.html":{},"injectables/TransferService.html":{}}}],["unauthorizedexception",{"_index":966,"title":{},"body":{"injectables/SecurityService.html":{}}}],["unauthorizedexception('datos",{"_index":977,"title":{},"body":{"injectables/SecurityService.html":{}}}],["undefined",{"_index":264,"title":{},"body":{"injectables/AccountRepository.html":{},"injectables/CustomerRepository.html":{},"injectables/CustomerService.html":{},"injectables/DepositRepository.html":{},"injectables/TransferRepository.html":{}}}],["unknown",{"_index":958,"title":{},"body":{"injectables/SecurityService.html":{}}}],["unlicensed",{"_index":1345,"title":{},"body":{"properties.html":{}}}],["unsuscribe",{"_index":614,"title":{},"body":{"injectables/CustomerService.html":{}}}],["unsuscribe(id",{"_index":630,"title":{},"body":{"injectables/CustomerService.html":{}}}],["unsuscribeuser",{"_index":1181,"title":{},"body":{"controllers/UserController.html":{}}}],["unsuscribeuser(@param('id",{"_index":1215,"title":{},"body":{"controllers/UserController.html":{}}}],["unsuscribeuser(id",{"_index":1196,"title":{},"body":{"controllers/UserController.html":{}}}],["up",{"_index":941,"title":{},"body":{"controllers/SecurityController.html":{}}}],["update",{"_index":221,"title":{},"body":{"injectables/AccountRepository.html":{},"injectables/AccountTypeRepository.html":{},"interfaces/BaseRepositoryInterface.html":{},"injectables/CustomerRepository.html":{},"injectables/DepositRepository.html":{},"injectables/DocumentTypeRepository.html":{},"injectables/TransferRepository.html":{}}}],["update(id",{"_index":246,"title":{},"body":{"injectables/AccountRepository.html":{},"injectables/AccountTypeRepository.html":{},"interfaces/BaseRepositoryInterface.html":{},"injectables/CustomerRepository.html":{},"injectables/DepositRepository.html":{},"injectables/DocumentTypeRepository.html":{},"injectables/TransferRepository.html":{}}}],["updatedcustomer",{"_index":615,"title":{},"body":{"injectables/CustomerService.html":{}}}],["updatedcustomer(id",{"_index":635,"title":{},"body":{"injectables/CustomerService.html":{}}}],["updateuser",{"_index":1182,"title":{},"body":{"controllers/UserController.html":{}}}],["updateuser(id",{"_index":1199,"title":{},"body":{"controllers/UserController.html":{}}}],["use",{"_index":899,"title":{},"body":{"injectables/MiddlewaresMiddleware.html":{},"index.html":{}}}],["use(req",{"_index":900,"title":{},"body":{"injectables/MiddlewaresMiddleware.html":{}}}],["useclass",{"_index":474,"title":{},"body":{"modules/AppModule.html":{}}}],["useguards",{"_index":79,"title":{},"body":{"controllers/AccountController.html":{},"controllers/TransferController.html":{},"controllers/UserController.html":{}}}],["useguards(guardsguard",{"_index":101,"title":{},"body":{"controllers/AccountController.html":{},"controllers/TransferController.html":{},"controllers/UserController.html":{}}}],["user",{"_index":345,"title":{},"body":{"injectables/AccountService.html":{},"injectables/SecurityService.html":{},"controllers/UserController.html":{}}}],["user.balance",{"_index":347,"title":{},"body":{"injectables/AccountService.html":{}}}],["user.customer.id",{"_index":346,"title":{},"body":{"injectables/AccountService.html":{}}}],["user.document",{"_index":982,"title":{},"body":{"injectables/SecurityService.html":{}}}],["user.documenttypeid",{"_index":981,"title":{},"body":{"injectables/SecurityService.html":{}}}],["user.email",{"_index":972,"title":{},"body":{"injectables/SecurityService.html":{}}}],["user.fullname",{"_index":983,"title":{},"body":{"injectables/SecurityService.html":{}}}],["user.password",{"_index":973,"title":{},"body":{"injectables/SecurityService.html":{}}}],["user.phone",{"_index":984,"title":{},"body":{"injectables/SecurityService.html":{}}}],["usercontroller",{"_index":425,"title":{"controllers/UserController.html":{}},"body":{"modules/AppModule.html":{},"controllers/UserController.html":{},"coverage.html":{}}}],["username",{"_index":464,"title":{},"body":{"modules/AppModule.html":{},"injectables/TypesOrmPostgresConfigService.html":{}}}],["userrepository",{"_index":225,"title":{},"body":{"injectables/AccountRepository.html":{},"injectables/AccountTypeRepository.html":{}}}],["using",{"_index":1323,"title":{},"body":{"index.html":{}}}],["usuario",{"_index":964,"title":{},"body":{"injectables/SecurityService.html":{},"classes/SignDTO.html":{}}}],["uuid",{"_index":364,"title":{},"body":{"entities/AccountTypeEntity.html":{},"entities/CustomerEntity.html":{},"entities/DepositEntity.html":{},"entities/DocumentTypeEntity.html":{},"entities/TransferEntity.html":{}}}],["v4",{"_index":370,"title":{},"body":{"entities/AccountTypeEntity.html":{},"entities/CustomerEntity.html":{},"entities/DepositEntity.html":{},"entities/DocumentTypeEntity.html":{},"entities/TransferEntity.html":{}}}],["validator",{"_index":154,"title":{},"body":{"classes/AccountDTO.html":{},"classes/CustomerDTO.html":{},"classes/CustomerUpdateDTO.html":{},"classes/DataRangeDTO.html":{},"classes/DepositDTO.html":{},"classes/PaginationDTO.html":{},"classes/SignDTO.html":{},"classes/TransferDTO.html":{},"dependencies.html":{}}}],["value",{"_index":168,"title":{},"body":{"entities/AccountEntity.html":{},"entities/AccountTypeEntity.html":{},"entities/CustomerEntity.html":{},"entities/DepositEntity.html":{},"entities/DocumentTypeEntity.html":{},"injectables/PipesPipe.html":{},"entities/TransferEntity.html":{},"miscellaneous/variables.html":{}}}],["varchar",{"_index":184,"title":{},"body":{"entities/AccountEntity.html":{},"entities/AccountTypeEntity.html":{},"entities/CustomerEntity.html":{},"entities/DocumentTypeEntity.html":{},"entities/TransferEntity.html":{}}}],["variable",{"_index":1231,"title":{},"body":{"coverage.html":{}}}],["variables",{"_index":1347,"title":{"miscellaneous/variables.html":{}},"body":{"miscellaneous/variables.html":{}}}],["verificar",{"_index":327,"title":{},"body":{"injectables/AccountService.html":{}}}],["verifyamountintobalance",{"_index":291,"title":{},"body":{"injectables/AccountService.html":{}}}],["verifyamountintobalance(accountid",{"_index":325,"title":{},"body":{"injectables/AccountService.html":{}}}],["version",{"_index":1342,"title":{},"body":{"properties.html":{}}}],["void",{"_index":230,"title":{},"body":{"injectables/AccountRepository.html":{},"injectables/AccountService.html":{},"injectables/AccountTypeRepository.html":{},"modules/AppModule.html":{},"interfaces/BaseRepositoryInterface.html":{},"injectables/CustomerRepository.html":{},"controllers/DepositController.html":{},"injectables/DepositRepository.html":{},"injectables/DepositService.html":{},"injectables/DocumentTypeRepository.html":{},"classes/ExceptionFiltersFilter.html":{},"injectables/MiddlewaresMiddleware.html":{},"injectables/TransferRepository.html":{},"injectables/TransferService.html":{},"classes/TypeOrmExceptionFilter.html":{}}}],["watch",{"_index":1293,"title":{},"body":{"index.html":{}}}],["week",{"_index":1302,"title":{},"body":{"index.html":{}}}],["workshop",{"_index":1299,"title":{},"body":{"index.html":{}}}],["y",{"_index":515,"title":{},"body":{"classes/CustomerDTO.html":{},"classes/CustomerUpdateDTO.html":{}}}],["ya",{"_index":661,"title":{},"body":{"injectables/CustomerService.html":{},"injectables/SecurityService.html":{}}}],["yes",{"_index":229,"title":{},"body":{"injectables/AccountRepository.html":{},"interfaces/BaseRepositoryInterface.html":{},"injectables/CustomerRepository.html":{},"injectables/DepositRepository.html":{},"injectables/DepositService.html":{},"injectables/TransferRepository.html":{},"injectables/TransferService.html":{}}}],["z])(?=.*[a",{"_index":530,"title":{},"body":{"classes/CustomerDTO.html":{},"classes/CustomerUpdateDTO.html":{}}}],["z]).{8",{"_index":532,"title":{},"body":{"classes/CustomerDTO.html":{},"classes/CustomerUpdateDTO.html":{}}}],["za",{"_index":531,"title":{},"body":{"classes/CustomerDTO.html":{},"classes/CustomerUpdateDTO.html":{}}}],["zoom",{"_index":421,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"controllers/AccountController.html":{"url":"controllers/AccountController.html","title":"controller - AccountController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AccountController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/presentation/controllers/account/account.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                account\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    Async\n                                addBalance\n                            \n                            \n                                    \n                                    Async\n                                amountBalance\n                            \n                            \n                                    \n                                changeAccountType\n                            \n                            \n                                    \n                                changeState\n                            \n                            \n                                    \n                                    \n                                    Async\n                                createAccount\n                            \n                            \n                                    \n                                deleteAccount\n                            \n                            \n                                    \n                                    Async\n                                getAccountByCustomerId\n                            \n                            \n                                    \n                                    \n                                    Async\n                                getAll\n                            \n                            \n                                    \n                                    Async\n                                getBalance\n                            \n                            \n                                    \n                                    \n                                    Async\n                                getBalanceAll\n                            \n                            \n                                    \n                                    Async\n                                getState\n                            \n                            \n                                    \n                                    \n                                removeBalance\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Async\n                        addBalance\n                        \n                    \n                \n            \n            \n                \n                        \n                    addBalance(id: string, body: literal type)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post(':id')@UseGuards(GuardsGuard)\n                \n            \n\n                    \n                        \n                            Defined in src/presentation/controllers/account/account.controller.ts:49\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                body\n                                            \n                                                        literal type\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        amountBalance\n                        \n                    \n                \n            \n            \n                \n                        \n                    amountBalance(id: string, body: literal type)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/account/:id')\n                \n            \n\n                    \n                        \n                            Defined in src/presentation/controllers/account/account.controller.ts:82\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                body\n                                            \n                                                        literal type\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        changeAccountType\n                        \n                    \n                \n            \n            \n                \n                        \n                    changeAccountType(id: string, body: literal type)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Put('accountype/:id')\n                \n            \n\n                    \n                        \n                            Defined in src/presentation/controllers/account/account.controller.ts:104\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                body\n                                            \n                                                        literal type\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         string\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        changeState\n                        \n                    \n                \n            \n            \n                \n                        \n                    changeState(id: string, body: literal type)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Put(':id')\n                \n            \n\n                    \n                        \n                            Defined in src/presentation/controllers/account/account.controller.ts:90\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                body\n                                            \n                                                        literal type\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         string\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Async\n                        createAccount\n                        \n                    \n                \n            \n            \n                \n                        \n                    createAccount(account: AccountDTO)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post()@UseGuards(GuardsGuard)\n                \n            \n\n                    \n                        \n                            Defined in src/presentation/controllers/account/account.controller.ts:43\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                account\n                                            \n                                                            AccountDTO\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        deleteAccount\n                        \n                    \n                \n            \n            \n                \n                        \n                    deleteAccount(id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete(':id')\n                \n            \n\n                    \n                        \n                            Defined in src/presentation/controllers/account/account.controller.ts:113\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         string\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        getAccountByCustomerId\n                        \n                    \n                \n            \n            \n                \n                        \n                    getAccountByCustomerId(id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/customer/:id')\n                \n            \n\n                    \n                        \n                            Defined in src/presentation/controllers/account/account.controller.ts:75\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Async\n                        getAll\n                        \n                    \n                \n            \n            \n                \n                        \n                    getAll()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()@UseGuards(GuardsGuard)\n                \n            \n\n                    \n                        \n                            Defined in src/presentation/controllers/account/account.controller.ts:37\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         Promise\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        getBalance\n                        \n                    \n                \n            \n            \n                \n                        \n                    getBalance(id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('balance/:id')\n                \n            \n\n                    \n                        \n                            Defined in src/presentation/controllers/account/account.controller.ts:25\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Async\n                        getBalanceAll\n                        \n                    \n                \n            \n            \n                \n                        \n                    getBalanceAll(id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('amount/:id')@UseGuards(GuardsGuard)\n                \n            \n\n                    \n                        \n                            Defined in src/presentation/controllers/account/account.controller.ts:31\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        getState\n                        \n                    \n                \n            \n            \n                \n                        \n                    getState(id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('state/:id')\n                \n            \n\n                    \n                        \n                            Defined in src/presentation/controllers/account/account.controller.ts:99\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        removeBalance\n                        \n                    \n                \n            \n            \n                \n                        \n                    removeBalance(id: string, body: literal type)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Put('removebalance/:id')@UseGuards(GuardsGuard)\n                \n            \n\n                    \n                        \n                            Defined in src/presentation/controllers/account/account.controller.ts:60\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                body\n                                            \n                                                        literal type\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         boolean\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Body,\n  Controller,\n  Delete,\n  Get,\n  Param,\n  Post,\n  Put,\n  UseGuards,\n} from '@nestjs/common';\nimport { AccountDTO } from 'src/business/dtos';\nimport { GuardsGuard } from 'src/presentation/guards/guards.guard';\nimport { AccountService } from '../../../business/services';\nimport { CustomerService } from '../../../business/services/customer/customer.service';\nimport { AccountEntity } from '../../../data/persistence/entities';\n\n@Controller('account')\nexport class AccountController {\n  constructor(\n    private readonly accountService: AccountService,\n    private readonly customerService: CustomerService,\n  ) {}\n\n  @Get('balance/:id')\n  async getBalance(@Param('id') id: string): Promise {\n    return await this.accountService.getBalance(id);\n  }\n\n  @Get('amount/:id')\n  @UseGuards(GuardsGuard)\n  async getBalanceAll(@Param('id') id: string): Promise {\n    return await this.accountService.CustomerBalance(id);\n  }\n\n  @Get()\n  @UseGuards(GuardsGuard)\n  async getAll(): Promise {\n    return await this.accountService.findAll();\n  }\n\n  @Post()\n  @UseGuards(GuardsGuard)\n  async createAccount(@Body() account: AccountDTO): Promise {\n    return await this.accountService.createAccount(account);\n  }\n\n  @Post(':id')\n  @UseGuards(GuardsGuard)\n  async addBalance(\n    @Param('id') id: string,\n    @Body() body: { amount: number },\n  ): Promise {\n    if (body.amount  {\n    return await this.accountService.getAccountByCustomerId(id);\n  }\n\n  @Get('/account/:id')\n  async amountBalance(\n    @Param('id') id: string,\n    @Body() body: { amount: number },\n  ): Promise {\n    return await this.accountService.verifyAmountIntoBalance(id, body.amount);\n  }\n\n  @Put(':id')\n  changeState(\n    @Param('id') id: string,\n    @Body() body: { state: boolean },\n  ): string {\n    this.accountService.changeState(id, body.state);\n    return 'estado cambiado';\n  }\n\n  @Get('state/:id')\n  async getState(@Param('id') id: string): Promise {\n    return await this.accountService.getState(id);\n  }\n\n  @Put('accountype/:id')\n  changeAccountType(\n    @Param('id') id: string,\n    @Body() body: { accountTypeId: string },\n  ): string {\n    this.accountService.changeAccountType(id, body.accountTypeId);\n    return 'cuenta cambiada';\n  }\n\n  @Delete(':id')\n  deleteAccount(@Param('id') id: string): string {\n    this.accountService.deleteAccount(id);\n    return 'cuenta eliminada';\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/AccountDTO.html":{"url":"classes/AccountDTO.html","title":"class - AccountDTO","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  AccountDTO\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/business/dtos/account.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                Data Transfer Object para representar una cuenta.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                accountTypeId\n                            \n                            \n                                    \n                                customerId\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        accountTypeId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsUUID()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/business/dtos/account.dto.ts:23\n                        \n                    \n\n            \n                \n                    Identificador único del tipo de cuenta.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        customerId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsUUID()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/business/dtos/account.dto.ts:33\n                        \n                    \n\n            \n                \n                    Identificador único del cliente.\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {\n  IsBoolean,\n  IsDateString,\n  IsNumberString,\n  IsUUID,\n} from 'class-validator';\n\n/**\n * Data Transfer Object para representar una cuenta.\n *\n * @export\n * @class AccountDTO\n */\nexport class AccountDTO {\n  /**\n   * Identificador único del tipo de cuenta.\n   * \n   * @type {string}\n   * @memberof AccountDTO\n   * @decorator IsUUID\n   */\n  @IsUUID()\n  accountTypeId: string;\n\n  /**\n   * Identificador único del cliente.\n   * \n   * @type {string}\n   * @memberof AccountDTO\n   * @decorator IsUUID\n   */\n  @IsUUID()\n  customerId: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/AccountEntity.html":{"url":"entities/AccountEntity.html","title":"entity - AccountEntity","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  AccountEntity\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/data/persistence/entities/account.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                accountType\n                            \n                            \n                                    \n                                balance\n                            \n                            \n                                    \n                                    \n                                customer\n                            \n                            \n                                    \n                                    Optional\n                                deletedAt\n                            \n                            \n                                    \n                                id\n                            \n                            \n                                    \n                                state\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        accountType\n                        \n                    \n                \n            \n                \n                    \n                        Type :         AccountTypeEntity\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ManyToOne(undefined)@JoinColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/data/persistence/entities/account.entity.ts:23\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        balance\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 0\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({name: 'balance', type: 'numeric'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/data/persistence/entities/account.entity.ts:29\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        customer\n                        \n                    \n                \n            \n                \n                    \n                        Type :         CustomerEntity\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ManyToOne(undefined)@JoinColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/data/persistence/entities/account.entity.ts:19\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        deletedAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Date | number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({name: 'deleted_at', type: 'timestamp', nullable: true, select: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/data/persistence/entities/account.entity.ts:43\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Default value : generateID()\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({name: 'id', type: 'varchar', primary: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/data/persistence/entities/account.entity.ts:15\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        state\n                        \n                    \n                \n            \n                \n                    \n                        Default value : true\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({name: 'state', type: 'boolean'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/data/persistence/entities/account.entity.ts:35\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import { Column, Entity, JoinColumn, ManyToOne } from 'typeorm';\nimport { AccountTypeEntity, CustomerEntity } from '.';\nimport { AccountModel } from '../../models';\n\n@Entity({\n  name: 'account',\n  schema: 'public',\n})\nexport class AccountEntity implements AccountModel {\n  @Column({\n    name: 'id',\n    type: 'varchar',\n    primary: true,\n  })\n  id = generateID();\n\n  @ManyToOne(() => CustomerEntity)\n  @JoinColumn()\n  customer: CustomerEntity;\n\n  @ManyToOne(() => AccountTypeEntity)\n  @JoinColumn()\n  accountType: AccountTypeEntity;\n\n  @Column({\n    name: 'balance',\n    type: 'numeric',\n  })\n  balance = 0;\n\n  @Column({\n    name: 'state',\n    type: 'boolean',\n  })\n  state = true;\n\n  @Column({\n    name: 'deleted_at',\n    type: 'timestamp',\n    nullable: true,\n    select: false,\n  })\n  deletedAt?: Date | number;\n}\n\nfunction generateID(): string {\n  const bank = process.env.BANK_ID ?? '';\n  return 20000 +''+ bank +''+ Math.floor(Math.random() * 10000)\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/AccountModel.html":{"url":"interfaces/AccountModel.html","title":"interface - AccountModel","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  AccountModel\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/data/models/account.model.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            accountType\n                                        \n                                \n                                \n                                        \n                                            balance\n                                        \n                                \n                                \n                                        \n                                            customer\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            deletedAt\n                                        \n                                \n                                \n                                        \n                                            id\n                                        \n                                \n                                \n                                        \n                                            state\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        accountType\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        accountType:         AccountTypeModel\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         AccountTypeModel\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        balance\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        balance:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        customer\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        customer:         CustomerModel\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         CustomerModel\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        deletedAt\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        deletedAt:     Date | number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     Date | number\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        id\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        id:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        state\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        state:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { CustomerModel } from '.';\nimport { AccountTypeModel } from '.';\n\nexport interface AccountModel {\n  id: string;\n  customer: CustomerModel;\n  accountType: AccountTypeModel;\n  balance: number;\n  state: boolean;\n  deletedAt?: Date | number;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AccountRepository.html":{"url":"injectables/AccountRepository.html","title":"injectable - AccountRepository","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AccountRepository\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/data/persistence/repositories/account.repository.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                delete\n                            \n                            \n                                findAll\n                            \n                            \n                                findByAccountType\n                            \n                            \n                                findByCustomer\n                            \n                            \n                                findByState\n                            \n                            \n                                findOneById\n                            \n                            \n                                    Private\n                                hardDelete\n                            \n                            \n                                register\n                            \n                            \n                                    Private\n                                    Async\n                                softDelete\n                            \n                            \n                                    Async\n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(userRepository: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/data/persistence/repositories/account.repository.ts:8\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        userRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        delete\n                        \n                    \n                \n            \n            \n                \ndelete(id: string, soft?: boolean)\n                \n            \n\n\n                    \n                        \n                            Defined in src/data/persistence/repositories/account.repository.ts:44\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                soft\n                                            \n                                                            boolean\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findAll\n                        \n                    \n                \n            \n            \n                \nfindAll()\n                \n            \n\n\n                    \n                        \n                            Defined in src/data/persistence/repositories/account.repository.ts:69\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         Promise\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findByAccountType\n                        \n                    \n                \n            \n            \n                \nfindByAccountType(accountTypeId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/data/persistence/repositories/account.repository.ts:91\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                accountTypeId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findByCustomer\n                        \n                    \n                \n            \n            \n                \nfindByCustomer(customerId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/data/persistence/repositories/account.repository.ts:81\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                customerId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findByState\n                        \n                    \n                \n            \n            \n                \nfindByState(state: boolean)\n                \n            \n\n\n                    \n                        \n                            Defined in src/data/persistence/repositories/account.repository.ts:76\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                state\n                                            \n                                                            boolean\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findOneById\n                        \n                    \n                \n            \n            \n                \nfindOneById(id: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/data/persistence/repositories/account.repository.ts:27\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        hardDelete\n                        \n                    \n                \n            \n            \n                \n                        \n                    hardDelete(id: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/data/persistence/repositories/account.repository.ts:53\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        register\n                        \n                    \n                \n            \n            \n                \nregister(entity: AccountEntity)\n                \n            \n\n\n                    \n                        \n                            Defined in src/data/persistence/repositories/account.repository.ts:14\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                entity\n                                            \n                                                            AccountEntity\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Async\n                        softDelete\n                        \n                    \n                \n            \n            \n                \n                        \n                    softDelete(id: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/data/persistence/repositories/account.repository.ts:57\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        update\n                        \n                    \n                \n            \n            \n                \n                        \n                    update(id: string, entity: AccountEntity)\n                \n            \n\n\n                    \n                        \n                            Defined in src/data/persistence/repositories/account.repository.ts:18\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                entity\n                                            \n                                                            AccountEntity\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, NotFoundException } from '@nestjs/common';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { Repository } from 'typeorm';\nimport { AccountEntity } from '../entities';\nimport { AccountRepositoryInterface } from './interfaces/';\n\n@Injectable()\nexport class AccountRepository implements AccountRepositoryInterface {\n  constructor(\n    @InjectRepository(AccountEntity)\n    private readonly userRepository: Repository,\n  ) {}\n\n  register(entity: AccountEntity): Promise {\n    return this.userRepository.save(entity);\n  }\n\n  async update(id: string, entity: AccountEntity): Promise {\n    return this.userRepository.update(id, entity).then((result) => {\n      if (result.affected === 0) {\n        throw new NotFoundException(`El Id: ${id} no existe en base de datos`);\n      }\n      return entity;\n    });\n  }\n\n  findOneById(id: string): Promise {\n    const deletedAt = undefined;\n    return this.userRepository\n      .findOne({\n        where: { id, deletedAt },\n      })\n      .then((result) => {\n        if (result) {\n          return result;\n        } else {\n          throw new NotFoundException(\n            `El Id: ${id} no existe en base de datos`,\n          );\n        }\n      });\n  }\n\n  delete(id: string, soft?: boolean): void {\n    this.findOneById(id);\n    if (soft || soft === undefined) {\n      this.softDelete(id);\n    } else {\n      this.hardDelete(id);\n    }\n  }\n\n  private hardDelete(id: string): void {\n    this.userRepository.delete(id);\n  }\n\n  private async softDelete(id: string) {\n    let newAccount = new AccountEntity();\n    const account = await this.findOneById(id);\n    newAccount = {\n      ...newAccount,\n      ...account,\n      id: account.id,\n    };\n    newAccount.deletedAt = Date.now();\n    this.update(account.id, newAccount);\n  }\n\n  findAll(): Promise {\n    const deletedAt = undefined;\n    return this.userRepository.find({\n      where: { deletedAt },\n    });\n  }\n\n  findByState(state: boolean): Promise {\n    const deletedAt = undefined;\n    return this.userRepository.find({ where: { state, deletedAt } });\n  }\n\n  findByCustomer(customerId: string): Promise {\n    const deletedAt = undefined;\n    return this.userRepository.find({\n      where: { customer: { id: customerId }, deletedAt },\n      relations: [\n        'accountType',\n      ],\n    });\n  }\n\n  findByAccountType(accountTypeId: string): Promise {\n    const deletedAt = undefined;\n    return this.userRepository.find({\n      where: { accountType: { id: accountTypeId }, deletedAt },\n    });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/AccountRepositoryInterface.html":{"url":"interfaces/AccountRepositoryInterface.html","title":"interface - AccountRepositoryInterface","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  AccountRepositoryInterface\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/data/persistence/repositories/interfaces/account-repository.interface.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                            BaseRepositoryInterface\n            \n\n        \n            Index\n            \n                \n                    \n                        \n                            Methods\n                        \n                    \n                    \n                        \n                            \n                                \n                                    \n                                        findByAccountType\n                                    \n                                \n                                \n                                    \n                                        findByCustomer\n                                    \n                                \n                                \n                                    \n                                        findByState\n                                    \n                                \n                            \n                        \n                    \n                \n            \n        \n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        findByAccountType\n                        \n                    \n                \n            \n            \n                \nfindByAccountType(accountTypeId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/data/persistence/repositories/interfaces/account-repository.interface.ts:8\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                accountTypeId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findByCustomer\n                        \n                    \n                \n            \n            \n                \nfindByCustomer(customerId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/data/persistence/repositories/interfaces/account-repository.interface.ts:7\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                customerId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findByState\n                        \n                    \n                \n            \n            \n                \nfindByState(state: boolean)\n                \n            \n\n\n                    \n                        \n                            Defined in src/data/persistence/repositories/interfaces/account-repository.interface.ts:6\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                state\n                                            \n                                                            boolean\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { AccountEntity } from '../../entities';\nimport { BaseRepositoryInterface } from './base/';\n\nexport interface AccountRepositoryInterface\n  extends BaseRepositoryInterface {\n  findByState(state: boolean): Promise;\n  findByCustomer(customerId: string): Promise;\n  findByAccountType(accountTypeId: string): Promise;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AccountService.html":{"url":"injectables/AccountService.html","title":"injectable - AccountService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AccountService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/business/services/account/account.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                addBalance\n                            \n                            \n                                    Async\n                                changeAccountType\n                            \n                            \n                                    Async\n                                changeState\n                            \n                            \n                                    Async\n                                createAccount\n                            \n                            \n                                    Async\n                                CustomerBalance\n                            \n                            \n                                deleteAccount\n                            \n                            \n                                    Async\n                                findAll\n                            \n                            \n                                    Async\n                                getAccountByCustomerId\n                            \n                            \n                                    Async\n                                getAccountType\n                            \n                            \n                                    Async\n                                getBalance\n                            \n                            \n                                    Async\n                                getState\n                            \n                            \n                                    Async\n                                removeBalance\n                            \n                            \n                                    Async\n                                verifyAmountIntoBalance\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(accountRepository: AccountRepository, accountTypeRepository: AccountTypeRepository, customerRepository: CustomerRepository)\n                    \n                \n                        \n                            \n                                Defined in src/business/services/account/account.service.ts:15\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        accountRepository\n                                                  \n                                                        \n                                                                        AccountRepository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        accountTypeRepository\n                                                  \n                                                        \n                                                                        AccountTypeRepository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        customerRepository\n                                                  \n                                                        \n                                                                        CustomerRepository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        addBalance\n                        \n                    \n                \n            \n            \n                \n                        \n                    addBalance(accountId: string, amount: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/business/services/account/account.service.ts:78\n                        \n                    \n\n\n            \n                \n                        Agregar balance a una cuenta\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                accountId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                amount\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        changeAccountType\n                        \n                    \n                \n            \n            \n                \n                        \n                    changeAccountType(accountId: string, accountTypeId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/business/services/account/account.service.ts:180\n                        \n                    \n\n\n            \n                \n                        Cambiar el tipo de cuenta a una cuenta\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                accountId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                accountTypeId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                {AccountTypeEntity}\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        changeState\n                        \n                    \n                \n            \n            \n                \n                        \n                    changeState(accountId: string, state: boolean)\n                \n            \n\n\n                    \n                        \n                            Defined in src/business/services/account/account.service.ts:148\n                        \n                    \n\n\n            \n                \n                        Cambiar el estado de una cuenta\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                accountId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                state\n                                            \n                                                            boolean\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        createAccount\n                        \n                    \n                \n            \n            \n                \n                        \n                    createAccount(account: AccountDTO)\n                \n            \n\n\n                    \n                        \n                            Defined in src/business/services/account/account.service.ts:29\n                        \n                    \n\n\n            \n                \n                        Crear una cuenta\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                account\n                                            \n                                                            AccountDTO\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                {AccountEntity}\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        CustomerBalance\n                        \n                    \n                \n            \n            \n                \n                        \n                    CustomerBalance(id: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/business/services/account/account.service.ts:40\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        deleteAccount\n                        \n                    \n                \n            \n            \n                \ndeleteAccount(accountId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/business/services/account/account.service.ts:204\n                        \n                    \n\n\n            \n                \n                        Borrar una cuenta\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                accountId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        findAll\n                        \n                    \n                \n            \n            \n                \n                        \n                    findAll()\n                \n            \n\n\n                    \n                        \n                            Defined in src/business/services/account/account.service.ts:67\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         Promise\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        getAccountByCustomerId\n                        \n                    \n                \n            \n            \n                \n                        \n                    getAccountByCustomerId(customerId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/business/services/account/account.service.ts:63\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                customerId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        getAccountType\n                        \n                    \n                \n            \n            \n                \n                        \n                    getAccountType(accountId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/business/services/account/account.service.ts:162\n                        \n                    \n\n\n            \n                \n                        Obtener el tipo de cuenta de una cuenta\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                accountId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                {AccountTypeEntity}\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        getBalance\n                        \n                    \n                \n            \n            \n                \n                        \n                    getBalance(accountId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/business/services/account/account.service.ts:54\n                        \n                    \n\n\n            \n                \n                        Obtener el balance de una cuenta\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                accountId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                {number}\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        getState\n                        \n                    \n                \n            \n            \n                \n                        \n                    getState(accountId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/business/services/account/account.service.ts:137\n                        \n                    \n\n\n            \n                \n                        Obtener el estado de una cuenta\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                accountId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                {boolean}\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        removeBalance\n                        \n                    \n                \n            \n            \n                \n                        \n                    removeBalance(accountId: string, amount: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/business/services/account/account.service.ts:95\n                        \n                    \n\n\n            \n                \n                        Remover balance de una cuenta\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                accountId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                amount\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        verifyAmountIntoBalance\n                        \n                    \n                \n            \n            \n                \n                        \n                    verifyAmountIntoBalance(accountId: string, amount: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/business/services/account/account.service.ts:115\n                        \n                    \n\n\n            \n                \n                        Verificar la disponibilidad de un monto a retirar en una cuenta\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                accountId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                amount\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                {boolean}\n\n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { ConflictException } from '@nestjs/common/exceptions';\nimport { AccountDTO } from 'src/business/dtos';\nimport {\n  AccountEntity,\n  AccountTypeEntity,\n} from '../../../data/persistence/entities';\nimport {\n  AccountRepository,\n  AccountTypeRepository,\n  CustomerRepository,\n} from '../../../data/persistence/repositories';\n\n@Injectable()\nexport class AccountService {\n  constructor(\n    private readonly accountRepository: AccountRepository,\n    private readonly accountTypeRepository: AccountTypeRepository,\n    private readonly customerRepository: CustomerRepository,\n  ) {}\n\n  /**\n   * Crear una cuenta\n   *\n   * @param {AccountModel} account\n   * @return {*}  {AccountEntity}\n   * @memberof AccountService\n   */\n  async createAccount(account: AccountDTO): Promise {\n    const newAccount = new AccountEntity();\n    newAccount.customer = await this.customerRepository.findOneById(\n      account.customerId,\n    );\n    newAccount.accountType = await this.accountTypeRepository.findOneById(\n      account.accountTypeId,\n    );\n    return this.accountRepository.register(newAccount);\n  }\n\n  async CustomerBalance(id: string): Promise {\n    const array = (await this.accountRepository.findAll()).filter(\n      (user) => user.customer.id === id && user.balance > 0,\n    );\n    return array.length  {\n    if (!this.getState(accountId)) {\n      throw new ConflictException(`Cuenta desactivada`);\n    }\n    let newAccount = new AccountEntity();\n    newAccount = await this.accountRepository.findOneById(accountId);\n    return newAccount.balance;\n  }\n\n  async getAccountByCustomerId(customerId: string): Promise {\n    return await this.accountRepository.findByCustomer(customerId);\n  }\n\n  async findAll(): Promise {\n    return await this.accountRepository.findAll();\n  }\n\n  /**\n   * Agregar balance a una cuenta\n   *\n   * @param {string} accountId\n   * @param {number} amount\n   * @memberof AccountService\n   */\n  async addBalance(accountId: string, amount: number) {\n    if (!this.getState(accountId)) {\n      throw new ConflictException(`Cuenta desactivada`);\n    }\n    let newAccount = new AccountEntity();\n    newAccount = await this.accountRepository.findOneById(accountId);\n    newAccount.balance += amount;\n    this.accountRepository.update(accountId, newAccount);\n  }\n\n  /**\n   * Remover balance de una cuenta\n   *\n   * @param {string} accountId\n   * @param {number} amount\n   * @memberof AccountService\n   */\n  async removeBalance(accountId: string, amount: number) {\n    if (!this.getState(accountId)) {\n      throw new ConflictException(`Cuenta desactivada`);\n    }\n    if (await this.verifyAmountIntoBalance(accountId, amount)) {\n      let newAccount = new AccountEntity();\n      newAccount = await this.accountRepository.findOneById(accountId);\n      newAccount.balance -= Number(amount);\n      this.accountRepository.update(accountId, newAccount);\n    }\n  }\n\n  /**\n   * Verificar la disponibilidad de un monto a retirar en una cuenta\n   *\n   * @param {string} accountId\n   * @param {number} amount\n   * @return {*}  {boolean}\n   * @memberof AccountService\n   */\n  async verifyAmountIntoBalance(\n    accountId: string,\n    amount: number,\n  ): Promise {\n    if (!this.getState(accountId)) {\n      throw new ConflictException(`Cuenta desactivada`);\n    }\n    let newAccount = new AccountEntity();\n    newAccount = await this.accountRepository.findOneById(accountId);\n    if (newAccount.balance  {\n    return (await this.accountRepository.findOneById(accountId)).state;\n  }\n\n  /**\n   * Cambiar el estado de una cuenta\n   *\n   * @param {string} accountId\n   * @param {boolean} state\n   * @memberof AccountService\n   */\n  async changeState(accountId: string, state: boolean) {\n    let newAccount = new AccountEntity();\n    newAccount = await this.accountRepository.findOneById(accountId);\n    newAccount.state = state;\n    this.accountRepository.update(accountId, newAccount);\n  }\n\n  /**\n   * Obtener el tipo de cuenta de una cuenta\n   *\n   * @param {string} accountId\n   * @return {*}  {AccountTypeEntity}\n   * @memberof AccountService\n   */\n  async getAccountType(accountId: string): Promise {\n    if (!this.getState(accountId)) {\n      throw new ConflictException(`Cuenta desactivada`);\n    }\n    let newAccount = new AccountEntity();\n    newAccount = await this.accountRepository.findOneById(accountId);\n    const AccountTypeEntity = newAccount.accountType;\n    return AccountTypeEntity;\n  }\n\n  /**\n   * Cambiar el tipo de cuenta a una cuenta\n   *\n   * @param {string} accountId\n   * @param {string} accountTypeId\n   * @return {*}  {AccountTypeEntity}\n   * @memberof AccountService\n   */\n  async changeAccountType(\n    accountId: string,\n    accountTypeId: string,\n  ): Promise {\n    if (!this.getState(accountId)) {\n      throw new ConflictException(`Cuenta desactivada`);\n    }\n    let newAccount = new AccountEntity();\n    newAccount = await this.accountRepository.findOneById(accountId);\n    const accountType = await this.accountTypeRepository.findOneById(\n      accountTypeId,\n    );\n    newAccount.accountType = accountType;\n\n    return (await this.accountRepository.update(accountId, newAccount))\n      .accountType;\n  }\n\n  /**\n   * Borrar una cuenta\n   *\n   * @param {string} accountId\n   * @memberof AccountService\n   */\n  deleteAccount(accountId: string): void {\n    if (!this.getState(accountId)) {\n      throw new ConflictException(`Cuenta desactivada`);\n    }\n    this.accountRepository.delete(accountId);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/AccountTypeEntity.html":{"url":"entities/AccountTypeEntity.html","title":"entity - AccountTypeEntity","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  AccountTypeEntity\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/data/persistence/entities/account-type.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                id\n                            \n                            \n                                    \n                                name\n                            \n                            \n                                    \n                                state\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Default value : uuid()\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({name: 'id', type: 'uuid', primary: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/data/persistence/entities/account-type.entity.ts:15\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({name: 'name', type: 'varchar', length: 50})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/data/persistence/entities/account-type.entity.ts:22\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        state\n                        \n                    \n                \n            \n                \n                    \n                        Default value : true\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({name: 'state', type: 'boolean'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/data/persistence/entities/account-type.entity.ts:28\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import { Column, Entity } from 'typeorm';\nimport { v4 as uuid } from 'uuid';\nimport { AccountTypeModel } from '../../models';\n\n@Entity({\n  name: 'account_type',\n  schema: 'public',\n})\nexport class AccountTypeEntity implements AccountTypeModel {\n  @Column({\n    name: 'id',\n    type: 'uuid',\n    primary: true,\n  })\n  id = uuid();\n\n  @Column({\n    name: 'name',\n    type: 'varchar',\n    length: 50,\n  })\n  name: string;\n\n  @Column({\n    name: 'state',\n    type: 'boolean',\n  })\n  state = true;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/AccountTypeModel.html":{"url":"interfaces/AccountTypeModel.html","title":"interface - AccountTypeModel","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  AccountTypeModel\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/data/models/account-type.mode.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            id\n                                        \n                                \n                                \n                                        \n                                            name\n                                        \n                                \n                                \n                                        \n                                            state\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        id\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        id:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        name\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        name:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        state\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        state:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export interface AccountTypeModel {\n  id: string;\n  name: string;\n  state: boolean;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AccountTypeRepository.html":{"url":"injectables/AccountTypeRepository.html","title":"injectable - AccountTypeRepository","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AccountTypeRepository\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/data/persistence/repositories/account-type.repository.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                delete\n                            \n                            \n                                findAll\n                            \n                            \n                                findByName\n                            \n                            \n                                findByState\n                            \n                            \n                                    Async\n                                findOneById\n                            \n                            \n                                register\n                            \n                            \n                                    Async\n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(userRepository: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/data/persistence/repositories/account-type.repository.ts:7\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        userRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        delete\n                        \n                    \n                \n            \n            \n                \ndelete(id: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/data/persistence/repositories/account-type.repository.ts:44\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findAll\n                        \n                    \n                \n            \n            \n                \nfindAll()\n                \n            \n\n\n                    \n                        \n                            Defined in src/data/persistence/repositories/account-type.repository.ts:24\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         Promise\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findByName\n                        \n                    \n                \n            \n            \n                \nfindByName(name: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/data/persistence/repositories/account-type.repository.ts:72\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                name\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findByState\n                        \n                    \n                \n            \n            \n                \nfindByState(state: boolean)\n                \n            \n\n\n                    \n                        \n                            Defined in src/data/persistence/repositories/account-type.repository.ts:68\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                state\n                                            \n                                                            boolean\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        findOneById\n                        \n                    \n                \n            \n            \n                \n                        \n                    findOneById(id: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/data/persistence/repositories/account-type.repository.ts:52\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        register\n                        \n                    \n                \n            \n            \n                \nregister(entity: AccountTypeEntity)\n                \n            \n\n\n                    \n                        \n                            Defined in src/data/persistence/repositories/account-type.repository.ts:28\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                entity\n                                            \n                                                            AccountTypeEntity\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        update\n                        \n                    \n                \n            \n            \n                \n                        \n                    update(id: string, entity: AccountTypeEntity)\n                \n            \n\n\n                    \n                        \n                            Defined in src/data/persistence/repositories/account-type.repository.ts:32\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                entity\n                                            \n                                                            AccountTypeEntity\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, NotFoundException } from '@nestjs/common';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { Repository } from 'typeorm';\nimport { AccountTypeEntity } from '../entities/account-type.entity';\nimport { AccountTypeRepositoryInterface } from './interfaces/';\n@Injectable()\nexport class AccountTypeRepository implements AccountTypeRepositoryInterface {\n  constructor(\n    @InjectRepository(AccountTypeEntity)\n    private readonly userRepository: Repository,\n  ) {\n    this.register({\n      id: 'ab27c9ac-a01c-4c22-a6d6-ce5ab3b79185',\n      name: 'Cuenta de ahorros',\n      state: true,\n    });\n\n    this.register({\n      id: '10b6c590-85fa-4621-b85a-4021e882c080',\n      name: 'Cuenta corriente',\n      state: true,\n    });\n  }\n  findAll(): Promise {\n    return this.userRepository.find();\n  }\n\n  register(entity: AccountTypeEntity): Promise {\n    return this.userRepository.save(entity);\n  }\n\n  async update(\n    id: string,\n    entity: AccountTypeEntity,\n  ): Promise {\n    return this.userRepository.update(id, entity).then((result) => {\n      if (result.affected === 0) {\n        throw new NotFoundException(`El Id: ${id} no existe en base de datos`);\n      }\n      return entity;\n    });\n  }\n\n  delete(id: string): void {\n    this.userRepository.delete(id).then((result) => {\n      if (result.affected === 0) {\n        throw new NotFoundException(`El Id: ${id} no existe en base de datos`);\n      }\n    });\n  }\n\n  async findOneById(id: string): Promise {\n    return this.userRepository\n      .findOne({\n        where: { id },\n      })\n      ?.then((result) => {\n        if (result) {\n          return result;\n        } else {\n          throw new NotFoundException(\n            `El Id: ${id} no existe en base de datos`,\n          );\n        }\n      });\n  }\n\n  findByState(state: boolean): Promise {\n    return this.userRepository.find({ where: { state } });\n  }\n\n  findByName(name: string): Promise {\n    return this.userRepository.find({ where: { name } });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/AccountTypeRepositoryInterface.html":{"url":"interfaces/AccountTypeRepositoryInterface.html","title":"interface - AccountTypeRepositoryInterface","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  AccountTypeRepositoryInterface\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/data/persistence/repositories/interfaces/account-type-repository.interface.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                            BaseRepositoryInterface\n            \n\n        \n            Index\n            \n                \n                    \n                        \n                            Methods\n                        \n                    \n                    \n                        \n                            \n                                \n                                    \n                                        findByName\n                                    \n                                \n                                \n                                    \n                                        findByState\n                                    \n                                \n                            \n                        \n                    \n                \n            \n        \n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        findByName\n                        \n                    \n                \n            \n            \n                \nfindByName(name: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/data/persistence/repositories/interfaces/account-type-repository.interface.ts:7\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                name\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findByState\n                        \n                    \n                \n            \n            \n                \nfindByState(state: boolean)\n                \n            \n\n\n                    \n                        \n                            Defined in src/data/persistence/repositories/interfaces/account-type-repository.interface.ts:6\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                state\n                                            \n                                                            boolean\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { AccountTypeEntity } from '../../entities';\nimport { BaseRepositoryInterface } from './base/';\n\nexport interface AccountTypeRepositoryInterface\n  extends BaseRepositoryInterface {\n  findByState(state: boolean): Promise;\n  findByName(name: string): Promise;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AppModule.html":{"url":"modules/AppModule.html","title":"module - AppModule","body":"\n                   \n\n\n\n\n    Modules\n    AppModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AppModule\n\n\n\ncluster_AppModule_providers\n\n\n\n\nAccountRepository\n\nAccountRepository\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAccountRepository->AppModule\n\n\n\n\n\nAccountService\n\nAccountService\n\nAppModule -->\n\nAccountService->AppModule\n\n\n\n\n\nAccountTypeRepository\n\nAccountTypeRepository\n\nAppModule -->\n\nAccountTypeRepository->AppModule\n\n\n\n\n\nCustomerRepository\n\nCustomerRepository\n\nAppModule -->\n\nCustomerRepository->AppModule\n\n\n\n\n\nCustomerService\n\nCustomerService\n\nAppModule -->\n\nCustomerService->AppModule\n\n\n\n\n\nDepositRepository\n\nDepositRepository\n\nAppModule -->\n\nDepositRepository->AppModule\n\n\n\n\n\nDepositService\n\nDepositService\n\nAppModule -->\n\nDepositService->AppModule\n\n\n\n\n\nDocumentTypeRepository\n\nDocumentTypeRepository\n\nAppModule -->\n\nDocumentTypeRepository->AppModule\n\n\n\n\n\nSecurityService\n\nSecurityService\n\nAppModule -->\n\nSecurityService->AppModule\n\n\n\n\n\nTransferRepository\n\nTransferRepository\n\nAppModule -->\n\nTransferRepository->AppModule\n\n\n\n\n\nTransferService\n\nTransferService\n\nAppModule -->\n\nTransferService->AppModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/app.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AccountRepository\n                        \n                        \n                            AccountService\n                        \n                        \n                            AccountTypeRepository\n                        \n                        \n                            CustomerRepository\n                        \n                        \n                            CustomerService\n                        \n                        \n                            DepositRepository\n                        \n                        \n                            DepositService\n                        \n                        \n                            DocumentTypeRepository\n                        \n                        \n                            SecurityService\n                        \n                        \n                            TransferRepository\n                        \n                        \n                            TransferService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            UserController\n                        \n                        \n                            TransferController\n                        \n                        \n                            SecurityController\n                        \n                        \n                            DepositController\n                        \n                        \n                            AccountController\n                        \n                    \n                \n            \n        \n\n        \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        configure\n                        \n                    \n                \n            \n            \n                \nconfigure(consumer: MiddlewareConsumer)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app.module.ts:92\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                consumer\n                                            \n                                                        MiddlewareConsumer\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n    \n\n\n    \n        import { MiddlewareConsumer, Module, NestModule } from '@nestjs/common';\nimport { ConfigModule } from '@nestjs/config';\nimport { APP_FILTER } from '@nestjs/core';\nimport { JwtModule } from '@nestjs/jwt';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { jwtConstants } from './business/services';\nimport {\n  AccountService,\n  CustomerService,\n  DepositService,\n  SecurityService,\n  TransferService,\n} from './business/services/';\nimport {\n  AccountEntity,\n  AccountTypeEntity,\n  CustomerEntity,\n  DepositEntity,\n  DocumentTypeEntity,\n  TransferEntity,\n} from './data/persistence/entities';\nimport {\n  AccountRepository,\n  AccountTypeRepository,\n  CustomerRepository,\n  DepositRepository,\n  DocumentTypeRepository,\n  TransferRepository,\n} from './data/persistence/repositories/';\nimport { TypeOrmExceptionFilter } from './data/persistence/utils/exception-filters/typeorm.exception-filters';\nimport {\n  AccountController,\n  DepositController,\n  SecurityController,\n  TransferController,\n  UserController,\n} from './presentation/controllers/';\nimport { MiddlewaresMiddleware } from './presentation/middlewares/middlewares.middleware';\n\n@Module({\n  imports: [\n    ConfigModule.forRoot(),\n    JwtModule.register({\n      secret: jwtConstants.secret,\n    }),\n    TypeOrmModule.forRoot({\n      type: 'postgres',\n      host: process.env.DB_HOST,\n      port: 5432,\n      username: process.env.DB_USER,\n      password: process.env.DB_PASSWORD,\n      database: process.env.DB_NAME,\n      synchronize: true,\n      autoLoadEntities: true,\n    }),\n    TypeOrmModule.forFeature([\n      AccountEntity,\n      AccountTypeEntity,\n      CustomerEntity,\n      DepositEntity,\n      DocumentTypeEntity,\n      TransferEntity,\n    ]),\n  ],\n  controllers: [\n    UserController,\n    TransferController,\n    SecurityController,\n    DepositController,\n    AccountController,\n  ],\n  providers: [\n    {\n      provide: APP_FILTER,\n      useClass: TypeOrmExceptionFilter,\n    },\n    // TypesOrmPostgresConfigService,\n    CustomerService,\n    TransferService,\n    SecurityService,\n    DepositService,\n    AccountService,\n    CustomerRepository,\n    TransferRepository,\n    DepositRepository,\n    AccountRepository,\n    AccountTypeRepository,\n    DocumentTypeRepository,\n  ],\n})\nexport class AppModule implements NestModule {\n  configure(consumer: MiddlewareConsumer) {\n    consumer.apply(MiddlewaresMiddleware).forRoutes('*');\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/BaseRepositoryInterface.html":{"url":"interfaces/BaseRepositoryInterface.html","title":"interface - BaseRepositoryInterface","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  BaseRepositoryInterface\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/data/persistence/repositories/interfaces/base/base-repositories.interface.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Methods\n                        \n                    \n                    \n                        \n                            \n                                \n                                    \n                                        delete\n                                    \n                                \n                                \n                                    \n                                        findAll\n                                    \n                                \n                                \n                                    \n                                        findOneById\n                                    \n                                \n                                \n                                    \n                                        register\n                                    \n                                \n                                \n                                    \n                                        update\n                                    \n                                \n                            \n                        \n                    \n                \n            \n        \n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        delete\n                        \n                    \n                \n            \n            \n                \ndelete(id: string, soft?: boolean)\n                \n            \n\n\n                    \n                        \n                            Defined in src/data/persistence/repositories/interfaces/base/base-repositories.interface.ts:6\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                soft\n                                            \n                                                            boolean\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findAll\n                        \n                    \n                \n            \n            \n                \nfindAll()\n                \n            \n\n\n                    \n                        \n                            Defined in src/data/persistence/repositories/interfaces/base/base-repositories.interface.ts:8\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :     Promise\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findOneById\n                        \n                    \n                \n            \n            \n                \nfindOneById(id: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/data/persistence/repositories/interfaces/base/base-repositories.interface.ts:10\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        register\n                        \n                    \n                \n            \n            \n                \nregister(entity: E)\n                \n            \n\n\n                    \n                        \n                            Defined in src/data/persistence/repositories/interfaces/base/base-repositories.interface.ts:2\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                entity\n                                            \n                                                        E\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        update\n                        \n                    \n                \n            \n            \n                \nupdate(id: string, entity: E)\n                \n            \n\n\n                    \n                        \n                            Defined in src/data/persistence/repositories/interfaces/base/base-repositories.interface.ts:4\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                entity\n                                            \n                                                        E\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        export interface BaseRepositoryInterface {\n  register(entity: E): Promise;\n\n  update(id: string, entity: E): Promise;\n\n  delete(id: string, soft?: boolean): void;\n\n  findAll(): Promise;\n\n  findOneById(id: string): Promise;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CustomerDTO.html":{"url":"classes/CustomerDTO.html","title":"class - CustomerDTO","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CustomerDTO\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/business/dtos/customer.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                Data Transfer Object para representar un cliente.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                document\n                            \n                            \n                                    \n                                documentTypeId\n                            \n                            \n                                    \n                                email\n                            \n                            \n                                    \n                                    \n                                fullName\n                            \n                            \n                                    \n                                    \n                                password\n                            \n                            \n                                    \n                                    \n                                phone\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        document\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNumberString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/business/dtos/customer.dto.ts:36\n                        \n                    \n\n            \n                \n                    Número del documento.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        documentTypeId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsUUID()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/business/dtos/customer.dto.ts:26\n                        \n                    \n\n            \n                \n                    Identificador único del tipo de documento.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsEmail()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/business/dtos/customer.dto.ts:58\n                        \n                    \n\n            \n                \n                    Correo electrónico del cliente.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        fullName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@MaxLength(500)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/business/dtos/customer.dto.ts:48\n                        \n                    \n\n            \n                \n                    Nombre completo del cliente.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Matches(new RegExp())@MinLength(8)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/business/dtos/customer.dto.ts:83\n                        \n                    \n\n            \n                \n                    Contraseña del cliente.\nDebe contener al menos una letra mayúscula, una letra minúscula, un número y tener un mínimo de 8 caracteres.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        phone\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNumberString()@MaxLength(30)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/business/dtos/customer.dto.ts:70\n                        \n                    \n\n            \n                \n                    Número de teléfono del cliente.\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {\n  IsEmail,\n  IsNumberString,\n  IsString,\n  IsUUID,\n  Matches,\n  MaxLength,\n  MinLength,\n} from 'class-validator';\n\n/**\n * Data Transfer Object para representar un cliente.\n *\n * @export\n * @class CustomerDTO\n */\nexport class CustomerDTO {\n  /**\n   * Identificador único del tipo de documento.\n   * \n   * @type {string}\n   * @memberof CustomerDTO\n   * @decorator IsUUID\n   */\n  @IsUUID()\n  documentTypeId: string;\n\n  /**\n   * Número del documento.\n   * \n   * @type {string}\n   * @memberof CustomerDTO\n   * @decorator IsNumberString\n   */\n  @IsNumberString()\n  document: string;\n\n  /**\n   * Nombre completo del cliente.\n   * \n   * @type {string}\n   * @memberof CustomerDTO\n   * @decorator IsString\n   * @decorator MaxLength\n   */\n  @IsString()\n  @MaxLength(500)\n  fullName: string;\n\n  /**\n   * Correo electrónico del cliente.\n   * \n   * @type {string}\n   * @memberof CustomerDTO\n   * @decorator IsEmail\n   */\n  @IsEmail()\n  email: string;\n\n  /**\n   * Número de teléfono del cliente.\n   * \n   * @type {string}\n   * @memberof CustomerDTO\n   * @decorator IsNumberString\n   * @decorator MaxLength\n   */\n  @IsNumberString()\n  @MaxLength(30)\n  phone: string;\n\n  /**\n   * Contraseña del cliente.\n   * Debe contener al menos una letra mayúscula, una letra minúscula, un número y tener un mínimo de 8 caracteres.\n   * \n   * @type {string}\n   * @memberof CustomerDTO\n   * @decorator Matches\n   * @decorator MinLength\n   */\n  @Matches(new RegExp(/^(?=.*\\d)(?=.*[a-z])(?=.*[A-Z])(?=.*[a-zA-Z]).{8,}$/))\n  @MinLength(8)\n  password: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/CustomerEntity.html":{"url":"entities/CustomerEntity.html","title":"entity - CustomerEntity","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  CustomerEntity\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/data/persistence/entities/customer.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    Optional\n                                avatarUrl\n                            \n                            \n                                    \n                                    Optional\n                                deletedAt\n                            \n                            \n                                    \n                                document\n                            \n                            \n                                    \n                                    \n                                documentType\n                            \n                            \n                                    \n                                email\n                            \n                            \n                                    \n                                fullName\n                            \n                            \n                                    \n                                id\n                            \n                            \n                                    \n                                password\n                            \n                            \n                                    \n                                phone\n                            \n                            \n                                    \n                                state\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        avatarUrl\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({name: 'avatar_url', type: 'varchar', length: 255, nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/data/persistence/entities/customer.entity.ts:65\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        deletedAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Date | number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({name: 'deleted_at', type: 'timestamp', nullable: true, select: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/data/persistence/entities/customer.entity.ts:79\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        document\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({name: 'document', type: 'varchar', length: 20})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/data/persistence/entities/customer.entity.ts:29\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        documentType\n                        \n                    \n                \n            \n                \n                    \n                        Type :         DocumentTypeEntity\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ManyToOne(undefined, {cascade: false})@JoinColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/data/persistence/entities/customer.entity.ts:22\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({name: 'email', type: 'varchar', length: 100})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/data/persistence/entities/customer.entity.ts:43\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        fullName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({name: 'full_name', type: 'varchar', length: 100})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/data/persistence/entities/customer.entity.ts:36\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Default value : uuid()\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({name: 'id', type: 'uuid', primary: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/data/persistence/entities/customer.entity.ts:16\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({name: 'password', type: 'varchar', length: 100})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/data/persistence/entities/customer.entity.ts:57\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        phone\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({name: 'phone', type: 'varchar', length: 20})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/data/persistence/entities/customer.entity.ts:50\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        state\n                        \n                    \n                \n            \n                \n                    \n                        Default value : true\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({name: 'state', type: 'boolean'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/data/persistence/entities/customer.entity.ts:71\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import { Column, Entity, JoinColumn, ManyToOne } from 'typeorm';\nimport { v4 as uuid } from 'uuid';\nimport { CustomerModel } from '../../models';\nimport { DocumentTypeEntity } from './';\n\n@Entity({\n  name: 'customer',\n  schema: 'public',\n})\nexport class CustomerEntity implements CustomerModel {\n  @Column({\n    name: 'id',\n    type: 'uuid',\n    primary: true,\n  })\n  id = uuid();\n\n  @ManyToOne(() => DocumentTypeEntity ,{\n    cascade: false\n  })\n  @JoinColumn()\n  documentType: DocumentTypeEntity;\n\n  @Column({\n    name: 'document',\n    type: 'varchar',\n    length: 20,\n  })\n  document: string;\n\n  @Column({\n    name: 'full_name',\n    type: 'varchar',\n    length: 100,\n  })\n  fullName: string;\n\n  @Column({\n    name: 'email',\n    type: 'varchar',\n    length: 100,\n  })\n  email: string;\n\n  @Column({\n    name: 'phone',\n    type: 'varchar',\n    length: 20,\n  })\n  phone: string;\n\n  @Column({\n    name: 'password',\n    type: 'varchar',\n    length: 100,\n  })\n  password: string;\n\n  @Column({\n    name: 'avatar_url',\n    type: 'varchar',\n    length: 255,\n    nullable: true,\n  })\n  avatarUrl?: string;\n\n  @Column({\n    name: 'state',\n    type: 'boolean',\n  })\n  state = true;\n\n  @Column({\n    name: 'deleted_at',\n    type: 'timestamp',\n    nullable: true,\n    select: false,\n  })\n  deletedAt?: Date | number;\n}\n\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/CustomerModel.html":{"url":"interfaces/CustomerModel.html","title":"interface - CustomerModel","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  CustomerModel\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/data/models/customer.model.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        \n                                            avatarUrl\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            deletedAt\n                                        \n                                \n                                \n                                        \n                                            document\n                                        \n                                \n                                \n                                        \n                                            documentType\n                                        \n                                \n                                \n                                        \n                                            email\n                                        \n                                \n                                \n                                        \n                                            fullName\n                                        \n                                \n                                \n                                        \n                                            id\n                                        \n                                \n                                \n                                        \n                                            password\n                                        \n                                \n                                \n                                        \n                                            phone\n                                        \n                                \n                                \n                                        \n                                            state\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        avatarUrl\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        avatarUrl:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        deletedAt\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        deletedAt:     Date | number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     Date | number\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        document\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        document:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        documentType\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        documentType:         DocumentTypeModel\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         DocumentTypeModel\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        email\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        email:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        fullName\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        fullName:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        id\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        id:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        password\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        password:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        phone\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        phone:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        state\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        state:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { DocumentTypeModel } from '.';\n\nexport interface CustomerModel {\n  id: string;\n  documentType: DocumentTypeModel;\n  document: string;\n  fullName: string;\n  email: string;\n  phone: string;\n  password: string;\n  avatarUrl?: string;\n  state: boolean;\n  deletedAt?: Date | number;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/CustomerRepository.html":{"url":"injectables/CustomerRepository.html","title":"injectable - CustomerRepository","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  CustomerRepository\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/data/persistence/repositories/customer.repository.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                delete\n                            \n                            \n                                    Async\n                                existEmail\n                            \n                            \n                                findAll\n                            \n                            \n                                findAllDeleted\n                            \n                            \n                                findByFullName\n                            \n                            \n                                findByState\n                            \n                            \n                                    Async\n                                findOneByDocumentTypeAndDocument\n                            \n                            \n                                    Async\n                                findOneByEmail\n                            \n                            \n                                    Async\n                                findOneByEmailAndPassword\n                            \n                            \n                                    Async\n                                findOneById\n                            \n                            \n                                    Async\n                                findOneByPhone\n                            \n                            \n                                    Private\n                                hardDelete\n                            \n                            \n                                register\n                            \n                            \n                                    Private\n                                    Async\n                                softDelete\n                            \n                            \n                                    Async\n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(customerRepository: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/data/persistence/repositories/customer.repository.ts:8\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        customerRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        delete\n                        \n                    \n                \n            \n            \n                \ndelete(id: string, soft?: boolean)\n                \n            \n\n\n                    \n                        \n                            Defined in src/data/persistence/repositories/customer.repository.ts:28\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                soft\n                                            \n                                                            boolean\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        existEmail\n                        \n                    \n                \n            \n            \n                \n                        \n                    existEmail(email: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/data/persistence/repositories/customer.repository.ts:131\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                email\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findAll\n                        \n                    \n                \n            \n            \n                \nfindAll()\n                \n            \n\n\n                    \n                        \n                            Defined in src/data/persistence/repositories/customer.repository.ts:65\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         Promise\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findAllDeleted\n                        \n                    \n                \n            \n            \n                \nfindAllDeleted()\n                \n            \n\n\n                    \n                        \n                            Defined in src/data/persistence/repositories/customer.repository.ts:69\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         Promise\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findByFullName\n                        \n                    \n                \n            \n            \n                \nfindByFullName(fullName: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/data/persistence/repositories/customer.repository.ts:165\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                fullName\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findByState\n                        \n                    \n                \n            \n            \n                \nfindByState(state: boolean)\n                \n            \n\n\n                    \n                        \n                            Defined in src/data/persistence/repositories/customer.repository.ts:159\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                state\n                                            \n                                                            boolean\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        findOneByDocumentTypeAndDocument\n                        \n                    \n                \n            \n            \n                \n                        \n                    findOneByDocumentTypeAndDocument(documentTypeId: string, document: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/data/persistence/repositories/customer.repository.ts:100\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                documentTypeId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                document\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        findOneByEmail\n                        \n                    \n                \n            \n            \n                \n                        \n                    findOneByEmail(email: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/data/persistence/repositories/customer.repository.ts:118\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                email\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        findOneByEmailAndPassword\n                        \n                    \n                \n            \n            \n                \n                        \n                    findOneByEmailAndPassword(email: string, password: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/data/persistence/repositories/customer.repository.ts:83\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                email\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                password\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        findOneById\n                        \n                    \n                \n            \n            \n                \n                        \n                    findOneById(id: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/data/persistence/repositories/customer.repository.ts:75\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        findOneByPhone\n                        \n                    \n                \n            \n            \n                \n                        \n                    findOneByPhone(phone: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/data/persistence/repositories/customer.repository.ts:145\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                phone\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        hardDelete\n                        \n                    \n                \n            \n            \n                \n                        \n                    hardDelete(id: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/data/persistence/repositories/customer.repository.ts:37\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        register\n                        \n                    \n                \n            \n            \n                \nregister(entity: CustomerEntity)\n                \n            \n\n\n                    \n                        \n                            Defined in src/data/persistence/repositories/customer.repository.ts:14\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                entity\n                                            \n                                                            CustomerEntity\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Async\n                        softDelete\n                        \n                    \n                \n            \n            \n                \n                        \n                    softDelete(id: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/data/persistence/repositories/customer.repository.ts:41\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        update\n                        \n                    \n                \n            \n            \n                \n                        \n                    update(id: string, entity: CustomerEntity)\n                \n            \n\n\n                    \n                        \n                            Defined in src/data/persistence/repositories/customer.repository.ts:19\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                entity\n                                            \n                                                            CustomerEntity\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, NotFoundException } from '@nestjs/common';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { Repository } from 'typeorm';\nimport { CustomerEntity } from '../entities';\nimport { CustomerRepositoryInterface } from './interfaces/';\n\n@Injectable()\nexport class CustomerRepository implements CustomerRepositoryInterface {\n  constructor(\n    @InjectRepository(CustomerEntity)\n    private readonly customerRepository: Repository,\n  ) {}\n\n  register(entity: CustomerEntity): Promise {\n    console.log(entity)\n    return this.customerRepository.save(entity);\n  }\n\n  async update(id: string, entity: CustomerEntity): Promise {\n    return this.customerRepository.update(id, entity).then((result) => {\n      if (result.affected === 0) {\n        throw new NotFoundException(`El Id: ${id} no existe en base de datos`);\n      }\n      return entity;\n    });\n  }\n\n  delete(id: string, soft?: boolean) {\n    this.findOneById(id);\n    if (soft || soft === undefined) {\n      this.softDelete(id);\n    } else {\n      this.hardDelete(id);\n    }\n  }\n\n  private hardDelete(id: string): void {\n    this.customerRepository.delete(id);\n  }\n\n  private async softDelete(id: string) {\n    let newCustomer = new CustomerEntity();\n    const customer = await this.customerRepository\n      .findOne({\n        where: { id },\n      })\n      .then((result) => {\n        if (result) {\n          return result;\n        } else {\n          throw new NotFoundException(\n            `El Id: ${id} no existe en base de datos`,\n          );\n        }\n      });\n    newCustomer = {\n      ...newCustomer,\n      ...customer,\n      id: customer.id,\n    };\n    newCustomer.deletedAt = Date.now();\n    this.update(customer.id, newCustomer);\n  }\n\n  findAll(): Promise {\n    const deletedAt = undefined;\n    return this.customerRepository.find({ where: { deletedAt } });\n  }\n  findAllDeleted(): Promise {\n    return this.customerRepository.find({\n      where: { deletedAt: undefined },\n    });\n  }\n\n  async findOneById(id: string): Promise {\n    const customer = await this.customerRepository.findOne({\n      where: { id, deletedAt: undefined },\n    });\n    if (customer) return customer;\n    else throw new NotFoundException(`El ID ${id} no existe en base de datos`);\n  }\n\n  async findOneByEmailAndPassword(\n    email: string,\n    password: string,\n  ): Promise {\n    return this.customerRepository\n      .find({\n        where: { email, password, deletedAt: undefined },\n      })\n      .then((result) => {\n        if (result.length > 0) {\n          return true;\n        } else {\n          return false;\n        }\n      });\n  }\n\n  async findOneByDocumentTypeAndDocument(\n    documentTypeId: string,\n    document: string,\n  ): Promise {\n    const result = await this.customerRepository.findOne({\n      where: {\n        documentType: { id: documentTypeId },\n        document,\n        deletedAt: undefined,\n      },\n    });\n    if (result) {\n      return result;\n    } else {\n      throw new NotFoundException(`no existe en base de datos`);\n    }\n  }\n\n  async findOneByEmail(email: string): Promise {\n    return this.customerRepository\n      .findOne({\n        where: { email, deletedAt: undefined },\n      })\n      .then((result) => {\n        if (result) {\n          return result;\n        } else {\n          throw new NotFoundException(`no existe en base de datos`);\n        }\n      });\n  }\n  async existEmail(email: string): Promise {\n    return this.customerRepository\n      .find({\n        where: { email, deletedAt: undefined },\n      })\n      .then((result) => {\n        if (result.length > 0) {\n          return true;\n        } else {\n          return false;\n        }\n      });\n  }\n\n  async findOneByPhone(phone: string): Promise {\n    return this.customerRepository\n      .findOne({\n        where: { phone, deletedAt: undefined },\n      })\n      .then((result) => {\n        if (result) {\n          return result;\n        } else {\n          throw new NotFoundException(`no existe en base de datos`);\n        }\n      });\n  }\n\n  findByState(state: boolean): Promise {\n    return this.customerRepository.find({\n      where: { state, deletedAt: undefined },\n    });\n  }\n\n  findByFullName(fullName: string): Promise {\n    return this.customerRepository.find({\n      where: { fullName, deletedAt: undefined },\n    });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/CustomerRepositoryInterface.html":{"url":"interfaces/CustomerRepositoryInterface.html","title":"interface - CustomerRepositoryInterface","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  CustomerRepositoryInterface\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/data/persistence/repositories/interfaces/customer-repository.interface.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                            BaseRepositoryInterface\n            \n\n        \n            Index\n            \n                \n                    \n                        \n                            Methods\n                        \n                    \n                    \n                        \n                            \n                                \n                                    \n                                        findByFullName\n                                    \n                                \n                                \n                                    \n                                        findByState\n                                    \n                                \n                                \n                                    \n                                        findOneByDocumentTypeAndDocument\n                                    \n                                \n                                \n                                    \n                                        findOneByEmail\n                                    \n                                \n                                \n                                    \n                                        findOneByEmailAndPassword\n                                    \n                                \n                                \n                                    \n                                        findOneByPhone\n                                    \n                                \n                            \n                        \n                    \n                \n            \n        \n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        findByFullName\n                        \n                    \n                \n            \n            \n                \nfindByFullName(fullName: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/data/persistence/repositories/interfaces/customer-repository.interface.ts:14\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                fullName\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findByState\n                        \n                    \n                \n            \n            \n                \nfindByState(state: boolean)\n                \n            \n\n\n                    \n                        \n                            Defined in src/data/persistence/repositories/interfaces/customer-repository.interface.ts:13\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                state\n                                            \n                                                            boolean\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findOneByDocumentTypeAndDocument\n                        \n                    \n                \n            \n            \n                \nfindOneByDocumentTypeAndDocument(documentTypeId: string, document: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/data/persistence/repositories/interfaces/customer-repository.interface.ts:7\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                documentTypeId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                document\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findOneByEmail\n                        \n                    \n                \n            \n            \n                \nfindOneByEmail(email: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/data/persistence/repositories/interfaces/customer-repository.interface.ts:11\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                email\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findOneByEmailAndPassword\n                        \n                    \n                \n            \n            \n                \nfindOneByEmailAndPassword(email: string, password: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/data/persistence/repositories/interfaces/customer-repository.interface.ts:6\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                email\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                password\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findOneByPhone\n                        \n                    \n                \n            \n            \n                \nfindOneByPhone(phone: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/data/persistence/repositories/interfaces/customer-repository.interface.ts:12\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                phone\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { CustomerEntity } from '../../entities';\nimport { BaseRepositoryInterface } from './base/';\n\nexport interface CustomerRepositoryInterface\n  extends BaseRepositoryInterface {\n  findOneByEmailAndPassword(email: string, password: string): Promise;\n  findOneByDocumentTypeAndDocument(\n    documentTypeId: string,\n    document: string,\n  ): Promise;\n  findOneByEmail(email: string): Promise;\n  findOneByPhone(phone: string): Promise;\n  findByState(state: boolean): Promise;\n  findByFullName(fullName: string): Promise;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/CustomerService.html":{"url":"injectables/CustomerService.html","title":"injectable - CustomerService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  CustomerService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/business/services/customer/customer.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                deleteCustomer\n                            \n                            \n                                    Async\n                                findAll\n                            \n                            \n                                findAllDeleted\n                            \n                            \n                                    Async\n                                getCustomerInfo\n                            \n                            \n                                    Async\n                                getCustomerInfoByEmail\n                            \n                            \n                                    Async\n                                newCustomer\n                            \n                            \n                                transform\n                            \n                            \n                                    Async\n                                unsuscribe\n                            \n                            \n                                    Async\n                                updatedCustomer\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(customerRepository: CustomerRepository, accountRepository: AccountRepository, accountTypeRepository: AccountTypeRepository)\n                    \n                \n                        \n                            \n                                Defined in src/business/services/customer/customer.service.ts:16\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        customerRepository\n                                                  \n                                                        \n                                                                        CustomerRepository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        accountRepository\n                                                  \n                                                        \n                                                                        AccountRepository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        accountTypeRepository\n                                                  \n                                                        \n                                                                        AccountTypeRepository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        deleteCustomer\n                        \n                    \n                \n            \n            \n                \n                        \n                    deleteCustomer(id: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/business/services/customer/customer.service.ts:132\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        findAll\n                        \n                    \n                \n            \n            \n                \n                        \n                    findAll()\n                \n            \n\n\n                    \n                        \n                            Defined in src/business/services/customer/customer.service.ts:39\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         Promise\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findAllDeleted\n                        \n                    \n                \n            \n            \n                \nfindAllDeleted()\n                \n            \n\n\n                    \n                        \n                            Defined in src/business/services/customer/customer.service.ts:44\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         Promise\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        getCustomerInfo\n                        \n                    \n                \n            \n            \n                \n                        \n                    getCustomerInfo(customerId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/business/services/customer/customer.service.ts:30\n                        \n                    \n\n\n            \n                \n                        Obtener información de un cliente\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                customerId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                {CustomerEntity}\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        getCustomerInfoByEmail\n                        \n                    \n                \n            \n            \n                \n                        \n                    getCustomerInfoByEmail(email: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/business/services/customer/customer.service.ts:34\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                email\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        newCustomer\n                        \n                    \n                \n            \n            \n                \n                        \n                    newCustomer(customer: CustomerDTO)\n                \n            \n\n\n                    \n                        \n                            Defined in src/business/services/customer/customer.service.ts:61\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                customer\n                                            \n                                                            CustomerDTO\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        transform\n                        \n                    \n                \n            \n            \n                \ntransform(customer: CustomerDTO)\n                \n            \n\n\n                    \n                        \n                            Defined in src/business/services/customer/customer.service.ts:48\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                customer\n                                            \n                                                            CustomerDTO\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         CustomerEntity\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        unsuscribe\n                        \n                    \n                \n            \n            \n                \n                        \n                    unsuscribe(id: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/business/services/customer/customer.service.ts:120\n                        \n                    \n\n\n            \n                \n                        Dar de baja a un cliente en el sistema\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                {boolean}\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        updatedCustomer\n                        \n                    \n                \n            \n            \n                \n                        \n                    updatedCustomer(id: string, customer: CustomerUpdateDTO)\n                \n            \n\n\n                    \n                        \n                            Defined in src/business/services/customer/customer.service.ts:98\n                        \n                    \n\n\n            \n                \n                        Actualizar información de un cliente\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                customer\n                                            \n                                                            CustomerUpdateDTO\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                {CustomerEntity}\n\n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, NotFoundException } from '@nestjs/common';\nimport { CustomerDTO } from 'src/business/dtos';\nimport { CustomerUpdateDTO } from 'src/business/dtos/update-customer.dto';\nimport {\n  AccountEntity,\n  CustomerEntity,\n  DocumentTypeEntity,\n} from '../../../data/persistence/entities';\nimport {\n  AccountRepository,\n  AccountTypeRepository,\n  CustomerRepository,\n} from '../../../data/persistence/repositories';\n\n@Injectable()\nexport class CustomerService {\n  constructor(\n    private readonly customerRepository: CustomerRepository,\n    private readonly accountRepository: AccountRepository,\n    private readonly accountTypeRepository: AccountTypeRepository,\n  ) {}\n\n  /**\n   * Obtener información de un cliente\n   *\n   * @param {string} customerId\n   * @return {*}  {CustomerEntity}\n   * @memberof CustomerService\n   */\n  async getCustomerInfo(customerId: string): Promise {\n    const newCustomer = await this.customerRepository.findOneById(customerId);\n    return newCustomer;\n  }\n  async getCustomerInfoByEmail(email: string): Promise {\n    const newCustomer = await this.customerRepository.findOneByEmail(email);\n    return newCustomer;\n  }\n\n  async findAll(): Promise {\n    return (await this.customerRepository.findAll()).filter(\n      (item) => (item.deletedAt ?? true) === true,\n    );\n  }\n  findAllDeleted(): Promise {\n    return this.customerRepository.findAllDeleted();\n  }\n\n  transform(customer: CustomerDTO): CustomerEntity {\n    const documentType = new DocumentTypeEntity();\n    documentType.id = customer.documentTypeId;\n    const newCustomer = new CustomerEntity();\n    newCustomer.documentType = documentType;\n    newCustomer.document = customer.document;\n    newCustomer.fullName = customer.fullName;\n    newCustomer.email = customer.email;\n    newCustomer.phone = customer.phone;\n    newCustomer.password = customer.password;\n    return newCustomer;\n  }\n\n  async newCustomer(customer: CustomerDTO): Promise {\n    const documentType = new DocumentTypeEntity();\n    documentType.id = customer.documentTypeId;\n\n    const newCustomer = new CustomerEntity();\n    newCustomer.documentType = documentType;\n    newCustomer.document = customer.document;\n    newCustomer.fullName = customer.fullName;\n    if (await this.customerRepository.existEmail(customer.email)) {\n      throw new NotFoundException(\n        `El email ${customer.email} ya  existe en base de datos`,\n      );\n    }\n    newCustomer.email = customer.email;\n    newCustomer.phone = customer.phone;\n    newCustomer.password = customer.password;\n    const typeId = 'ab27c9ac-a01c-4c22-a6d6-ce5ab3b79185';\n    const account = new AccountEntity();\n    account.accountType = await this.accountTypeRepository.findOneById(typeId);\n    account.customer = newCustomer;\n    return {\n      customer: await this.customerRepository.register(newCustomer),\n      account: await this.accountRepository.register(account),\n    };\n  }\n\n  /**\n   * Actualizar información de un cliente\n   *\n   * @param {string} id\n   * @param {CustomerModel} customer\n   * @return {*}  {CustomerEntity}\n   * @memberof CustomerService\n   */\n  async updatedCustomer(\n    id: string,\n    customer: CustomerUpdateDTO,\n  ): Promise {\n    if (await this.customerRepository.findOneById(id)) {\n      const newCustomer = new CustomerEntity();\n      newCustomer.document = customer.document;\n      newCustomer.fullName = customer.fullName;\n      newCustomer.phone = customer.phone;\n      newCustomer.password = customer.password;\n      return this.customerRepository.update(id, newCustomer);\n    }\n    return new CustomerEntity();\n  }\n\n  /**\n   * Dar de baja a un cliente en el sistema\n   *\n   * @param {string} id\n   * @return {*}  {boolean}\n   * @memberof CustomerService\n   */\n  async unsuscribe(id: string): Promise {\n    if (\n      (await this.customerRepository.findOneById(id)).deletedAt === undefined\n    ) {\n      const customer = await this.customerRepository.findOneById(id);\n      customer.state = false;\n      this.customerRepository.update(id, customer);\n      return true;\n    }\n    return false;\n  }\n\n  async deleteCustomer(id: string): Promise {\n    if (\n      (await this.customerRepository.findOneById(id)).deletedAt === undefined\n    ) {\n      (await this.accountRepository.findAll()).map(\n        (mapa) => (mapa.deletedAt = Date.now()),\n      );\n      this.customerRepository.delete(id);\n      return true;\n    }\n    return false;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CustomerUpdateDTO.html":{"url":"classes/CustomerUpdateDTO.html","title":"class - CustomerUpdateDTO","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CustomerUpdateDTO\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/business/dtos/update-customer.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                Data Transfer Object para actualizar información del cliente.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                document\n                            \n                            \n                                    \n                                    \n                                fullName\n                            \n                            \n                                    \n                                    \n                                password\n                            \n                            \n                                    \n                                    \n                                phone\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        document\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNumberString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/business/dtos/update-customer.dto.ts:29\n                        \n                    \n\n            \n                \n                    Número de documento del cliente.\nDebe ser una cadena que representa un número.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        fullName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@MaxLength(500)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/business/dtos/update-customer.dto.ts:43\n                        \n                    \n\n            \n                \n                    Nombre completo del cliente.\nDebe ser una cadena con un máximo de 500 caracteres.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Matches(new RegExp())@MinLength(8)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/business/dtos/update-customer.dto.ts:70\n                        \n                    \n\n            \n                \n                    Contraseña del cliente.\nDebe contener al menos una letra mayúscula, una letra minúscula, un número y tener un mínimo de 8 caracteres.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        phone\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNumberString()@MaxLength(30)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/business/dtos/update-customer.dto.ts:57\n                        \n                    \n\n            \n                \n                    Número de teléfono del cliente.\nDebe ser una cadena que representa un número con un máximo de 30 caracteres.\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {\n  IsEmail,\n  IsNumberString,\n  IsString,\n  IsUUID,\n  Matches,\n  MaxLength,\n  MinLength,\n} from 'class-validator';\n\n/**\n * Data Transfer Object para actualizar información del cliente.\n *\n * @export\n * @class CustomerUpdateDTO\n */\nexport class CustomerUpdateDTO {\n  /**\n   * Número de documento del cliente.\n   * \n   * Debe ser una cadena que representa un número.\n   *\n   * @type {string}\n   * @memberof CustomerUpdateDTO\n   * @decorator IsNumberString\n   */\n  @IsNumberString()\n  document: string;\n\n  /**\n   * Nombre completo del cliente.\n   * \n   * Debe ser una cadena con un máximo de 500 caracteres.\n   *\n   * @type {string}\n   * @memberof CustomerUpdateDTO\n   * @decorator IsString\n   * @decorator MaxLength\n   */\n  @IsString()\n  @MaxLength(500)\n  fullName: string;\n\n  /**\n   * Número de teléfono del cliente.\n   * \n   * Debe ser una cadena que representa un número con un máximo de 30 caracteres.\n   *\n   * @type {string}\n   * @memberof CustomerUpdateDTO\n   * @decorator IsNumberString\n   * @decorator MaxLength\n   */\n  @IsNumberString()\n  @MaxLength(30)\n  phone: string;\n\n  /**\n   * Contraseña del cliente.\n   * Debe contener al menos una letra mayúscula, una letra minúscula, un número y tener un mínimo de 8 caracteres.\n   * \n   * @type {string}\n   * @memberof CustomerUpdateDTO\n   * @decorator Matches\n   * @decorator MinLength\n   */\n  @Matches(new RegExp(/^(?=.*\\d)(?=.*[a-z])(?=.*[A-Z])(?=.*[a-zA-Z]).{8,}$/))\n  @MinLength(8)\n  password: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/DataRangeDTO.html":{"url":"classes/DataRangeDTO.html","title":"class - DataRangeDTO","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  DataRangeDTO\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/business/dtos/data-range.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                Data Transfer Object para representar un rango de datos.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    Optional\n                                endAmount\n                            \n                            \n                                    \n                                    Optional\n                                endDate\n                            \n                            \n                                    \n                                    Optional\n                                startAmount\n                            \n                            \n                                    \n                                    Optional\n                                startDate\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        endAmount\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNumberString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/business/dtos/data-range.dto.ts:56\n                        \n                    \n\n            \n                \n                    Cantidad de fin del rango.\nDebe ser una cadena que representa un número.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        endDate\n                        \n                    \n                \n            \n                \n                    \n                        Type :     number | Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsDateString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/business/dtos/data-range.dto.ts:32\n                        \n                    \n\n            \n                \n                    Fecha de fin del rango.\nPuede ser un número (timestamp) o un objeto Date.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        startAmount\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNumberString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/business/dtos/data-range.dto.ts:44\n                        \n                    \n\n            \n                \n                    Cantidad de inicio del rango.\nDebe ser una cadena que representa un número.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        startDate\n                        \n                    \n                \n            \n                \n                    \n                        Type :     number | Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsDateString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/business/dtos/data-range.dto.ts:20\n                        \n                    \n\n            \n                \n                    Fecha de inicio del rango.\nPuede ser un número (timestamp) o un objeto Date.\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsDateString, IsNumberString } from 'class-validator';\n\n/**\n * Data Transfer Object para representar un rango de datos.\n *\n * @export\n * @class DataRangeDTO\n */\nexport class DataRangeDTO {\n  /**\n   * Fecha de inicio del rango.\n   * \n   * Puede ser un número (timestamp) o un objeto Date.\n   *\n   * @type {number | Date}\n   * @memberof DataRangeDTO\n   * @decorator IsDateString\n   */\n  @IsDateString()\n  startDate?: number | Date;\n\n  /**\n   * Fecha de fin del rango.\n   * \n   * Puede ser un número (timestamp) o un objeto Date.\n   *\n   * @type {number | Date}\n   * @memberof DataRangeDTO\n   * @decorator IsDateString\n   */\n  @IsDateString()\n  endDate?: number | Date;\n\n  /**\n   * Cantidad de inicio del rango.\n   * \n   * Debe ser una cadena que representa un número.\n   *\n   * @type {number}\n   * @memberof DataRangeDTO\n   * @decorator IsNumberString\n   */\n  @IsNumberString()\n  startAmount?: number;\n\n  /**\n   * Cantidad de fin del rango.\n   * \n   * Debe ser una cadena que representa un número.\n   *\n   * @type {number}\n   * @memberof DataRangeDTO\n   * @decorator IsNumberString\n   */\n  @IsNumberString()\n  endAmount?: number;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/DataRangeModel.html":{"url":"interfaces/DataRangeModel.html","title":"interface - DataRangeModel","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  DataRangeModel\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/data/models/data-range.model.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        \n                                            endAmount\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            endDate\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            startAmount\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            startDate\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        endAmount\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        endAmount:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        endDate\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        endDate:     number | Date\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     number | Date\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        startAmount\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        startAmount:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        startDate\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        startDate:     number | Date\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     number | Date\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export interface DataRangeModel {\n  startDate?: number | Date;\n  endDate?: number | Date;\n  startAmount?: number;\n  endAmount?: number;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/DepositController.html":{"url":"controllers/DepositController.html","title":"controller - DepositController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  DepositController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/presentation/controllers/deposit/deposit.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                deposit\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    Async\n                                createDeposit\n                            \n                            \n                                    \n                                deleteDeposit\n                            \n                            \n                                    \n                                    Async\n                                GetAll\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        createDeposit\n                        \n                    \n                \n            \n            \n                \n                        \n                    createDeposit(account: DepositDTO)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post()\n                \n            \n\n                    \n                        \n                            Defined in src/presentation/controllers/deposit/deposit.controller.ts:10\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                account\n                                            \n                                                            DepositDTO\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        deleteDeposit\n                        \n                    \n                \n            \n            \n                \n                        \n                    deleteDeposit(id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete(':id')\n                \n            \n\n                    \n                        \n                            Defined in src/presentation/controllers/deposit/deposit.controller.ts:31\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        GetAll\n                        \n                    \n                \n            \n            \n                \n                        \n                    GetAll(body: literal type)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('all')\n                \n            \n\n                    \n                        \n                            Defined in src/presentation/controllers/deposit/deposit.controller.ts:15\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                body\n                                            \n                                                        literal type\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import { Body, Controller, Delete, Param, Post } from '@nestjs/common';\nimport { DataRangeDTO, DepositDTO, PaginationDTO } from 'src/business/dtos';\nimport { DepositService } from '../../../business/services';\nimport { DepositEntity } from '../../../data/persistence/entities';\n\n@Controller('deposit')\nexport class DepositController {\n  constructor(private readonly depositService: DepositService) {}\n  @Post()\n  async createDeposit(@Body() account: DepositDTO): Promise {\n    return await this.depositService.createDeposit(account);\n  }\n\n  @Post('all')\n  async GetAll(\n    @Body()\n    body: {\n      accountId: string;\n      pagination: PaginationDTO;\n      dataRange?: DataRangeDTO;\n    },\n  ): Promise {\n    return await this.depositService.getHistory(\n      body.accountId,\n      body.pagination,\n      body.dataRange,\n    );\n  }\n\n  @Delete(':id')\n  deleteDeposit(@Param('id') id: string): void {\n    this.depositService.deleteDeposit(id);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/DepositDTO.html":{"url":"classes/DepositDTO.html","title":"class - DepositDTO","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  DepositDTO\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/business/dtos/deposit.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                Data Transfer Object para representar un depósito.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                accountId\n                            \n                            \n                                    \n                                amount\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        accountId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNumberString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/business/dtos/deposit.dto.ts:20\n                        \n                    \n\n            \n                \n                    Identificador de la cuenta.\nDebe ser una cadena que representa un número.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        amount\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNumberString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/business/dtos/deposit.dto.ts:32\n                        \n                    \n\n            \n                \n                    Monto del depósito.\nDebe ser una cadena que representa un número.\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsNumberString } from 'class-validator';\n\n/**\n * Data Transfer Object para representar un depósito.\n *\n * @export\n * @class DepositDTO\n */\nexport class DepositDTO {\n  /**\n   * Identificador de la cuenta.\n   * \n   * Debe ser una cadena que representa un número.\n   *\n   * @type {string}\n   * @memberof DepositDTO\n   * @decorator IsNumberString\n   */\n  @IsNumberString()\n  accountId: string;\n\n  /**\n   * Monto del depósito.\n   * \n   * Debe ser una cadena que representa un número.\n   *\n   * @type {string}\n   * @memberof DepositDTO\n   * @decorator IsNumberString\n   */\n  @IsNumberString()\n  amount: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/DepositEntity.html":{"url":"entities/DepositEntity.html","title":"entity - DepositEntity","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  DepositEntity\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/data/persistence/entities/deposit.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                account\n                            \n                            \n                                    \n                                amount\n                            \n                            \n                                    \n                                dateTime\n                            \n                            \n                                    \n                                    Optional\n                                deletedAt\n                            \n                            \n                                    \n                                id\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        account\n                        \n                    \n                \n            \n                \n                    \n                        Type :         AccountEntity\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ManyToOne(undefined)@JoinColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/data/persistence/entities/deposit.entity.ts:26\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        amount\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 0\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({name: 'amount', type: 'numeric'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/data/persistence/entities/deposit.entity.ts:22\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        dateTime\n                        \n                    \n                \n            \n                \n                    \n                        Type :     number | Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({name: 'date_time', type: 'numeric'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/data/persistence/entities/deposit.entity.ts:32\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        deletedAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :     number | Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({name: 'deleted_at', type: 'timestamp', nullable: true, select: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/data/persistence/entities/deposit.entity.ts:40\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Default value : uuid()\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({name: 'id', type: 'uuid', primary: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/data/persistence/entities/deposit.entity.ts:16\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import { Column, Entity, JoinColumn, ManyToOne } from 'typeorm';\nimport { v4 as uuid } from 'uuid';\nimport { DepositModel } from '../../models';\nimport { AccountEntity } from './';\n\n@Entity({\n  name: 'deposit',\n  schema: 'public',\n})\nexport class DepositEntity implements DepositModel {\n  @Column({\n    name: 'id',\n    type: 'uuid',\n    primary: true,\n  })\n  id = uuid();\n\n  @Column({\n    name: 'amount',\n    type: 'numeric',\n  })\n  amount = 0;\n\n  @ManyToOne(() => AccountEntity)\n  @JoinColumn()\n  account: AccountEntity;\n\n  @Column({\n    name: 'date_time',\n    type: 'numeric',\n  })\n  dateTime: number | Date;\n\n  @Column({\n    name: 'deleted_at',\n    type: 'timestamp',\n    nullable: true,\n    select: false,\n  })\n  deletedAt?: number | Date;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/DepositModel.html":{"url":"interfaces/DepositModel.html","title":"interface - DepositModel","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  DepositModel\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/data/models/deposit.model.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            account\n                                        \n                                \n                                \n                                        \n                                            amount\n                                        \n                                \n                                \n                                        \n                                            dateTime\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            deletedAt\n                                        \n                                \n                                \n                                        \n                                            id\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        account\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        account:         AccountModel\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         AccountModel\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        amount\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        amount:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        dateTime\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        dateTime:     Date | number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     Date | number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        deletedAt\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        deletedAt:     Date | number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     Date | number\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        id\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        id:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { AccountModel } from '.';\n\nexport interface DepositModel {\n  id: string;\n  account: AccountModel;\n  amount: number;\n  dateTime: Date | number;\n  deletedAt?: Date | number;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/DepositRepository.html":{"url":"injectables/DepositRepository.html","title":"injectable - DepositRepository","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  DepositRepository\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/data/persistence/repositories/deposit.repository.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                delete\n                            \n                            \n                                findAll\n                            \n                            \n                                findByAccountId\n                            \n                            \n                                findByDataRange\n                            \n                            \n                                    Async\n                                findOneById\n                            \n                            \n                                    Private\n                                hardDelete\n                            \n                            \n                                register\n                            \n                            \n                                    Private\n                                softDelete\n                            \n                            \n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(depositRepository: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/data/persistence/repositories/deposit.repository.ts:8\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        depositRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        delete\n                        \n                    \n                \n            \n            \n                \ndelete(id: string, soft?: boolean)\n                \n            \n\n\n                    \n                        \n                            Defined in src/data/persistence/repositories/deposit.repository.ts:26\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                soft\n                                            \n                                                            boolean\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findAll\n                        \n                    \n                \n            \n            \n                \nfindAll()\n                \n            \n\n\n                    \n                        \n                            Defined in src/data/persistence/repositories/deposit.repository.ts:64\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         Promise\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findByAccountId\n                        \n                    \n                \n            \n            \n                \nfindByAccountId(accountId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/data/persistence/repositories/deposit.repository.ts:83\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                accountId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findByDataRange\n                        \n                    \n                \n            \n            \n                \nfindByDataRange(dateInit: Date | number, dateEnd: Date | number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/data/persistence/repositories/deposit.repository.ts:90\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                dateInit\n                                            \n                                                        Date | number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                dateEnd\n                                            \n                                                        Date | number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        findOneById\n                        \n                    \n                \n            \n            \n                \n                        \n                    findOneById(id: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/data/persistence/repositories/deposit.repository.ts:68\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        hardDelete\n                        \n                    \n                \n            \n            \n                \n                        \n                    hardDelete(id: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/data/persistence/repositories/deposit.repository.ts:35\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        register\n                        \n                    \n                \n            \n            \n                \nregister(entity: DepositEntity)\n                \n            \n\n\n                    \n                        \n                            Defined in src/data/persistence/repositories/deposit.repository.ts:13\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                entity\n                                            \n                                                            DepositEntity\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        softDelete\n                        \n                    \n                \n            \n            \n                \n                        \n                    softDelete(id: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/data/persistence/repositories/deposit.repository.ts:41\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        update\n                        \n                    \n                \n            \n            \n                \nupdate(id: string, entity: DepositEntity)\n                \n            \n\n\n                    \n                        \n                            Defined in src/data/persistence/repositories/deposit.repository.ts:17\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                entity\n                                            \n                                                            DepositEntity\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, NotFoundException } from '@nestjs/common';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { Between, Repository } from 'typeorm';\nimport { DepositEntity } from '../entities';\nimport { DepositRepositoryInterface } from './interfaces/';\n\n@Injectable()\nexport class DepositRepository implements DepositRepositoryInterface {\n  constructor(\n    @InjectRepository(DepositEntity)\n    private readonly depositRepository: Repository,\n  ) {}\n  register(entity: DepositEntity): Promise {\n    return this.depositRepository.save(entity);\n  }\n\n  update(id: string, entity: DepositEntity): Promise {\n    return this.depositRepository.update(id, entity).then((result) => {\n      if (result.affected === 0) {\n        throw new NotFoundException(`El Id: ${id} no existe en base de datos`);\n      }\n      return entity;\n    });\n  }\n\n  delete(id: string, soft?: boolean): void {\n    this.findOneById(id);\n    if (soft || soft === undefined) {\n      this.softDelete(id);\n    } else {\n      this.hardDelete(id);\n    }\n  }\n\n  private hardDelete(id: string) {\n    this.depositRepository.delete({\n      id,\n    });\n  }\n\n  private softDelete(id: string) {\n    let newDeposit = new DepositEntity();\n    this.depositRepository\n      .findOne({\n        where: { id },\n      })\n      .then((result) => {\n        if (result) {\n          newDeposit = {\n            ...newDeposit,\n            ...result,\n            id: result.id,\n          };\n          newDeposit.deletedAt = Date.now();\n          this.update(result.id, newDeposit);\n        } else {\n          throw new NotFoundException(\n            `El Id: ${id} no existe en base de datos`,\n          );\n        }\n      });\n  }\n\n  findAll(): Promise {\n        return this.depositRepository.find({ where: { deletedAt: undefined }, relations: ['account']});\n  }\n\n  async findOneById(id: string): Promise {\n    return this.depositRepository\n      .findOne({\n        where: { id, deletedAt: undefined },\n        relations: ['account'],\n      })\n      .then((result) => {\n        if (result) {\n          return result;\n        } else {\n          throw new NotFoundException(`El ID ${id} no existe en base de datos`);\n        }\n      });\n  }\n\n  findByAccountId(accountId: string): Promise {\n    return this.depositRepository.find({\n      where: { account: { id: accountId }, deletedAt: undefined },\n      relations: ['account'],\n    });\n  }\n\n  findByDataRange(\n    dateInit: Date | number,\n    dateEnd: Date | number,\n  ): Promise {\n    return this.depositRepository.find({\n      where: {\n        dateTime: Between(dateInit, dateEnd),\n      },\n      relations: ['account'],\n    });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/DepositRepositoryInterface.html":{"url":"interfaces/DepositRepositoryInterface.html","title":"interface - DepositRepositoryInterface","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  DepositRepositoryInterface\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/data/persistence/repositories/interfaces/deposit-repository.interface.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                            BaseRepositoryInterface\n            \n\n        \n            Index\n            \n                \n                    \n                        \n                            Methods\n                        \n                    \n                    \n                        \n                            \n                                \n                                    \n                                        findByAccountId\n                                    \n                                \n                                \n                                    \n                                        findByDataRange\n                                    \n                                \n                            \n                        \n                    \n                \n            \n        \n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        findByAccountId\n                        \n                    \n                \n            \n            \n                \nfindByAccountId(accountId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/data/persistence/repositories/interfaces/deposit-repository.interface.ts:6\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                accountId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findByDataRange\n                        \n                    \n                \n            \n            \n                \nfindByDataRange(dateInit: Date | number, dateEnd: Date | number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/data/persistence/repositories/interfaces/deposit-repository.interface.ts:7\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                dateInit\n                                            \n                                                        Date | number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                dateEnd\n                                            \n                                                        Date | number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { DepositEntity } from '../../entities';\nimport { BaseRepositoryInterface } from './base/';\n\nexport interface DepositRepositoryInterface\n  extends BaseRepositoryInterface {\n  findByAccountId(accountId: string): Promise;\n  findByDataRange(\n    dateInit: Date | number,\n    dateEnd: Date | number,\n  ): Promise;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/DepositService.html":{"url":"injectables/DepositService.html","title":"injectable - DepositService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  DepositService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/business/services/deposit/deposit.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                createDeposit\n                            \n                            \n                                deleteDeposit\n                            \n                            \n                                    Async\n                                getHistory\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(depositRepository: DepositRepository, accountRepository: AccountRepository)\n                    \n                \n                        \n                            \n                                Defined in src/business/services/deposit/deposit.service.ts:13\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        depositRepository\n                                                  \n                                                        \n                                                                        DepositRepository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        accountRepository\n                                                  \n                                                        \n                                                                        AccountRepository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        createDeposit\n                        \n                    \n                \n            \n            \n                \n                        \n                    createDeposit(deposit: DepositDTO)\n                \n            \n\n\n                    \n                        \n                            Defined in src/business/services/deposit/deposit.service.ts:26\n                        \n                    \n\n\n            \n                \n                        Crear un deposito\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                deposit\n                                            \n                                                            DepositDTO\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                {DepositEntity}\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        deleteDeposit\n                        \n                    \n                \n            \n            \n                \ndeleteDeposit(depositId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/business/services/deposit/deposit.service.ts:46\n                        \n                    \n\n\n            \n                \n                        Borrar un deposito\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                depositId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        getHistory\n                        \n                    \n                \n            \n            \n                \n                        \n                    getHistory(accountId: string, pagination: PaginationDTO, dataRange?: DataRangeDTO)\n                \n            \n\n\n                    \n                        \n                            Defined in src/business/services/deposit/deposit.service.ts:59\n                        \n                    \n\n\n            \n                \n                        Obtener el historial de los depósitos en una cuenta\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                accountId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                pagination\n                                            \n                                                            PaginationDTO\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                dataRange\n                                            \n                                                            DataRangeDTO\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                {DepositEntity[]}\n\n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { DataRangeDTO, DepositDTO, PaginationDTO } from 'src/business/dtos';\nimport {\n  AccountEntity,\n  DepositEntity\n} from '../../../data/persistence/entities';\nimport {\n  AccountRepository,\n  DepositRepository\n} from '../../../data/persistence/repositories';\n\n@Injectable()\nexport class DepositService {\n  constructor(\n    private readonly depositRepository: DepositRepository,\n    private readonly accountRepository: AccountRepository,\n  ) {}\n\n  /**\n   * Crear un deposito\n   *\n   * @param {DepositModel} deposit\n   * @return {*}  {DepositEntity}\n   * @memberof DepositService\n   */\n  async createDeposit(deposit: DepositDTO): Promise {\n    const depositEntity = new DepositEntity();\n    depositEntity.account = await this.accountRepository.findOneById(\n      deposit.accountId,\n    );\n    depositEntity.amount = Number(deposit.amount);\n    depositEntity.dateTime = Date.now();\n    let newAccount = new AccountEntity();\n    newAccount = await this.accountRepository.findOneById(deposit.accountId);\n    newAccount.balance = Number(newAccount.balance) + Number(deposit.amount);\n    this.accountRepository.update(deposit.accountId, newAccount);\n    return this.depositRepository.register(depositEntity);\n  }\n\n  /**\n   * Borrar un deposito\n   *\n   * @param {string} depositId\n   * @memberof DepositService\n   */\n  deleteDeposit(depositId: string): void {\n    this.depositRepository.delete(depositId);\n  }\n\n  /**\n   * Obtener el historial de los depósitos en una cuenta\n   *\n   * @param {string} accountId\n   * @param {PaginationModel} pagination\n   * @param {DataRangeModel} [dataRange]\n   * @return {*}  {DepositEntity[]}\n   * @memberof DepositService\n   */\n  async getHistory(\n    accountId: string,\n    pagination: PaginationDTO,\n    dataRange?: DataRangeDTO,\n  ): Promise {\n    if (dataRange) {\n      const newArray = this.depositRepository.findByDataRange(\n        dataRange.startDate ?? 0,\n        dataRange.endDate ?? Date.now(),\n      );\n      const array = (await newArray).filter(\n        (item) =>\n          item.account.id === accountId &&\n          (item.amount >= Number(dataRange.startAmount) ?? 0) &&\n          (item.amount  item.account.id === accountId)\n      .slice(start, end);\n    return array;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/DocumentTypeEntity.html":{"url":"entities/DocumentTypeEntity.html","title":"entity - DocumentTypeEntity","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  DocumentTypeEntity\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/data/persistence/entities/document-type.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                id\n                            \n                            \n                                    \n                                name\n                            \n                            \n                                    \n                                state\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Default value : uuid()\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({name: 'id', type: 'uuid', primary: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/data/persistence/entities/document-type.entity.ts:15\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({name: 'name', type: 'varchar', length: 50})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/data/persistence/entities/document-type.entity.ts:22\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        state\n                        \n                    \n                \n            \n                \n                    \n                        Default value : true\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({name: 'state', type: 'boolean'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/data/persistence/entities/document-type.entity.ts:28\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import { Column, Entity } from 'typeorm';\nimport { v4 as uuid } from 'uuid';\nimport { DocumentTypeModel } from '../../models';\n\n@Entity({\n  name: 'document_type',\n  schema: 'public',\n})\nexport class DocumentTypeEntity implements DocumentTypeModel {\n  @Column({\n    name: 'id',\n    type: 'uuid',\n    primary: true,\n  })\n  id = uuid();\n\n  @Column({\n    name: 'name',\n    type: 'varchar',\n    length: 50,\n  })\n  name: string;\n\n  @Column({\n    name: 'state',\n    type: 'boolean',\n  })\n  state = true;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/DocumentTypeModel.html":{"url":"interfaces/DocumentTypeModel.html","title":"interface - DocumentTypeModel","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  DocumentTypeModel\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/data/models/document-type.model.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            id\n                                        \n                                \n                                \n                                        \n                                            name\n                                        \n                                \n                                \n                                        \n                                            state\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        id\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        id:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        name\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        name:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        state\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        state:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export interface DocumentTypeModel {\n  id: string;\n  name: string;\n  state: boolean;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/DocumentTypeRepository.html":{"url":"injectables/DocumentTypeRepository.html","title":"injectable - DocumentTypeRepository","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  DocumentTypeRepository\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/data/persistence/repositories/document-type.repository.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                delete\n                            \n                            \n                                findAll\n                            \n                            \n                                findByName\n                            \n                            \n                                findByState\n                            \n                            \n                                findOneById\n                            \n                            \n                                register\n                            \n                            \n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(documentTypeRepository: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/data/persistence/repositories/document-type.repository.ts:8\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        documentTypeRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        delete\n                        \n                    \n                \n            \n            \n                \ndelete(id: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/data/persistence/repositories/document-type.repository.ts:38\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findAll\n                        \n                    \n                \n            \n            \n                \nfindAll()\n                \n            \n\n\n                    \n                        \n                            Defined in src/data/persistence/repositories/document-type.repository.ts:47\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         Promise\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findByName\n                        \n                    \n                \n            \n            \n                \nfindByName(name: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/data/persistence/repositories/document-type.repository.ts:69\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                name\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findByState\n                        \n                    \n                \n            \n            \n                \nfindByState(state: boolean)\n                \n            \n\n\n                    \n                        \n                            Defined in src/data/persistence/repositories/document-type.repository.ts:65\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                state\n                                            \n                                                            boolean\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findOneById\n                        \n                    \n                \n            \n            \n                \nfindOneById(id: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/data/persistence/repositories/document-type.repository.ts:51\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        register\n                        \n                    \n                \n            \n            \n                \nregister(entity: DocumentTypeEntity)\n                \n            \n\n\n                    \n                        \n                            Defined in src/data/persistence/repositories/document-type.repository.ts:25\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                entity\n                                            \n                                                            DocumentTypeEntity\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        update\n                        \n                    \n                \n            \n            \n                \nupdate(id: string, entity: DocumentTypeEntity)\n                \n            \n\n\n                    \n                        \n                            Defined in src/data/persistence/repositories/document-type.repository.ts:29\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                entity\n                                            \n                                                            DocumentTypeEntity\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, NotFoundException } from '@nestjs/common';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { Repository } from 'typeorm';\nimport { DocumentTypeEntity } from '../entities';\nimport { DocumentTypeRepositoryInterface } from './interfaces';\n\n@Injectable()\nexport class DocumentTypeRepository implements DocumentTypeRepositoryInterface {\n  constructor(\n    @InjectRepository(DocumentTypeEntity)\n    private readonly documentTypeRepository: Repository,\n  ) {\n    this.documentTypeRepository.save({\n      id: 'c822487e-5e89-4a49-98d5-50ce60b300b1',\n      name: 'Cédula de ciudadanía',\n      state: true,\n    });\n    this.documentTypeRepository.save({\n      id: '64911806-283f-4e71-ab94-f9098e18cf9a',\n      name: 'Cédula de extranjería',\n      state: true,\n    });\n  }\n\n  register(entity: DocumentTypeEntity): Promise {\n    return this.documentTypeRepository.save(entity);\n  }\n\n  update(id: string, entity: DocumentTypeEntity): Promise {\n    return this.documentTypeRepository.update(id, entity).then((result) => {\n      if (result.affected === 0) {\n        throw new NotFoundException(`El Id: ${id} no existe en base de datos`);\n      }\n      return entity;\n    });\n  }\n\n  delete(id: string) {\n    this.findOneById(id);\n    this.documentTypeRepository.delete(id).then((result) => {\n      if (result.affected === 0) {\n        throw new NotFoundException(`El Id: ${id} no existe en base de datos`);\n      }\n    });\n  }\n\n  findAll(): Promise {\n    return this.documentTypeRepository.find();\n  }\n\n  findOneById(id: string): Promise {\n    return this.documentTypeRepository\n      .findOne({ where: { id } })\n      .then((result) => {\n        if (result) {\n          return result;\n        } else {\n          throw new NotFoundException(\n            `El Id: ${id} no existe en base de datos`,\n          );\n        }\n      });\n  }\n\n  findByState(state: boolean): Promise {\n    return this.documentTypeRepository.find({ where: { state } });\n  }\n\n  findByName(name: string): Promise {\n    return this.documentTypeRepository.find({ where: { name } });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/DocumentTypeRepositoryInterface.html":{"url":"interfaces/DocumentTypeRepositoryInterface.html","title":"interface - DocumentTypeRepositoryInterface","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  DocumentTypeRepositoryInterface\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/data/persistence/repositories/interfaces/document-type-repository.interface.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                            BaseRepositoryInterface\n            \n\n        \n            Index\n            \n                \n                    \n                        \n                            Methods\n                        \n                    \n                    \n                        \n                            \n                                \n                                    \n                                        findByName\n                                    \n                                \n                                \n                                    \n                                        findByState\n                                    \n                                \n                            \n                        \n                    \n                \n            \n        \n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        findByName\n                        \n                    \n                \n            \n            \n                \nfindByName(name: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/data/persistence/repositories/interfaces/document-type-repository.interface.ts:7\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                name\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findByState\n                        \n                    \n                \n            \n            \n                \nfindByState(state: boolean)\n                \n            \n\n\n                    \n                        \n                            Defined in src/data/persistence/repositories/interfaces/document-type-repository.interface.ts:6\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                state\n                                            \n                                                            boolean\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { DocumentTypeEntity } from '../../entities';\nimport { BaseRepositoryInterface } from './base/';\n\nexport interface DocumentTypeRepositoryInterface\n  extends BaseRepositoryInterface {\n  findByState(state: boolean): Promise;\n  findByName(name: string): Promise;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ExceptionFiltersFilter.html":{"url":"classes/ExceptionFiltersFilter.html","title":"class - ExceptionFiltersFilter","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ExceptionFiltersFilter\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/exception-filters/exception-filters.filter.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                        ExceptionFilter\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                catch\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        catch\n                        \n                    \n                \n            \n            \n                \ncatch(exception: T, host: ArgumentsHost)\n                \n            \n\n\n                    \n                        \n                            Defined in src/common/exception-filters/exception-filters.filter.ts:5\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                exception\n                                            \n                                                        T\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                host\n                                            \n                                                        ArgumentsHost\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { ArgumentsHost, Catch, ExceptionFilter } from '@nestjs/common';\n\n@Catch()\nexport class ExceptionFiltersFilter implements ExceptionFilter {\n  catch(exception: T, host: ArgumentsHost) {}\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"guards/GuardsGuard.html":{"url":"guards/GuardsGuard.html","title":"guard - GuardsGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n    Guards\n    GuardsGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n        \n            \n            File\n            \n            \n                src/presentation/guards/guards.guard.ts\n            \n\n\n\n\n\n\n                \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                canActivate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n                \n    Constructor\n        \n            \n                \n                    \nconstructor(jwtService: JwtService)\n                    \n                \n                        \n                            \n                                Defined in src/presentation/guards/guards.guard.ts:6\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        jwtService\n                                                  \n                                                        \n                                                                    JwtService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n                \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        canActivate\n                        \n                    \n                \n            \n            \n                \n                        \n                    canActivate(context: ExecutionContext)\n                \n            \n\n\n                    \n                        \n                            Defined in src/presentation/guards/guards.guard.ts:9\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                context\n                                            \n                                                        ExecutionContext\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n        \n\n\n        \n            import { CanActivate, ExecutionContext, Injectable } from '@nestjs/common';\nimport { JwtService } from '@nestjs/jwt';\nimport { Observable } from 'rxjs';\n\n@Injectable()\nexport class GuardsGuard implements CanActivate {\n  constructor(private jwtService: JwtService) {}\n\n  async canActivate(context: ExecutionContext): Promise {\n    const request = context.switchToHttp().getRequest();\n    const authHeader = request.headers.authorization;\n\n    if (!authHeader || !authHeader.startsWith('access_token ')) {\n      return false;\n    }\n\n    const token = authHeader.split(' ')[1];\n\n    try {\n      const payload = this.jwtService.verify(token);\n      request.user = payload;\n      return true;\n    } catch (err) {\n      return false;\n    }\n  }\n}\n\n        \n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/InterceptorsInterceptor.html":{"url":"injectables/InterceptorsInterceptor.html","title":"injectable - InterceptorsInterceptor","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  InterceptorsInterceptor\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/presentation/interceptors/interceptors.interceptor.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                intercept\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        intercept\n                        \n                    \n                \n            \n            \n                \nintercept(context: ExecutionContext, next: CallHandler)\n                \n            \n\n\n                    \n                        \n                            Defined in src/presentation/interceptors/interceptors.interceptor.ts:11\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                context\n                                            \n                                                        ExecutionContext\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                next\n                                            \n                                                        CallHandler\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Observable\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {\n  CallHandler,\n  ExecutionContext,\n  Injectable,\n  NestInterceptor,\n} from '@nestjs/common';\nimport { Observable } from 'rxjs';\n\n@Injectable()\nexport class InterceptorsInterceptor implements NestInterceptor {\n  intercept(context: ExecutionContext, next: CallHandler): Observable {\n    return next.handle();\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/MiddlewaresMiddleware.html":{"url":"injectables/MiddlewaresMiddleware.html","title":"injectable - MiddlewaresMiddleware","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  MiddlewaresMiddleware\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/presentation/middlewares/middlewares.middleware.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                use\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        use\n                        \n                    \n                \n            \n            \n                \nuse(req: Request, res: Response, next: NextFunction)\n                \n            \n\n\n                    \n                        \n                            Defined in src/presentation/middlewares/middlewares.middleware.ts:5\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                req\n                                            \n                                                        Request\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                res\n                                            \n                                                        Response\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                next\n                                            \n                                                        NextFunction\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, NestMiddleware } from '@nestjs/common';\nimport { Request, Response, NextFunction } from 'express';\n@Injectable()\nexport class MiddlewaresMiddleware implements NestMiddleware {\n  use(req: Request, res: Response, next: NextFunction) {\n    const authHeader = req.headers.authorization;\n\n    if (authHeader && authHeader.startsWith('access_token ')) {\n      const token = authHeader.substring(7);\n      req.headers['Authorization'] = `access_token ${token}`;\n    }\n\n    next();\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/PaginationDTO.html":{"url":"classes/PaginationDTO.html","title":"class - PaginationDTO","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  PaginationDTO\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/business/dtos/pagination.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                Data Transfer Object para la paginación.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                length\n                            \n                            \n                                    \n                                page\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        length\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNumberString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/business/dtos/pagination.dto.ts:20\n                        \n                    \n\n            \n                \n                    Longitud de los elementos en una página.\nDebe ser una cadena que representa un número.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        page\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNumberString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/business/dtos/pagination.dto.ts:32\n                        \n                    \n\n            \n                \n                    Número de página.\nDebe ser una cadena que representa un número.\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsNumberString } from 'class-validator';\n\n/**\n * Data Transfer Object para la paginación.\n *\n * @export\n * @class PaginationDTO\n */\nexport class PaginationDTO {\n  /**\n   * Longitud de los elementos en una página.\n   * \n   * Debe ser una cadena que representa un número.\n   *\n   * @type {number}\n   * @memberof PaginationDTO\n   * @decorator IsNumberString\n   */\n  @IsNumberString()\n  length: number;\n\n  /**\n   * Número de página.\n   * \n   * Debe ser una cadena que representa un número.\n   *\n   * @type {number}\n   * @memberof PaginationDTO\n   * @decorator IsNumberString\n   */\n  @IsNumberString()\n  page: number;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/PaginationModel.html":{"url":"interfaces/PaginationModel.html","title":"interface - PaginationModel","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  PaginationModel\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/data/models/pagination.model.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            length\n                                        \n                                \n                                \n                                        \n                                            page\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        length\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        length:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        page\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        page:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export interface PaginationModel {\n  length: number;\n  page: number;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/PipesPipe.html":{"url":"injectables/PipesPipe.html","title":"injectable - PipesPipe","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  PipesPipe\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/presentation/pipes/pipes.pipe.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                transform\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        transform\n                        \n                    \n                \n            \n            \n                \ntransform(value: any, metadata: ArgumentMetadata)\n                \n            \n\n\n                    \n                        \n                            Defined in src/presentation/pipes/pipes.pipe.ts:5\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                value\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                metadata\n                                            \n                                                        ArgumentMetadata\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { ArgumentMetadata, Injectable, PipeTransform } from '@nestjs/common';\n\n@Injectable()\nexport class PipesPipe implements PipeTransform {\n  transform(value: any, metadata: ArgumentMetadata) {\n    return value;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/SecurityController.html":{"url":"controllers/SecurityController.html","title":"controller - SecurityController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  SecurityController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/presentation/controllers/security/security.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                security\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                logout\n                            \n                            \n                                    \n                                signIn\n                            \n                            \n                                    \n                                signUp\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        logout\n                        \n                    \n                \n            \n            \n                \n                        \n                    logout(body: literal type)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('logout')\n                \n            \n\n                    \n                        \n                            Defined in src/presentation/controllers/security/security.controller.ts:20\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                body\n                                            \n                                                        literal type\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         boolean\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        signIn\n                        \n                    \n                \n            \n            \n                \n                        \n                    signIn(customer: SignDTO)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('sign-in')\n                \n            \n\n                    \n                        \n                            Defined in src/presentation/controllers/security/security.controller.ts:15\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                customer\n                                            \n                                                            SignDTO\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        signUp\n                        \n                    \n                \n            \n            \n                \n                        \n                    signUp(customer: CustomerDTO)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('sign-up')\n                \n            \n\n                    \n                        \n                            Defined in src/presentation/controllers/security/security.controller.ts:10\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                customer\n                                            \n                                                            CustomerDTO\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import { Body, Controller, Get, Post } from '@nestjs/common';\nimport { SecurityService } from '../../../business/services';\nimport { CustomerDTO, SignDTO } from '../../../business/dtos';\n\n@Controller('security')\nexport class SecurityController {\n  constructor(private readonly securityService: SecurityService) {}\n\n  @Post('sign-up')\n  signUp(@Body() customer: CustomerDTO) {\n    return this.securityService.signUp(customer);\n  }\n\n  @Post('sign-in')\n  signIn(@Body() customer: SignDTO) {\n    return this.securityService.signIn(customer);\n  }\n\n  @Get('logout')\n  logout(@Body() body: { JWT: string }): boolean {\n    return this.securityService.signOut(body.JWT);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/SecurityService.html":{"url":"injectables/SecurityService.html","title":"injectable - SecurityService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  SecurityService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/business/services/security/security.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                signIn\n                            \n                            \n                                signOut\n                            \n                            \n                                    Async\n                                signUp\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(customerRepository: CustomerRepository, documentTypeRepository: DocumentTypeRepository, accountService: AccountService, jwtService: JwtService)\n                    \n                \n                        \n                            \n                                Defined in src/business/services/security/security.service.ts:24\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        customerRepository\n                                                  \n                                                        \n                                                                        CustomerRepository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        documentTypeRepository\n                                                  \n                                                        \n                                                                        DocumentTypeRepository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        accountService\n                                                  \n                                                        \n                                                                        AccountService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        jwtService\n                                                  \n                                                        \n                                                                    JwtService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        signIn\n                        \n                    \n                \n            \n            \n                \n                        \n                    signIn(user: SignDTO)\n                \n            \n\n\n                    \n                        \n                            Defined in src/business/services/security/security.service.ts:39\n                        \n                    \n\n\n            \n                \n                        Identificarse en el sistema\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                user\n                                            \n                                                            SignDTO\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                {string}\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        signOut\n                        \n                    \n                \n            \n            \n                \nsignOut(JWT: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/business/services/security/security.service.ts:100\n                        \n                    \n\n\n            \n                \n                        Salir del sistema\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                JWT\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         boolean\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        signUp\n                        \n                    \n                \n            \n            \n                \n                        \n                    signUp(user: CustomerDTO)\n                \n            \n\n\n                    \n                        \n                            Defined in src/business/services/security/security.service.ts:58\n                        \n                    \n\n\n            \n                \n                        Crear usuario en el sistema\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                user\n                                            \n                                                            CustomerDTO\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                {string}\n\n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {\n  Injectable,\n  InternalServerErrorException,\n  NotFoundException,\n  UnauthorizedException,\n} from '@nestjs/common';\nimport { JwtService } from '@nestjs/jwt';\n\n// Repositories\nimport {\n  CustomerRepository,\n  DocumentTypeRepository,\n} from '../../../data/persistence/repositories';\n\n// Services\nimport { AccountService } from '../account';\n\n// Entities\nimport { AccountDTO, CustomerDTO, SignDTO } from '../../dtos';\nimport { CustomerEntity } from '../../../data/persistence/entities';\n\n@Injectable()\nexport class SecurityService {\n  constructor(\n    private readonly customerRepository: CustomerRepository,\n    private readonly documentTypeRepository: DocumentTypeRepository,\n    private readonly accountService: AccountService,\n    private jwtService: JwtService,\n  ) {}\n\n  /**\n   * Identificarse en el sistema\n   *\n   * @param {CustomerModel} user\n   * @return {*}  {string}\n   * @memberof SecurityService\n   */\n  async signIn(user: SignDTO) {\n    const answer = await this.customerRepository.findOneByEmailAndPassword(\n      user.email,\n      user.password,\n    );\n    if (answer) {\n      const customer = await this.customerRepository.findOneByEmail(user.email);\n      const payload = { email: customer.email, sub: customer.id };\n      return { access_token: this.jwtService.sign(payload), id: customer.id };\n    } else throw new UnauthorizedException('Datos de identificación inválidos');\n  }\n\n  /**\n   * Crear usuario en el sistema\n   *\n   * @param {CustomerModel} user\n   * @return {*}  {string}\n   * @memberof SecurityService\n   */\n  async signUp(user: CustomerDTO) {\n    const newCustomer = new CustomerEntity();\n    newCustomer.documentType = await this.documentTypeRepository.findOneById(\n      user.documentTypeId,\n    );\n    newCustomer.document = user.document;\n    newCustomer.fullName = user.fullName;\n    newCustomer.email = user.email;\n    newCustomer.phone = user.phone;\n    newCustomer.password = user.password;\n    if (await this.customerRepository.existEmail(user.email)) {\n      throw new NotFoundException(\n        `El email ${user.email} ya  existe en base de datos`,\n      );\n    }\n\n    const customer = await this.customerRepository.register(newCustomer);\n\n    if (customer) {\n      const newAccount = new AccountDTO();\n      newAccount.customerId = customer.id;\n      newAccount.accountTypeId = 'ab27c9ac-a01c-4c22-a6d6-ce5ab3b79185';\n\n      const account = await this.accountService.createAccount(newAccount);\n      account.balance = 0;\n      if (account) {\n        const payload = { email: customer.email, sub: customer.id };\n        return {\n          access_token: this.jwtService.sign(payload),\n          account: account,\n        };\n      } else\n        throw new UnauthorizedException('Datos de identificación inválidos');\n    } else throw new InternalServerErrorException();\n  }\n\n  /**\n   * Salir del sistema\n   *\n   * @param {string} JWToken\n   * @memberof SecurityService\n   */\n  signOut(JWT: string): boolean {\n    if (this.jwtService.verify(JWT)) return true;\n\n    return false;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/SignDTO.html":{"url":"classes/SignDTO.html","title":"class - SignDTO","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  SignDTO\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/business/dtos/sign.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                Data Transfer Object para los datos de inicio de sesión.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                email\n                            \n                            \n                                    \n                                password\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/business/dtos/sign.dto.ts:20\n                        \n                    \n\n            \n                \n                    Correo electrónico del usuario.\nDebe ser una cadena.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/business/dtos/sign.dto.ts:32\n                        \n                    \n\n            \n                \n                    Contraseña del usuario.\nDebe ser una cadena.\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsString } from 'class-validator';\n\n/**\n * Data Transfer Object para los datos de inicio de sesión.\n *\n * @export\n * @class SignDTO\n */\nexport class SignDTO {\n  /**\n   * Correo electrónico del usuario.\n   * \n   * Debe ser una cadena.\n   *\n   * @type {string}\n   * @memberof SignDTO\n   * @decorator IsString\n   */\n  @IsString()\n  email: string;\n\n  /**\n   * Contraseña del usuario.\n   * \n   * Debe ser una cadena.\n   *\n   * @type {string}\n   * @memberof SignDTO\n   * @decorator IsString\n   */\n  @IsString()\n  password: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/TransferController.html":{"url":"controllers/TransferController.html","title":"controller - TransferController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  TransferController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/presentation/controllers/transfer/transfer.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                transfer\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    Async\n                                createTransfer\n                            \n                            \n                                    \n                                    Async\n                                deleteTransfer\n                            \n                            \n                                    \n                                    \n                                getHistory\n                            \n                            \n                                    \n                                    \n                                    Async\n                                getHistoryIn\n                            \n                            \n                                    \n                                    \n                                    Async\n                                getHistoryOut\n                            \n                            \n                                    \n                                    \n                                    Async\n                                selectTransfer\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Async\n                        createTransfer\n                        \n                    \n                \n            \n            \n                \n                        \n                    createTransfer(transfer: TransferDTO)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post()@UseGuards(GuardsGuard)\n                \n            \n\n                    \n                        \n                            Defined in src/presentation/controllers/transfer/transfer.controller.ts:21\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                transfer\n                                            \n                                                            TransferDTO\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        deleteTransfer\n                        \n                    \n                \n            \n            \n                \n                        \n                    deleteTransfer(id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete(':id')\n                \n            \n\n                    \n                        \n                            Defined in src/presentation/controllers/transfer/transfer.controller.ts:32\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        getHistory\n                        \n                    \n                \n            \n            \n                \n                        \n                    getHistory(body: literal type)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('history')@UseGuards(GuardsGuard)\n                \n            \n\n                    \n                        \n                            Defined in src/presentation/controllers/transfer/transfer.controller.ts:74\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                body\n                                            \n                                                        literal type\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Async\n                        getHistoryIn\n                        \n                    \n                \n            \n            \n                \n                        \n                    getHistoryIn(body: literal type)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('income')@UseGuards(GuardsGuard)\n                \n            \n\n                    \n                        \n                            Defined in src/presentation/controllers/transfer/transfer.controller.ts:40\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                body\n                                            \n                                                        literal type\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Async\n                        getHistoryOut\n                        \n                    \n                \n            \n            \n                \n                        \n                    getHistoryOut(body: literal type)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('outcome')@UseGuards(GuardsGuard)\n                \n            \n\n                    \n                        \n                            Defined in src/presentation/controllers/transfer/transfer.controller.ts:57\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                body\n                                            \n                                                        literal type\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Async\n                        selectTransfer\n                        \n                    \n                \n            \n            \n                \n                        \n                    selectTransfer(id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/select/:id')@UseGuards(GuardsGuard)\n                \n            \n\n                    \n                        \n                            Defined in src/presentation/controllers/transfer/transfer.controller.ts:27\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Body,\n  Controller,\n  Delete,\n  Get,\n  Param,\n  Post,\n  UseGuards,\n} from '@nestjs/common';\nimport { DataRangeDTO, PaginationDTO, TransferDTO } from 'src/business/dtos';\nimport { GuardsGuard } from 'src/presentation/guards/guards.guard';\nimport { TransferService } from '../../../business/services';\nimport { TransferEntity } from '../../../data/persistence/entities';\n\n@Controller('transfer')\nexport class TransferController {\n  constructor(private readonly transferService: TransferService) {}\n\n  @Post()\n  @UseGuards(GuardsGuard)\n  async createTransfer(@Body() transfer: TransferDTO): Promise {\n    return this.transferService.createTransfer(transfer);\n  }\n\n  @Get('/select/:id')\n  @UseGuards(GuardsGuard)\n  async selectTransfer(@Param('id') id: string): Promise {\n    return this.transferService.selectTransfer(id);\n  }\n\n  @Delete(':id')\n  async deleteTransfer(@Param('id') id: string): Promise {\n    const transfer = await this.transferService.selectTransfer(id);\n    this.transferService.deleteTransfer(id);\n    return transfer;\n  }\n\n  @Post('income')\n  @UseGuards(GuardsGuard)\n  async getHistoryIn(\n    @Body()\n    body: {\n      accountId: string;\n      pagination: PaginationDTO;\n      dataRange?: DataRangeDTO;\n    },\n  ): Promise {\n    return this.transferService.getHistoryIn(\n      body.accountId,\n      body.pagination,\n      body.dataRange,\n    );\n  }\n\n  @Post('outcome')\n  @UseGuards(GuardsGuard)\n  async getHistoryOut(\n    @Body()\n    body: {\n      accountId: string;\n      pagination: PaginationDTO;\n      dataRange?: DataRangeDTO;\n    },\n  ): Promise {\n    return this.transferService.getHistoryOut(\n      body.accountId,\n      body.pagination,\n      body.dataRange,\n    );\n  }\n\n  @Post('history')\n  @UseGuards(GuardsGuard)\n  getHistory(\n    @Body()\n    body: {\n      accountId: string;\n      pagination: PaginationDTO;\n      dataRange?: DataRangeDTO;\n    },\n  ): Promise {\n    return this.transferService.getHistory(\n      body.accountId,\n      body.pagination,\n      body.dataRange,\n    );\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/TransferDTO.html":{"url":"classes/TransferDTO.html","title":"class - TransferDTO","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  TransferDTO\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/business/dtos/transfer.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                Data Transfer Object para representar una transferencia.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                amount\n                            \n                            \n                                    \n                                inComeId\n                            \n                            \n                                    \n                                outComeId\n                            \n                            \n                                    \n                                    \n                                reason\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        amount\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNumberString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/business/dtos/transfer.dto.ts:44\n                        \n                    \n\n            \n                \n                    Monto de la transferencia.\nDebe ser una cadena que representa un número.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        inComeId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNumberString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/business/dtos/transfer.dto.ts:32\n                        \n                    \n\n            \n                \n                    Identificador de la cuenta de destino.\nDebe ser una cadena que representa un número.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        outComeId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNumberString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/business/dtos/transfer.dto.ts:20\n                        \n                    \n\n            \n                \n                    Identificador de la cuenta de origen.\nDebe ser una cadena que representa un número.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        reason\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@MaxLength(500)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/business/dtos/transfer.dto.ts:58\n                        \n                    \n\n            \n                \n                    Razón o motivo de la transferencia.\nDebe ser una cadena con un máximo de 500 caracteres.\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsNumberString, IsString, MaxLength } from 'class-validator';\n\n/**\n * Data Transfer Object para representar una transferencia.\n *\n * @export\n * @class TransferDTO\n */\nexport class TransferDTO {\n  /**\n   * Identificador de la cuenta de origen.\n   * \n   * Debe ser una cadena que representa un número.\n   *\n   * @type {string}\n   * @memberof TransferDTO\n   * @decorator IsNumberString\n   */\n  @IsNumberString()\n  outComeId: string;\n\n  /**\n   * Identificador de la cuenta de destino.\n   * \n   * Debe ser una cadena que representa un número.\n   *\n   * @type {string}\n   * @memberof TransferDTO\n   * @decorator IsNumberString\n   */\n  @IsNumberString()\n  inComeId: string;\n\n  /**\n   * Monto de la transferencia.\n   * \n   * Debe ser una cadena que representa un número.\n   *\n   * @type {string}\n   * @memberof TransferDTO\n   * @decorator IsNumberString\n   */\n  @IsNumberString()\n  amount: string;\n\n  /**\n   * Razón o motivo de la transferencia.\n   * \n   * Debe ser una cadena con un máximo de 500 caracteres.\n   *\n   * @type {string}\n   * @memberof TransferDTO\n   * @decorator IsString\n   * @decorator MaxLength\n   */\n  @IsString()\n  @MaxLength(500)\n  reason: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/TransferEntity.html":{"url":"entities/TransferEntity.html","title":"entity - TransferEntity","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  TransferEntity\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/data/persistence/entities/transfer.entitty.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                amount\n                            \n                            \n                                    \n                                dateTime\n                            \n                            \n                                    \n                                    Optional\n                                deletedAt\n                            \n                            \n                                    \n                                id\n                            \n                            \n                                    \n                                    \n                                inCome\n                            \n                            \n                                    \n                                    \n                                outCome\n                            \n                            \n                                    \n                                reason\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        amount\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 0\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({name: 'amount', type: 'numeric'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/data/persistence/entities/transfer.entitty.ts:30\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        dateTime\n                        \n                    \n                \n            \n                \n                    \n                        Type :     number | Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({name: 'date_time', type: 'numeric'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/data/persistence/entities/transfer.entitty.ts:43\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        deletedAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :     number | Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({name: 'deleted_at', type: 'timestamp', nullable: true, select: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/data/persistence/entities/transfer.entitty.ts:51\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Default value : uuid()\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({name: 'id', type: 'uuid', primary: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/data/persistence/entities/transfer.entitty.ts:16\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        inCome\n                        \n                    \n                \n            \n                \n                    \n                        Type :         AccountEntity\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ManyToOne(undefined)@JoinColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/data/persistence/entities/transfer.entitty.ts:24\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        outCome\n                        \n                    \n                \n            \n                \n                    \n                        Type :         AccountEntity\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ManyToOne(undefined)@JoinColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/data/persistence/entities/transfer.entitty.ts:20\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        reason\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({name: 'reason', type: 'varchar', length: 100})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/data/persistence/entities/transfer.entitty.ts:37\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import { Column, Entity, JoinColumn, ManyToOne } from 'typeorm';\nimport { v4 as uuid } from 'uuid';\nimport { TransferModel } from '../../models';\nimport { AccountEntity } from './';\n\n@Entity({\n  name: 'transfer',\n  schema: 'public',\n})\nexport class TransferEntity implements TransferModel {\n  @Column({\n    name: 'id',\n    type: 'uuid',\n    primary: true,\n  })\n  id = uuid();\n\n  @ManyToOne(() => AccountEntity)\n  @JoinColumn()\n  outCome: AccountEntity;\n\n  @ManyToOne(() => AccountEntity)\n  @JoinColumn()\n  inCome: AccountEntity;\n\n  @Column({\n    name: 'amount',\n    type: 'numeric',\n  })\n  amount = 0;\n\n  @Column({\n    name: 'reason',\n    type: 'varchar',\n    length: 100,\n  })\n  reason: string;\n\n  @Column({\n    name: 'date_time',\n    type: 'numeric',\n  })\n  dateTime: number | Date;\n\n  @Column({\n    name: 'deleted_at',\n    type: 'timestamp',\n    nullable: true,\n    select: false,\n  })\n  deletedAt?: number | Date;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/TransferModel.html":{"url":"interfaces/TransferModel.html","title":"interface - TransferModel","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  TransferModel\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/data/models/transfer.model.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            amount\n                                        \n                                \n                                \n                                        \n                                            dateTime\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            deletedAt\n                                        \n                                \n                                \n                                        \n                                            id\n                                        \n                                \n                                \n                                        \n                                            inCome\n                                        \n                                \n                                \n                                        \n                                            outCome\n                                        \n                                \n                                \n                                        \n                                            reason\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        amount\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        amount:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        dateTime\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        dateTime:     Date | number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     Date | number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        deletedAt\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        deletedAt:     Date | number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     Date | number\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        id\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        id:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        inCome\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        inCome:         AccountModel\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         AccountModel\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        outCome\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        outCome:         AccountModel\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         AccountModel\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        reason\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        reason:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { AccountModel } from '.';\n\nexport interface TransferModel {\n  id: string;\n  outCome: AccountModel;\n  inCome: AccountModel;\n  amount: number;\n  reason: string;\n  dateTime: Date | number;\n  deletedAt?: Date | number;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/TransferRepository.html":{"url":"injectables/TransferRepository.html","title":"injectable - TransferRepository","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  TransferRepository\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/data/persistence/repositories/transfer.repository.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                delete\n                            \n                            \n                                findAll\n                            \n                            \n                                findByDataRange\n                            \n                            \n                                findIncomeByDataRange\n                            \n                            \n                                    Async\n                                findOneById\n                            \n                            \n                                findOutcomeByDataRange\n                            \n                            \n                                    Private\n                                hardDelete\n                            \n                            \n                                register\n                            \n                            \n                                    Private\n                                    Async\n                                softDelete\n                            \n                            \n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(transferRepository: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/data/persistence/repositories/transfer.repository.ts:8\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        transferRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        delete\n                        \n                    \n                \n            \n            \n                \ndelete(id: string, soft?: boolean)\n                \n            \n\n\n                    \n                        \n                            Defined in src/data/persistence/repositories/transfer.repository.ts:26\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                soft\n                                            \n                                                            boolean\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findAll\n                        \n                    \n                \n            \n            \n                \nfindAll()\n                \n            \n\n\n                    \n                        \n                            Defined in src/data/persistence/repositories/transfer.repository.ts:65\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         Promise\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findByDataRange\n                        \n                    \n                \n            \n            \n                \nfindByDataRange(dateInit: Date | number, dateEnd: Date | number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/data/persistence/repositories/transfer.repository.ts:118\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                dateInit\n                                            \n                                                        Date | number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                dateEnd\n                                            \n                                                        Date | number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findIncomeByDataRange\n                        \n                    \n                \n            \n            \n                \nfindIncomeByDataRange(accountId: string, dateInit: Date | number, dateEnd: Date | number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/data/persistence/repositories/transfer.repository.ts:103\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                accountId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                dateInit\n                                            \n                                                        Date | number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                dateEnd\n                                            \n                                                        Date | number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        findOneById\n                        \n                    \n                \n            \n            \n                \n                        \n                    findOneById(id: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/data/persistence/repositories/transfer.repository.ts:71\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findOutcomeByDataRange\n                        \n                    \n                \n            \n            \n                \nfindOutcomeByDataRange(accountId: string, dateInit: Date | number, dateEnd: Date | number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/data/persistence/repositories/transfer.repository.ts:88\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                accountId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                dateInit\n                                            \n                                                        Date | number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                dateEnd\n                                            \n                                                        Date | number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        hardDelete\n                        \n                    \n                \n            \n            \n                \n                        \n                    hardDelete(id: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/data/persistence/repositories/transfer.repository.ts:35\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        register\n                        \n                    \n                \n            \n            \n                \nregister(entity: TransferEntity)\n                \n            \n\n\n                    \n                        \n                            Defined in src/data/persistence/repositories/transfer.repository.ts:13\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                entity\n                                            \n                                                            TransferEntity\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Async\n                        softDelete\n                        \n                    \n                \n            \n            \n                \n                        \n                    softDelete(id: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/data/persistence/repositories/transfer.repository.ts:41\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        update\n                        \n                    \n                \n            \n            \n                \nupdate(id: string, entity: TransferEntity)\n                \n            \n\n\n                    \n                        \n                            Defined in src/data/persistence/repositories/transfer.repository.ts:17\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                entity\n                                            \n                                                            TransferEntity\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, NotFoundException } from '@nestjs/common';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { Between, Repository } from 'typeorm';\nimport { TransferEntity } from '../entities';\nimport { TransferRepositoryInterface } from './interfaces';\n\n@Injectable()\nexport class TransferRepository implements TransferRepositoryInterface {\n  constructor(\n    @InjectRepository(TransferEntity)\n    private readonly transferRepository: Repository,\n  ) {}\n  register(entity: TransferEntity): Promise {\n    return this.transferRepository.save(entity);\n  }\n\n  update(id: string, entity: TransferEntity): Promise {\n    return this.transferRepository.update(id, entity).then((result) => {\n      if (result.affected === 0) {\n        throw new NotFoundException(`El Id: ${id} no existe en base de datos`);\n      }\n      return entity;\n    });\n  }\n\n  delete(id: string, soft?: boolean) {\n    this.findOneById(id);\n    if (soft || soft === undefined) {\n      this.softDelete(id);\n    } else {\n      this.hardDelete(id);\n    }\n  }\n\n  private hardDelete(id: string) {\n    this.transferRepository.delete({\n      id,\n    });\n  }\n\n  private async softDelete(id: string) {\n    let newTransfer = new TransferEntity();\n    const transfer = await this.transferRepository\n      .findOne({\n        where: { id },\n      })\n      .then((result) => {\n        if (result) {\n          return result;\n        } else {\n          throw new NotFoundException(\n            `El Id: ${id} no existe en base de datos`,\n          );\n        }\n      });\n    newTransfer = {\n      ...newTransfer,\n      ...transfer,\n      id: transfer.id,\n    };\n    newTransfer.deletedAt = Date.now();\n    this.update(transfer.id, newTransfer);\n  }\n\n  findAll(): Promise {\n    return this.transferRepository.find({\n      where: { deletedAt: undefined },\n    });\n  }\n\n  async findOneById(id: string): Promise {\n    return this.transferRepository\n      .findOne({\n        where: { id, deletedAt: undefined },\n        relations: ['inCome', 'outCome'],\n      })\n      .then((result) => {\n        if (result) {\n          return result;\n        } else {\n          throw new NotFoundException(\n            `El Id: ${id} no existe en base de datos`,\n          );\n        }\n      });\n  }\n\n  findOutcomeByDataRange(\n    accountId: string,\n    dateInit: Date | number,\n    dateEnd: Date | number,\n  ): Promise {\n    return this.transferRepository.find({\n      where: {\n        dateTime: Between(dateInit, dateEnd),\n        outCome: { id: accountId },\n        \n      },\n      relations: ['inCome', 'outCome'],\n    });\n  }\n\n  findIncomeByDataRange(\n    accountId: string,\n    dateInit: Date | number,\n    dateEnd: Date | number,\n  ): Promise {\n    return this.transferRepository.find({\n      where: {\n        dateTime: Between(dateInit, dateEnd),\n        inCome: { id: accountId },\n      },\n      relations: ['inCome', 'outCome'],\n\n    });\n  }\n\n  findByDataRange(\n    dateInit: Date | number,\n    dateEnd: Date | number,\n  ): Promise {\n    return this.transferRepository.find({\n      where: {\n        dateTime: Between(dateInit, dateEnd),\n      },\n      relations: ['inCome', 'outCome'],\n\n    });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/TransferRepositoryInterface.html":{"url":"interfaces/TransferRepositoryInterface.html","title":"interface - TransferRepositoryInterface","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  TransferRepositoryInterface\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/data/persistence/repositories/interfaces/transfer-repository.interface.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                            BaseRepositoryInterface\n            \n\n        \n            Index\n            \n                \n                    \n                        \n                            Methods\n                        \n                    \n                    \n                        \n                            \n                                \n                                    \n                                        findAll\n                                    \n                                \n                                \n                                    \n                                        findIncomeByDataRange\n                                    \n                                \n                                \n                                    \n                                        findOneById\n                                    \n                                \n                                \n                                    \n                                        findOutcomeByDataRange\n                                    \n                                \n                            \n                        \n                    \n                \n            \n        \n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        findAll\n                        \n                    \n                \n            \n            \n                \nfindAll()\n                \n            \n\n\n                    \n                        \n                            Defined in src/data/persistence/repositories/interfaces/transfer-repository.interface.ts:6\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         Promise\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findIncomeByDataRange\n                        \n                    \n                \n            \n            \n                \nfindIncomeByDataRange(accountId: string, dateInit: Date | number, dateEnd: Date | number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/data/persistence/repositories/interfaces/transfer-repository.interface.ts:14\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                accountId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                dateInit\n                                            \n                                                        Date | number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                dateEnd\n                                            \n                                                        Date | number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findOneById\n                        \n                    \n                \n            \n            \n                \nfindOneById(id: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/data/persistence/repositories/interfaces/transfer-repository.interface.ts:7\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findOutcomeByDataRange\n                        \n                    \n                \n            \n            \n                \nfindOutcomeByDataRange(accountId: string, dateInit: Date | number, dateEnd: Date | number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/data/persistence/repositories/interfaces/transfer-repository.interface.ts:8\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                accountId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                dateInit\n                                            \n                                                        Date | number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                dateEnd\n                                            \n                                                        Date | number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { TransferEntity } from '../../entities';\nimport { BaseRepositoryInterface } from './base/';\n\nexport interface TransferRepositoryInterface\n  extends BaseRepositoryInterface {\n  findAll(): Promise;\n  findOneById(id: string): Promise;\n  findOutcomeByDataRange(\n    accountId: string,\n    dateInit: Date | number,\n    dateEnd: Date | number,\n  ): Promise;\n\n  findIncomeByDataRange(\n    accountId: string,\n    dateInit: Date | number,\n    dateEnd: Date | number,\n  ): Promise;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/TransferService.html":{"url":"injectables/TransferService.html","title":"injectable - TransferService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  TransferService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/business/services/transfer/transfer.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                createTransfer\n                            \n                            \n                                deleteTransfer\n                            \n                            \n                                    Async\n                                getHistory\n                            \n                            \n                                    Async\n                                getHistoryIn\n                            \n                            \n                                    Async\n                                getHistoryOut\n                            \n                            \n                                    Async\n                                selectTransfer\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(transferRepository: TransferRepository, accountRepository: AccountRepository, depositRepository: DepositRepository)\n                    \n                \n                        \n                            \n                                Defined in src/business/services/transfer/transfer.service.ts:15\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        transferRepository\n                                                  \n                                                        \n                                                                        TransferRepository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        accountRepository\n                                                  \n                                                        \n                                                                        AccountRepository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        depositRepository\n                                                  \n                                                        \n                                                                        DepositRepository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        createTransfer\n                        \n                    \n                \n            \n            \n                \n                        \n                    createTransfer(transfer: TransferDTO)\n                \n            \n\n\n                    \n                        \n                            Defined in src/business/services/transfer/transfer.service.ts:28\n                        \n                    \n\n\n            \n                \n                        Crear una transferencia entre cuentas del banco\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                transfer\n                                            \n                                                            TransferDTO\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                {TransferEntity}\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        deleteTransfer\n                        \n                    \n                \n            \n            \n                \ndeleteTransfer(transferId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/business/services/transfer/transfer.service.ts:167\n                        \n                    \n\n\n            \n                \n                        Borrar una transacción\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                transferId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        getHistory\n                        \n                    \n                \n            \n            \n                \n                        \n                    getHistory(accountId: string, pagination: PaginationModel, dataRange?: DataRangeModel)\n                \n            \n\n\n                    \n                        \n                            Defined in src/business/services/transfer/transfer.service.ts:130\n                        \n                    \n\n\n            \n                \n                        Obtener historial de transacciones de una cuenta\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                accountId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                pagination\n                                            \n                                                            PaginationModel\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                dataRange\n                                            \n                                                            DataRangeModel\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                {TransferEntity[]}\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        getHistoryIn\n                        \n                    \n                \n            \n            \n                \n                        \n                    getHistoryIn(accountId: string, pagination: PaginationModel, dataRange?: DataRangeModel)\n                \n            \n\n\n                    \n                        \n                            Defined in src/business/services/transfer/transfer.service.ts:95\n                        \n                    \n\n\n            \n                \n                        Obtener historial de transacciones de entrada en una cuenta\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                accountId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                pagination\n                                            \n                                                            PaginationModel\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                dataRange\n                                            \n                                                            DataRangeModel\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                {TransferEntity[]}\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        getHistoryOut\n                        \n                    \n                \n            \n            \n                \n                        \n                    getHistoryOut(accountId: string, pagination: PaginationModel, dataRange?: DataRangeModel)\n                \n            \n\n\n                    \n                        \n                            Defined in src/business/services/transfer/transfer.service.ts:60\n                        \n                    \n\n\n            \n                \n                        Obtener historial de transacciones de salida de una cuenta\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                accountId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                pagination\n                                            \n                                                            PaginationModel\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                dataRange\n                                            \n                                                            DataRangeModel\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                {TransferEntity[]}\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        selectTransfer\n                        \n                    \n                \n            \n            \n                \n                        \n                    selectTransfer(transferId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/business/services/transfer/transfer.service.ts:171\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                transferId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, NotFoundException } from '@nestjs/common';\nimport { TransferDTO } from 'src/business/dtos';\nimport {\n  DataRangeModel,\n  PaginationModel,\n  TransferModel\n} from '../../../data/models';\nimport { TransferEntity } from '../../../data/persistence/entities';\nimport {\n  AccountRepository,\n  DepositRepository,\n  TransferRepository\n} from '../../../data/persistence/repositories';\n@Injectable()\nexport class TransferService {\n  constructor(\n    private readonly transferRepository: TransferRepository,\n    private readonly accountRepository: AccountRepository,\n    private readonly depositRepository: DepositRepository,\n  ) {}\n  /**\n   * Crear una transferencia entre cuentas del banco\n   *\n   * @param {TransferModel} transfer\n   * @return {*}  {TransferEntity}\n   * @memberof TransferService\n   */\n  async createTransfer(transfer: TransferDTO): Promise {\n    const newTransfer = new TransferEntity();\n    const inCome = await this.accountRepository.findOneById(transfer.inComeId);\n    const outCome = await this.accountRepository.findOneById(\n      transfer.outComeId,\n    );\n    if (outCome.balance > Number(transfer.amount)) {\n      newTransfer.inCome = inCome;\n      newTransfer.outCome = outCome;\n      newTransfer.amount = Number(transfer.amount);\n      newTransfer.reason = transfer.reason;\n      outCome.balance = Number(outCome.balance) - Number(transfer.amount);\n      this.accountRepository.update(outCome.id, outCome);\n      this.accountRepository.update(outCome.id, outCome);\n      inCome.balance = Number(inCome.balance) +Number(transfer.amount);\n      this.accountRepository.update(inCome.id, inCome);\n      newTransfer.dateTime = Date.now();\n      return this.transferRepository.register(newTransfer);\n    } else {\n      throw new NotFoundException(`fondos insuficientes`);\n    }\n  }\n\n  /**\n   * Obtener historial de transacciones de salida de una cuenta\n   *\n   * @param {string} accountId\n   * @param {PaginationModel} pagination\n   * @param {DataRangeModel} [dataRange]\n   * @return {*}  {TransferEntity[]}\n   * @memberof TransferService\n   */\n  async getHistoryOut(\n    accountId: string,\n    pagination: PaginationModel,\n    dataRange?: DataRangeModel,\n  ): Promise {\n    if (dataRange) {\n      const array = (\n        await this.transferRepository.findOutcomeByDataRange(\n          accountId,\n          dataRange.startDate ?? 0,\n          dataRange.endDate ?? Date.now(),\n        )\n      ).filter(\n        (item) =>\n          item.outCome.id === accountId &&\n          item.amount > (dataRange.startAmount ?? 0) &&\n          item.amount  {\n    if (dataRange) {\n      const array = (\n        await this.transferRepository.findIncomeByDataRange(\n          accountId,\n          dataRange.startDate ?? 0,\n          dataRange.endDate ?? Date.now(),\n        )\n      ).filter(\n        (item) =>\n          item.inCome.id === accountId &&\n          item.amount > (dataRange.startAmount ?? 0) &&\n          item.amount  {\n    if (dataRange) {\n      const newArray = this.transferRepository.findByDataRange(\n        dataRange.startDate ?? 0,\n        dataRange.endDate ?? Date.now(),\n      );\n      const array = (await newArray).filter(\n        (item) =>\n          (item.inCome.id === accountId || item.outCome.id === accountId) &&\n          (item.amount >= Number(dataRange.startAmount) ?? 0) &&\n          (item.amount  item.inCome.id === accountId || item.outCome.id === accountId,\n      )\n      .slice(start, end);\n    return array;\n  }\n\n  /**\n   * Borrar una transacción\n   *\n   * @param {string} transferId\n   * @memberof TransferService\n   */\n  deleteTransfer(transferId: string): void {\n    this.transferRepository.delete(transferId);\n  }\n\n  async selectTransfer(transferId: string): Promise {\n    return await this.transferRepository.findOneById(transferId);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/TypeOrmExceptionFilter.html":{"url":"classes/TypeOrmExceptionFilter.html","title":"class - TypeOrmExceptionFilter","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  TypeOrmExceptionFilter\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/data/persistence/utils/exception-filters/typeorm.exception-filters.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                        ExceptionFilter\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                catch\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        catch\n                        \n                    \n                \n            \n            \n                \ncatch(exception: TypeORMError, host: ArgumentsHost)\n                \n            \n\n\n                    \n                        \n                            Defined in src/data/persistence/utils/exception-filters/typeorm.exception-filters.ts:6\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                exception\n                                            \n                                                        TypeORMError\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                host\n                                            \n                                                        ArgumentsHost\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { ArgumentsHost, Catch, ExceptionFilter } from '@nestjs/common';\nimport { TypeORMError } from 'typeorm';\n\n@Catch(TypeORMError)\nexport class TypeOrmExceptionFilter implements ExceptionFilter {\n  catch(exception: TypeORMError, host: ArgumentsHost) {\n    const response = host.switchToHttp().getResponse();\n    const message = exception.message;\n    const code: number = (exception as any).code;\n    const aditional = (exception as any).detail;\n    const customResponse = {\n      status: 500,\n      message: 'Ocurrió un error',\n      type: 'Internal Server Error',\n      errors: [{ message: message, detail: aditional }],\n      errorCode: code,\n      timestamp: new Date().toISOString(),\n    };\n\n    response.status(customResponse.status).json(customResponse);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/TypesOrmPostgresConfigService.html":{"url":"injectables/TypesOrmPostgresConfigService.html","title":"injectable - TypesOrmPostgresConfigService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  TypesOrmPostgresConfigService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/data/persistence/configs/types-orm-postgres-config.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                createTypeOrmOptions\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(configService: ConfigService)\n                    \n                \n                        \n                            \n                                Defined in src/data/persistence/configs/types-orm-postgres-config.service.ts:14\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        createTypeOrmOptions\n                        \n                    \n                \n            \n            \n                \ncreateTypeOrmOptions()\n                \n            \n\n\n                    \n                        \n                            Defined in src/data/persistence/configs/types-orm-postgres-config.service.ts:17\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :     TypeOrmModuleOptions\n\n                        \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { ConfigService } from '@nestjs/config';\nimport { TypeOrmModuleOptions, TypeOrmOptionsFactory } from '@nestjs/typeorm';\nimport {\n  AccountEntity,\n  AccountTypeEntity,\n  CustomerEntity,\n  DepositEntity,\n  DocumentTypeEntity,\n  TransferEntity,\n} from '../entities';\n\n@Injectable()\nexport class TypesOrmPostgresConfigService implements TypeOrmOptionsFactory {\n  constructor(private readonly configService: ConfigService) {}\n\n  createTypeOrmOptions(): TypeOrmModuleOptions {\n    return {\n      type: 'postgres',\n      host: this.configService.get('DB_HOST'),\n      port: this.configService.get('DB_PORT'),\n      username: this.configService.get('DB_USER'),\n      password: this.configService.get('DB_PASSWORD'),\n      database: this.configService.get('DB_NAME'),\n      entities: [\n        AccountTypeEntity,\n        AccountEntity,\n        CustomerEntity,\n        DepositEntity,\n        DocumentTypeEntity,\n        TransferEntity,\n      ],\n      synchronize: true,\n      // logging: true,\n    };\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/UserController.html":{"url":"controllers/UserController.html","title":"controller - UserController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  UserController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/presentation/controllers/user/user.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                user\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    Async\n                                deleteUser\n                            \n                            \n                                    \n                                    Async\n                                findAllUsers\n                            \n                            \n                                    \n                                    Async\n                                findAllUsersDeleted\n                            \n                            \n                                    \n                                    Async\n                                findUser\n                            \n                            \n                                    \n                                    Async\n                                findUserByEmail\n                            \n                            \n                                    \n                                    Async\n                                registerUser\n                            \n                            \n                                    \n                                    Async\n                                unsuscribeUser\n                            \n                            \n                                    \n                                    Async\n                                updateUser\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        deleteUser\n                        \n                    \n                \n            \n            \n                \n                        \n                    deleteUser(id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete(':id')\n                \n            \n\n                    \n                        \n                            Defined in src/presentation/controllers/user/user.controller.ts:61\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        findAllUsers\n                        \n                    \n                \n            \n            \n                \n                        \n                    findAllUsers()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()\n                \n            \n\n                    \n                        \n                            Defined in src/presentation/controllers/user/user.controller.ts:23\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         Promise\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        findAllUsersDeleted\n                        \n                    \n                \n            \n            \n                \n                        \n                    findAllUsersDeleted()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('deleted')\n                \n            \n\n                    \n                        \n                            Defined in src/presentation/controllers/user/user.controller.ts:27\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         Promise\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        findUser\n                        \n                    \n                \n            \n            \n                \n                        \n                    findUser(id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get(':id')\n                \n            \n\n                    \n                        \n                            Defined in src/presentation/controllers/user/user.controller.ts:32\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        findUserByEmail\n                        \n                    \n                \n            \n            \n                \n                        \n                    findUserByEmail(email: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('email/:email')\n                \n            \n\n                    \n                        \n                            Defined in src/presentation/controllers/user/user.controller.ts:36\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                email\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        registerUser\n                        \n                    \n                \n            \n            \n                \n                        \n                    registerUser(customer: CustomerDTO)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post()\n                \n            \n\n                    \n                        \n                            Defined in src/presentation/controllers/user/user.controller.ts:43\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                customer\n                                            \n                                                            CustomerDTO\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        unsuscribeUser\n                        \n                    \n                \n            \n            \n                \n                        \n                    unsuscribeUser(id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Put('unsuscribe/:id')\n                \n            \n\n                    \n                        \n                            Defined in src/presentation/controllers/user/user.controller.ts:66\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        updateUser\n                        \n                    \n                \n            \n            \n                \n                        \n                    updateUser(id: string, customer: CustomerUpdateDTO)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Put(':id')\n                \n            \n\n                    \n                        \n                            Defined in src/presentation/controllers/user/user.controller.ts:52\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                customer\n                                            \n                                                            CustomerUpdateDTO\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Body,\n  Controller,\n  Delete,\n  Get,\n  Param,\n  Post,\n  Put,\n  UseGuards,\n} from '@nestjs/common';\nimport { CustomerUpdateDTO } from 'src/business/dtos/update-customer.dto';\nimport { GuardsGuard } from 'src/presentation/guards/guards.guard';\nimport { CustomerDTO } from '../../../business/dtos';\nimport { CustomerService } from '../../../business/services/customer/customer.service';\nimport { AccountEntity } from '../../../data/persistence/entities/account.entity';\nimport { CustomerEntity } from '../../../data/persistence/entities/customer.entity';\n\n@Controller('user')\nexport class UserController {\n  constructor(private readonly customerService: CustomerService) {}\n\n  @Get()\n  async findAllUsers(): Promise {\n    return this.customerService.findAll();\n  }\n  @Get('deleted')\n  async findAllUsersDeleted(): Promise {\n    return this.customerService.findAllDeleted();\n  }\n\n  @Get(':id')\n  async findUser(@Param('id') id: string): Promise {\n    return this.customerService.getCustomerInfo(id);\n  }\n  @Get('email/:email')\n  async findUserByEmail(\n    @Param('email') email: string,\n  ): Promise {\n    return this.customerService.getCustomerInfoByEmail(email);\n  }\n\n  @Post()\n  async registerUser(@Body() customer: CustomerDTO): Promise {\n    return this.customerService.newCustomer(customer);\n  }\n\n  @Put(':id')\n  // @UseGuards(GuardsGuard)\n  async updateUser(\n    @Param('id') id: string,\n    @Body() customer: CustomerUpdateDTO,\n  ): Promise {\n    return this.customerService.updatedCustomer(id, customer);\n  }\n\n  @Delete(':id')\n  // @UseGuards(GuardsGuard)\n  async deleteUser(@Param('id') id: string): Promise {\n    return this.customerService.deleteCustomer(id);\n  }\n\n  @Put('unsuscribe/:id')\n  async unsuscribeUser(@Param('id') id: string): Promise {\n    return this.customerService.unsuscribe(id);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                src/business/dtos/account.dto.ts\n            \n            class\n            AccountDTO\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                src/business/dtos/customer.dto.ts\n            \n            class\n            CustomerDTO\n            \n                100 %\n                (7/7)\n            \n        \n        \n            \n                \n                src/business/dtos/data-range.dto.ts\n            \n            class\n            DataRangeDTO\n            \n                100 %\n                (5/5)\n            \n        \n        \n            \n                \n                src/business/dtos/deposit.dto.ts\n            \n            class\n            DepositDTO\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                src/business/dtos/pagination.dto.ts\n            \n            class\n            PaginationDTO\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                src/business/dtos/sign.dto.ts\n            \n            class\n            SignDTO\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                src/business/dtos/transfer.dto.ts\n            \n            class\n            TransferDTO\n            \n                100 %\n                (5/5)\n            \n        \n        \n            \n                \n                src/business/dtos/update-customer.dto.ts\n            \n            class\n            CustomerUpdateDTO\n            \n                100 %\n                (5/5)\n            \n        \n        \n            \n                \n                src/business/services/account/account.service.ts\n            \n            injectable\n            AccountService\n            \n                66 %\n                (10/15)\n            \n        \n        \n            \n                \n                src/business/services/customer/customer.service.ts\n            \n            injectable\n            CustomerService\n            \n                27 %\n                (3/11)\n            \n        \n        \n            \n                \n                src/business/services/deposit/deposit.service.ts\n            \n            injectable\n            DepositService\n            \n                60 %\n                (3/5)\n            \n        \n        \n            \n                \n                src/business/services/security/secret.ts\n            \n            variable\n            jwtConstants\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/business/services/security/security.service.ts\n            \n            injectable\n            SecurityService\n            \n                60 %\n                (3/5)\n            \n        \n        \n            \n                \n                src/business/services/transfer/transfer.service.ts\n            \n            injectable\n            TransferService\n            \n                62 %\n                (5/8)\n            \n        \n        \n            \n                \n                src/common/decorators/decorators.decorator.ts\n            \n            variable\n            Decorators\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/common/exception-filters/exception-filters.filter.ts\n            \n            class\n            ExceptionFiltersFilter\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/data/models/account-type.mode.ts\n            \n            interface\n            AccountTypeModel\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/data/models/account.model.ts\n            \n            interface\n            AccountModel\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                src/data/models/customer.model.ts\n            \n            interface\n            CustomerModel\n            \n                0 %\n                (0/11)\n            \n        \n        \n            \n                \n                src/data/models/data-range.model.ts\n            \n            interface\n            DataRangeModel\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/data/models/deposit.model.ts\n            \n            interface\n            DepositModel\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/data/models/document-type.model.ts\n            \n            interface\n            DocumentTypeModel\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/data/models/pagination.model.ts\n            \n            interface\n            PaginationModel\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/data/models/transfer.model.ts\n            \n            interface\n            TransferModel\n            \n                0 %\n                (0/8)\n            \n        \n        \n            \n                \n                src/data/persistence/configs/types-orm-postgres-config.service.ts\n            \n            injectable\n            TypesOrmPostgresConfigService\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/data/persistence/entities/account-type.entity.ts\n            \n            entity\n            AccountTypeEntity\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/data/persistence/entities/account.entity.ts\n            \n            entity\n            AccountEntity\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/data/persistence/entities/account.entity.ts\n            \n            function\n            generateID\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/data/persistence/entities/customer.entity.ts\n            \n            entity\n            CustomerEntity\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/data/persistence/entities/deposit.entity.ts\n            \n            entity\n            DepositEntity\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/data/persistence/entities/document-type.entity.ts\n            \n            entity\n            DocumentTypeEntity\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/data/persistence/entities/transfer.entitty.ts\n            \n            entity\n            TransferEntity\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/data/persistence/repositories/account-type.repository.ts\n            \n            injectable\n            AccountTypeRepository\n            \n                0 %\n                (0/9)\n            \n        \n        \n            \n                \n                src/data/persistence/repositories/account.repository.ts\n            \n            injectable\n            AccountRepository\n            \n                0 %\n                (0/12)\n            \n        \n        \n            \n                \n                src/data/persistence/repositories/customer.repository.ts\n            \n            injectable\n            CustomerRepository\n            \n                0 %\n                (0/17)\n            \n        \n        \n            \n                \n                src/data/persistence/repositories/deposit.repository.ts\n            \n            injectable\n            DepositRepository\n            \n                0 %\n                (0/11)\n            \n        \n        \n            \n                \n                src/data/persistence/repositories/document-type.repository.ts\n            \n            injectable\n            DocumentTypeRepository\n            \n                0 %\n                (0/9)\n            \n        \n        \n            \n                \n                src/data/persistence/repositories/interfaces/account-repository.interface.ts\n            \n            interface\n            AccountRepositoryInterface\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/data/persistence/repositories/interfaces/account-type-repository.interface.ts\n            \n            interface\n            AccountTypeRepositoryInterface\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/data/persistence/repositories/interfaces/base/base-repositories.interface.ts\n            \n            interface\n            BaseRepositoryInterface\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/data/persistence/repositories/interfaces/customer-repository.interface.ts\n            \n            interface\n            CustomerRepositoryInterface\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                src/data/persistence/repositories/interfaces/deposit-repository.interface.ts\n            \n            interface\n            DepositRepositoryInterface\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/data/persistence/repositories/interfaces/document-type-repository.interface.ts\n            \n            interface\n            DocumentTypeRepositoryInterface\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/data/persistence/repositories/interfaces/transfer-repository.interface.ts\n            \n            interface\n            TransferRepositoryInterface\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/data/persistence/repositories/transfer.repository.ts\n            \n            injectable\n            TransferRepository\n            \n                0 %\n                (0/12)\n            \n        \n        \n            \n                \n                src/data/persistence/utils/exception-filters/typeorm.exception-filters.ts\n            \n            class\n            TypeOrmExceptionFilter\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/main.ts\n            \n            function\n            bootstrap\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/presentation/controllers/account/account.controller.ts\n            \n            controller\n            AccountController\n            \n                0 %\n                (0/13)\n            \n        \n        \n            \n                \n                src/presentation/controllers/deposit/deposit.controller.ts\n            \n            controller\n            DepositController\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/presentation/controllers/security/security.controller.ts\n            \n            controller\n            SecurityController\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/presentation/controllers/transfer/transfer.controller.ts\n            \n            controller\n            TransferController\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                src/presentation/controllers/user/user.controller.ts\n            \n            controller\n            UserController\n            \n                0 %\n                (0/9)\n            \n        \n        \n            \n                \n                src/presentation/guards/guards.guard.ts\n            \n            guard\n            GuardsGuard\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/presentation/interceptors/interceptors.interceptor.ts\n            \n            injectable\n            InterceptorsInterceptor\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/presentation/middlewares/middlewares.middleware.ts\n            \n            injectable\n            MiddlewaresMiddleware\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/presentation/pipes/pipes.pipe.ts\n            \n            injectable\n            PipesPipe\n            \n                0 %\n                (0/2)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            @nestjs/common : ^10.3.8\n        \n            @nestjs/config : ^3.2.2\n        \n            @nestjs/core : ^10.3.8\n        \n            @nestjs/jwt : ^10.2.0\n        \n            @nestjs/platform-express : ^10.3.8\n        \n            @nestjs/typeorm : ^10.0.2\n        \n            class-transformer : ^0.5.1\n        \n            class-validator : ^0.14.1\n        \n            passport-jwt : ^4.0.1\n        \n            pg : ^8.11.5\n        \n            reflect-metadata : ^0.2.2\n        \n            rxjs : ^7.8.1\n        \n            typeorm : ^0.3.20\n    \n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/functions.html":{"url":"miscellaneous/functions.html","title":"miscellaneous-functions - functions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Functions\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            bootstrap   (src/.../main.ts)\n                        \n                        \n                            generateID   (src/.../account.entity.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/main.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        bootstrap\n                        \n                    \n                \n            \n            \n                \nbootstrap()\n                \n            \n\n\n\n\n        \n    \n    src/data/persistence/entities/account.entity.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        generateID\n                        \n                    \n                \n            \n            \n                \ngenerateID()\n                \n            \n\n\n\n\n            \n                \n\n                        \n                            Returns :         string\n\n                        \n                \n            \n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\n\n  \n\n\n  A progressive Node.js framework for building efficient and scalable server-side applications.\n    \n\n\n\n\n\n\n\n\n  \n    \n  \n\n  \n\nDescription\nNest framework TypeScript starter repository.\nInstallation\nExample :$ npm installRunning the app\nExample :# development\n$ npm run start\n\n# watch mode\n$ npm run start:dev\n\n# production mode\n$ npm run start:prodHow to deliver the workshop\nExample :# Title of the delivery\n[Workshop Week 1 - Day 1] - Nest (Estructura de proyecto)\n\n# Body of the delivery\n[Any short description]Workshop\nThe following are the guidelines that should be taken into account for the development of the workshop to be submitted:\n\nIdentify missing folders.\nCreate missing folders.\nCreate files corresponding to each folder.\n\nTo identify the missing folders, you can use the documentation in the following link:\nNest documentation.\nPlease use the information from the following link to create the corresponding files in each folder using the Nest CLI.\nImportant note\nDo not forget that for this workshop, you should make at least 2 commits properly documented (title and message body).\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n            \n                \n                    \n                        AppModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n  \n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AppModule\n\n\n\ncluster_AppModule_providers\n\n\n\n\nAccountRepository\n\nAccountRepository\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAccountRepository->AppModule\n\n\n\n\n\nAccountService\n\nAccountService\n\nAppModule -->\n\nAccountService->AppModule\n\n\n\n\n\nAccountTypeRepository\n\nAccountTypeRepository\n\nAppModule -->\n\nAccountTypeRepository->AppModule\n\n\n\n\n\nCustomerRepository\n\nCustomerRepository\n\nAppModule -->\n\nCustomerRepository->AppModule\n\n\n\n\n\nCustomerService\n\nCustomerService\n\nAppModule -->\n\nCustomerService->AppModule\n\n\n\n\n\nDepositRepository\n\nDepositRepository\n\nAppModule -->\n\nDepositRepository->AppModule\n\n\n\n\n\nDepositService\n\nDepositService\n\nAppModule -->\n\nDepositService->AppModule\n\n\n\n\n\nDocumentTypeRepository\n\nDocumentTypeRepository\n\nAppModule -->\n\nDocumentTypeRepository->AppModule\n\n\n\n\n\nSecurityService\n\nSecurityService\n\nAppModule -->\n\nSecurityService->AppModule\n\n\n\n\n\nTransferRepository\n\nTransferRepository\n\nAppModule -->\n\nTransferRepository->AppModule\n\n\n\n\n\nTransferService\n\nTransferService\n\nAppModule -->\n\nTransferService->AppModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n  \n\n    \n        \n            \n                \n                    \n                    \n                        1 Module\n                    \n                \n            \n        \n        \n            \n                \n                    \n                    5 Controllers\n                \n            \n        \n        \n            \n                \n                    \n                    6 Entities\n                \n            \n        \n        \n            \n                \n                    \n                    15 Injectables\n                \n            \n        \n        \n            \n                \n                    \n                    10 Classes\n                \n            \n        \n        \n            \n                \n                    \n                    1 Guard\n                \n            \n        \n        \n            \n                \n                    \n                    15 Interfaces\n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"properties.html":{"url":"properties.html","title":"package-properties - properties","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Properties\n    \n    \n        \n            Version : 0.0.1\n        \n            Description : \n        \n            License : UNLICENSED\n        \n            Author : \n    \n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/variables.html":{"url":"miscellaneous/variables.html","title":"miscellaneous-variables - variables","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Variables\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            Decorators   (src/.../decorators.decorator.ts)\n                        \n                        \n                            jwtConstants   (src/.../secret.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/common/decorators/decorators.decorator.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        Decorators\n                        \n                    \n                \n            \n                \n                    \n                        Default value : (...args: string[]) =>\n  SetMetadata('decorators', args)\n                    \n                \n\n\n        \n    \n\n    src/business/services/security/secret.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        jwtConstants\n                        \n                    \n                \n            \n                \n                    \n                        Type :         object\n\n                    \n                \n                \n                    \n                        Default value : {\n  secret: process.env.JWT_SECRET ?? 'secretKey',\n}\n                    \n                \n\n\n        \n    \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
