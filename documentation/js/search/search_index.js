var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.9","fields":["title","body"],"fieldVectors":[["title/controllers/AccountController.html",[0,1.712,1,2.666]],["body/controllers/AccountController.html",[0,0.907,1,2.269,2,1.137,3,0.079,4,0.079,5,0.069,6,1.729,7,1.304,8,2.092,9,0.325,10,1.719,11,0.249,12,2.096,13,2.218,14,2.269,15,2.778,16,1.729,17,3.068,18,0.06,19,0.586,20,2.689,21,3.482,22,4.036,23,3.482,24,3.482,25,2.778,26,2.778,27,2.778,28,3.987,29,2.778,30,3.22,31,2.778,32,2.778,33,2.004,34,0.725,35,4.375,36,4.41,37,0.212,38,1.853,39,0.017,40,2.004,41,0.541,42,2.004,43,3.22,44,5.352,45,1.415,46,1.619,47,1.163,48,0.775,49,0.69,50,1.408,51,0.942,52,0.269,53,0.631,54,4.297,55,3.255,56,0.849,57,3.46,58,2.703,59,3.22,60,1.188,61,1.849,62,2.111,63,2.111,64,2.725,65,2.004,66,3.22,67,2.004,68,3.987,69,2.218,70,4.665,71,4.622,72,2.487,73,0.936,74,3.068,75,4.162,76,2.004,77,3.22,78,2.004,79,4.622,80,1.473,81,0.648,82,5.407,83,4.665,84,5.063,85,2.004,86,2.778,87,2.004,88,2.078,89,1.729,90,2.801,91,1.729,92,2.004,93,2.487,94,2.096,95,0.703,96,0.735,97,1.719,98,1.199,99,2.487,100,2.004,101,2.269,102,2.004,103,1.737,104,1.766,105,2.218,106,2.844,107,2.004,108,2.004,109,2.004,110,3.443,111,2.201,112,2.627,113,2.627,114,2.004,115,2.004,116,2.096,117,2.004,118,3.22,119,2.004,120,2.004,121,2.004,122,2.004,123,2.778,124,2.004,125,3.22,126,2.004,127,2.004,128,2.004,129,2.004,130,1.01,131,0.839,132,1.729,133,1.137,134,1.729,135,0.357,136,0.907,137,1.339,138,2.096,139,1.729,140,1.548,141,0.478,142,1.137,143,1.214,144,1.548,145,2.291,146,1.304,147,2.291,148,1.729,149,0.782,150,1.01,151,2.004,152,0.079,153,0.11,154,0.782,155,1.385,156,1.094,157,2.004,158,1.78,159,2.572,160,2.004,161,2.004,162,3.569,163,2.004,164,2.004,165,2.004,166,2.004,167,2.004,168,2.004,169,4.622,170,1.719,171,1.001,172,3.22,173,2.004,174,2.004,175,0.651,176,2.004,177,2.004,178,2.004,179,2.004,180,1.304,181,2.004,182,2.004,183,2.004,184,2.004,185,2.004,186,0.007,187,0.007]],["title/classes/AccountDTO.html",[90,2.292,153,0.209]],["body/classes/AccountDTO.html",[3,0.203,4,0.203,5,0.178,9,0.256,11,0.487,18,0.153,34,0.709,37,0.212,38,1.795,39,0.017,41,0.524,45,1.202,46,1.488,52,0.218,80,1.718,81,0.912,90,4.433,111,2.349,135,0.338,152,0.25,153,0.376,180,4.445,186,0.014,187,0.014,188,2.321,189,4.424,190,3.367,191,2.714,192,3.179,193,4.105,194,1.573,195,4.445,196,5.827,197,5.128,198,2.214,199,2.534,200,5.128,201,5.128,202,4.424,203,2.91,204,2.585,205,1.202,206,3.367]],["title/entities/AccountEntity.html",[149,1.477,207,1.125]],["body/entities/AccountEntity.html",[3,0.148,4,0.148,5,0.129,8,1.691,9,0.186,11,0.453,18,0.111,34,0.558,37,0.229,38,1.944,39,0.018,41,0.568,44,3.962,46,1.584,48,0.801,49,0.553,50,1.243,52,0.247,53,0.631,56,0.587,60,0.618,73,0.505,80,1.397,81,0.657,88,1.667,98,1.911,111,2.349,131,1.527,135,0.387,149,2.823,152,0.203,153,0.283,158,1.063,171,2.055,175,2.148,186,0.011,187,0.011,194,1.28,198,1.821,199,2.084,205,1.302,207,1.525,208,1.111,209,2.884,210,4.129,211,5.106,212,2.953,213,2.521,214,3.332,215,3.962,216,3.735,217,3.325,218,3.128,219,2.101,220,3.822,221,3.962,222,3.735,223,2.993,224,3.735,225,3.615,226,2.287,227,3.615,228,3.108,229,3.615,230,2.544,231,3.615,232,2.739,233,3.735,234,2.003,235,1.071,236,2.739,237,1.337,238,1.825,239,3.615,240,2.585,241,4.525,242,3.339,243,3.108,244,3.735,245,3.735,246,3.339,247,4.006,248,4.129,249,4.129,250,1.391,251,3.325,252,2.263,253,1.525,254,2.263,255,2.263,256,3.222,257,3.222,258,3.222,259,1.53,260,5.13,261,3.735,262,3.735,263,3.735,264,3.735]],["title/interfaces/AccountModel.html",[251,2.147,265,0.688]],["body/interfaces/AccountModel.html",[3,0.175,4,0.175,5,0.153,9,0.221,11,0.444,16,1.433,18,0.132,34,0.607,37,0.213,39,0.017,44,4.437,45,1.095,46,1.624,49,0.62,50,1.228,51,0.696,52,0.267,53,0.642,56,0.773,80,1.565,88,1.867,95,1.255,96,1.542,106,4.049,111,2.14,131,1.663,133,3.26,135,0.379,152,0.228,171,2.229,175,2.194,186,0.012,187,0.012,194,1.433,198,1.785,199,2.043,210,4.759,211,5.215,212,3.403,213,2.905,225,4.049,226,2.49,234,2.243,235,1.41,236,3.067,237,1.497,240,2.895,246,3.739,251,3.62,265,1.045,266,1.205,267,3.817,268,2.295,269,2.14,270,2.895,271,3.067,272,3.067,273,2.472,274,4.049,275,3.067,276,3.481,277,4.395,278,4.092,279,3.118]],["title/injectables/AccountRepository.html",[280,0.656,281,1.907]],["body/injectables/AccountRepository.html",[3,0.094,4,0.094,5,0.082,8,1.667,9,0.313,11,0.285,13,2.568,16,1.739,17,4.484,18,0.071,19,0.67,20,2.166,34,0.713,37,0.196,39,0.018,41,0.557,45,1.195,46,1.581,47,1.197,48,0.797,49,0.709,50,1.384,51,0.666,52,0.264,53,0.613,56,0.797,60,1.184,61,1.997,62,2.166,63,2.166,69,1.437,73,0.847,80,1.383,81,0.704,88,1.651,94,2.396,96,1.16,98,1.892,103,1.584,104,1.949,105,2.448,111,1.892,116,3.306,130,1.856,131,1.634,135,0.363,136,1.667,137,1.285,141,0.567,149,2.568,152,0.146,153,0.203,154,1.437,155,2.61,156,0.807,158,1.832,159,1.075,175,1.465,180,2.935,186,0.008,187,0.008,195,2.935,205,1.195,207,1.804,208,0.706,210,2.595,212,1.197,213,2.83,219,0.973,225,3.58,237,0.96,250,0.885,253,1.095,259,2.382,266,0.647,268,0.807,280,0.639,281,3.376,282,0.845,283,2.049,284,2.273,285,2.424,286,3.176,287,3.176,288,1.966,289,1.966,290,2.595,291,2.089,292,2.595,293,2.089,294,2.049,295,2.883,296,2.375,297,3.176,298,2.089,299,3.785,300,2.375,301,1.348,302,2.396,303,2.843,304,1.667,305,1.966,306,2.396,307,2.595,308,3.682,309,1.667,310,1.892,311,2.375,312,2.694,313,2.698,314,3.176,315,2.375,316,5.815,317,3.176,318,2.375,319,1.966,320,2.375,321,2.712,322,1.966,323,2.375,324,2.595,325,2.595,326,2.375,327,2.089,328,2.375,329,1.856,330,1.966,331,2.843,332,2.595,333,2.375,334,2.089,335,2.375,336,1.966,337,1.966,338,1.856,339,2.089,340,2.595,341,1.856,342,1.439,343,1.197,344,3.178,345,2.375,346,2.049,347,2.049,348,1.439,349,1.439,350,1.757,351,1.847,352,1.546,353,1.966,354,1.371,355,3.785,356,2.049,357,1.439,358,1.439,359,2.231,360,2.396,361,1.674,362,1.674,363,2.375,364,3.58,365,2.375,366,2.375,367,1.348,368,2.375,369,4.382,370,1.834]],["title/interfaces/AccountRepositoryInterface.html",[265,0.688,344,2.666]],["body/interfaces/AccountRepositoryInterface.html",[3,0.153,4,0.153,5,0.134,9,0.319,11,0.518,13,2.5,16,1.793,17,4.687,18,0.115,19,0.957,34,0.684,37,0.178,39,0.017,41,0.496,46,1.501,47,1.086,48,0.723,49,0.644,51,0.837,52,0.268,53,0.532,56,0.843,60,1.142,61,1.984,62,2.146,63,2.146,73,0.933,80,1.881,81,0.82,88,2.244,104,2.146,111,2.572,131,1.669,135,0.347,137,1.192,149,1.512,152,0.208,175,1.709,180,3.423,186,0.011,187,0.011,195,3.423,198,1.99,205,1.138,208,1.152,225,3.706,235,1.098,265,0.957,266,1.055,268,2.276,269,1.959,284,3.375,286,4.537,287,4.537,288,2.808,312,2.829,313,2.971,314,4.537,317,4.537,319,2.808,321,2.808,344,4.867,354,2.385,371,4.946,372,2.198,373,3.187,374,2.808,375,3.187,376,3.187,377,3.618,378,3.228,379,3.873,380,4.061,381,3.919,382,2.991,383,5.259,384,2.65,385,2.73,386,4.061]],["title/injectables/AccountService.html",[145,2.147,280,0.656]],["body/injectables/AccountService.html",[3,0.099,4,0.099,5,0.087,8,1.735,18,0.074,19,0.697,20,2.859,21,3.307,23,4.019,24,3.307,25,3.307,26,3.307,27,3.307,29,3.307,31,3.307,32,3.307,34,0.74,37,0.207,39,0.018,41,0.586,45,1.386,46,1.55,47,1.268,48,0.844,49,0.752,50,0.697,51,0.772,52,0.244,53,0.319,58,2.046,60,1.153,61,1.953,72,2.96,73,0.518,80,1.422,88,1.514,89,3.307,90,3.164,97,2.046,112,1.629,131,1.611,135,0.371,137,1.391,141,0.597,142,1.42,145,3.787,149,2.649,150,1.261,152,0.099,153,0.138,154,1.496,155,2.005,156,1.583,158,1.959,159,3.246,170,3.761,171,2.166,175,1.829,180,3.664,186,0.008,187,0.008,195,1.629,205,1.215,210,3.284,211,4.348,214,3.116,219,1.025,237,0.999,251,1.42,259,2.139,280,0.665,281,2.993,282,0.89,285,2.491,310,1.428,350,2.949,351,2.913,364,5.154,387,2.159,388,3.833,389,3.833,390,4.659,391,2.502,392,3.508,393,3.3,394,2.502,395,3.833,396,2.502,397,3.307,398,3.469,399,2.502,400,2.502,401,5.222,402,3.833,403,2.502,404,2.502,405,3.833,406,2.502,407,3.833,408,2.502,409,2.96,410,2.502,411,3.833,412,2.502,413,3.833,414,2.502,415,3.68,416,2.502,417,2.502,418,2.502,419,2.502,420,3.833,421,2.502,422,3.833,423,2.502,424,2.502,425,3.833,426,3.833,427,2.502,428,2.502,429,1.516,430,2.502,431,2.502,432,2.502,433,4.659,434,3.833,435,2.502,436,2.502,437,2.502,438,1.933,439,2.502,440,2.502,441,2.502,442,6.181,443,6.181,444,6.181,445,6.181,446,4.505,447,2.502,448,2.502,449,5.222,450,2.502,451,2.502,452,2.502,453,2.502,454,2.502]],["title/entities/AccountTypeEntity.html",[207,1.125,214,1.907]],["body/entities/AccountTypeEntity.html",[3,0.18,4,0.18,5,0.157,9,0.226,11,0.451,18,0.135,34,0.649,37,0.225,38,1.837,39,0.018,41,0.537,46,1.553,48,0.91,50,1.283,51,0.707,52,0.258,80,2.026,81,0.924,88,1.897,98,2.174,131,1.683,135,0.426,152,0.231,153,0.322,175,2.291,186,0.013,187,0.013,194,1.456,198,1.814,199,2.076,205,1.23,207,1.736,208,1.349,214,3.638,217,3.313,218,3.116,220,3.911,230,2.539,242,3.799,243,3.537,246,3.799,247,4.13,250,1.689,252,2.748,253,1.736,254,2.748,255,2.748,277,4.201,455,5.88,456,3.502,457,4.698,458,3.912,459,3.537,460,5.036,461,3.912,462,2.279,463,3.912,464,2.952,465,4.535]],["title/interfaces/AccountTypeModel.html",[265,0.688,277,2.462]],["body/interfaces/AccountTypeModel.html",[3,0.205,4,0.205,5,0.18,9,0.258,11,0.401,13,2.023,18,0.154,34,0.711,37,0.204,39,0.017,46,1.594,48,0.866,50,1.301,51,0.628,52,0.269,53,0.431,56,0.593,73,0.7,80,2.079,81,0.956,88,2.23,96,1.183,105,2.023,131,1.788,152,0.205,175,2.324,186,0.014,187,0.014,194,1.583,198,2.132,199,2.44,235,1.082,265,0.943,266,1.411,268,2.157,269,1.93,270,2.612,271,2.767,272,2.767,277,4.131,462,2.679,466,4.471,467,4.471,468,5.182,469,5.182,470,5.182]],["title/injectables/AccountTypeRepository.html",[280,0.656,392,2.147]],["body/injectables/AccountTypeRepository.html",[3,0.101,4,0.101,5,0.089,9,0.311,11,0.301,16,1.726,18,0.076,19,0.71,20,2.232,34,0.685,37,0.185,39,0.018,41,0.534,46,1.632,47,1.134,48,0.838,49,0.672,50,1.365,51,0.778,52,0.274,53,0.473,56,0.792,60,1.158,61,1.987,62,2.151,63,2.151,64,1.966,73,0.956,80,2.043,81,0.874,88,1.717,95,1.403,96,1.299,98,1.968,103,1.678,104,1.937,105,2.339,130,1.966,131,1.377,135,0.375,136,1.766,137,1.243,141,0.611,152,0.155,153,0.215,154,1.523,155,1.101,156,0.87,158,1.828,175,1.848,186,0.008,187,0.008,205,1.188,207,1.853,214,3.317,219,1.598,230,1.453,237,1.232,238,0.91,250,0.953,253,1.16,266,0.697,268,0.87,275,3.939,280,0.677,282,0.91,284,2.663,285,2.521,288,2.082,289,2.082,291,2.214,293,2.682,294,2.208,295,2.999,297,3.365,298,2.214,310,1.453,312,2.631,313,2.578,319,2.082,321,3.199,322,2.082,327,2.214,329,1.966,330,2.082,334,1.453,336,2.082,337,2.082,338,1.966,339,2.214,341,1.966,342,1.551,343,1.29,346,2.208,347,2.208,348,1.551,349,2.363,350,2.254,351,1.935,352,2.539,353,2.523,354,1.76,356,2.208,357,1.551,358,1.551,359,2.363,369,4.076,384,1.29,392,3.809,462,2.063,471,5.677,472,1.977,473,2.749,474,2.56,475,2.56,476,2.56,477,3.202,478,2.749,479,2.56,480,4.558,481,2.56,482,2.56,483,2.539,484,2.56,485,2.539,486,2.56,487,2.539,488,2.56,489,2.56,490,3.33,491,2.56,492,2.56,493,2.56,494,1.977,495,2.208,496,3.9,497,1.977,498,1.977,499,1.977,500,1.977,501,1.977,502,2.56,503,2.56,504,2.56,505,2.56,506,2.56,507,2.56,508,2.56,509,2.56]],["title/interfaces/AccountTypeRepositoryInterface.html",[265,0.688,490,2.666]],["body/interfaces/AccountTypeRepositoryInterface.html",[3,0.164,4,0.164,5,0.143,9,0.308,11,0.529,16,1.756,18,0.123,19,0.999,34,0.626,37,0.204,39,0.017,41,0.457,46,1.617,47,0.999,48,0.796,49,0.593,51,0.852,52,0.273,53,0.457,56,0.834,60,1.088,61,1.917,62,2.044,63,2.044,73,0.888,80,1.791,81,0.842,88,2.287,95,1.2,104,2.044,131,1.714,135,0.362,137,1.096,152,0.218,175,1.785,186,0.012,187,0.012,205,1.047,208,1.229,214,2.083,235,1.147,265,0.999,266,1.126,268,2.326,269,2.046,275,4.065,284,3.45,288,2.933,312,2.693,313,2.829,319,2.933,321,2.933,354,2.449,371,4.765,372,2.346,373,3.329,374,2.933,375,3.329,376,3.329,377,3.739,378,3.314,380,4.242,381,3.732,382,3.192,385,2.913,386,4.242,462,2.747,473,3.871,478,3.871,490,4.824]],["title/modules/AppModule.html",[510,2.921,511,2.666]],["body/modules/AppModule.html",[1,4.349,2,3.118,3,0.164,4,0.164,5,0.143,19,0.752,37,0.163,39,0.018,41,0.344,47,0.752,48,0.501,49,0.446,60,0.684,135,0.499,141,0.987,145,3.994,146,3.575,147,3.994,149,2.145,150,2.083,152,0.164,153,0.228,186,0.012,187,0.012,214,2.769,223,2.487,230,2.046,253,1.229,281,3.547,310,1.539,343,2.083,392,3.994,393,3.757,429,2.504,510,4.765,511,5.561,512,3.192,513,2.913,514,3.566,515,3.566,516,2.913,517,5.323,518,3.566,519,3.566,520,3.566,521,3.994,522,4.264,523,4.264,524,4.264,525,4.264,526,4.264,527,4.739,528,3.566,529,3.566,530,4.133,531,4.349,532,4.349,533,4.349,534,4.349,535,4.133,536,5.493,537,6.575,538,4.133,539,4.133,540,5.493,541,4.133,542,3.192,543,5.493,544,3.566,545,4.133,546,2.913,547,4.133,548,3.192,549,2.769,550,2.769,551,2.769,552,3.871,553,4.133,554,3.192,555,4.133,556,4.133,557,2.913,558,4.133,559,4.133,560,4.133,561,4.133,562,3.566,563,4.133,564,4.133,565,3.192,566,2.913,567,4.133,568,3.566,569,4.133,570,3.566,571,4.133,572,2.083,573,4.133,574,3.566,575,4.133,576,3.566,577,4.133,578,4.133,579,4.133,580,4.133,581,2.913,582,4.133]],["title/interfaces/BaseRepositoryInterface.html",[265,0.688,378,1.907]],["body/interfaces/BaseRepositoryInterface.html",[3,0.138,4,0.138,5,0.121,9,0.321,11,0.378,13,2.389,14,2.454,16,1.747,18,0.104,19,0.889,34,0.701,37,0.182,39,0.017,41,0.536,45,1.335,47,1.114,48,0.741,49,0.66,50,1.216,52,0.269,53,0.646,56,0.815,60,1.177,61,2.004,62,2.177,63,2.177,69,1.908,73,0.66,94,3.18,95,0.761,96,1.694,98,2.887,103,2.102,104,1.519,105,1.908,110,2.961,113,4.195,116,3.983,130,2.463,131,1.595,136,2.212,137,1.334,152,0.138,186,0.011,187,0.011,198,2.177,199,1.738,205,1.229,207,1.987,237,1.856,238,1.738,240,2.463,265,0.634,266,0.948,268,1.183,269,1.297,285,2.92,289,2.609,291,2.773,293,2.773,298,2.773,299,3.983,301,1.976,303,3.774,306,3.18,309,2.212,310,1.82,312,2.001,313,2.102,321,2.609,322,2.609,324,3.444,327,2.773,329,2.463,330,2.609,331,3.774,334,2.773,336,2.609,337,2.609,338,2.463,340,3.444,354,2.741,374,1.859,378,3.459,583,5.765,584,3.004,585,3.482,586,3.482,587,3.482,588,2.454,589,3.482,590,3.482,591,4.886,592,3.482,593,4.886,594,3.482,595,4.215,596,4.886,597,7.004,598,3.482,599,3.482,600,4.215]],["title/classes/CustomerDTO.html",[153,0.209,601,2.147]],["body/classes/CustomerDTO.html",[3,0.158,4,0.158,5,0.138,9,0.198,11,0.414,18,0.118,34,0.736,37,0.224,38,1.981,39,0.018,41,0.579,45,1.234,52,0.241,73,0.94,80,1.459,81,0.963,111,2.758,135,0.263,152,0.212,153,0.334,186,0.012,187,0.012,188,1.802,190,2.86,191,2.305,192,2.7,193,3.486,194,1.336,196,5.002,198,1.665,199,1.905,203,3.951,204,2.006,205,1.327,206,3.912,235,1.119,304,2.425,384,2.7,462,2.091,572,3.052,601,4.158,602,3.434,603,3.669,604,4.676,605,3.052,606,3.669,607,3.669,608,3.98,609,3.321,610,3.09,611,3.98,612,5.587,613,3.98,614,2.86,615,2.86,616,3.074,617,3.98,618,3.04,619,4.621,620,3.434,621,3.98,622,3.04,623,4.621,624,4.621,625,5.587,626,4.621,627,4.621,628,4.621,629,4.621,630,4.621,631,4.137,632,3.434,633,3.98,634,3.246,635,4.267,636,4.621,637,4.676,638,4.621,639,3.074,640,3.434,641,3.434,642,4.621,643,3.434,644,3.434,645,3.434]],["title/entities/CustomerEntity.html",[207,1.125,223,1.712]],["body/entities/CustomerEntity.html",[3,0.126,4,0.126,5,0.11,9,0.158,11,0.353,18,0.094,34,0.72,37,0.233,38,2.012,39,0.018,41,0.588,48,0.856,49,0.633,50,1.132,51,0.711,52,0.224,53,0.38,56,0.523,80,1.245,81,0.971,88,1.486,98,1.703,111,2.845,131,1.398,135,0.387,152,0.181,153,0.252,171,1.666,175,2.021,186,0.01,187,0.01,194,1.141,198,1.421,199,1.626,205,1.348,207,1.36,208,0.943,212,1.599,213,2.307,217,2.595,218,2.441,220,4.22,223,3.305,226,2.093,227,3.222,228,2.771,229,4.136,230,2.546,231,3.222,232,2.862,234,1.785,235,0.955,236,2.441,237,1.192,238,1.626,239,3.222,240,2.957,242,4.709,243,2.771,246,2.976,247,4.284,248,3.222,249,3.222,250,1.181,252,1.922,253,1.36,254,1.922,255,1.922,278,3.249,457,4.218,459,4.384,462,1.785,464,2.064,550,3.135,572,3.135,603,3.769,605,3.135,606,3.249,607,3.769,609,2.8,610,2.8,614,2.441,615,2.441,618,2.595,622,2.595,634,2.771,646,2.736,647,4.625,648,3.779,649,4.572,650,4.572,651,3.172,652,3.945,653,3.945,654,3.172,655,5.868,656,3.172,657,3.172,658,4.572,659,3.172,660,3.172,661,5.004,662,3.172,663,4.572,664,3.172,665,3.172,666,3.172,667,3.172,668,3.172]],["title/interfaces/CustomerModel.html",[265,0.688,278,2.292]],["body/interfaces/CustomerModel.html",[3,0.159,4,0.159,5,0.139,9,0.2,11,0.417,16,1.345,18,0.12,34,0.743,37,0.221,39,0.017,49,0.701,50,1.183,51,0.787,52,0.261,53,0.54,56,0.744,73,0.728,80,1.468,81,0.997,88,1.751,95,1.177,96,1.485,111,2.923,131,1.586,133,3.059,135,0.265,152,0.214,171,1.891,175,2.112,186,0.012,187,0.012,194,1.345,198,1.675,199,1.917,213,2.797,226,2.375,234,2.104,235,1.358,236,2.878,237,1.405,240,3.277,246,3.508,265,0.981,266,1.094,268,2.209,269,2.008,270,2.717,271,2.878,272,2.878,273,2.319,274,3.799,275,2.878,276,3.266,278,3.686,279,2.831,462,2.104,572,3.277,603,3.939,605,3.277,606,3.939,607,3.939,609,3.102,610,3.102,614,2.878,615,2.878,618,3.059,622,3.059,634,3.266,647,5.608,648,4.582,652,4.65,653,4.65,669,3.466,670,4.65,671,4.231]],["title/injectables/CustomerRepository.html",[280,0.656,393,2.02]],["body/injectables/CustomerRepository.html",[3,0.06,4,0.06,5,0.052,9,0.304,13,0.994,16,1.416,18,0.045,19,0.463,20,2.575,34,0.7,37,0.185,39,0.018,41,0.533,45,1.405,47,1.132,48,0.753,49,0.671,50,1.318,51,0.871,52,0.271,53,0.613,56,0.8,60,1.163,61,1.883,62,2.148,63,2.148,64,1.284,68,2.197,69,2.536,73,1.005,74,2.354,75,2.529,80,1.058,81,0.913,83,2.197,88,1.531,95,1.306,96,1.684,103,1.096,104,1.933,105,2.057,110,2.354,111,2.861,130,2.374,131,1.228,135,0.286,136,2.386,137,1.296,141,0.36,152,0.06,153,0.083,154,0.994,155,2.158,156,0.513,158,1.908,159,1.497,175,1.074,186,0.006,187,0.006,207,1.491,208,0.448,212,2.188,213,2.512,219,1.354,223,2.386,230,0.949,232,1.36,235,0.811,237,1.961,238,2.127,250,0.562,253,0.448,259,1.591,266,0.411,280,0.442,282,0.536,285,1.854,288,1.36,289,1.36,290,1.795,291,1.445,292,1.795,293,1.445,295,2.205,298,1.445,299,3.693,301,0.856,302,1.658,304,1.153,306,2.529,307,3.32,310,1.231,312,2.159,319,1.36,321,2.515,322,1.36,325,1.795,327,1.445,329,1.284,330,1.36,332,1.795,334,1.445,336,1.36,337,1.36,338,1.284,339,1.445,341,2.942,342,0.914,343,0.76,348,0.914,349,0.914,350,2.247,351,2.054,352,1.658,353,3.117,354,2.716,355,3.799,357,2.003,358,2.631,359,3.325,360,0.982,361,1.063,362,1.063,367,0.856,381,2.205,393,2.074,462,1.839,477,2.354,485,1.658,487,1.658,572,2.188,588,1.795,595,5.366,603,2.631,604,3.001,605,3.135,606,2.003,607,2.003,609,2.514,610,2.514,614,3.03,615,3.03,618,2.673,622,2.205,634,2.354,648,1.063,672,1.301,673,2.547,674,3.352,675,2.197,676,2.852,677,2.197,678,2.852,679,2.197,680,1.165,681,1.508,682,1.508,683,2.547,684,1.508,685,5.674,686,3.352,687,1.508,688,4.724,689,2.547,690,3.638,691,3.193,692,1.508,693,2.197,694,1.508,695,1.508,696,1.301,697,1.508,698,4.07,699,4.07,700,5.27,701,2.197,702,1.508,703,1.301,704,1.508,705,2.197,706,2.547,707,2.547,708,1.508,709,2.197,710,1.508,711,1.508,712,3.885,713,2.197,714,2.197,715,1.508,716,1.508,717,1.508,718,1.795,719,1.508,720,1.508,721,1.508,722,1.063,723,1.301,724,1.301,725,3.001,726,4.341,727,1.301,728,1.508,729,1.508,730,3.885,731,2.547,732,2.547,733,2.547,734,3.306]],["title/interfaces/CustomerRepositoryInterface.html",[265,0.688,718,2.666]],["body/interfaces/CustomerRepositoryInterface.html",[3,0.119,4,0.119,5,0.104,9,0.327,11,0.47,16,1.818,18,0.089,19,0.798,34,0.734,37,0.189,39,0.017,41,0.528,47,1.156,48,0.77,49,0.685,50,0.798,51,0.883,52,0.262,53,0.365,56,0.845,60,1.183,61,2.034,62,2.224,63,2.224,69,1.712,73,0.984,74,2.658,75,2.855,80,1.556,81,0.956,88,2.064,95,0.958,104,2.224,111,2.893,131,1.489,135,0.289,137,1.343,152,0.174,175,1.425,186,0.01,187,0.01,205,1.211,208,0.891,223,1.356,235,1.327,238,1.56,265,0.798,266,0.816,268,2.066,269,1.634,284,3.064,288,2.342,312,2.93,313,2.458,319,2.342,321,2.342,354,2.128,372,1.7,373,2.658,374,2.342,375,2.658,376,2.658,377,3.145,378,2.879,380,3.388,381,3.242,386,3.388,462,2.48,483,4.135,572,2.879,603,3.462,604,4.008,605,3.202,606,2.658,607,2.658,609,3.211,610,3.211,614,3.392,615,3.392,618,3.605,622,3.242,634,3.462,675,3.784,676,4.477,677,3.784,678,3.784,679,3.784,688,5.092,693,3.784,696,2.584,701,3.784,703,3.784,705,3.784,709,3.784,718,4.839,735,5.662,736,2.995,737,2.995,738,2.995,739,2.995,740,2.995,741,3.388,742,2.995]],["title/injectables/CustomerService.html",[147,2.147,280,0.656]],["body/injectables/CustomerService.html",[3,0.092,4,0.092,5,0.081,8,1.643,9,0.3,16,1.255,18,0.069,19,0.66,20,2.724,34,0.693,37,0.185,39,0.018,41,0.544,46,0.758,47,1.134,48,0.755,49,0.672,50,1.298,51,0.775,52,0.253,53,0.194,60,1.059,61,2.068,64,2.535,69,1.964,73,0.915,81,0.967,95,1.099,96,1.462,98,2.438,99,2.803,104,1.563,105,1.964,111,2.892,130,2.535,135,0.36,137,1.244,141,0.557,142,1.323,147,3.783,149,1.417,150,1.175,152,0.092,153,0.129,154,1.417,155,1.918,156,1.515,158,2.081,159,3.065,186,0.008,187,0.008,195,2.362,205,1.22,212,3.36,223,2.898,230,2.321,232,3.217,235,0.758,237,1.421,238,1.789,239,2.558,259,2.68,280,0.63,281,3.037,282,0.829,285,2.4,330,1.938,338,2.535,339,2.06,341,1.829,350,1.112,351,2.552,353,1.245,354,0.868,355,2.362,367,1.323,392,3.42,393,3.081,415,4.392,429,1.413,477,3.048,483,3.274,487,2.362,497,1.801,498,1.801,499,1.801,500,1.801,501,1.801,550,2.246,601,3.633,605,2.246,614,2.685,615,2.685,648,3.545,674,4.339,680,1.801,688,4.392,690,3.884,691,3.048,698,3.884,699,3.884,723,3.131,724,2.011,725,5.229,743,2.011,744,3.629,745,3.629,746,3.629,747,3.131,748,3.629,749,4.456,750,2.331,751,3.629,752,2.331,753,4.979,754,5.029,755,2.331,756,5.029,757,2.331,758,3.629,759,2.331,760,4.457,761,3.629,762,2.331,763,3.629,764,2.331,765,3.629,766,3.629,767,2.331,768,3.131,769,3.629,770,2.331,771,5.029,772,5.771,773,3.629,774,2.331,775,3.547,776,2.331,777,1.643,778,2.011,779,2.331,780,2.331,781,2.331,782,1.801,783,2.331,784,2.331,785,3.629,786,3.629,787,3.131,788,3.845,789,4.456,790,3.845,791,4.456,792,3.131,793,3.845,794,3.845,795,4.456,796,3.845,797,4.456,798,2.331,799,2.011,800,2.331,801,2.331,802,2.331,803,2.331,804,2.011,805,2.331,806,3.629,807,3.629,808,2.331,809,2.331,810,2.331,811,2.331]],["title/classes/CustomerUpdateDTO.html",[153,0.209,775,2.462]],["body/classes/CustomerUpdateDTO.html",[3,0.156,4,0.156,5,0.136,9,0.196,11,0.411,16,1.609,18,0.117,34,0.715,37,0.215,38,1.835,39,0.017,41,0.536,45,1.409,52,0.256,56,0.738,73,1.015,81,0.946,111,2.753,135,0.26,152,0.211,153,0.332,186,0.012,187,0.012,188,1.783,190,2.84,191,2.289,192,2.681,194,1.327,196,3.042,203,3.939,204,1.986,205,1.229,206,3.788,235,1.111,273,2.775,304,3.266,305,3.706,338,2.681,384,2.681,462,2.077,572,3.036,603,3.65,606,3.65,607,3.65,609,3.526,610,2.538,612,3.399,616,3.042,618,3.019,619,4.589,620,3.399,622,3.019,623,4.589,624,4.589,625,5.564,626,4.589,627,4.589,628,4.589,629,4.589,630,4.589,631,5.36,632,3.399,634,3.224,635,4.245,636,4.589,637,4.651,638,4.589,639,3.042,640,3.399,641,3.399,642,4.589,643,3.399,644,3.399,645,3.399,760,4.108,775,4.618,777,4.747,812,3.399,813,3.939,814,4.206,815,3.939,816,5.564,817,4.108,818,3.939,819,3.939,820,5.319]],["title/classes/DataRangeDTO.html",[153,0.209,821,2.292]],["body/classes/DataRangeDTO.html",[3,0.161,4,0.161,5,0.141,9,0.203,11,0.42,18,0.121,37,0.216,38,1.86,39,0.018,41,0.543,45,1.246,49,0.784,52,0.258,56,0.748,73,1.032,81,0.931,96,1.242,135,0.269,152,0.215,153,0.338,171,2.347,186,0.012,187,0.012,188,1.842,190,2.903,191,2.339,192,2.74,193,3.539,194,1.356,202,6.172,203,4.06,204,2.051,205,1.246,206,3.489,226,2.903,228,3.96,234,2.551,273,2.812,304,2.958,305,3.881,309,2.958,609,3.468,814,3.96,821,4.335,822,5.875,823,3.511,824,3.748,825,5.282,826,5.282,827,5.282,828,5.282,829,4.069,830,5.638,831,4.253,832,4.069,833,5.638,834,5.638,835,4.069,836,3.489,837,4.069]],["title/interfaces/DataRangeModel.html",[265,0.688,838,2.666]],["body/interfaces/DataRangeModel.html",[3,0.194,4,0.194,5,0.169,9,0.244,11,0.473,18,0.145,37,0.208,39,0.017,49,0.814,51,0.874,52,0.262,53,0.406,56,0.7,73,0.66,81,0.897,96,1.527,104,1.519,152,0.194,171,2.409,186,0.013,187,0.013,194,1.527,226,2.873,234,2.735,237,1.826,265,0.889,266,1.331,268,2.081,269,2.28,270,2.464,271,2.61,272,2.61,305,2.61,824,3.866,825,6.044,826,6.044,827,6.044,828,6.044,830,6.044,831,3.985,833,4.217,836,3.268,838,4.315,839,4.217,840,4.217,841,4.888,842,4.217,843,4.888,844,2.774,845,4.888,846,4.888,847,6.122,848,6.122]],["title/controllers/DepositController.html",[0,1.712,534,2.666]],["body/controllers/DepositController.html",[0,1.765,2,2.213,3,0.154,4,0.154,5,0.135,7,2.538,8,2.712,9,0.32,10,2.821,11,0.408,12,3.438,13,2.062,14,3.723,15,4.558,16,1.726,18,0.116,19,0.961,20,2.577,28,5.169,34,0.611,35,4.067,36,3.723,37,0.2,38,1.705,39,0.017,41,0.498,45,1.224,46,1.103,47,1.09,48,0.726,49,0.646,50,1.328,51,0.894,52,0.26,53,0.598,54,3.723,55,2.821,56,0.792,57,2.998,60,1.11,61,1.749,62,1.996,63,1.996,64,2.663,73,0.935,81,0.886,93,4.08,95,1.403,96,1.207,97,2.821,98,1.968,101,3.723,103,2.273,104,1.642,105,2.062,110,3.201,112,3.438,113,3.438,135,0.424,136,1.765,137,1.282,138,3.9,141,0.931,142,2.213,146,2.538,150,1.965,152,0.154,153,0.215,156,1.325,158,1.503,159,2.391,186,0.011,187,0.011,235,1.103,310,1.968,398,1.86,522,3.631,534,3.723,549,1.965,821,3.201,824,2.663,844,2.998,849,3.364,850,3.012,851,4.526,852,4.558,853,4.558,854,3.899,855,4.18,856,3.899,857,4.545,858,4.558,859,3.899,860,3.899,861,3.899,862,5.283,863,3.899,864,3.723,865,3.438,866,5.283,867,3.201,868,3.899,869,2.363,870,3.899,871,3.899,872,2.748,873,2.748,874,3.899,875,3.364,876,3.364,877,3.364,878,3.899,879,3.899]],["title/classes/DepositDTO.html",[153,0.209,855,2.462]],["body/classes/DepositDTO.html",[3,0.195,4,0.195,5,0.171,9,0.246,11,0.476,18,0.147,34,0.702,37,0.209,38,1.751,39,0.017,41,0.512,45,1.339,46,1.285,52,0.213,53,0.512,56,0.804,58,3.286,73,0.996,81,0.788,135,0.325,152,0.244,153,0.37,170,3.583,186,0.013,187,0.013,188,2.232,190,3.286,191,2.648,192,3.102,193,4.006,194,1.535,198,1.913,203,4.246,204,2.485,205,1.173,206,3.286,273,3.024,304,3.181,305,3.752,398,3.202,609,3.353,814,4.258,855,4.707,857,4.258,880,4.253,881,4.93,882,4.93]],["title/entities/DepositEntity.html",[207,1.125,549,1.907]],["body/entities/DepositEntity.html",[3,0.159,4,0.159,5,0.139,8,2.755,9,0.201,11,0.417,18,0.12,34,0.383,37,0.23,38,1.93,39,0.018,41,0.564,46,1.127,48,0.822,49,0.582,50,1.234,51,0.788,53,0.448,56,0.617,58,2.88,81,0.894,98,2.009,135,0.429,149,2.648,152,0.214,153,0.297,170,3.621,171,2.253,186,0.012,187,0.012,194,1.346,198,1.677,199,1.919,205,1.293,207,1.604,208,1.196,213,2.619,215,3.106,217,3.061,218,2.88,219,2.21,220,3.941,221,5.023,226,2.726,227,3.802,228,3.269,229,3.802,230,2.423,231,3.802,232,2.88,234,2.539,235,1.358,236,3.472,237,1.406,238,1.919,239,3.802,240,2.719,243,3.269,247,4.11,248,3.802,249,3.802,250,1.498,252,2.437,253,1.604,254,2.437,255,2.437,384,2.719,457,4.545,464,2.618,549,3.654,850,3.106,857,4.568,883,3.47,884,3.688,885,4.022,886,4.166,887,4.022,888,4.654,889,4.022,890,4.022,891,4.022,892,4.29]],["title/interfaces/DepositModel.html",[265,0.688,892,2.666]],["body/interfaces/DepositModel.html",[3,0.177,4,0.177,5,0.154,8,3.066,9,0.222,11,0.446,16,1.44,18,0.133,34,0.61,37,0.209,39,0.017,45,1.1,46,1.414,49,0.623,50,1.232,51,0.87,52,0.249,53,0.597,56,0.822,58,3.082,73,0.78,81,0.92,95,1.261,96,1.547,133,3.277,135,0.294,152,0.229,170,3.616,171,2.328,186,0.013,187,0.013,194,1.44,198,1.794,199,2.054,213,2.914,226,2.805,234,2.644,235,1.501,236,3.616,237,1.873,238,2.054,240,2.91,251,3.843,265,1.05,266,1.214,268,2.302,269,2.151,270,2.91,271,3.082,272,3.082,273,2.484,274,4.069,275,3.082,276,3.499,279,3.142,670,4.981,857,4.682,884,4.104,892,4.513,893,3.847,894,5.773]],["title/injectables/DepositRepository.html",[280,0.656,521,2.147]],["body/injectables/DepositRepository.html",[3,0.093,4,0.093,5,0.081,8,2.475,9,0.289,11,0.181,18,0.07,19,0.664,20,1.667,34,0.685,37,0.191,39,0.018,41,0.545,45,1.325,46,1.209,47,1.167,48,0.777,49,0.692,50,1.372,51,0.871,52,0.266,53,0.614,56,0.776,60,1.162,61,1.847,62,2.108,63,2.108,64,1.839,69,1.971,73,0.972,81,0.907,95,1.571,96,1.672,103,1.57,104,1.134,105,1.424,130,1.839,131,1.167,135,0.361,136,2.62,137,1.28,141,0.56,152,0.093,153,0.129,154,1.424,155,2.599,156,0.798,158,1.777,171,1.799,186,0.008,187,0.008,207,1.796,208,0.698,213,1.926,219,0.961,226,2.26,234,1.971,237,1.954,238,1.298,250,0.874,253,0.698,266,0.639,276,3.059,280,0.633,282,0.835,285,2.408,289,1.948,290,2.572,291,2.071,292,2.572,293,2.071,295,2.865,298,2.071,299,4.175,301,1.332,302,2.375,304,1.652,306,2.913,307,3.558,309,1.063,310,1.88,312,2.558,313,2.49,322,1.948,325,2.572,327,2.071,329,1.839,330,1.948,332,2.572,334,2.071,336,1.948,337,1.948,338,1.839,339,2.071,341,2.756,342,1.422,343,1.183,348,1.422,349,1.422,350,2.135,351,2.068,352,1.528,353,2.919,354,2.66,355,3.285,357,2.211,358,2.211,359,3.059,360,1.528,361,1.654,362,1.654,367,1.332,370,3.899,374,1.253,398,2.135,477,4.11,483,2.375,485,2.375,487,2.375,521,2.865,549,3.148,588,3.154,713,2.025,714,2.025,722,2.572,824,3.148,831,2.375,836,1.948,844,2.865,851,4.9,857,4.528,884,1.422,886,2.818,895,2.025,896,3.148,897,3.457,898,2.025,899,2.347,900,2.347,901,2.347,902,3.148,903,2.347,904,1.813,905,3.853,906,2.347,907,3.899,908,3.154,909,2.347,910,2.818,911,2.347,912,2.347,913,2.347,914,2.347,915,2.025,916,2.572,917,2.347,918,2.347,919,2.347,920,2.347,921,5.048,922,3.649,923,2.347,924,2.347,925,2.347,926,2.347,927,4.476,928,2.025]],["title/interfaces/DepositRepositoryInterface.html",[265,0.688,916,2.666]],["body/interfaces/DepositRepositoryInterface.html",[3,0.16,4,0.16,5,0.14,9,0.304,11,0.525,16,1.624,18,0.12,19,0.983,34,0.62,37,0.161,39,0.017,41,0.449,46,1.459,47,0.983,48,0.654,49,0.583,50,1.184,51,0.654,52,0.271,53,0.581,56,0.745,60,1.077,61,1.903,62,2.023,63,2.023,73,0.944,81,0.895,95,1.422,104,1.679,135,0.356,137,1.216,152,0.214,171,2.254,186,0.012,187,0.012,205,1.03,208,1.199,226,2.832,234,2.542,235,1.128,265,0.983,266,1.098,268,2.307,269,2.012,276,3.274,284,3.421,312,2.666,313,2.801,354,2.425,372,2.288,373,3.274,374,2.885,375,3.274,376,3.274,377,3.693,378,3.281,381,3.066,385,2.841,398,2.578,549,2.032,686,4.661,824,3.656,831,3.517,836,2.885,844,3.695,851,5.4,886,4.173,896,4.661,897,4.706,902,4.661,904,3.114,905,4.588,907,5.028,908,4.295,916,4.784,929,5.257,930,4.031]],["title/injectables/DepositService.html",[280,0.656,522,2.292]],["body/injectables/DepositService.html",[3,0.149,4,0.149,5,0.131,9,0.294,11,0.399,18,0.112,19,0.94,20,2.552,34,0.68,37,0.188,39,0.018,41,0.527,45,0.984,46,1.323,47,1.152,48,0.767,49,0.683,50,1.152,51,0.626,52,0.254,53,0.429,60,0.974,61,1.945,73,0.856,81,0.877,96,1.179,97,2.757,98,1.924,112,3.361,135,0.418,137,1.324,141,0.9,142,2.14,149,2.016,150,1.901,152,0.149,153,0.208,154,2.016,155,2.222,156,1.755,158,1.802,159,2.666,186,0.011,187,0.011,205,1.123,219,2.115,235,1.078,237,1.346,259,2.412,280,0.896,281,3.535,282,1.341,301,2.14,310,1.924,351,2.115,364,4.151,367,2.931,398,3.165,409,4.892,415,3.64,429,2.285,446,3.254,521,3.888,522,4.02,549,2.968,691,3.129,782,2.913,821,4.02,824,2.603,842,4.455,844,2.931,850,3.988,851,4.464,852,4.455,853,4.455,855,4.318,857,4.442,858,4.455,864,3.64,865,3.361,867,4.02,872,4.464,873,4.676,898,3.254,931,3.254,932,4.548,933,3.771,934,5.164,935,3.771,936,5.164,937,3.771,938,5.164,939,3.254,940,3.771,941,4.455,942,5.164,943,3.771,944,3.254,945,3.771,946,3.771,947,5.164,948,3.771,949,3.771,950,3.771,951,3.771,952,3.771,953,3.771,954,3.254,955,3.771,956,3.254,957,3.254,958,3.254,959,5.164,960,4.455,961,3.254,962,3.254,963,3.254]],["title/entities/DocumentTypeEntity.html",[207,1.125,550,1.907]],["body/entities/DocumentTypeEntity.html",[3,0.18,4,0.18,5,0.158,9,0.227,11,0.452,18,0.135,34,0.65,37,0.226,38,1.839,39,0.018,41,0.537,48,0.911,50,1.284,51,0.708,52,0.258,80,2.027,81,0.925,88,1.9,98,2.178,131,1.685,135,0.426,152,0.232,153,0.322,175,2.293,186,0.013,187,0.013,194,1.459,198,1.817,199,2.08,205,1.232,207,1.739,208,1.352,217,3.318,218,3.122,220,3.916,230,2.541,242,3.806,243,3.543,247,4.134,250,1.694,252,2.755,253,1.739,254,2.755,255,2.755,456,3.512,457,4.702,458,3.923,459,3.543,460,5.044,461,3.923,462,2.283,463,3.923,464,2.959,550,3.641,610,3.551,671,4.206,964,5.886,965,4.547]],["title/interfaces/DocumentTypeModel.html",[265,0.688,671,2.462]],["body/interfaces/DocumentTypeModel.html",[3,0.203,4,0.203,5,0.178,9,0.256,11,0.396,18,0.153,34,0.709,37,0.203,39,0.017,48,0.863,50,1.331,51,0.863,52,0.269,53,0.426,56,0.587,73,0.693,80,2.075,81,0.953,88,2.219,95,1.12,96,1.171,131,1.78,152,0.203,175,2.315,186,0.014,187,0.014,194,1.573,198,1.96,199,2.243,235,1.071,265,0.933,266,1.397,268,2.143,269,1.91,270,2.585,271,2.738,272,2.738,273,2.207,309,2.855,462,2.666,610,3.636,671,4.105,966,4.424,967,4.424,968,5.128,969,3.614,970,6.306,971,6.306]],["title/injectables/DocumentTypeRepository.html",[280,0.656,523,2.292]],["body/injectables/DocumentTypeRepository.html",[3,0.098,4,0.098,5,0.086,9,0.295,18,0.074,19,0.693,34,0.654,37,0.183,39,0.017,41,0.529,45,1.31,47,1.121,48,0.832,49,0.665,50,1.354,51,0.885,52,0.275,53,0.6,56,0.786,60,1.151,61,1.871,62,2.135,63,2.135,64,1.919,69,1.487,73,0.95,80,2.049,81,0.852,88,1.689,95,1.604,96,1.685,103,1.638,104,1.915,105,2.311,130,1.919,131,1.208,135,0.37,136,1.724,137,1.23,141,0.592,152,0.098,153,0.137,154,1.487,155,1.067,156,0.843,158,1.81,175,1.822,186,0.008,187,0.008,207,1.832,208,0.738,219,1.56,230,1.418,237,1.967,238,0.882,250,0.924,253,0.738,266,0.676,275,3.85,280,0.661,282,0.882,284,1.25,285,2.48,288,2.033,289,2.033,291,2.161,293,2.161,295,2.95,298,2.161,310,1.418,312,2.605,313,2.547,319,2.033,322,2.033,327,2.161,329,1.919,330,2.033,334,2.161,336,2.033,337,2.033,338,1.919,339,2.161,341,2.336,342,1.503,343,1.25,348,1.503,349,2.307,350,2.211,351,1.898,352,3.016,353,2.994,354,2.686,357,1.503,358,1.503,359,2.307,360,1.615,384,1.25,462,2.029,472,1.916,473,2.684,477,4.163,478,2.684,480,4.484,483,2.478,485,2.478,487,2.478,494,1.916,495,2.14,523,3.15,550,3.106,610,3.708,722,2.684,910,4.571,972,5.626,973,2.481,974,2.481,975,2.481,976,2.481,977,2.481,978,2.481,979,2.481,980,2.481,981,2.481,982,2.684,983,2.481,984,2.481,985,3.808,986,2.481,987,2.481,988,2.481,989,2.481,990,2.481,991,3.808,992,2.481,993,2.481,994,2.481,995,2.481,996,2.481,997,2.481,998,2.481,999,2.481,1000,2.481,1001,2.481,1002,4.634,1003,2.481]],["title/interfaces/DocumentTypeRepositoryInterface.html",[265,0.688,982,2.666]],["body/interfaces/DocumentTypeRepositoryInterface.html",[3,0.165,4,0.165,5,0.145,9,0.309,11,0.531,16,1.823,18,0.124,19,1.006,34,0.628,37,0.204,39,0.017,41,0.46,47,1.006,48,0.8,49,0.596,51,0.855,52,0.274,53,0.46,56,0.755,60,1.092,61,1.922,62,2.051,63,2.051,73,0.892,80,1.798,81,0.845,88,2.293,95,1.208,104,2.051,131,1.72,135,0.365,137,1.103,152,0.219,175,1.796,186,0.012,187,0.012,205,1.054,208,1.241,235,1.154,265,1.006,266,1.136,268,2.334,269,2.059,275,4.07,284,3.461,288,2.952,312,2.703,313,2.84,319,2.952,354,2.458,372,2.368,373,3.35,374,2.952,375,3.35,376,3.35,377,3.757,378,3.327,381,3.746,382,3.223,385,2.941,462,2.755,473,3.896,478,3.896,550,2.103,610,3.697,982,4.839,1004,5.348]],["title/classes/ExceptionFiltersFilter.html",[153,0.209,1005,2.921]],["body/classes/ExceptionFiltersFilter.html",[3,0.203,4,0.203,5,0.178,9,0.314,11,0.487,18,0.153,19,1.147,37,0.153,39,0.017,41,0.426,47,0.933,48,0.621,49,0.553,52,0.253,53,0.426,60,0.848,80,1.397,95,1.378,135,0.338,137,1.259,141,1.224,152,0.25,153,0.348,186,0.014,187,0.014,188,2.321,205,0.977,253,2.031,310,1.91,566,5.022,1005,5.503,1006,5.441,1007,5.441,1008,4.424,1009,5.441,1010,6.147,1011,6.306,1012,6.147,1013,5.503,1014,5.441,1015,7.315,1016,6.311,1017,5.128,1018,3.579,1019,4.871,1020,5.441,1021,5.892,1022,5.441,1023,4.445,1024,5.441,1025,5.128]],["title/guards/GuardsGuard.html",[143,2.292,1026,2.666]],["body/guards/GuardsGuard.html",[3,0.182,4,0.182,5,0.159,9,0.293,11,0.529,16,1.709,18,0.137,19,1.071,20,2.419,37,0.175,39,0.017,41,0.489,45,1.122,47,1.071,48,0.713,49,0.635,51,0.713,52,0.204,53,0.602,55,3.868,56,0.829,57,3.341,60,0.974,61,1.603,62,1.83,63,1.83,69,2.674,70,5.079,73,0.795,74,3.567,75,3.832,135,0.388,137,0.917,141,1.097,143,3.567,152,0.182,153,0.253,154,1.794,158,1.848,186,0.013,187,0.013,230,1.712,232,3.143,253,1.366,259,2.805,280,1.022,546,3.239,869,2.785,1013,3.549,1018,3.341,1023,4.149,1026,4.149,1027,4.595,1028,3.964,1029,5.887,1030,5.887,1031,5.887,1032,3.832,1033,6.849,1034,4.595,1035,6.25,1036,4.595,1037,5.887,1038,5.909,1039,4.595,1040,5.887,1041,5.887,1042,5.887,1043,5.079,1044,5.079,1045,5.079,1046,5.887,1047,3.964,1048,4.595,1049,5.079,1050,4.595,1051,3.964,1052,3.549,1053,4.595,1054,3.549,1055,4.595,1056,5.079,1057,4.595,1058,4.595,1059,4.595]],["title/injectables/InterceptorsInterceptor.html",[280,0.656,1060,2.921]],["body/injectables/InterceptorsInterceptor.html",[3,0.183,4,0.183,5,0.16,9,0.294,10,3.987,11,0.457,16,1.474,18,0.137,19,1.075,37,0.137,39,0.017,41,0.384,45,1.126,47,0.841,48,0.56,49,0.498,51,0.831,52,0.251,53,0.64,55,3.664,56,0.83,57,3.895,60,0.977,73,0.927,81,0.956,135,0.39,137,1.179,141,1.103,152,0.183,153,0.255,158,1.315,186,0.013,187,0.013,235,1.515,253,1.374,280,1.025,282,1.643,309,2.674,1019,4.562,1023,4.163,1038,5.921,1043,5.096,1044,6.258,1060,4.562,1061,3.986,1062,6.863,1063,6.863,1064,5.907,1065,5.907,1066,5.907,1067,5.907,1068,5.921,1069,6.863,1070,4.62,1071,5.907,1072,6.863,1073,5.907,1074,5.096,1075,5.907,1076,5.907,1077,5.907,1078,5.907,1079,5.907,1080,5.096,1081,7.092,1082,4.562,1083,5.907,1084,3.986,1085,4.62]],["title/injectables/MiddlewaresMiddleware.html",[280,0.656,557,2.666]],["body/injectables/MiddlewaresMiddleware.html",[3,0.185,4,0.185,5,0.162,9,0.296,10,3.173,11,0.532,13,2.32,18,0.139,19,1.081,37,0.139,39,0.017,41,0.388,47,0.849,48,0.565,49,0.503,51,0.72,52,0.259,53,0.633,55,3.677,56,0.832,60,0.771,95,1.298,135,0.392,137,1.305,141,1.113,152,0.185,153,0.257,186,0.013,187,0.013,238,2.45,253,1.387,259,2.434,280,1.031,282,1.659,309,2.69,310,1.737,384,2.995,557,4.188,1018,3.373,1047,5.941,1049,5.127,1051,4.023,1052,4.59,1068,6.136,1074,5.127,1080,5.127,1082,4.59,1086,4.023,1087,6.887,1088,5.942,1089,5.942,1090,5.942,1091,5.942,1092,6.887,1093,5.127,1094,5.942,1095,6.887,1096,5.941,1097,6.887,1098,4.664,1099,5.942,1100,5.942,1101,5.942,1102,6.887,1103,5.127,1104,5.942,1105,5.942,1106,5.942,1107,5.942,1108,4.023,1109,4.664,1110,4.664,1111,4.664,1112,4.023]],["title/classes/PaginationDTO.html",[153,0.209,867,2.292]],["body/classes/PaginationDTO.html",[3,0.194,4,0.194,5,0.17,9,0.244,11,0.474,18,0.146,37,0.209,38,1.745,39,0.017,41,0.51,45,1.404,52,0.243,53,0.51,56,0.802,73,0.947,95,1.34,135,0.323,152,0.243,153,0.369,171,2.289,186,0.013,187,0.013,188,2.219,190,3.274,191,2.639,192,3.091,194,1.53,203,4.241,204,2.471,205,1.169,206,3.274,237,1.599,273,3.017,304,3.175,305,3.744,459,4.056,609,3.514,814,4.25,865,3.992,867,4.375,1113,4.229,1114,5.774,1115,4.902,1116,5.291,1117,5.291,1118,6.05,1119,4.902]],["title/interfaces/PaginationModel.html",[265,0.688,1120,2.666]],["body/interfaces/PaginationModel.html",[3,0.215,4,0.215,5,0.188,9,0.271,11,0.505,18,0.161,37,0.194,39,0.017,45,1.034,51,0.657,52,0.264,53,0.604,56,0.621,95,1.185,96,1.491,123,5.631,152,0.215,171,2.346,186,0.014,187,0.014,194,1.628,237,1.415,265,0.987,266,1.478,268,2.218,269,2.021,270,2.735,271,2.897,272,2.897,273,2.335,459,4.402,691,4.242,865,4.248,1114,6.267,1116,5.631,1117,6.039,1118,5.631,1120,4.6,1121,4.682,1122,5.426,1123,5.426,1124,6.527]],["title/injectables/PipesPipe.html",[280,0.656,1125,2.921]],["body/injectables/PipesPipe.html",[3,0.2,4,0.2,5,0.175,9,0.311,18,0.15,19,1.136,37,0.15,39,0.017,41,0.419,47,0.918,48,0.611,49,0.544,51,0.899,52,0.267,53,0.519,56,0.811,60,1.033,80,1.7,81,0.799,96,1.618,135,0.333,137,1.246,141,1.204,152,0.2,153,0.278,158,1.436,186,0.014,187,0.014,218,3.62,237,1.628,238,2.221,253,1.5,280,1.084,282,1.795,741,5.472,747,5.387,768,5.387,969,4.4,1018,3.544,1125,4.822,1126,4.353,1127,6.244,1128,7.085,1129,6.244,1130,6.244,1131,6.4,1132,7.085,1133,5.045,1134,6.244,1135,7.085,1136,6.244,1137,6.244,1138,6.244,1139,6.244]],["title/controllers/SecurityController.html",[0,1.712,533,2.666]],["body/controllers/SecurityController.html",[0,1.743,2,2.186,3,0.153,4,0.153,5,0.133,7,2.507,9,0.319,10,2.797,11,0.405,12,3.41,13,2.045,14,3.692,16,1.594,18,0.115,19,0.953,34,0.367,35,3.872,36,3.692,37,0.199,38,1.694,39,0.017,41,0.495,45,1.218,47,1.083,48,0.721,49,0.642,51,0.891,52,0.269,53,0.573,54,3.692,55,2.797,56,0.821,57,2.973,60,1.14,62,1.986,63,1.986,64,3.22,69,2.494,73,0.97,74,3.175,81,0.919,95,1.396,96,1.459,131,1.366,133,2.973,135,0.393,137,1.188,138,2.507,141,0.919,146,2.507,152,0.153,153,0.212,156,1.309,158,1.694,186,0.011,187,0.011,212,3.475,235,1.094,302,3.41,329,2.64,485,3.41,524,3.608,533,3.692,601,3.626,760,4.046,836,3.681,869,2.334,969,3.692,1032,4.35,1052,4.935,1140,3.323,1141,3.851,1142,5.239,1143,5.239,1144,6.538,1145,6.389,1146,5.239,1147,4.52,1148,4.52,1149,3.851,1150,5.239,1151,3.851,1152,5.239,1153,5.341,1154,6.389,1155,3.851,1156,4.159,1157,6.389,1158,3.851,1159,5.239,1160,4.52,1161,3.851,1162,5.239,1163,3.851,1164,3.323,1165,3.851,1166,3.851,1167,3.851,1168,3.851,1169,3.851,1170,3.851,1171,3.851]],["title/injectables/SecurityService.html",[280,0.656,524,2.292]],["body/injectables/SecurityService.html",[3,0.147,4,0.147,5,0.128,8,2.984,18,0.11,19,0.928,20,2.538,34,0.677,37,0.187,39,0.018,41,0.522,47,1.143,48,0.761,49,0.678,50,0.674,51,0.798,52,0.202,60,0.965,81,0.653,90,3.09,96,0.846,97,2.723,131,1.329,135,0.45,137,1.164,141,0.884,145,3.961,150,1.866,152,0.147,153,0.204,154,1.991,155,2.704,156,1.982,158,1.939,159,3.084,186,0.011,187,0.011,205,1.112,208,1.101,212,2.94,219,1.517,223,2.308,230,1.379,232,1.977,237,1.718,259,2.913,278,3.09,280,0.885,282,1.317,341,2.57,350,2.999,351,2.79,353,1.977,354,1.379,364,2.61,393,3.637,429,2.244,438,4.854,497,2.86,498,2.86,499,2.86,500,2.86,501,2.86,523,4.23,524,3.994,546,2.61,601,3.567,605,2.94,680,2.86,725,2.86,727,5.422,753,5.877,787,3.194,788,3.194,790,3.194,792,3.194,793,4.399,794,3.194,796,3.194,799,3.194,804,3.194,1032,2.41,1035,6.022,1056,4.399,1112,4.399,1147,4.399,1148,4.399,1153,3.594,1156,4.09,1172,3.194,1173,5.099,1174,3.703,1175,5.099,1176,3.703,1177,5.099,1178,5.099,1179,5.099,1180,3.703,1181,5.099,1182,5.099,1183,3.703,1184,5.099,1185,3.703,1186,3.703,1187,3.703,1188,3.703,1189,5.099,1190,3.703,1191,5.833,1192,5.099,1193,3.703,1194,5.099,1195,5.099,1196,5.099,1197,5.099,1198,5.099,1199,3.703,1200,3.703,1201,3.703,1202,3.703,1203,3.703,1204,3.703,1205,3.703,1206,3.703,1207,3.703,1208,3.703,1209,3.703,1210,3.703]],["title/classes/SignDTO.html",[153,0.209,1156,2.462]],["body/classes/SignDTO.html",[3,0.198,4,0.198,5,0.173,9,0.249,11,0.48,18,0.149,34,0.705,37,0.21,38,1.767,39,0.017,41,0.516,45,1.346,52,0.245,81,0.904,95,1.356,96,1.418,135,0.33,152,0.246,153,0.372,186,0.014,187,0.014,188,2.264,190,3.316,191,2.672,192,3.13,194,1.549,204,2.521,205,1.184,206,3.316,304,3.197,305,3.771,572,3.404,605,3.404,614,3.316,615,3.316,622,3.524,635,5.289,814,4.28,836,3.316,1144,5.357,1153,4.978,1156,4.727,1211,4.315,1212,5.002,1213,5.002]],["title/controllers/TransferController.html",[0,1.712,532,2.666]],["body/controllers/TransferController.html",[0,1.223,2,1.534,3,0.107,4,0.107,5,0.094,7,1.759,9,0.316,10,2.169,11,0.314,12,2.645,13,1.586,16,1.747,18,0.08,19,0.739,20,2.686,34,0.636,35,4.292,36,4.312,37,0.208,38,1.741,39,0.017,41,0.509,45,1.462,46,1.462,47,1.113,48,0.741,49,0.66,50,1.352,51,0.925,52,0.274,53,0.644,54,4.312,55,3.266,56,0.842,57,3.472,60,1.158,61,1.907,62,2.177,63,2.177,91,2.331,93,3.138,94,2.645,95,0.888,96,1.491,98,2.279,99,3.138,101,2.864,103,1.748,104,1.688,105,2.12,106,2.864,110,3.707,113,3.982,135,0.384,136,1.223,137,1.267,138,2.645,140,2.087,141,0.645,142,1.534,143,1.637,144,2.087,146,1.759,150,1.362,152,0.107,153,0.149,156,0.918,158,1.741,159,1.223,162,4.497,186,0.009,187,0.009,191,2.632,235,1.278,259,1.107,398,2.33,526,2.959,532,2.864,551,1.362,618,2.306,691,3.707,821,3.291,824,3.084,864,4.312,865,3.982,867,3.291,869,1.637,872,3.442,873,3.442,875,4.213,876,4.213,877,4.213,932,3.771,1214,2.331,1215,5.044,1216,3.505,1217,3.505,1218,4.213,1219,4.213,1220,3.505,1221,2.331,1222,3.535,1223,2.702,1224,4.176,1225,2.702,1226,2.702,1227,2.702,1228,2.702,1229,2.702,1230,2.702,1231,2.702,1232,2.702,1233,4.063,1234,4.063,1235,2.702,1236,2.702,1237,2.702,1238,4.063,1239,4.063,1240,2.702,1241,2.702,1242,2.702,1243,4.063,1244,4.063,1245,2.702,1246,2.702,1247,2.702,1248,2.702,1249,2.702,1250,4.063,1251,2.702,1252,2.702,1253,2.702,1254,2.702,1255,2.702,1256,2.702,1257,2.702,1258,2.702]],["title/classes/TransferDTO.html",[153,0.209,1222,2.462]],["body/classes/TransferDTO.html",[3,0.165,4,0.165,5,0.144,9,0.208,11,0.427,16,1.378,18,0.124,34,0.722,37,0.217,38,1.877,39,0.018,41,0.548,45,1.423,46,1.378,52,0.265,53,0.607,56,0.807,58,2.949,73,0.987,135,0.275,152,0.219,153,0.342,170,3.308,186,0.012,187,0.012,188,1.887,190,2.949,191,2.377,192,2.784,193,3.595,194,1.378,198,2.05,203,4.238,204,2.101,205,1.257,206,3.665,273,3.035,304,3.308,305,3.901,309,2.501,609,3.366,616,3.219,631,4.266,635,4.367,637,4.266,639,3.219,814,4.428,816,4.766,817,4.266,1222,4.684,1224,4.003,1259,3.596,1260,6.196,1261,6.196,1262,4.785,1263,4.168,1264,4.168,1265,5.524,1266,4.168,1267,5.524,1268,4.168,1269,4.766,1270,4.266]],["title/entities/TransferEntity.html",[207,1.125,551,1.907]],["body/entities/TransferEntity.html",[3,0.144,4,0.144,5,0.126,9,0.181,11,0.389,17,3.047,18,0.108,34,0.593,37,0.231,38,1.975,39,0.018,41,0.577,46,1.301,48,0.82,49,0.542,50,1.191,51,0.755,52,0.263,53,0.616,58,2.685,69,1.963,98,1.873,103,2.164,135,0.411,149,2.805,152,0.199,153,0.277,170,3.494,171,2.199,186,0.011,187,0.011,191,1.561,194,1.255,198,1.563,199,1.789,205,1.323,207,1.495,208,1.079,213,2.483,215,3.884,217,2.854,218,2.685,219,2.06,220,3.965,221,4.812,226,2.643,227,3.544,228,3.047,229,3.544,230,2.321,231,3.544,232,2.685,234,2.432,235,1.05,236,2.685,238,1.789,242,3.273,243,3.047,247,4.103,248,4.067,249,4.067,250,1.352,252,2.199,253,1.495,254,2.199,255,2.199,303,3.884,457,4.406,459,3.047,464,2.362,551,3.666,661,3.884,884,3.497,888,4.338,1224,4.206,1262,5.054,1270,3.884,1271,3.131,1272,4.338,1273,3.884,1274,4.067,1275,4.067,1276,3.629,1277,3.629,1278,3.629,1279,3.629,1280,3.629,1281,6.231,1282,5.029,1283,6.231,1284,3.629,1285,5.029,1286,3.629,1287,3.756]],["title/interfaces/TransferModel.html",[265,0.688,1287,2.462]],["body/interfaces/TransferModel.html",[3,0.166,4,0.166,5,0.145,9,0.209,11,0.428,16,1.382,17,3.358,18,0.125,34,0.673,37,0.214,39,0.017,45,1.056,46,1.38,49,0.598,50,1.203,51,0.671,52,0.273,53,0.646,56,0.756,58,2.959,95,1.21,96,1.51,106,3.906,133,3.145,135,0.276,152,0.22,170,3.529,171,2.301,186,0.012,187,0.012,194,1.382,198,1.722,199,1.971,213,2.844,226,2.758,234,2.58,235,1.475,236,3.529,237,1.445,240,2.793,251,4.089,265,1.008,266,1.141,268,2.246,269,2.064,270,2.793,271,2.959,272,2.959,273,2.384,274,3.906,275,2.959,276,3.358,279,2.952,309,2.509,884,4.005,1224,4.413,1262,5.105,1269,4.781,1270,4.28,1272,4.781,1273,4.28,1274,4.658,1275,4.658,1287,4.042,1288,3.613,1289,3.906,1290,3.906]],["title/injectables/TransferRepository.html",[280,0.656,525,2.292]],["body/injectables/TransferRepository.html",[3,0.084,4,0.084,5,0.074,9,0.277,13,2.359,18,0.063,19,0.616,20,2.07,34,0.687,37,0.19,39,0.018,41,0.541,45,1.367,46,1.262,47,1.16,48,0.772,49,0.688,50,1.368,51,0.814,52,0.271,53,0.642,56,0.758,60,1.15,61,1.854,62,2.058,63,2.058,69,1.869,73,0.816,81,0.774,94,2.202,95,1.046,96,1.647,103,1.456,104,1.878,105,1.321,116,3.117,130,1.705,131,1.096,135,0.345,136,1.532,137,1.321,141,0.509,152,0.084,153,0.118,154,1.321,155,2.506,156,0.725,158,1.815,159,0.965,171,2.198,186,0.007,187,0.007,191,1.456,207,1.732,208,0.634,213,1.456,219,0.874,226,2.761,230,1.26,234,2.359,235,1,237,1.931,238,1.204,240,1.705,250,0.794,253,0.634,259,0.874,266,0.581,280,0.587,282,0.759,285,2.285,289,1.807,290,2.385,291,1.92,292,2.385,293,1.92,295,2.718,298,1.92,299,3.617,301,1.21,302,2.202,304,1.532,306,2.202,307,2.385,309,1.532,310,1.26,312,2.475,313,2.391,322,1.807,324,2.385,325,2.385,327,1.92,329,1.705,330,1.807,331,2.613,332,2.385,334,1.92,336,1.807,337,1.807,338,1.705,339,1.92,340,2.385,341,2.801,342,1.292,343,1.075,348,1.292,349,1.292,350,2.007,351,1.961,353,2.788,354,2.613,355,2.738,357,2.051,358,2.051,359,2.902,360,1.388,361,1.503,362,1.503,367,1.21,370,4.033,398,2.883,494,2.613,525,2.902,551,3.046,588,2.385,722,2.385,824,3.337,831,3.117,836,2.557,844,2.718,884,2.549,897,3.249,904,1.647,905,4.798,908,4.495,910,2.613,915,1.84,928,3.629,1160,2.919,1215,5.114,1224,4.189,1274,3.917,1275,3.917,1289,3.917,1290,3.917,1291,1.84,1292,3.629,1293,3.629,1294,1.84,1295,2.133,1296,2.133,1297,2.133,1298,2.133,1299,1.84,1300,2.133,1301,2.133,1302,1.84,1303,2.133,1304,2.133,1305,2.133,1306,2.133,1307,2.133,1308,2.385,1309,2.133,1310,2.133,1311,2.133,1312,2.133,1313,4.131,1314,3.384,1315,2.133,1316,2.133,1317,2.133,1318,4.788]],["title/interfaces/TransferRepositoryInterface.html",[265,0.688,1308,2.666]],["body/interfaces/TransferRepositoryInterface.html",[3,0.127,4,0.127,5,0.111,9,0.294,11,0.54,13,2.766,16,1.71,18,0.095,19,0.837,34,0.69,37,0.16,39,0.017,41,0.49,45,1.239,46,1.431,47,0.981,48,0.653,49,0.581,50,1.289,51,0.558,52,0.272,53,0.589,56,0.784,60,1.134,61,1.974,62,2.13,63,2.13,73,0.957,81,0.928,104,1.431,105,1.797,116,3.835,135,0.304,137,1.337,152,0.182,171,2.319,186,0.01,187,0.01,205,1.123,208,0.952,226,2.913,234,2.676,235,0.961,265,0.837,266,0.872,268,2.122,269,1.714,284,3.146,285,2.812,289,2.457,312,2.807,313,2.797,321,2.457,322,2.457,324,3.244,354,2.195,372,1.817,373,2.789,374,2.457,375,2.789,376,2.789,377,3.266,378,2.97,381,3.344,398,3.101,551,1.613,824,3.761,844,3.889,905,4.83,907,5.293,908,4.83,1215,5.793,1224,3.689,1289,4.153,1290,4.153,1292,4.649,1293,4.649,1299,2.762,1302,2.762,1308,4.72,1319,5.386,1320,3.201,1321,3.201,1322,5.893,1323,5.893,1324,3.201,1325,3.201]],["title/injectables/TransferService.html",[280,0.656,526,2.292]],["body/injectables/TransferService.html",[3,0.127,4,0.127,5,0.111,17,2.795,18,0.096,19,0.839,20,2.725,34,0.707,37,0.199,39,0.018,41,0.557,45,1.307,46,1.232,47,1.22,48,0.812,49,0.723,52,0.246,60,1.076,61,1.868,81,0.59,97,2.462,112,3.84,135,0.412,137,1.247,141,0.766,142,1.822,150,1.618,152,0.127,153,0.177,154,1.801,155,2.323,156,1.835,158,1.778,159,2.945,186,0.01,187,0.01,191,1.984,205,1.029,219,2.665,237,0.837,259,2.746,280,0.8,281,3.378,282,1.142,301,3.063,310,1.718,341,1.618,350,1.532,351,1.889,367,3.349,398,3.49,409,3.562,415,4.159,429,1.945,521,3.804,525,3.943,526,3.787,551,3.457,782,4.169,838,4.923,864,4.159,872,4.834,873,5.058,932,3.562,939,2.769,944,2.769,954,2.769,956,4.657,957,4.657,958,2.769,960,5.613,961,2.769,962,2.769,963,2.769,1120,4.923,1216,3.979,1217,3.979,1218,3.979,1219,4.657,1220,3.979,1221,3.979,1222,3.84,1224,2.617,1273,3.562,1274,3.804,1275,4.159,1287,3.002,1289,2.262,1290,3.25,1294,2.769,1313,2.769,1326,2.769,1327,3.21,1328,3.21,1329,4.612,1330,4.612,1331,3.21,1332,4.612,1333,5.398,1334,3.21,1335,5.9,1336,3.21,1337,3.21,1338,3.21,1339,3.21,1340,4.612,1341,3.21,1342,3.21,1343,3.21,1344,3.21,1345,4.612,1346,5.9,1347,3.21,1348,3.21,1349,3.21,1350,3.21,1351,3.21,1352,3.21,1353,4.612,1354,3.21,1355,3.21,1356,3.21,1357,3.21,1358,3.21,1359,3.21,1360,3.21,1361,3.21,1362,4.612,1363,5.398,1364,4.612,1365,3.21,1366,5.398,1367,3.21,1368,3.21,1369,3.21]],["title/classes/TypeOrmExceptionFilter.html",[153,0.209,552,2.666]],["body/classes/TypeOrmExceptionFilter.html",[3,0.182,4,0.182,5,0.159,9,0.293,11,0.547,18,0.137,19,1.071,37,0.175,39,0.017,41,0.382,45,0.876,47,0.836,48,0.557,49,0.496,51,0.787,52,0.265,53,0.612,55,3.143,56,0.674,60,0.76,73,0.877,95,1.286,97,2.453,111,1.712,135,0.388,137,1.175,141,1.097,152,0.182,153,0.253,171,1.428,186,0.013,187,0.013,188,2.08,228,2.785,250,2.698,253,1.751,259,2.9,273,2.533,310,1.712,351,1.882,384,2.316,552,4.149,554,4.546,566,4.827,817,3.549,1009,5.079,1010,5.079,1012,5.604,1013,5.016,1014,5.079,1016,5.909,1018,3.341,1019,4.546,1020,5.909,1021,5.909,1022,5.079,1023,4.149,1024,5.079,1082,4.546,1096,3.964,1370,5.079,1371,3.964,1372,5.887,1373,5.887,1374,6.849,1375,4.595,1376,4.595,1377,4.595,1378,5.909,1379,4.595,1380,5.887,1381,4.595,1382,5.887,1383,4.595,1384,5.887,1385,6.495,1386,4.595,1387,4.595,1388,4.595,1389,4.595,1390,3.964,1391,4.595,1392,4.595,1393,4.595,1394,4.595,1395,4.595,1396,4.595]],["title/injectables/TypesOrmPostgresConfigService.html",[280,0.656,581,2.666]],["body/injectables/TypesOrmPostgresConfigService.html",[3,0.185,4,0.185,5,0.162,9,0.233,11,0.578,13,2.322,18,0.139,19,1.082,37,0.177,39,0.017,41,0.494,47,0.85,48,0.566,49,0.504,52,0.267,53,0.494,60,0.984,97,3.175,135,0.455,141,1.115,149,2.322,152,0.236,153,0.328,154,1.823,156,1.587,158,1.329,186,0.013,187,0.013,205,0.89,208,1.769,214,2.998,223,2.692,230,2.215,250,2.71,253,1.769,280,1.032,282,1.661,343,2.354,542,3.607,549,2.998,550,2.998,551,2.998,565,5.321,566,3.291,568,4.029,570,4.029,572,2.354,574,4.029,576,4.029,581,4.856,869,2.83,941,6.276,1018,3.376,1397,5.646,1398,5.646,1399,4.029,1400,5.948,1401,7.274,1402,6.89,1403,6.89,1404,4.67,1405,7.274,1406,4.67,1407,4.67,1408,6.89,1409,6.544,1410,4.67,1411,4.67,1412,4.67,1413,4.67,1414,4.67,1415,4.67]],["title/controllers/UserController.html",[0,1.712,531,2.666]],["body/controllers/UserController.html",[0,1.253,2,1.57,3,0.11,4,0.11,5,0.096,7,1.801,9,0.319,10,2.208,11,0.32,12,2.692,13,1.615,16,1.82,18,0.082,19,0.753,20,2.82,34,0.69,35,2.507,37,0.184,38,1.872,39,0.017,41,0.547,45,1.421,46,0.864,47,1.123,48,0.748,49,0.666,50,1.368,51,0.829,52,0.237,53,0.585,56,0.835,60,1.207,61,1.987,62,2.267,63,2.267,64,2.085,69,2.146,73,0.985,74,3.331,75,3.577,81,0.963,86,3.569,95,1.437,96,1.255,98,2.299,101,2.915,103,1.78,104,1.708,105,2.146,110,3.986,111,2.622,113,4.018,132,4.742,133,3.119,134,4.742,135,0.422,136,1.253,137,1.313,138,3.224,139,2.387,140,2.137,141,0.661,143,1.677,144,2.137,147,2.811,148,2.387,149,1.08,152,0.11,153,0.153,156,0.94,158,1.872,162,3.195,186,0.009,187,0.009,212,3.315,223,1.253,235,0.864,329,2.085,336,2.208,337,2.208,340,2.915,438,2.137,477,3.331,531,2.915,600,3.569,601,3.119,605,2.497,614,2.934,615,2.934,688,3.874,690,4.245,691,3.331,775,3.577,777,1.95,778,2.387,869,1.677,1153,5.299,1164,2.387,1416,2.387,1417,6.172,1418,4.136,1419,5.496,1420,5.496,1421,4.136,1422,4.136,1423,4.136,1424,4.136,1425,4.136,1426,2.767,1427,2.767,1428,2.767,1429,4.136,1430,2.767,1431,2.767,1432,4.136,1433,2.767,1434,2.767,1435,4.136,1436,2.767,1437,2.767,1438,2.767,1439,2.767,1440,4.136,1441,2.767,1442,4.136,1443,2.767,1444,2.767,1445,2.767,1446,2.767,1447,2.767,1448,2.767,1449,2.767,1450,2.767,1451,2.767,1452,2.767,1453,2.767,1454,2.767,1455,2.767,1456,2.767,1457,2.767,1458,2.767,1459,2.767,1460,2.767,1461,2.767]],["title/coverage.html",[1462,4.464]],["body/coverage.html",[0,2.993,1,2.632,5,0.129,6,3.222,37,0.174,38,1.063,39,0.017,90,2.263,143,2.263,145,2.12,147,2.12,149,1.458,153,0.403,186,0.011,187,0.011,189,3.222,207,2.031,209,3.962,214,1.882,223,1.691,241,2.884,251,2.12,258,4.425,265,1.38,267,3.222,277,2.431,278,2.263,280,1.316,281,1.882,283,3.222,344,2.632,351,1.53,371,3.962,372,3.877,378,1.882,387,3.222,392,2.12,393,1.994,455,3.222,456,3.962,466,3.222,467,3.222,471,3.222,472,3.962,490,2.632,516,2.632,521,2.12,522,2.263,523,2.263,524,2.263,525,2.263,526,2.263,531,2.632,532,2.632,533,2.632,534,2.632,548,2.884,549,1.882,550,1.882,551,1.882,552,2.632,554,2.884,557,2.632,565,2.884,581,2.632,583,3.222,584,3.222,601,2.12,602,3.222,646,3.222,661,6.153,669,3.222,671,2.431,672,3.222,718,2.632,735,3.222,743,3.222,775,2.431,777,2.632,812,3.222,821,2.263,822,3.222,823,3.222,838,2.632,839,3.222,840,3.222,849,3.222,855,2.431,867,2.263,880,3.222,883,3.222,892,2.632,893,3.222,895,3.222,916,2.632,929,3.222,931,3.222,964,3.222,966,3.222,967,3.222,972,3.222,982,2.632,1004,3.222,1005,2.884,1006,3.222,1007,3.222,1008,3.222,1026,2.632,1028,3.222,1060,2.884,1061,3.222,1086,3.222,1113,3.222,1120,2.632,1121,3.222,1125,2.884,1126,3.222,1140,3.222,1156,2.431,1172,3.222,1211,3.222,1214,3.222,1222,2.431,1259,3.222,1271,3.222,1287,2.431,1288,3.222,1291,3.222,1308,2.632,1319,3.222,1326,3.222,1370,3.222,1371,3.222,1397,3.222,1398,3.222,1399,3.222,1416,3.222,1462,3.222,1463,3.222,1464,3.735,1465,3.735,1466,7.126,1467,6.307,1468,6.611,1469,5.859,1470,3.735,1471,3.735,1472,3.735,1473,5.13,1474,5.13,1475,3.222,1476,4.425,1477,7.315,1478,3.735,1479,3.735,1480,3.222,1481,6.611,1482,6.611,1483,3.735,1484,5.13,1485,3.735,1486,5.13,1487,5.13,1488,3.735,1489,3.735,1490,3.735,1491,3.735,1492,3.735,1493,3.735,1494,3.735,1495,3.735,1496,3.735,1497,3.735,1498,3.222,1499,3.735,1500,3.735,1501,3.735,1502,3.735]],["title/dependencies.html",[513,3.209,1503,2.72]],["body/dependencies.html",[39,0.017,141,1.375,153,0.373,186,0.015,187,0.015,204,2.904,250,2.146,343,2.904,513,4.061,542,4.45,544,4.971,546,4.061,1032,3.75,1084,4.971,1108,4.971,1131,4.971,1504,7.18,1505,5.762,1506,5.762,1507,5.762,1508,5.762,1509,5.762,1510,5.762,1511,5.762,1512,5.762,1513,5.762,1514,5.762,1515,5.762,1516,5.762,1517,5.762,1518,5.762,1519,5.762]],["title/miscellaneous/functions.html",[1520,2.222,1521,3.928]],["body/miscellaneous/functions.html",[11,0.456,18,0.176,34,0.562,39,0.016,46,1.232,50,1.073,52,0.238,53,0.57,60,0.976,73,0.797,186,0.015,187,0.015,198,1.834,199,2.098,209,4.557,241,5.6,256,5.09,257,5.09,516,5.11,836,3.15,1103,5.09,1498,5.09,1520,4.158,1521,5.09,1522,5.9,1523,5.9,1524,5.9]],["title/index.html",[18,0.094,1525,3.153,1526,3.153]],["body/index.html",[8,2.339,9,0.258,35,3.839,39,0.017,52,0.179,186,0.014,187,0.014,270,2.604,295,2.932,1054,4.893,1093,5.466,1378,4.457,1390,4.457,1463,5.466,1527,5.166,1528,5.166,1529,6.335,1530,5.166,1531,5.166,1532,5.166,1533,5.166,1534,5.166,1535,7.143,1536,5.166,1537,5.166,1538,5.166,1539,6.852,1540,7.143,1541,5.166,1542,5.166,1543,6.335,1544,6.852,1545,5.166,1546,5.166,1547,6.335,1548,5.166,1549,5.166,1550,5.166,1551,5.166,1552,7.143,1553,6.335,1554,6.335,1555,5.166,1556,5.166,1557,5.166,1558,5.166,1559,5.166,1560,6.852,1561,5.166,1562,5.166,1563,5.166,1564,6.335,1565,6.852,1566,6.852,1567,6.852,1568,6.335,1569,6.335,1570,6.335,1571,6.335,1572,6.335,1573,5.166,1574,5.166,1575,5.166,1576,5.166,1577,5.166,1578,5.166,1579,5.166,1580,5.166,1581,5.166,1582,5.166,1583,5.166,1584,5.166]],["title/modules.html",[512,3.997]],["body/modules.html",[39,0.015,186,0.015,187,0.015,511,4.344,512,4.76,1585,6.163,1586,6.163,1587,6.163,1588,6.163]],["title/overview.html",[1589,4.464]],["body/overview.html",[2,3.013,39,0.017,145,3.936,147,3.936,186,0.014,187,0.014,188,2.404,208,1.579,266,1.446,281,3.495,282,1.889,392,3.936,393,3.703,510,4.975,511,5.643,513,3.742,514,4.581,515,4.581,516,3.742,517,4.581,518,4.581,519,4.581,520,4.581,521,3.936,522,4.202,523,4.202,524,4.202,525,4.202,526,4.202,527,5.558,528,4.581,529,4.581,1026,3.742,1054,4.975,1589,4.581,1590,5.309,1591,5.309,1592,6.442,1593,5.309]],["title/properties.html",[194,1.136,1503,2.72]],["body/properties.html",[9,0.305,39,0.017,186,0.015,187,0.015,194,1.524,1594,6.109,1595,6.109,1596,6.109,1597,6.109,1598,6.109]],["title/miscellaneous/variables.html",[1520,2.222,1599,3.928]],["body/miscellaneous/variables.html",[10,2.888,11,0.504,18,0.161,34,0.515,37,0.161,38,1.854,39,0.017,52,0.242,53,0.581,56,0.619,57,3.07,69,2.112,72,4.178,73,0.88,186,0.014,187,0.014,192,2.727,217,3.697,218,3.478,235,1.13,238,2.317,309,2.449,384,2.727,397,4.667,548,5.399,562,5.621,698,4.178,699,4.178,741,5.032,834,4.667,969,3.813,1018,3.07,1032,3.521,1045,4.667,1475,4.667,1476,4.667,1480,4.667,1520,3.813,1599,4.667,1600,5.409,1601,5.409,1602,6.515,1603,5.409,1604,5.409,1605,5.409,1606,5.409,1607,5.409,1608,5.409,1609,5.409,1610,5.409,1611,5.409,1612,6.515,1613,5.409,1614,5.409,1615,5.409,1616,5.409,1617,5.409,1618,5.409,1619,5.409,1620,5.409,1621,5.409,1622,5.409]]],"invertedIndex":[["",{"_index":39,"title":{},"body":{"controllers/AccountController.html":{},"classes/AccountDTO.html":{},"entities/AccountEntity.html":{},"interfaces/AccountModel.html":{},"injectables/AccountRepository.html":{},"interfaces/AccountRepositoryInterface.html":{},"injectables/AccountService.html":{},"entities/AccountTypeEntity.html":{},"interfaces/AccountTypeModel.html":{},"injectables/AccountTypeRepository.html":{},"interfaces/AccountTypeRepositoryInterface.html":{},"modules/AppModule.html":{},"interfaces/BaseRepositoryInterface.html":{},"classes/CustomerDTO.html":{},"entities/CustomerEntity.html":{},"interfaces/CustomerModel.html":{},"injectables/CustomerRepository.html":{},"interfaces/CustomerRepositoryInterface.html":{},"injectables/CustomerService.html":{},"classes/CustomerUpdateDTO.html":{},"classes/DataRangeDTO.html":{},"interfaces/DataRangeModel.html":{},"controllers/DepositController.html":{},"classes/DepositDTO.html":{},"entities/DepositEntity.html":{},"interfaces/DepositModel.html":{},"injectables/DepositRepository.html":{},"interfaces/DepositRepositoryInterface.html":{},"injectables/DepositService.html":{},"entities/DocumentTypeEntity.html":{},"interfaces/DocumentTypeModel.html":{},"injectables/DocumentTypeRepository.html":{},"interfaces/DocumentTypeRepositoryInterface.html":{},"classes/ExceptionFiltersFilter.html":{},"guards/GuardsGuard.html":{},"injectables/InterceptorsInterceptor.html":{},"injectables/MiddlewaresMiddleware.html":{},"classes/PaginationDTO.html":{},"interfaces/PaginationModel.html":{},"injectables/PipesPipe.html":{},"controllers/SecurityController.html":{},"injectables/SecurityService.html":{},"classes/SignDTO.html":{},"controllers/TransferController.html":{},"classes/TransferDTO.html":{},"entities/TransferEntity.html":{},"interfaces/TransferModel.html":{},"injectables/TransferRepository.html":{},"interfaces/TransferRepositoryInterface.html":{},"injectables/TransferService.html":{},"classes/TypeOrmExceptionFilter.html":{},"injectables/TypesOrmPostgresConfigService.html":{},"controllers/UserController.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/variables.html":{}}}],["0",{"_index":219,"title":{},"body":{"entities/AccountEntity.html":{},"injectables/AccountRepository.html":{},"injectables/AccountService.html":{},"injectables/AccountTypeRepository.html":{},"injectables/CustomerRepository.html":{},"entities/DepositEntity.html":{},"injectables/DepositRepository.html":{},"injectables/DepositService.html":{},"injectables/DocumentTypeRepository.html":{},"injectables/SecurityService.html":{},"entities/TransferEntity.html":{},"injectables/TransferRepository.html":{},"injectables/TransferService.html":{}}}],["0.0.1",{"_index":1595,"title":{},"body":{"properties.html":{}}}],["0.14.1",{"_index":1511,"title":{},"body":{"dependencies.html":{}}}],["0.2.2",{"_index":1517,"title":{},"body":{"dependencies.html":{}}}],["0.3.20",{"_index":1519,"title":{},"body":{"dependencies.html":{}}}],["0.5.1",{"_index":1510,"title":{},"body":{"dependencies.html":{}}}],["1",{"_index":1054,"title":{},"body":{"guards/GuardsGuard.html":{},"index.html":{},"overview.html":{}}}],["1/1",{"_index":1477,"title":{},"body":{"coverage.html":{}}}],["10",{"_index":1593,"title":{},"body":{"overview.html":{}}}],["10.0.2",{"_index":1508,"title":{},"body":{"dependencies.html":{}}}],["10.2.0",{"_index":1506,"title":{},"body":{"dependencies.html":{}}}],["10.3.8",{"_index":1504,"title":{},"body":{"dependencies.html":{}}}],["10/15",{"_index":1470,"title":{},"body":{"coverage.html":{}}}],["100",{"_index":661,"title":{},"body":{"entities/CustomerEntity.html":{},"entities/TransferEntity.html":{},"coverage.html":{}}}],["10000",{"_index":264,"title":{},"body":{"entities/AccountEntity.html":{}}}],["10b6c590",{"_index":503,"title":{},"body":{"injectables/AccountTypeRepository.html":{}}}],["11/11",{"_index":1483,"title":{},"body":{"coverage.html":{}}}],["13/13",{"_index":1499,"title":{},"body":{"coverage.html":{}}}],["15",{"_index":1592,"title":{},"body":{"overview.html":{}}}],["15/17",{"_index":1491,"title":{},"body":{"coverage.html":{}}}],["2",{"_index":1581,"title":{},"body":{"index.html":{}}}],["2/2",{"_index":1481,"title":{},"body":{"coverage.html":{}}}],["2/3",{"_index":1486,"title":{},"body":{"coverage.html":{}}}],["20",{"_index":655,"title":{},"body":{"entities/CustomerEntity.html":{}}}],["20000",{"_index":262,"title":{},"body":{"entities/AccountEntity.html":{}}}],["255",{"_index":650,"title":{},"body":{"entities/CustomerEntity.html":{}}}],["283f",{"_index":994,"title":{},"body":{"injectables/DocumentTypeRepository.html":{}}}],["3.2.2",{"_index":1505,"title":{},"body":{"dependencies.html":{}}}],["3/3",{"_index":1466,"title":{},"body":{"coverage.html":{}}}],["3/5",{"_index":1474,"title":{},"body":{"coverage.html":{}}}],["30",{"_index":820,"title":{},"body":{"classes/CustomerUpdateDTO.html":{}}}],["4.0.1",{"_index":1513,"title":{},"body":{"dependencies.html":{}}}],["4/4",{"_index":1482,"title":{},"body":{"coverage.html":{}}}],["4021e882c080",{"_index":507,"title":{},"body":{"injectables/AccountTypeRepository.html":{}}}],["4621",{"_index":505,"title":{},"body":{"injectables/AccountTypeRepository.html":{}}}],["4a49",{"_index":988,"title":{},"body":{"injectables/DocumentTypeRepository.html":{}}}],["4c22",{"_index":499,"title":{},"body":{"injectables/AccountTypeRepository.html":{},"injectables/CustomerService.html":{},"injectables/SecurityService.html":{}}}],["4e71",{"_index":995,"title":{},"body":{"injectables/DocumentTypeRepository.html":{}}}],["5",{"_index":1590,"title":{},"body":{"overview.html":{}}}],["5/5",{"_index":1468,"title":{},"body":{"coverage.html":{}}}],["5/8",{"_index":1479,"title":{},"body":{"coverage.html":{}}}],["50",{"_index":460,"title":{},"body":{"entities/AccountTypeEntity.html":{},"entities/DocumentTypeEntity.html":{}}}],["500",{"_index":817,"title":{},"body":{"classes/CustomerUpdateDTO.html":{},"classes/TransferDTO.html":{},"classes/TypeOrmExceptionFilter.html":{}}}],["50ce60b300b1",{"_index":990,"title":{},"body":{"injectables/DocumentTypeRepository.html":{}}}],["5432",{"_index":569,"title":{},"body":{"modules/AppModule.html":{}}}],["58",{"_index":1496,"title":{},"body":{"coverage.html":{}}}],["5e89",{"_index":987,"title":{},"body":{"injectables/DocumentTypeRepository.html":{}}}],["6",{"_index":1591,"title":{},"body":{"overview.html":{}}}],["6/6",{"_index":1484,"title":{},"body":{"coverage.html":{}}}],["60",{"_index":1473,"title":{},"body":{"coverage.html":{}}}],["62",{"_index":1478,"title":{},"body":{"coverage.html":{}}}],["63",{"_index":1492,"title":{},"body":{"coverage.html":{}}}],["64911806",{"_index":993,"title":{},"body":{"injectables/DocumentTypeRepository.html":{}}}],["66",{"_index":1469,"title":{},"body":{"coverage.html":{}}}],["7.8.1",{"_index":1518,"title":{},"body":{"dependencies.html":{}}}],["7/11",{"_index":1493,"title":{},"body":{"coverage.html":{}}}],["7/12",{"_index":1497,"title":{},"body":{"coverage.html":{}}}],["7/7",{"_index":1467,"title":{},"body":{"coverage.html":{}}}],["7/9",{"_index":1495,"title":{},"body":{"coverage.html":{}}}],["75",{"_index":1489,"title":{},"body":{"coverage.html":{}}}],["77",{"_index":1494,"title":{},"body":{"coverage.html":{}}}],["8",{"_index":630,"title":{},"body":{"classes/CustomerDTO.html":{},"classes/CustomerUpdateDTO.html":{}}}],["8.11.5",{"_index":1515,"title":{},"body":{"dependencies.html":{}}}],["8/8",{"_index":1485,"title":{},"body":{"coverage.html":{}}}],["8/9",{"_index":1488,"title":{},"body":{"coverage.html":{}}}],["81",{"_index":1471,"title":{},"body":{"coverage.html":{}}}],["85fa",{"_index":504,"title":{},"body":{"injectables/AccountTypeRepository.html":{}}}],["88",{"_index":1487,"title":{},"body":{"coverage.html":{}}}],["9/11",{"_index":1472,"title":{},"body":{"coverage.html":{}}}],["9/12",{"_index":1490,"title":{},"body":{"coverage.html":{}}}],["9/9",{"_index":1500,"title":{},"body":{"coverage.html":{}}}],["98d5",{"_index":989,"title":{},"body":{"injectables/DocumentTypeRepository.html":{}}}],["a01c",{"_index":498,"title":{},"body":{"injectables/AccountTypeRepository.html":{},"injectables/CustomerService.html":{},"injectables/SecurityService.html":{}}}],["a6d6",{"_index":500,"title":{},"body":{"injectables/AccountTypeRepository.html":{},"injectables/CustomerService.html":{},"injectables/SecurityService.html":{}}}],["ab27c9ac",{"_index":497,"title":{},"body":{"injectables/AccountTypeRepository.html":{},"injectables/CustomerService.html":{},"injectables/SecurityService.html":{}}}],["ab94",{"_index":996,"title":{},"body":{"injectables/DocumentTypeRepository.html":{}}}],["access_token",{"_index":1112,"title":{},"body":{"injectables/MiddlewaresMiddleware.html":{},"injectables/SecurityService.html":{}}}],["account",{"_index":8,"title":{},"body":{"controllers/AccountController.html":{},"entities/AccountEntity.html":{},"injectables/AccountRepository.html":{},"injectables/AccountService.html":{},"injectables/CustomerService.html":{},"controllers/DepositController.html":{},"entities/DepositEntity.html":{},"interfaces/DepositModel.html":{},"injectables/DepositRepository.html":{},"injectables/SecurityService.html":{},"index.html":{}}}],["account.accounttype",{"_index":801,"title":{},"body":{"injectables/CustomerService.html":{}}}],["account.accounttypeid",{"_index":435,"title":{},"body":{"injectables/AccountService.html":{}}}],["account.balance",{"_index":1208,"title":{},"body":{"injectables/SecurityService.html":{}}}],["account.customer",{"_index":803,"title":{},"body":{"injectables/CustomerService.html":{}}}],["account.customerid",{"_index":432,"title":{},"body":{"injectables/AccountService.html":{}}}],["account.id",{"_index":365,"title":{},"body":{"injectables/AccountRepository.html":{}}}],["account_type",{"_index":465,"title":{},"body":{"entities/AccountTypeEntity.html":{}}}],["accountcontroller",{"_index":1,"title":{"controllers/AccountController.html":{}},"body":{"controllers/AccountController.html":{},"modules/AppModule.html":{},"coverage.html":{}}}],["accountdto",{"_index":90,"title":{"classes/AccountDTO.html":{}},"body":{"controllers/AccountController.html":{},"classes/AccountDTO.html":{},"injectables/AccountService.html":{},"injectables/SecurityService.html":{},"coverage.html":{}}}],["accountentity",{"_index":149,"title":{"entities/AccountEntity.html":{}},"body":{"controllers/AccountController.html":{},"entities/AccountEntity.html":{},"injectables/AccountRepository.html":{},"interfaces/AccountRepositoryInterface.html":{},"injectables/AccountService.html":{},"modules/AppModule.html":{},"injectables/CustomerService.html":{},"entities/DepositEntity.html":{},"injectables/DepositService.html":{},"entities/TransferEntity.html":{},"injectables/TypesOrmPostgresConfigService.html":{},"controllers/UserController.html":{},"coverage.html":{}}}],["accountid",{"_index":398,"title":{},"body":{"injectables/AccountService.html":{},"controllers/DepositController.html":{},"classes/DepositDTO.html":{},"injectables/DepositRepository.html":{},"interfaces/DepositRepositoryInterface.html":{},"injectables/DepositService.html":{},"controllers/TransferController.html":{},"injectables/TransferRepository.html":{},"interfaces/TransferRepositoryInterface.html":{},"injectables/TransferService.html":{}}}],["accountmodel",{"_index":251,"title":{"interfaces/AccountModel.html":{}},"body":{"entities/AccountEntity.html":{},"interfaces/AccountModel.html":{},"injectables/AccountService.html":{},"interfaces/DepositModel.html":{},"interfaces/TransferModel.html":{},"coverage.html":{}}}],["accountrepository",{"_index":281,"title":{"injectables/AccountRepository.html":{}},"body":{"injectables/AccountRepository.html":{},"injectables/AccountService.html":{},"modules/AppModule.html":{},"injectables/CustomerService.html":{},"injectables/DepositService.html":{},"injectables/TransferService.html":{},"coverage.html":{},"overview.html":{}}}],["accountrepositoryinterface",{"_index":344,"title":{"interfaces/AccountRepositoryInterface.html":{}},"body":{"injectables/AccountRepository.html":{},"interfaces/AccountRepositoryInterface.html":{},"coverage.html":{}}}],["accountservice",{"_index":145,"title":{"injectables/AccountService.html":{}},"body":{"controllers/AccountController.html":{},"injectables/AccountService.html":{},"modules/AppModule.html":{},"injectables/SecurityService.html":{},"coverage.html":{},"overview.html":{}}}],["accounttype",{"_index":210,"title":{},"body":{"entities/AccountEntity.html":{},"interfaces/AccountModel.html":{},"injectables/AccountRepository.html":{},"injectables/AccountService.html":{}}}],["accounttypeentity",{"_index":214,"title":{"entities/AccountTypeEntity.html":{}},"body":{"entities/AccountEntity.html":{},"injectables/AccountService.html":{},"entities/AccountTypeEntity.html":{},"injectables/AccountTypeRepository.html":{},"interfaces/AccountTypeRepositoryInterface.html":{},"modules/AppModule.html":{},"injectables/TypesOrmPostgresConfigService.html":{},"coverage.html":{}}}],["accounttypeid",{"_index":180,"title":{},"body":{"controllers/AccountController.html":{},"classes/AccountDTO.html":{},"injectables/AccountRepository.html":{},"interfaces/AccountRepositoryInterface.html":{},"injectables/AccountService.html":{}}}],["accounttypemodel",{"_index":277,"title":{"interfaces/AccountTypeModel.html":{}},"body":{"interfaces/AccountModel.html":{},"entities/AccountTypeEntity.html":{},"interfaces/AccountTypeModel.html":{},"coverage.html":{}}}],["accounttyperepository",{"_index":392,"title":{"injectables/AccountTypeRepository.html":{}},"body":{"injectables/AccountService.html":{},"injectables/AccountTypeRepository.html":{},"modules/AppModule.html":{},"injectables/CustomerService.html":{},"coverage.html":{},"overview.html":{}}}],["accounttyperepositoryinterface",{"_index":490,"title":{"interfaces/AccountTypeRepositoryInterface.html":{}},"body":{"injectables/AccountTypeRepository.html":{},"interfaces/AccountTypeRepositoryInterface.html":{},"coverage.html":{}}}],["activo",{"_index":970,"title":{},"body":{"interfaces/DocumentTypeModel.html":{}}}],["activo/inactivo",{"_index":246,"title":{},"body":{"entities/AccountEntity.html":{},"interfaces/AccountModel.html":{},"entities/AccountTypeEntity.html":{},"entities/CustomerEntity.html":{},"interfaces/CustomerModel.html":{}}}],["activos",{"_index":756,"title":{},"body":{"injectables/CustomerService.html":{}}}],["actual",{"_index":1124,"title":{},"body":{"interfaces/PaginationModel.html":{}}}],["actualiza",{"_index":336,"title":{},"body":{"injectables/AccountRepository.html":{},"injectables/AccountTypeRepository.html":{},"interfaces/BaseRepositoryInterface.html":{},"injectables/CustomerRepository.html":{},"injectables/DepositRepository.html":{},"injectables/DocumentTypeRepository.html":{},"injectables/TransferRepository.html":{},"controllers/UserController.html":{}}}],["actualizada",{"_index":340,"title":{},"body":{"injectables/AccountRepository.html":{},"interfaces/BaseRepositoryInterface.html":{},"injectables/TransferRepository.html":{},"controllers/UserController.html":{}}}],["actualizado",{"_index":487,"title":{},"body":{"injectables/AccountTypeRepository.html":{},"injectables/CustomerRepository.html":{},"injectables/CustomerService.html":{},"injectables/DepositRepository.html":{},"injectables/DocumentTypeRepository.html":{}}}],["actualizados",{"_index":600,"title":{},"body":{"interfaces/BaseRepositoryInterface.html":{},"controllers/UserController.html":{}}}],["actualizar",{"_index":338,"title":{},"body":{"injectables/AccountRepository.html":{},"injectables/AccountTypeRepository.html":{},"interfaces/BaseRepositoryInterface.html":{},"injectables/CustomerRepository.html":{},"injectables/CustomerService.html":{},"classes/CustomerUpdateDTO.html":{},"injectables/DepositRepository.html":{},"injectables/DocumentTypeRepository.html":{},"injectables/TransferRepository.html":{}}}],["addbalance",{"_index":21,"title":{},"body":{"controllers/AccountController.html":{},"injectables/AccountService.html":{}}}],["addbalance(accountid",{"_index":395,"title":{},"body":{"injectables/AccountService.html":{}}}],["addbalance(id",{"_index":33,"title":{},"body":{"controllers/AccountController.html":{}}}],["adicionales",{"_index":375,"title":{},"body":{"interfaces/AccountRepositoryInterface.html":{},"interfaces/AccountTypeRepositoryInterface.html":{},"interfaces/CustomerRepositoryInterface.html":{},"interfaces/DepositRepositoryInterface.html":{},"interfaces/DocumentTypeRepositoryInterface.html":{},"interfaces/TransferRepositoryInterface.html":{}}}],["aditional",{"_index":1382,"title":{},"body":{"classes/TypeOrmExceptionFilter.html":{}}}],["agregar",{"_index":397,"title":{},"body":{"injectables/AccountService.html":{},"miscellaneous/variables.html":{}}}],["ahorros",{"_index":502,"title":{},"body":{"injectables/AccountTypeRepository.html":{}}}],["al",{"_index":384,"title":{},"body":{"interfaces/AccountRepositoryInterface.html":{},"injectables/AccountTypeRepository.html":{},"classes/CustomerDTO.html":{},"classes/CustomerUpdateDTO.html":{},"entities/DepositEntity.html":{},"injectables/DocumentTypeRepository.html":{},"injectables/MiddlewaresMiddleware.html":{},"classes/TypeOrmExceptionFilter.html":{},"miscellaneous/variables.html":{}}}],["algunos",{"_index":493,"title":{},"body":{"injectables/AccountTypeRepository.html":{}}}],["almacenadas",{"_index":593,"title":{},"body":{"interfaces/BaseRepositoryInterface.html":{}}}],["amount",{"_index":170,"title":{},"body":{"controllers/AccountController.html":{},"injectables/AccountService.html":{},"classes/DepositDTO.html":{},"entities/DepositEntity.html":{},"interfaces/DepositModel.html":{},"classes/TransferDTO.html":{},"entities/TransferEntity.html":{},"interfaces/TransferModel.html":{}}}],["amountbalance",{"_index":22,"title":{},"body":{"controllers/AccountController.html":{}}}],["amountbalance(id",{"_index":65,"title":{},"body":{"controllers/AccountController.html":{}}}],["answer",{"_index":1189,"title":{},"body":{"injectables/SecurityService.html":{}}}],["antes",{"_index":1074,"title":{},"body":{"injectables/InterceptorsInterceptor.html":{},"injectables/MiddlewaresMiddleware.html":{}}}],["any).code",{"_index":1381,"title":{},"body":{"classes/TypeOrmExceptionFilter.html":{}}}],["any).detail",{"_index":1383,"title":{},"body":{"classes/TypeOrmExceptionFilter.html":{}}}],["aplicación",{"_index":1524,"title":{},"body":{"miscellaneous/functions.html":{}}}],["app",{"_index":1542,"title":{},"body":{"index.html":{}}}],["app_filter",{"_index":543,"title":{},"body":{"modules/AppModule.html":{}}}],["applications",{"_index":1534,"title":{},"body":{"index.html":{}}}],["appmodule",{"_index":511,"title":{"modules/AppModule.html":{}},"body":{"modules/AppModule.html":{},"modules.html":{},"overview.html":{}}}],["archivo",{"_index":1616,"title":{},"body":{"miscellaneous/variables.html":{}}}],["args",{"_index":1602,"title":{},"body":{"miscellaneous/variables.html":{}}}],["argumentmetadata",{"_index":1132,"title":{},"body":{"injectables/PipesPipe.html":{}}}],["argumento",{"_index":1135,"title":{},"body":{"injectables/PipesPipe.html":{}}}],["argumentos",{"_index":1024,"title":{},"body":{"classes/ExceptionFiltersFilter.html":{},"classes/TypeOrmExceptionFilter.html":{}}}],["argumentshost",{"_index":1016,"title":{},"body":{"classes/ExceptionFiltersFilter.html":{},"classes/TypeOrmExceptionFilter.html":{}}}],["array",{"_index":112,"title":{},"body":{"controllers/AccountController.html":{},"injectables/AccountService.html":{},"controllers/DepositController.html":{},"injectables/DepositService.html":{},"injectables/TransferService.html":{}}}],["array.length",{"_index":441,"title":{},"body":{"injectables/AccountService.html":{}}}],["arreglo",{"_index":313,"title":{},"body":{"injectables/AccountRepository.html":{},"interfaces/AccountRepositoryInterface.html":{},"injectables/AccountTypeRepository.html":{},"interfaces/AccountTypeRepositoryInterface.html":{},"interfaces/BaseRepositoryInterface.html":{},"interfaces/CustomerRepositoryInterface.html":{},"injectables/DepositRepository.html":{},"interfaces/DepositRepositoryInterface.html":{},"injectables/DocumentTypeRepository.html":{},"interfaces/DocumentTypeRepositoryInterface.html":{},"injectables/TransferRepository.html":{},"interfaces/TransferRepositoryInterface.html":{}}}],["asigna",{"_index":1607,"title":{},"body":{"miscellaneous/variables.html":{}}}],["asociada",{"_index":886,"title":{},"body":{"entities/DepositEntity.html":{},"injectables/DepositRepository.html":{},"interfaces/DepositRepositoryInterface.html":{}}}],["asociadas",{"_index":383,"title":{},"body":{"interfaces/AccountRepositoryInterface.html":{}}}],["asociado",{"_index":225,"title":{},"body":{"entities/AccountEntity.html":{},"interfaces/AccountModel.html":{},"injectables/AccountRepository.html":{},"interfaces/AccountRepositoryInterface.html":{}}}],["asociados",{"_index":276,"title":{},"body":{"interfaces/AccountModel.html":{},"interfaces/CustomerModel.html":{},"interfaces/DepositModel.html":{},"injectables/DepositRepository.html":{},"interfaces/DepositRepositoryInterface.html":{},"interfaces/TransferModel.html":{}}}],["async",{"_index":20,"title":{},"body":{"controllers/AccountController.html":{},"injectables/AccountRepository.html":{},"injectables/AccountService.html":{},"injectables/AccountTypeRepository.html":{},"injectables/CustomerRepository.html":{},"injectables/CustomerService.html":{},"controllers/DepositController.html":{},"injectables/DepositRepository.html":{},"injectables/DepositService.html":{},"guards/GuardsGuard.html":{},"injectables/SecurityService.html":{},"controllers/TransferController.html":{},"injectables/TransferRepository.html":{},"injectables/TransferService.html":{},"controllers/UserController.html":{}}}],["atributos",{"_index":968,"title":{},"body":{"interfaces/DocumentTypeModel.html":{}}}],["autenticación",{"_index":1031,"title":{},"body":{"guards/GuardsGuard.html":{}}}],["authheader",{"_index":1049,"title":{},"body":{"guards/GuardsGuard.html":{},"injectables/MiddlewaresMiddleware.html":{}}}],["authheader.split",{"_index":1053,"title":{},"body":{"guards/GuardsGuard.html":{}}}],["authheader.startswith('access_token",{"_index":1051,"title":{},"body":{"guards/GuardsGuard.html":{},"injectables/MiddlewaresMiddleware.html":{}}}],["authheader.substring(7",{"_index":1110,"title":{},"body":{"injectables/MiddlewaresMiddleware.html":{}}}],["author",{"_index":1598,"title":{},"body":{"properties.html":{}}}],["autoloadentities",{"_index":577,"title":{},"body":{"modules/AppModule.html":{}}}],["autorización",{"_index":1092,"title":{},"body":{"injectables/MiddlewaresMiddleware.html":{}}}],["autorizada",{"_index":1046,"title":{},"body":{"guards/GuardsGuard.html":{}}}],["avatar",{"_index":653,"title":{},"body":{"entities/CustomerEntity.html":{},"interfaces/CustomerModel.html":{}}}],["avatar_url",{"_index":649,"title":{},"body":{"entities/CustomerEntity.html":{}}}],["avatarurl",{"_index":647,"title":{},"body":{"entities/CustomerEntity.html":{},"interfaces/CustomerModel.html":{}}}],["await",{"_index":159,"title":{},"body":{"controllers/AccountController.html":{},"injectables/AccountRepository.html":{},"injectables/AccountService.html":{},"injectables/CustomerRepository.html":{},"injectables/CustomerService.html":{},"controllers/DepositController.html":{},"injectables/DepositService.html":{},"injectables/SecurityService.html":{},"controllers/TransferController.html":{},"injectables/TransferRepository.html":{},"injectables/TransferService.html":{}}}],["añade",{"_index":43,"title":{},"body":{"controllers/AccountController.html":{}}}],["añadir",{"_index":59,"title":{},"body":{"controllers/AccountController.html":{}}}],["b85a",{"_index":506,"title":{},"body":{"injectables/AccountTypeRepository.html":{}}}],["baja",{"_index":772,"title":{},"body":{"injectables/CustomerService.html":{}}}],["balance",{"_index":211,"title":{},"body":{"entities/AccountEntity.html":{},"interfaces/AccountModel.html":{},"injectables/AccountService.html":{}}}],["banco",{"_index":1329,"title":{},"body":{"injectables/TransferService.html":{}}}],["bank",{"_index":260,"title":{},"body":{"entities/AccountEntity.html":{}}}],["base",{"_index":354,"title":{},"body":{"injectables/AccountRepository.html":{},"interfaces/AccountRepositoryInterface.html":{},"injectables/AccountTypeRepository.html":{},"interfaces/AccountTypeRepositoryInterface.html":{},"interfaces/BaseRepositoryInterface.html":{},"injectables/CustomerRepository.html":{},"interfaces/CustomerRepositoryInterface.html":{},"injectables/CustomerService.html":{},"injectables/DepositRepository.html":{},"interfaces/DepositRepositoryInterface.html":{},"injectables/DocumentTypeRepository.html":{},"interfaces/DocumentTypeRepositoryInterface.html":{},"injectables/SecurityService.html":{},"injectables/TransferRepository.html":{},"interfaces/TransferRepositoryInterface.html":{}}}],["baserepositoryinterface",{"_index":378,"title":{"interfaces/BaseRepositoryInterface.html":{}},"body":{"interfaces/AccountRepositoryInterface.html":{},"interfaces/AccountTypeRepositoryInterface.html":{},"interfaces/BaseRepositoryInterface.html":{},"interfaces/CustomerRepositoryInterface.html":{},"interfaces/DepositRepositoryInterface.html":{},"interfaces/DocumentTypeRepositoryInterface.html":{},"interfaces/TransferRepositoryInterface.html":{},"coverage.html":{}}}],["between",{"_index":915,"title":{},"body":{"injectables/DepositRepository.html":{},"injectables/TransferRepository.html":{}}}],["between(dateinit",{"_index":928,"title":{},"body":{"injectables/DepositRepository.html":{},"injectables/TransferRepository.html":{}}}],["body",{"_index":35,"title":{},"body":{"controllers/AccountController.html":{},"controllers/DepositController.html":{},"controllers/SecurityController.html":{},"controllers/TransferController.html":{},"controllers/UserController.html":{},"index.html":{}}}],["body.accountid",{"_index":875,"title":{},"body":{"controllers/DepositController.html":{},"controllers/TransferController.html":{}}}],["body.accounttypeid",{"_index":182,"title":{},"body":{"controllers/AccountController.html":{}}}],["body.amount",{"_index":172,"title":{},"body":{"controllers/AccountController.html":{}}}],["body.datarange",{"_index":877,"title":{},"body":{"controllers/DepositController.html":{},"controllers/TransferController.html":{}}}],["body.pagination",{"_index":876,"title":{},"body":{"controllers/DepositController.html":{},"controllers/TransferController.html":{}}}],["body.state",{"_index":177,"title":{},"body":{"controllers/AccountController.html":{}}}],["boolean",{"_index":131,"title":{},"body":{"controllers/AccountController.html":{},"entities/AccountEntity.html":{},"interfaces/AccountModel.html":{},"injectables/AccountRepository.html":{},"interfaces/AccountRepositoryInterface.html":{},"injectables/AccountService.html":{},"entities/AccountTypeEntity.html":{},"interfaces/AccountTypeModel.html":{},"injectables/AccountTypeRepository.html":{},"interfaces/AccountTypeRepositoryInterface.html":{},"interfaces/BaseRepositoryInterface.html":{},"entities/CustomerEntity.html":{},"interfaces/CustomerModel.html":{},"injectables/CustomerRepository.html":{},"interfaces/CustomerRepositoryInterface.html":{},"injectables/DepositRepository.html":{},"entities/DocumentTypeEntity.html":{},"interfaces/DocumentTypeModel.html":{},"injectables/DocumentTypeRepository.html":{},"interfaces/DocumentTypeRepositoryInterface.html":{},"controllers/SecurityController.html":{},"injectables/SecurityService.html":{},"injectables/TransferRepository.html":{}}}],["booleano",{"_index":74,"title":{},"body":{"controllers/AccountController.html":{},"injectables/CustomerRepository.html":{},"interfaces/CustomerRepositoryInterface.html":{},"guards/GuardsGuard.html":{},"controllers/SecurityController.html":{},"controllers/UserController.html":{}}}],["bootstrap",{"_index":516,"title":{},"body":{"modules/AppModule.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"overview.html":{}}}],["borrado",{"_index":307,"title":{},"body":{"injectables/AccountRepository.html":{},"injectables/CustomerRepository.html":{},"injectables/DepositRepository.html":{},"injectables/TransferRepository.html":{}}}],["borrar",{"_index":409,"title":{},"body":{"injectables/AccountService.html":{},"injectables/DepositService.html":{},"injectables/TransferService.html":{}}}],["browse",{"_index":1588,"title":{},"body":{"modules.html":{}}}],["browser",{"_index":1585,"title":{},"body":{"modules.html":{}}}],["building",{"_index":1530,"title":{},"body":{"index.html":{}}}],["busca",{"_index":595,"title":{},"body":{"interfaces/BaseRepositoryInterface.html":{},"injectables/CustomerRepository.html":{}}}],["buscar",{"_index":321,"title":{},"body":{"injectables/AccountRepository.html":{},"interfaces/AccountRepositoryInterface.html":{},"injectables/AccountTypeRepository.html":{},"interfaces/AccountTypeRepositoryInterface.html":{},"interfaces/BaseRepositoryInterface.html":{},"injectables/CustomerRepository.html":{},"interfaces/CustomerRepositoryInterface.html":{},"interfaces/TransferRepositoryInterface.html":{}}}],["business/dtos",{"_index":1164,"title":{},"body":{"controllers/SecurityController.html":{},"controllers/UserController.html":{}}}],["business/services",{"_index":146,"title":{},"body":{"controllers/AccountController.html":{},"modules/AppModule.html":{},"controllers/DepositController.html":{},"controllers/SecurityController.html":{},"controllers/TransferController.html":{}}}],["business/services/customer/customer.service",{"_index":148,"title":{},"body":{"controllers/AccountController.html":{},"controllers/UserController.html":{}}}],["c822487e",{"_index":986,"title":{},"body":{"injectables/DocumentTypeRepository.html":{}}}],["cabecera",{"_index":1100,"title":{},"body":{"injectables/MiddlewaresMiddleware.html":{}}}],["cabeceras",{"_index":1091,"title":{},"body":{"injectables/MiddlewaresMiddleware.html":{}}}],["cadena",{"_index":814,"title":{},"body":{"classes/CustomerUpdateDTO.html":{},"classes/DataRangeDTO.html":{},"classes/DepositDTO.html":{},"classes/PaginationDTO.html":{},"classes/SignDTO.html":{},"classes/TransferDTO.html":{}}}],["callhandler",{"_index":1069,"title":{},"body":{"injectables/InterceptorsInterceptor.html":{}}}],["cambia",{"_index":79,"title":{},"body":{"controllers/AccountController.html":{}}}],["cambiada",{"_index":183,"title":{},"body":{"controllers/AccountController.html":{}}}],["cambiado",{"_index":84,"title":{},"body":{"controllers/AccountController.html":{}}}],["cambiar",{"_index":401,"title":{},"body":{"injectables/AccountService.html":{}}}],["campos",{"_index":274,"title":{},"body":{"interfaces/AccountModel.html":{},"interfaces/CustomerModel.html":{},"interfaces/DepositModel.html":{},"interfaces/TransferModel.html":{}}}],["canactivate",{"_index":1033,"title":{},"body":{"guards/GuardsGuard.html":{}}}],["canactivate(context",{"_index":1037,"title":{},"body":{"guards/GuardsGuard.html":{}}}],["cantidad",{"_index":830,"title":{},"body":{"classes/DataRangeDTO.html":{},"interfaces/DataRangeModel.html":{}}}],["cantidades",{"_index":846,"title":{},"body":{"interfaces/DataRangeModel.html":{}}}],["capturada",{"_index":1022,"title":{},"body":{"classes/ExceptionFiltersFilter.html":{},"classes/TypeOrmExceptionFilter.html":{}}}],["caracteres",{"_index":631,"title":{},"body":{"classes/CustomerDTO.html":{},"classes/CustomerUpdateDTO.html":{},"classes/TransferDTO.html":{}}}],["cascade",{"_index":658,"title":{},"body":{"entities/CustomerEntity.html":{}}}],["catch",{"_index":1013,"title":{},"body":{"classes/ExceptionFiltersFilter.html":{},"guards/GuardsGuard.html":{},"classes/TypeOrmExceptionFilter.html":{}}}],["catch(exception",{"_index":1014,"title":{},"body":{"classes/ExceptionFiltersFilter.html":{},"classes/TypeOrmExceptionFilter.html":{}}}],["catch(typeormerror",{"_index":1376,"title":{},"body":{"classes/TypeOrmExceptionFilter.html":{}}}],["ce5ab3b79185",{"_index":501,"title":{},"body":{"injectables/AccountTypeRepository.html":{},"injectables/CustomerService.html":{},"injectables/SecurityService.html":{}}}],["changeaccounttype",{"_index":23,"title":{},"body":{"controllers/AccountController.html":{},"injectables/AccountService.html":{}}}],["changeaccounttype(accountid",{"_index":399,"title":{},"body":{"injectables/AccountService.html":{}}}],["changeaccounttype(id",{"_index":76,"title":{},"body":{"controllers/AccountController.html":{}}}],["changestate",{"_index":24,"title":{},"body":{"controllers/AccountController.html":{},"injectables/AccountService.html":{}}}],["changestate(accountid",{"_index":402,"title":{},"body":{"injectables/AccountService.html":{}}}],["changestate(id",{"_index":85,"title":{},"body":{"controllers/AccountController.html":{}}}],["cierra",{"_index":1152,"title":{},"body":{"controllers/SecurityController.html":{}}}],["cierre",{"_index":1145,"title":{},"body":{"controllers/SecurityController.html":{}}}],["ciudadanía",{"_index":992,"title":{},"body":{"injectables/DocumentTypeRepository.html":{}}}],["clase",{"_index":1372,"title":{},"body":{"classes/TypeOrmExceptionFilter.html":{}}}],["class",{"_index":153,"title":{"classes/AccountDTO.html":{},"classes/CustomerDTO.html":{},"classes/CustomerUpdateDTO.html":{},"classes/DataRangeDTO.html":{},"classes/DepositDTO.html":{},"classes/ExceptionFiltersFilter.html":{},"classes/PaginationDTO.html":{},"classes/SignDTO.html":{},"classes/TransferDTO.html":{},"classes/TypeOrmExceptionFilter.html":{}},"body":{"controllers/AccountController.html":{},"classes/AccountDTO.html":{},"entities/AccountEntity.html":{},"injectables/AccountRepository.html":{},"injectables/AccountService.html":{},"entities/AccountTypeEntity.html":{},"injectables/AccountTypeRepository.html":{},"modules/AppModule.html":{},"classes/CustomerDTO.html":{},"entities/CustomerEntity.html":{},"injectables/CustomerRepository.html":{},"injectables/CustomerService.html":{},"classes/CustomerUpdateDTO.html":{},"classes/DataRangeDTO.html":{},"controllers/DepositController.html":{},"classes/DepositDTO.html":{},"entities/DepositEntity.html":{},"injectables/DepositRepository.html":{},"injectables/DepositService.html":{},"entities/DocumentTypeEntity.html":{},"injectables/DocumentTypeRepository.html":{},"classes/ExceptionFiltersFilter.html":{},"guards/GuardsGuard.html":{},"injectables/InterceptorsInterceptor.html":{},"injectables/MiddlewaresMiddleware.html":{},"classes/PaginationDTO.html":{},"injectables/PipesPipe.html":{},"controllers/SecurityController.html":{},"injectables/SecurityService.html":{},"classes/SignDTO.html":{},"controllers/TransferController.html":{},"classes/TransferDTO.html":{},"entities/TransferEntity.html":{},"injectables/TransferRepository.html":{},"injectables/TransferService.html":{},"classes/TypeOrmExceptionFilter.html":{},"injectables/TypesOrmPostgresConfigService.html":{},"controllers/UserController.html":{},"coverage.html":{},"dependencies.html":{}}}],["classes",{"_index":188,"title":{},"body":{"classes/AccountDTO.html":{},"classes/CustomerDTO.html":{},"classes/CustomerUpdateDTO.html":{},"classes/DataRangeDTO.html":{},"classes/DepositDTO.html":{},"classes/ExceptionFiltersFilter.html":{},"classes/PaginationDTO.html":{},"classes/SignDTO.html":{},"classes/TransferDTO.html":{},"classes/TypeOrmExceptionFilter.html":{},"overview.html":{}}}],["clave",{"_index":1618,"title":{},"body":{"miscellaneous/variables.html":{}}}],["cli",{"_index":1576,"title":{},"body":{"index.html":{}}}],["cliente",{"_index":111,"title":{},"body":{"controllers/AccountController.html":{},"classes/AccountDTO.html":{},"entities/AccountEntity.html":{},"interfaces/AccountModel.html":{},"injectables/AccountRepository.html":{},"interfaces/AccountRepositoryInterface.html":{},"classes/CustomerDTO.html":{},"entities/CustomerEntity.html":{},"interfaces/CustomerModel.html":{},"injectables/CustomerRepository.html":{},"interfaces/CustomerRepositoryInterface.html":{},"injectables/CustomerService.html":{},"classes/CustomerUpdateDTO.html":{},"classes/TypeOrmExceptionFilter.html":{},"controllers/UserController.html":{}}}],["clientes",{"_index":688,"title":{},"body":{"injectables/CustomerRepository.html":{},"interfaces/CustomerRepositoryInterface.html":{},"injectables/CustomerService.html":{},"controllers/UserController.html":{}}}],["cluster_appmodule",{"_index":519,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_providers",{"_index":520,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["code",{"_index":1380,"title":{},"body":{"classes/TypeOrmExceptionFilter.html":{}}}],["coinciden",{"_index":386,"title":{},"body":{"interfaces/AccountRepositoryInterface.html":{},"interfaces/AccountTypeRepositoryInterface.html":{},"interfaces/CustomerRepositoryInterface.html":{}}}],["column",{"_index":247,"title":{},"body":{"entities/AccountEntity.html":{},"entities/AccountTypeEntity.html":{},"entities/CustomerEntity.html":{},"entities/DepositEntity.html":{},"entities/DocumentTypeEntity.html":{},"entities/TransferEntity.html":{}}}],["column({name",{"_index":220,"title":{},"body":{"entities/AccountEntity.html":{},"entities/AccountTypeEntity.html":{},"entities/CustomerEntity.html":{},"entities/DepositEntity.html":{},"entities/DocumentTypeEntity.html":{},"entities/TransferEntity.html":{}}}],["commits",{"_index":1582,"title":{},"body":{"index.html":{}}}],["como",{"_index":969,"title":{},"body":{"interfaces/DocumentTypeModel.html":{},"injectables/PipesPipe.html":{},"controllers/SecurityController.html":{},"miscellaneous/variables.html":{}}}],["completo",{"_index":618,"title":{},"body":{"classes/CustomerDTO.html":{},"entities/CustomerEntity.html":{},"interfaces/CustomerModel.html":{},"injectables/CustomerRepository.html":{},"interfaces/CustomerRepositoryInterface.html":{},"classes/CustomerUpdateDTO.html":{},"controllers/TransferController.html":{}}}],["comunes",{"_index":587,"title":{},"body":{"interfaces/BaseRepositoryInterface.html":{}}}],["con",{"_index":16,"title":{},"body":{"controllers/AccountController.html":{},"interfaces/AccountModel.html":{},"injectables/AccountRepository.html":{},"interfaces/AccountRepositoryInterface.html":{},"injectables/AccountTypeRepository.html":{},"interfaces/AccountTypeRepositoryInterface.html":{},"interfaces/BaseRepositoryInterface.html":{},"interfaces/CustomerModel.html":{},"injectables/CustomerRepository.html":{},"interfaces/CustomerRepositoryInterface.html":{},"injectables/CustomerService.html":{},"classes/CustomerUpdateDTO.html":{},"controllers/DepositController.html":{},"interfaces/DepositModel.html":{},"interfaces/DepositRepositoryInterface.html":{},"interfaces/DocumentTypeRepositoryInterface.html":{},"guards/GuardsGuard.html":{},"injectables/InterceptorsInterceptor.html":{},"controllers/SecurityController.html":{},"controllers/TransferController.html":{},"classes/TransferDTO.html":{},"interfaces/TransferModel.html":{},"interfaces/TransferRepositoryInterface.html":{},"controllers/UserController.html":{}}}],["config.service.ts",{"_index":1399,"title":{},"body":{"injectables/TypesOrmPostgresConfigService.html":{},"coverage.html":{}}}],["config.service.ts:21",{"_index":1406,"title":{},"body":{"injectables/TypesOrmPostgresConfigService.html":{}}}],["config.service.ts:30",{"_index":1407,"title":{},"body":{"injectables/TypesOrmPostgresConfigService.html":{}}}],["configmodule",{"_index":541,"title":{},"body":{"modules/AppModule.html":{}}}],["configmodule.forroot",{"_index":560,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice",{"_index":1405,"title":{},"body":{"injectables/TypesOrmPostgresConfigService.html":{}}}],["configuración",{"_index":941,"title":{},"body":{"injectables/DepositService.html":{},"injectables/TypesOrmPostgresConfigService.html":{}}}],["configure",{"_index":535,"title":{},"body":{"modules/AppModule.html":{}}}],["configure(consumer",{"_index":536,"title":{},"body":{"modules/AppModule.html":{}}}],["conflictexception",{"_index":427,"title":{},"body":{"injectables/AccountService.html":{}}}],["conflictexception(`cuenta",{"_index":443,"title":{},"body":{"injectables/AccountService.html":{}}}],["console.log(entity",{"_index":720,"title":{},"body":{"injectables/CustomerRepository.html":{}}}],["const",{"_index":259,"title":{},"body":{"entities/AccountEntity.html":{},"injectables/AccountRepository.html":{},"injectables/AccountService.html":{},"injectables/CustomerRepository.html":{},"injectables/CustomerService.html":{},"injectables/DepositService.html":{},"guards/GuardsGuard.html":{},"injectables/MiddlewaresMiddleware.html":{},"injectables/SecurityService.html":{},"controllers/TransferController.html":{},"injectables/TransferRepository.html":{},"injectables/TransferService.html":{},"classes/TypeOrmExceptionFilter.html":{}}}],["constructor",{"_index":154,"title":{},"body":{"controllers/AccountController.html":{},"injectables/AccountRepository.html":{},"injectables/AccountService.html":{},"injectables/AccountTypeRepository.html":{},"injectables/CustomerRepository.html":{},"injectables/CustomerService.html":{},"injectables/DepositRepository.html":{},"injectables/DepositService.html":{},"injectables/DocumentTypeRepository.html":{},"guards/GuardsGuard.html":{},"injectables/SecurityService.html":{},"injectables/TransferRepository.html":{},"injectables/TransferService.html":{},"injectables/TypesOrmPostgresConfigService.html":{}}}],["constructor(accountrepository",{"_index":391,"title":{},"body":{"injectables/AccountService.html":{}}}],["constructor(configservice",{"_index":1404,"title":{},"body":{"injectables/TypesOrmPostgresConfigService.html":{}}}],["constructor(customerrepository",{"_index":680,"title":{},"body":{"injectables/CustomerRepository.html":{},"injectables/CustomerService.html":{},"injectables/SecurityService.html":{}}}],["constructor(depositrepository",{"_index":898,"title":{},"body":{"injectables/DepositRepository.html":{},"injectables/DepositService.html":{}}}],["constructor(documenttyperepository",{"_index":973,"title":{},"body":{"injectables/DocumentTypeRepository.html":{}}}],["constructor(jwtservice",{"_index":1034,"title":{},"body":{"guards/GuardsGuard.html":{}}}],["constructor(private",{"_index":869,"title":{},"body":{"controllers/DepositController.html":{},"guards/GuardsGuard.html":{},"controllers/SecurityController.html":{},"controllers/TransferController.html":{},"injectables/TypesOrmPostgresConfigService.html":{},"controllers/UserController.html":{}}}],["constructor(transferrepository",{"_index":1294,"title":{},"body":{"injectables/TransferRepository.html":{},"injectables/TransferService.html":{}}}],["constructor(userrepository",{"_index":294,"title":{},"body":{"injectables/AccountRepository.html":{},"injectables/AccountTypeRepository.html":{}}}],["consultas",{"_index":843,"title":{},"body":{"interfaces/DataRangeModel.html":{}}}],["consumer",{"_index":539,"title":{},"body":{"modules/AppModule.html":{}}}],["consumer.apply(middlewaresmiddleware).forroutes",{"_index":582,"title":{},"body":{"modules/AppModule.html":{}}}],["contener",{"_index":623,"title":{},"body":{"classes/CustomerDTO.html":{},"classes/CustomerUpdateDTO.html":{}}}],["context",{"_index":1043,"title":{},"body":{"guards/GuardsGuard.html":{},"injectables/InterceptorsInterceptor.html":{}}}],["context.switchtohttp().getrequest",{"_index":1048,"title":{},"body":{"guards/GuardsGuard.html":{}}}],["contexto",{"_index":1023,"title":{},"body":{"classes/ExceptionFiltersFilter.html":{},"guards/GuardsGuard.html":{},"injectables/InterceptorsInterceptor.html":{},"classes/TypeOrmExceptionFilter.html":{}}}],["contiene",{"_index":57,"title":{},"body":{"controllers/AccountController.html":{},"controllers/DepositController.html":{},"guards/GuardsGuard.html":{},"injectables/InterceptorsInterceptor.html":{},"controllers/SecurityController.html":{},"controllers/TransferController.html":{},"miscellaneous/variables.html":{}}}],["continuar",{"_index":1079,"title":{},"body":{"injectables/InterceptorsInterceptor.html":{}}}],["contrario",{"_index":699,"title":{},"body":{"injectables/CustomerRepository.html":{},"injectables/CustomerService.html":{},"miscellaneous/variables.html":{}}}],["contraseña",{"_index":622,"title":{},"body":{"classes/CustomerDTO.html":{},"entities/CustomerEntity.html":{},"interfaces/CustomerModel.html":{},"injectables/CustomerRepository.html":{},"interfaces/CustomerRepositoryInterface.html":{},"classes/CustomerUpdateDTO.html":{},"classes/SignDTO.html":{}}}],["control",{"_index":1106,"title":{},"body":{"injectables/MiddlewaresMiddleware.html":{}}}],["controlador",{"_index":10,"title":{},"body":{"controllers/AccountController.html":{},"controllers/DepositController.html":{},"injectables/InterceptorsInterceptor.html":{},"injectables/MiddlewaresMiddleware.html":{},"controllers/SecurityController.html":{},"controllers/TransferController.html":{},"controllers/UserController.html":{},"miscellaneous/variables.html":{}}}],["controladores",{"_index":1089,"title":{},"body":{"injectables/MiddlewaresMiddleware.html":{}}}],["controller",{"_index":0,"title":{"controllers/AccountController.html":{},"controllers/DepositController.html":{},"controllers/SecurityController.html":{},"controllers/TransferController.html":{},"controllers/UserController.html":{}},"body":{"controllers/AccountController.html":{},"controllers/DepositController.html":{},"controllers/SecurityController.html":{},"controllers/TransferController.html":{},"controllers/UserController.html":{},"coverage.html":{}}}],["controller('account",{"_index":151,"title":{},"body":{"controllers/AccountController.html":{}}}],["controller('deposit",{"_index":868,"title":{},"body":{"controllers/DepositController.html":{}}}],["controller('security",{"_index":1165,"title":{},"body":{"controllers/SecurityController.html":{}}}],["controller('transfer",{"_index":1245,"title":{},"body":{"controllers/TransferController.html":{}}}],["controller('user",{"_index":1447,"title":{},"body":{"controllers/UserController.html":{}}}],["controllers",{"_index":2,"title":{},"body":{"controllers/AccountController.html":{},"modules/AppModule.html":{},"controllers/DepositController.html":{},"controllers/SecurityController.html":{},"controllers/TransferController.html":{},"controllers/UserController.html":{},"overview.html":{}}}],["correo",{"_index":614,"title":{},"body":{"classes/CustomerDTO.html":{},"entities/CustomerEntity.html":{},"interfaces/CustomerModel.html":{},"injectables/CustomerRepository.html":{},"interfaces/CustomerRepositoryInterface.html":{},"injectables/CustomerService.html":{},"classes/SignDTO.html":{},"controllers/UserController.html":{}}}],["corresponding",{"_index":1569,"title":{},"body":{"index.html":{}}}],["corriente",{"_index":508,"title":{},"body":{"injectables/AccountTypeRepository.html":{}}}],["coverage",{"_index":1462,"title":{"coverage.html":{}},"body":{"coverage.html":{}}}],["crea",{"_index":93,"title":{},"body":{"controllers/AccountController.html":{},"controllers/DepositController.html":{},"controllers/TransferController.html":{}}}],["creada",{"_index":99,"title":{},"body":{"controllers/AccountController.html":{},"injectables/CustomerService.html":{},"controllers/TransferController.html":{}}}],["creado",{"_index":858,"title":{},"body":{"controllers/DepositController.html":{},"injectables/DepositService.html":{}}}],["creados",{"_index":765,"title":{},"body":{"injectables/CustomerService.html":{}}}],["crear",{"_index":97,"title":{},"body":{"controllers/AccountController.html":{},"injectables/AccountService.html":{},"controllers/DepositController.html":{},"injectables/DepositService.html":{},"injectables/SecurityService.html":{},"injectables/TransferService.html":{},"classes/TypeOrmExceptionFilter.html":{},"injectables/TypesOrmPostgresConfigService.html":{}}}],["create",{"_index":1567,"title":{},"body":{"index.html":{}}}],["createaccount",{"_index":25,"title":{},"body":{"controllers/AccountController.html":{},"injectables/AccountService.html":{}}}],["createaccount(@body",{"_index":166,"title":{},"body":{"controllers/AccountController.html":{}}}],["createaccount(account",{"_index":89,"title":{},"body":{"controllers/AccountController.html":{},"injectables/AccountService.html":{}}}],["createdeposit",{"_index":852,"title":{},"body":{"controllers/DepositController.html":{},"injectables/DepositService.html":{}}}],["createdeposit(@body",{"_index":870,"title":{},"body":{"controllers/DepositController.html":{}}}],["createdeposit(account",{"_index":854,"title":{},"body":{"controllers/DepositController.html":{}}}],["createdeposit(deposit",{"_index":934,"title":{},"body":{"injectables/DepositService.html":{}}}],["createtransfer",{"_index":1216,"title":{},"body":{"controllers/TransferController.html":{},"injectables/TransferService.html":{}}}],["createtransfer(@body",{"_index":1246,"title":{},"body":{"controllers/TransferController.html":{}}}],["createtransfer(transfer",{"_index":1221,"title":{},"body":{"controllers/TransferController.html":{},"injectables/TransferService.html":{}}}],["createtypeormoptions",{"_index":1403,"title":{},"body":{"injectables/TypesOrmPostgresConfigService.html":{}}}],["credenciales",{"_index":706,"title":{},"body":{"injectables/CustomerRepository.html":{}}}],["crud",{"_index":589,"title":{},"body":{"interfaces/BaseRepositoryInterface.html":{}}}],["cuenta",{"_index":46,"title":{},"body":{"controllers/AccountController.html":{},"classes/AccountDTO.html":{},"entities/AccountEntity.html":{},"interfaces/AccountModel.html":{},"injectables/AccountRepository.html":{},"interfaces/AccountRepositoryInterface.html":{},"injectables/AccountService.html":{},"entities/AccountTypeEntity.html":{},"interfaces/AccountTypeModel.html":{},"injectables/AccountTypeRepository.html":{},"interfaces/AccountTypeRepositoryInterface.html":{},"injectables/CustomerService.html":{},"controllers/DepositController.html":{},"classes/DepositDTO.html":{},"entities/DepositEntity.html":{},"interfaces/DepositModel.html":{},"injectables/DepositRepository.html":{},"interfaces/DepositRepositoryInterface.html":{},"injectables/DepositService.html":{},"controllers/TransferController.html":{},"classes/TransferDTO.html":{},"entities/TransferEntity.html":{},"interfaces/TransferModel.html":{},"injectables/TransferRepository.html":{},"interfaces/TransferRepositoryInterface.html":{},"injectables/TransferService.html":{},"controllers/UserController.html":{},"miscellaneous/functions.html":{}}}],["cuentas",{"_index":17,"title":{},"body":{"controllers/AccountController.html":{},"injectables/AccountRepository.html":{},"interfaces/AccountRepositoryInterface.html":{},"entities/TransferEntity.html":{},"interfaces/TransferModel.html":{},"injectables/TransferService.html":{}}}],["cuerpo",{"_index":54,"title":{},"body":{"controllers/AccountController.html":{},"controllers/DepositController.html":{},"controllers/SecurityController.html":{},"controllers/TransferController.html":{}}}],["customer",{"_index":212,"title":{},"body":{"entities/AccountEntity.html":{},"interfaces/AccountModel.html":{},"injectables/AccountRepository.html":{},"entities/CustomerEntity.html":{},"injectables/CustomerRepository.html":{},"injectables/CustomerService.html":{},"controllers/SecurityController.html":{},"injectables/SecurityService.html":{},"controllers/UserController.html":{}}}],["customer.document",{"_index":789,"title":{},"body":{"injectables/CustomerService.html":{}}}],["customer.documenttypeid",{"_index":786,"title":{},"body":{"injectables/CustomerService.html":{}}}],["customer.dto",{"_index":778,"title":{},"body":{"injectables/CustomerService.html":{},"controllers/UserController.html":{}}}],["customer.dto.ts",{"_index":812,"title":{},"body":{"classes/CustomerUpdateDTO.html":{},"coverage.html":{}}}],["customer.dto.ts:29",{"_index":813,"title":{},"body":{"classes/CustomerUpdateDTO.html":{}}}],["customer.dto.ts:43",{"_index":815,"title":{},"body":{"classes/CustomerUpdateDTO.html":{}}}],["customer.dto.ts:57",{"_index":819,"title":{},"body":{"classes/CustomerUpdateDTO.html":{}}}],["customer.dto.ts:70",{"_index":818,"title":{},"body":{"classes/CustomerUpdateDTO.html":{}}}],["customer.email",{"_index":793,"title":{},"body":{"injectables/CustomerService.html":{},"injectables/SecurityService.html":{}}}],["customer.fullname",{"_index":791,"title":{},"body":{"injectables/CustomerService.html":{}}}],["customer.id",{"_index":727,"title":{},"body":{"injectables/CustomerRepository.html":{},"injectables/SecurityService.html":{}}}],["customer.password",{"_index":797,"title":{},"body":{"injectables/CustomerService.html":{}}}],["customer.phone",{"_index":795,"title":{},"body":{"injectables/CustomerService.html":{}}}],["customer.state",{"_index":808,"title":{},"body":{"injectables/CustomerService.html":{}}}],["customerbalance",{"_index":388,"title":{},"body":{"injectables/AccountService.html":{}}}],["customerbalance(id",{"_index":405,"title":{},"body":{"injectables/AccountService.html":{}}}],["customerdto",{"_index":601,"title":{"classes/CustomerDTO.html":{}},"body":{"classes/CustomerDTO.html":{},"injectables/CustomerService.html":{},"controllers/SecurityController.html":{},"injectables/SecurityService.html":{},"controllers/UserController.html":{},"coverage.html":{}}}],["customerentity",{"_index":223,"title":{"entities/CustomerEntity.html":{}},"body":{"entities/AccountEntity.html":{},"modules/AppModule.html":{},"entities/CustomerEntity.html":{},"injectables/CustomerRepository.html":{},"interfaces/CustomerRepositoryInterface.html":{},"injectables/CustomerService.html":{},"injectables/SecurityService.html":{},"injectables/TypesOrmPostgresConfigService.html":{},"controllers/UserController.html":{},"coverage.html":{}}}],["customerid",{"_index":195,"title":{},"body":{"classes/AccountDTO.html":{},"injectables/AccountRepository.html":{},"interfaces/AccountRepositoryInterface.html":{},"injectables/AccountService.html":{},"injectables/CustomerService.html":{}}}],["customermodel",{"_index":278,"title":{"interfaces/CustomerModel.html":{}},"body":{"interfaces/AccountModel.html":{},"entities/CustomerEntity.html":{},"interfaces/CustomerModel.html":{},"injectables/SecurityService.html":{},"coverage.html":{}}}],["customerrepository",{"_index":393,"title":{"injectables/CustomerRepository.html":{}},"body":{"injectables/AccountService.html":{},"modules/AppModule.html":{},"injectables/CustomerRepository.html":{},"injectables/CustomerService.html":{},"injectables/SecurityService.html":{},"coverage.html":{},"overview.html":{}}}],["customerrepositoryinterface",{"_index":718,"title":{"interfaces/CustomerRepositoryInterface.html":{}},"body":{"injectables/CustomerRepository.html":{},"interfaces/CustomerRepositoryInterface.html":{},"coverage.html":{}}}],["customerservice",{"_index":147,"title":{"injectables/CustomerService.html":{}},"body":{"controllers/AccountController.html":{},"modules/AppModule.html":{},"injectables/CustomerService.html":{},"controllers/UserController.html":{},"coverage.html":{},"overview.html":{}}}],["customerupdatedto",{"_index":775,"title":{"classes/CustomerUpdateDTO.html":{}},"body":{"injectables/CustomerService.html":{},"classes/CustomerUpdateDTO.html":{},"controllers/UserController.html":{},"coverage.html":{}}}],["customresponse",{"_index":1386,"title":{},"body":{"classes/TypeOrmExceptionFilter.html":{}}}],["cédula",{"_index":991,"title":{},"body":{"injectables/DocumentTypeRepository.html":{}}}],["dar",{"_index":771,"title":{},"body":{"injectables/CustomerService.html":{}}}],["data",{"_index":190,"title":{},"body":{"classes/AccountDTO.html":{},"classes/CustomerDTO.html":{},"classes/CustomerUpdateDTO.html":{},"classes/DataRangeDTO.html":{},"classes/DepositDTO.html":{},"classes/PaginationDTO.html":{},"classes/SignDTO.html":{},"classes/TransferDTO.html":{}}}],["data/models",{"_index":1342,"title":{},"body":{"injectables/TransferService.html":{}}}],["data/persistence/entities",{"_index":150,"title":{},"body":{"controllers/AccountController.html":{},"injectables/AccountService.html":{},"modules/AppModule.html":{},"injectables/CustomerService.html":{},"controllers/DepositController.html":{},"injectables/DepositService.html":{},"injectables/SecurityService.html":{},"controllers/TransferController.html":{},"injectables/TransferService.html":{}}}],["data/persistence/entities/account.entity",{"_index":1445,"title":{},"body":{"controllers/UserController.html":{}}}],["data/persistence/entities/customer.entity",{"_index":1446,"title":{},"body":{"controllers/UserController.html":{}}}],["data/persistence/repositories",{"_index":429,"title":{},"body":{"injectables/AccountService.html":{},"modules/AppModule.html":{},"injectables/CustomerService.html":{},"injectables/DepositService.html":{},"injectables/SecurityService.html":{},"injectables/TransferService.html":{}}}],["data/persistence/utils/exception",{"_index":553,"title":{},"body":{"modules/AppModule.html":{}}}],["database",{"_index":574,"title":{},"body":{"modules/AppModule.html":{},"injectables/TypesOrmPostgresConfigService.html":{}}}],["datarange",{"_index":873,"title":{},"body":{"controllers/DepositController.html":{},"injectables/DepositService.html":{},"controllers/TransferController.html":{},"injectables/TransferService.html":{}}}],["datarange.enddate",{"_index":957,"title":{},"body":{"injectables/DepositService.html":{},"injectables/TransferService.html":{}}}],["datarange.startamount",{"_index":1364,"title":{},"body":{"injectables/TransferService.html":{}}}],["datarange.startdate",{"_index":956,"title":{},"body":{"injectables/DepositService.html":{},"injectables/TransferService.html":{}}}],["datarangedto",{"_index":821,"title":{"classes/DataRangeDTO.html":{}},"body":{"classes/DataRangeDTO.html":{},"controllers/DepositController.html":{},"injectables/DepositService.html":{},"controllers/TransferController.html":{},"coverage.html":{}}}],["datarangemodel",{"_index":838,"title":{"interfaces/DataRangeModel.html":{}},"body":{"interfaces/DataRangeModel.html":{},"injectables/TransferService.html":{},"coverage.html":{}}}],["date",{"_index":226,"title":{},"body":{"entities/AccountEntity.html":{},"interfaces/AccountModel.html":{},"entities/CustomerEntity.html":{},"interfaces/CustomerModel.html":{},"classes/DataRangeDTO.html":{},"interfaces/DataRangeModel.html":{},"entities/DepositEntity.html":{},"interfaces/DepositModel.html":{},"injectables/DepositRepository.html":{},"interfaces/DepositRepositoryInterface.html":{},"entities/TransferEntity.html":{},"interfaces/TransferModel.html":{},"injectables/TransferRepository.html":{},"interfaces/TransferRepositoryInterface.html":{}}}],["date().toisostring",{"_index":1394,"title":{},"body":{"classes/TypeOrmExceptionFilter.html":{}}}],["date.now",{"_index":367,"title":{},"body":{"injectables/AccountRepository.html":{},"injectables/CustomerRepository.html":{},"injectables/CustomerService.html":{},"injectables/DepositRepository.html":{},"injectables/DepositService.html":{},"injectables/TransferRepository.html":{},"injectables/TransferService.html":{}}}],["date_time",{"_index":888,"title":{},"body":{"entities/DepositEntity.html":{},"entities/TransferEntity.html":{}}}],["dateend",{"_index":905,"title":{},"body":{"injectables/DepositRepository.html":{},"interfaces/DepositRepositoryInterface.html":{},"injectables/TransferRepository.html":{},"interfaces/TransferRepositoryInterface.html":{}}}],["dateinit",{"_index":908,"title":{},"body":{"injectables/DepositRepository.html":{},"interfaces/DepositRepositoryInterface.html":{},"injectables/TransferRepository.html":{},"interfaces/TransferRepositoryInterface.html":{}}}],["datetime",{"_index":884,"title":{},"body":{"entities/DepositEntity.html":{},"interfaces/DepositModel.html":{},"injectables/DepositRepository.html":{},"entities/TransferEntity.html":{},"interfaces/TransferModel.html":{},"injectables/TransferRepository.html":{}}}],["datos",{"_index":96,"title":{},"body":{"controllers/AccountController.html":{},"interfaces/AccountModel.html":{},"injectables/AccountRepository.html":{},"interfaces/AccountTypeModel.html":{},"injectables/AccountTypeRepository.html":{},"interfaces/BaseRepositoryInterface.html":{},"interfaces/CustomerModel.html":{},"injectables/CustomerRepository.html":{},"injectables/CustomerService.html":{},"classes/DataRangeDTO.html":{},"interfaces/DataRangeModel.html":{},"controllers/DepositController.html":{},"interfaces/DepositModel.html":{},"injectables/DepositRepository.html":{},"injectables/DepositService.html":{},"interfaces/DocumentTypeModel.html":{},"injectables/DocumentTypeRepository.html":{},"interfaces/PaginationModel.html":{},"injectables/PipesPipe.html":{},"controllers/SecurityController.html":{},"injectables/SecurityService.html":{},"classes/SignDTO.html":{},"controllers/TransferController.html":{},"interfaces/TransferModel.html":{},"injectables/TransferRepository.html":{},"controllers/UserController.html":{}}}],["day",{"_index":1556,"title":{},"body":{"index.html":{}}}],["de",{"_index":52,"title":{},"body":{"controllers/AccountController.html":{},"classes/AccountDTO.html":{},"entities/AccountEntity.html":{},"interfaces/AccountModel.html":{},"injectables/AccountRepository.html":{},"interfaces/AccountRepositoryInterface.html":{},"injectables/AccountService.html":{},"entities/AccountTypeEntity.html":{},"interfaces/AccountTypeModel.html":{},"injectables/AccountTypeRepository.html":{},"interfaces/AccountTypeRepositoryInterface.html":{},"interfaces/BaseRepositoryInterface.html":{},"classes/CustomerDTO.html":{},"entities/CustomerEntity.html":{},"interfaces/CustomerModel.html":{},"injectables/CustomerRepository.html":{},"interfaces/CustomerRepositoryInterface.html":{},"injectables/CustomerService.html":{},"classes/CustomerUpdateDTO.html":{},"classes/DataRangeDTO.html":{},"interfaces/DataRangeModel.html":{},"controllers/DepositController.html":{},"classes/DepositDTO.html":{},"interfaces/DepositModel.html":{},"injectables/DepositRepository.html":{},"interfaces/DepositRepositoryInterface.html":{},"injectables/DepositService.html":{},"entities/DocumentTypeEntity.html":{},"interfaces/DocumentTypeModel.html":{},"injectables/DocumentTypeRepository.html":{},"interfaces/DocumentTypeRepositoryInterface.html":{},"classes/ExceptionFiltersFilter.html":{},"guards/GuardsGuard.html":{},"injectables/InterceptorsInterceptor.html":{},"injectables/MiddlewaresMiddleware.html":{},"classes/PaginationDTO.html":{},"interfaces/PaginationModel.html":{},"injectables/PipesPipe.html":{},"controllers/SecurityController.html":{},"injectables/SecurityService.html":{},"classes/SignDTO.html":{},"controllers/TransferController.html":{},"classes/TransferDTO.html":{},"entities/TransferEntity.html":{},"interfaces/TransferModel.html":{},"injectables/TransferRepository.html":{},"interfaces/TransferRepositoryInterface.html":{},"injectables/TransferService.html":{},"classes/TypeOrmExceptionFilter.html":{},"injectables/TypesOrmPostgresConfigService.html":{},"controllers/UserController.html":{},"miscellaneous/functions.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["debe",{"_index":304,"title":{},"body":{"injectables/AccountRepository.html":{},"classes/CustomerDTO.html":{},"injectables/CustomerRepository.html":{},"classes/CustomerUpdateDTO.html":{},"classes/DataRangeDTO.html":{},"classes/DepositDTO.html":{},"injectables/DepositRepository.html":{},"classes/PaginationDTO.html":{},"classes/SignDTO.html":{},"classes/TransferDTO.html":{},"injectables/TransferRepository.html":{}}}],["declarations",{"_index":515,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["decorador",{"_index":1604,"title":{},"body":{"miscellaneous/variables.html":{}}}],["decorator",{"_index":206,"title":{},"body":{"classes/AccountDTO.html":{},"classes/CustomerDTO.html":{},"classes/CustomerUpdateDTO.html":{},"classes/DataRangeDTO.html":{},"classes/DepositDTO.html":{},"classes/PaginationDTO.html":{},"classes/SignDTO.html":{},"classes/TransferDTO.html":{}}}],["decorators",{"_index":38,"title":{},"body":{"controllers/AccountController.html":{},"classes/AccountDTO.html":{},"entities/AccountEntity.html":{},"entities/AccountTypeEntity.html":{},"classes/CustomerDTO.html":{},"entities/CustomerEntity.html":{},"classes/CustomerUpdateDTO.html":{},"classes/DataRangeDTO.html":{},"controllers/DepositController.html":{},"classes/DepositDTO.html":{},"entities/DepositEntity.html":{},"entities/DocumentTypeEntity.html":{},"classes/PaginationDTO.html":{},"controllers/SecurityController.html":{},"classes/SignDTO.html":{},"controllers/TransferController.html":{},"classes/TransferDTO.html":{},"entities/TransferEntity.html":{},"controllers/UserController.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["default",{"_index":217,"title":{},"body":{"entities/AccountEntity.html":{},"entities/AccountTypeEntity.html":{},"entities/CustomerEntity.html":{},"entities/DepositEntity.html":{},"entities/DocumentTypeEntity.html":{},"entities/TransferEntity.html":{},"miscellaneous/variables.html":{}}}],["defecto",{"_index":494,"title":{},"body":{"injectables/AccountTypeRepository.html":{},"injectables/DocumentTypeRepository.html":{},"injectables/TransferRepository.html":{}}}],["define",{"_index":269,"title":{},"body":{"interfaces/AccountModel.html":{},"interfaces/AccountRepositoryInterface.html":{},"interfaces/AccountTypeModel.html":{},"interfaces/AccountTypeRepositoryInterface.html":{},"interfaces/BaseRepositoryInterface.html":{},"interfaces/CustomerModel.html":{},"interfaces/CustomerRepositoryInterface.html":{},"interfaces/DataRangeModel.html":{},"interfaces/DepositModel.html":{},"interfaces/DepositRepositoryInterface.html":{},"interfaces/DocumentTypeModel.html":{},"interfaces/DocumentTypeRepositoryInterface.html":{},"interfaces/PaginationModel.html":{},"interfaces/TransferModel.html":{},"interfaces/TransferRepositoryInterface.html":{}}}],["defined",{"_index":41,"title":{},"body":{"controllers/AccountController.html":{},"classes/AccountDTO.html":{},"entities/AccountEntity.html":{},"injectables/AccountRepository.html":{},"interfaces/AccountRepositoryInterface.html":{},"injectables/AccountService.html":{},"entities/AccountTypeEntity.html":{},"injectables/AccountTypeRepository.html":{},"interfaces/AccountTypeRepositoryInterface.html":{},"modules/AppModule.html":{},"interfaces/BaseRepositoryInterface.html":{},"classes/CustomerDTO.html":{},"entities/CustomerEntity.html":{},"injectables/CustomerRepository.html":{},"interfaces/CustomerRepositoryInterface.html":{},"injectables/CustomerService.html":{},"classes/CustomerUpdateDTO.html":{},"classes/DataRangeDTO.html":{},"controllers/DepositController.html":{},"classes/DepositDTO.html":{},"entities/DepositEntity.html":{},"injectables/DepositRepository.html":{},"interfaces/DepositRepositoryInterface.html":{},"injectables/DepositService.html":{},"entities/DocumentTypeEntity.html":{},"injectables/DocumentTypeRepository.html":{},"interfaces/DocumentTypeRepositoryInterface.html":{},"classes/ExceptionFiltersFilter.html":{},"guards/GuardsGuard.html":{},"injectables/InterceptorsInterceptor.html":{},"injectables/MiddlewaresMiddleware.html":{},"classes/PaginationDTO.html":{},"injectables/PipesPipe.html":{},"controllers/SecurityController.html":{},"injectables/SecurityService.html":{},"classes/SignDTO.html":{},"controllers/TransferController.html":{},"classes/TransferDTO.html":{},"entities/TransferEntity.html":{},"injectables/TransferRepository.html":{},"interfaces/TransferRepositoryInterface.html":{},"injectables/TransferService.html":{},"classes/TypeOrmExceptionFilter.html":{},"injectables/TypesOrmPostgresConfigService.html":{},"controllers/UserController.html":{}}}],["definida",{"_index":1610,"title":{},"body":{"miscellaneous/variables.html":{}}}],["del",{"_index":81,"title":{},"body":{"controllers/AccountController.html":{},"classes/AccountDTO.html":{},"entities/AccountEntity.html":{},"injectables/AccountRepository.html":{},"interfaces/AccountRepositoryInterface.html":{},"entities/AccountTypeEntity.html":{},"interfaces/AccountTypeModel.html":{},"injectables/AccountTypeRepository.html":{},"interfaces/AccountTypeRepositoryInterface.html":{},"classes/CustomerDTO.html":{},"entities/CustomerEntity.html":{},"interfaces/CustomerModel.html":{},"injectables/CustomerRepository.html":{},"interfaces/CustomerRepositoryInterface.html":{},"injectables/CustomerService.html":{},"classes/CustomerUpdateDTO.html":{},"classes/DataRangeDTO.html":{},"interfaces/DataRangeModel.html":{},"controllers/DepositController.html":{},"classes/DepositDTO.html":{},"entities/DepositEntity.html":{},"interfaces/DepositModel.html":{},"injectables/DepositRepository.html":{},"interfaces/DepositRepositoryInterface.html":{},"injectables/DepositService.html":{},"entities/DocumentTypeEntity.html":{},"interfaces/DocumentTypeModel.html":{},"injectables/DocumentTypeRepository.html":{},"interfaces/DocumentTypeRepositoryInterface.html":{},"injectables/InterceptorsInterceptor.html":{},"injectables/PipesPipe.html":{},"controllers/SecurityController.html":{},"injectables/SecurityService.html":{},"classes/SignDTO.html":{},"injectables/TransferRepository.html":{},"interfaces/TransferRepositoryInterface.html":{},"injectables/TransferService.html":{},"controllers/UserController.html":{}}}],["delete",{"_index":136,"title":{},"body":{"controllers/AccountController.html":{},"injectables/AccountRepository.html":{},"injectables/AccountTypeRepository.html":{},"interfaces/BaseRepositoryInterface.html":{},"injectables/CustomerRepository.html":{},"controllers/DepositController.html":{},"injectables/DepositRepository.html":{},"injectables/DocumentTypeRepository.html":{},"controllers/TransferController.html":{},"injectables/TransferRepository.html":{},"controllers/UserController.html":{}}}],["delete(':id",{"_index":101,"title":{},"body":{"controllers/AccountController.html":{},"controllers/DepositController.html":{},"controllers/TransferController.html":{},"controllers/UserController.html":{}}}],["delete(id",{"_index":298,"title":{},"body":{"injectables/AccountRepository.html":{},"injectables/AccountTypeRepository.html":{},"interfaces/BaseRepositoryInterface.html":{},"injectables/CustomerRepository.html":{},"injectables/DepositRepository.html":{},"injectables/DocumentTypeRepository.html":{},"injectables/TransferRepository.html":{}}}],["deleteaccount",{"_index":26,"title":{},"body":{"controllers/AccountController.html":{},"injectables/AccountService.html":{}}}],["deleteaccount(@param('id",{"_index":184,"title":{},"body":{"controllers/AccountController.html":{}}}],["deleteaccount(accountid",{"_index":407,"title":{},"body":{"injectables/AccountService.html":{}}}],["deleteaccount(id",{"_index":100,"title":{},"body":{"controllers/AccountController.html":{}}}],["deletecustomer",{"_index":744,"title":{},"body":{"injectables/CustomerService.html":{}}}],["deletecustomer(id",{"_index":751,"title":{},"body":{"injectables/CustomerService.html":{}}}],["deleted_at",{"_index":227,"title":{},"body":{"entities/AccountEntity.html":{},"entities/CustomerEntity.html":{},"entities/DepositEntity.html":{},"entities/TransferEntity.html":{}}}],["deletedat",{"_index":213,"title":{},"body":{"entities/AccountEntity.html":{},"interfaces/AccountModel.html":{},"injectables/AccountRepository.html":{},"entities/CustomerEntity.html":{},"interfaces/CustomerModel.html":{},"injectables/CustomerRepository.html":{},"entities/DepositEntity.html":{},"interfaces/DepositModel.html":{},"injectables/DepositRepository.html":{},"entities/TransferEntity.html":{},"interfaces/TransferModel.html":{},"injectables/TransferRepository.html":{}}}],["deletedeposit",{"_index":853,"title":{},"body":{"controllers/DepositController.html":{},"injectables/DepositService.html":{}}}],["deletedeposit(@param('id",{"_index":878,"title":{},"body":{"controllers/DepositController.html":{}}}],["deletedeposit(depositid",{"_index":936,"title":{},"body":{"injectables/DepositService.html":{}}}],["deletedeposit(id",{"_index":859,"title":{},"body":{"controllers/DepositController.html":{}}}],["deletetransfer",{"_index":1217,"title":{},"body":{"controllers/TransferController.html":{},"injectables/TransferService.html":{}}}],["deletetransfer(@param('id",{"_index":1251,"title":{},"body":{"controllers/TransferController.html":{}}}],["deletetransfer(id",{"_index":1225,"title":{},"body":{"controllers/TransferController.html":{}}}],["deletetransfer(transferid",{"_index":1330,"title":{},"body":{"injectables/TransferService.html":{}}}],["deleteuser",{"_index":1418,"title":{},"body":{"controllers/UserController.html":{}}}],["deleteuser(@param('id",{"_index":1458,"title":{},"body":{"controllers/UserController.html":{}}}],["deleteuser(id",{"_index":1426,"title":{},"body":{"controllers/UserController.html":{}}}],["deliver",{"_index":1551,"title":{},"body":{"index.html":{}}}],["delivery",{"_index":1554,"title":{},"body":{"index.html":{}}}],["dentro",{"_index":907,"title":{},"body":{"injectables/DepositRepository.html":{},"interfaces/DepositRepositoryInterface.html":{},"interfaces/TransferRepositoryInterface.html":{}}}],["dependencies",{"_index":513,"title":{"dependencies.html":{}},"body":{"modules/AppModule.html":{},"dependencies.html":{},"overview.html":{}}}],["deposit",{"_index":850,"title":{},"body":{"controllers/DepositController.html":{},"entities/DepositEntity.html":{},"injectables/DepositService.html":{}}}],["deposit.accountid",{"_index":945,"title":{},"body":{"injectables/DepositService.html":{}}}],["depositcontroller",{"_index":534,"title":{"controllers/DepositController.html":{}},"body":{"modules/AppModule.html":{},"controllers/DepositController.html":{},"coverage.html":{}}}],["depositdto",{"_index":855,"title":{"classes/DepositDTO.html":{}},"body":{"controllers/DepositController.html":{},"classes/DepositDTO.html":{},"injectables/DepositService.html":{},"coverage.html":{}}}],["depositentity",{"_index":549,"title":{"entities/DepositEntity.html":{}},"body":{"modules/AppModule.html":{},"controllers/DepositController.html":{},"entities/DepositEntity.html":{},"injectables/DepositRepository.html":{},"interfaces/DepositRepositoryInterface.html":{},"injectables/DepositService.html":{},"injectables/TypesOrmPostgresConfigService.html":{},"coverage.html":{}}}],["depositentity.account",{"_index":943,"title":{},"body":{"injectables/DepositService.html":{}}}],["depositentity.amount",{"_index":946,"title":{},"body":{"injectables/DepositService.html":{}}}],["depositentity.datetime",{"_index":948,"title":{},"body":{"injectables/DepositService.html":{}}}],["depositid",{"_index":938,"title":{},"body":{"injectables/DepositService.html":{}}}],["depositmodel",{"_index":892,"title":{"interfaces/DepositModel.html":{}},"body":{"entities/DepositEntity.html":{},"interfaces/DepositModel.html":{},"coverage.html":{}}}],["depositrepository",{"_index":521,"title":{"injectables/DepositRepository.html":{}},"body":{"modules/AppModule.html":{},"injectables/DepositRepository.html":{},"injectables/DepositService.html":{},"injectables/TransferService.html":{},"coverage.html":{},"overview.html":{}}}],["depositrepositoryinterface",{"_index":916,"title":{"interfaces/DepositRepositoryInterface.html":{}},"body":{"injectables/DepositRepository.html":{},"interfaces/DepositRepositoryInterface.html":{},"coverage.html":{}}}],["depositservice",{"_index":522,"title":{"injectables/DepositService.html":{}},"body":{"modules/AppModule.html":{},"controllers/DepositController.html":{},"injectables/DepositService.html":{},"coverage.html":{},"overview.html":{}}}],["depósito",{"_index":857,"title":{},"body":{"controllers/DepositController.html":{},"classes/DepositDTO.html":{},"entities/DepositEntity.html":{},"interfaces/DepositModel.html":{},"injectables/DepositRepository.html":{},"injectables/DepositService.html":{}}}],["depósitos",{"_index":851,"title":{},"body":{"controllers/DepositController.html":{},"injectables/DepositRepository.html":{},"interfaces/DepositRepositoryInterface.html":{},"injectables/DepositService.html":{}}}],["desactivada",{"_index":444,"title":{},"body":{"injectables/AccountService.html":{}}}],["describe",{"_index":468,"title":{},"body":{"interfaces/AccountTypeModel.html":{}}}],["description",{"_index":9,"title":{},"body":{"controllers/AccountController.html":{},"classes/AccountDTO.html":{},"entities/AccountEntity.html":{},"interfaces/AccountModel.html":{},"injectables/AccountRepository.html":{},"interfaces/AccountRepositoryInterface.html":{},"entities/AccountTypeEntity.html":{},"interfaces/AccountTypeModel.html":{},"injectables/AccountTypeRepository.html":{},"interfaces/AccountTypeRepositoryInterface.html":{},"interfaces/BaseRepositoryInterface.html":{},"classes/CustomerDTO.html":{},"entities/CustomerEntity.html":{},"interfaces/CustomerModel.html":{},"injectables/CustomerRepository.html":{},"interfaces/CustomerRepositoryInterface.html":{},"injectables/CustomerService.html":{},"classes/CustomerUpdateDTO.html":{},"classes/DataRangeDTO.html":{},"interfaces/DataRangeModel.html":{},"controllers/DepositController.html":{},"classes/DepositDTO.html":{},"entities/DepositEntity.html":{},"interfaces/DepositModel.html":{},"injectables/DepositRepository.html":{},"interfaces/DepositRepositoryInterface.html":{},"injectables/DepositService.html":{},"entities/DocumentTypeEntity.html":{},"interfaces/DocumentTypeModel.html":{},"injectables/DocumentTypeRepository.html":{},"interfaces/DocumentTypeRepositoryInterface.html":{},"classes/ExceptionFiltersFilter.html":{},"guards/GuardsGuard.html":{},"injectables/InterceptorsInterceptor.html":{},"injectables/MiddlewaresMiddleware.html":{},"classes/PaginationDTO.html":{},"interfaces/PaginationModel.html":{},"injectables/PipesPipe.html":{},"controllers/SecurityController.html":{},"classes/SignDTO.html":{},"controllers/TransferController.html":{},"classes/TransferDTO.html":{},"entities/TransferEntity.html":{},"interfaces/TransferModel.html":{},"injectables/TransferRepository.html":{},"interfaces/TransferRepositoryInterface.html":{},"classes/TypeOrmExceptionFilter.html":{},"injectables/TypesOrmPostgresConfigService.html":{},"controllers/UserController.html":{},"index.html":{},"properties.html":{}}}],["description]workshop",{"_index":1559,"title":{},"body":{"index.html":{}}}],["después",{"_index":1075,"title":{},"body":{"injectables/InterceptorsInterceptor.html":{}}}],["destino",{"_index":1265,"title":{},"body":{"classes/TransferDTO.html":{}}}],["desuscribe",{"_index":1442,"title":{},"body":{"controllers/UserController.html":{}}}],["detail",{"_index":1392,"title":{},"body":{"classes/TypeOrmExceptionFilter.html":{}}}],["detalles",{"_index":1137,"title":{},"body":{"injectables/PipesPipe.html":{}}}],["determina",{"_index":1040,"title":{},"body":{"guards/GuardsGuard.html":{}}}],["development",{"_index":1543,"title":{},"body":{"index.html":{}}}],["dinero",{"_index":1283,"title":{},"body":{"entities/TransferEntity.html":{}}}],["dio",{"_index":773,"title":{},"body":{"injectables/CustomerService.html":{}}}],["dirección",{"_index":685,"title":{},"body":{"injectables/CustomerRepository.html":{}}}],["disponibilidad",{"_index":425,"title":{},"body":{"injectables/AccountService.html":{}}}],["document",{"_index":603,"title":{},"body":{"classes/CustomerDTO.html":{},"entities/CustomerEntity.html":{},"interfaces/CustomerModel.html":{},"injectables/CustomerRepository.html":{},"interfaces/CustomerRepositoryInterface.html":{},"classes/CustomerUpdateDTO.html":{}}}],["document_type",{"_index":965,"title":{},"body":{"entities/DocumentTypeEntity.html":{}}}],["documentation",{"_index":1463,"title":{},"body":{"coverage.html":{},"index.html":{}}}],["documented",{"_index":1584,"title":{},"body":{"index.html":{}}}],["documento",{"_index":610,"title":{},"body":{"classes/CustomerDTO.html":{},"entities/CustomerEntity.html":{},"interfaces/CustomerModel.html":{},"injectables/CustomerRepository.html":{},"interfaces/CustomerRepositoryInterface.html":{},"classes/CustomerUpdateDTO.html":{},"entities/DocumentTypeEntity.html":{},"interfaces/DocumentTypeModel.html":{},"injectables/DocumentTypeRepository.html":{},"interfaces/DocumentTypeRepositoryInterface.html":{}}}],["documenttype",{"_index":648,"title":{},"body":{"entities/CustomerEntity.html":{},"interfaces/CustomerModel.html":{},"injectables/CustomerRepository.html":{},"injectables/CustomerService.html":{}}}],["documenttype.id",{"_index":785,"title":{},"body":{"injectables/CustomerService.html":{}}}],["documenttypeentity",{"_index":550,"title":{"entities/DocumentTypeEntity.html":{}},"body":{"modules/AppModule.html":{},"entities/CustomerEntity.html":{},"injectables/CustomerService.html":{},"entities/DocumentTypeEntity.html":{},"injectables/DocumentTypeRepository.html":{},"interfaces/DocumentTypeRepositoryInterface.html":{},"injectables/TypesOrmPostgresConfigService.html":{},"coverage.html":{}}}],["documenttypeid",{"_index":604,"title":{},"body":{"classes/CustomerDTO.html":{},"injectables/CustomerRepository.html":{},"interfaces/CustomerRepositoryInterface.html":{}}}],["documenttypemodel",{"_index":671,"title":{"interfaces/DocumentTypeModel.html":{}},"body":{"interfaces/CustomerModel.html":{},"entities/DocumentTypeEntity.html":{},"interfaces/DocumentTypeModel.html":{},"coverage.html":{}}}],["documenttyperepository",{"_index":523,"title":{"injectables/DocumentTypeRepository.html":{}},"body":{"modules/AppModule.html":{},"injectables/DocumentTypeRepository.html":{},"injectables/SecurityService.html":{},"coverage.html":{},"overview.html":{}}}],["documenttyperepositoryinterface",{"_index":982,"title":{"interfaces/DocumentTypeRepositoryInterface.html":{}},"body":{"injectables/DocumentTypeRepository.html":{},"interfaces/DocumentTypeRepositoryInterface.html":{},"coverage.html":{}}}],["donde",{"_index":1281,"title":{},"body":{"entities/TransferEntity.html":{}}}],["dtos",{"_index":1188,"title":{},"body":{"injectables/SecurityService.html":{}}}],["duro",{"_index":713,"title":{},"body":{"injectables/CustomerRepository.html":{},"injectables/DepositRepository.html":{}}}],["e",{"_index":597,"title":{},"body":{"interfaces/BaseRepositoryInterface.html":{}}}],["each",{"_index":1570,"title":{},"body":{"index.html":{}}}],["efficient",{"_index":1531,"title":{},"body":{"index.html":{}}}],["egreso",{"_index":1239,"title":{},"body":{"controllers/TransferController.html":{}}}],["egresos",{"_index":1238,"title":{},"body":{"controllers/TransferController.html":{}}}],["ejecución",{"_index":1044,"title":{},"body":{"guards/GuardsGuard.html":{},"injectables/InterceptorsInterceptor.html":{}}}],["ejecuta",{"_index":1088,"title":{},"body":{"injectables/MiddlewaresMiddleware.html":{}}}],["ejecutar",{"_index":1073,"title":{},"body":{"injectables/InterceptorsInterceptor.html":{}}}],["el",{"_index":51,"title":{},"body":{"controllers/AccountController.html":{},"interfaces/AccountModel.html":{},"injectables/AccountRepository.html":{},"interfaces/AccountRepositoryInterface.html":{},"injectables/AccountService.html":{},"entities/AccountTypeEntity.html":{},"interfaces/AccountTypeModel.html":{},"injectables/AccountTypeRepository.html":{},"interfaces/AccountTypeRepositoryInterface.html":{},"entities/CustomerEntity.html":{},"interfaces/CustomerModel.html":{},"injectables/CustomerRepository.html":{},"interfaces/CustomerRepositoryInterface.html":{},"injectables/CustomerService.html":{},"interfaces/DataRangeModel.html":{},"controllers/DepositController.html":{},"entities/DepositEntity.html":{},"interfaces/DepositModel.html":{},"injectables/DepositRepository.html":{},"interfaces/DepositRepositoryInterface.html":{},"injectables/DepositService.html":{},"entities/DocumentTypeEntity.html":{},"interfaces/DocumentTypeModel.html":{},"injectables/DocumentTypeRepository.html":{},"interfaces/DocumentTypeRepositoryInterface.html":{},"guards/GuardsGuard.html":{},"injectables/InterceptorsInterceptor.html":{},"injectables/MiddlewaresMiddleware.html":{},"interfaces/PaginationModel.html":{},"injectables/PipesPipe.html":{},"controllers/SecurityController.html":{},"injectables/SecurityService.html":{},"controllers/TransferController.html":{},"entities/TransferEntity.html":{},"interfaces/TransferModel.html":{},"injectables/TransferRepository.html":{},"interfaces/TransferRepositoryInterface.html":{},"classes/TypeOrmExceptionFilter.html":{},"controllers/UserController.html":{}}}],["electrónico",{"_index":615,"title":{},"body":{"classes/CustomerDTO.html":{},"entities/CustomerEntity.html":{},"interfaces/CustomerModel.html":{},"injectables/CustomerRepository.html":{},"interfaces/CustomerRepositoryInterface.html":{},"injectables/CustomerService.html":{},"classes/SignDTO.html":{},"controllers/UserController.html":{}}}],["elementos",{"_index":1117,"title":{},"body":{"classes/PaginationDTO.html":{},"interfaces/PaginationModel.html":{}}}],["elimin",{"_index":239,"title":{},"body":{"entities/AccountEntity.html":{},"entities/CustomerEntity.html":{},"injectables/CustomerService.html":{},"entities/DepositEntity.html":{}}}],["elimina",{"_index":103,"title":{},"body":{"controllers/AccountController.html":{},"injectables/AccountRepository.html":{},"injectables/AccountTypeRepository.html":{},"interfaces/BaseRepositoryInterface.html":{},"injectables/CustomerRepository.html":{},"controllers/DepositController.html":{},"injectables/DepositRepository.html":{},"injectables/DocumentTypeRepository.html":{},"controllers/TransferController.html":{},"entities/TransferEntity.html":{},"injectables/TransferRepository.html":{},"controllers/UserController.html":{}}}],["eliminación",{"_index":303,"title":{},"body":{"injectables/AccountRepository.html":{},"interfaces/BaseRepositoryInterface.html":{},"entities/TransferEntity.html":{}}}],["eliminada",{"_index":106,"title":{},"body":{"controllers/AccountController.html":{},"interfaces/AccountModel.html":{},"controllers/TransferController.html":{},"interfaces/TransferModel.html":{}}}],["eliminado",{"_index":670,"title":{},"body":{"interfaces/CustomerModel.html":{},"interfaces/DepositModel.html":{}}}],["eliminados",{"_index":690,"title":{},"body":{"injectables/CustomerRepository.html":{},"injectables/CustomerService.html":{},"controllers/UserController.html":{}}}],["eliminar",{"_index":130,"title":{},"body":{"controllers/AccountController.html":{},"injectables/AccountRepository.html":{},"injectables/AccountTypeRepository.html":{},"interfaces/BaseRepositoryInterface.html":{},"injectables/CustomerRepository.html":{},"injectables/CustomerService.html":{},"injectables/DepositRepository.html":{},"injectables/DocumentTypeRepository.html":{},"injectables/TransferRepository.html":{}}}],["email",{"_index":605,"title":{},"body":{"classes/CustomerDTO.html":{},"entities/CustomerEntity.html":{},"interfaces/CustomerModel.html":{},"injectables/CustomerRepository.html":{},"interfaces/CustomerRepositoryInterface.html":{},"injectables/CustomerService.html":{},"injectables/SecurityService.html":{},"classes/SignDTO.html":{},"controllers/UserController.html":{}}}],["en",{"_index":237,"title":{},"body":{"entities/AccountEntity.html":{},"interfaces/AccountModel.html":{},"injectables/AccountRepository.html":{},"injectables/AccountService.html":{},"injectables/AccountTypeRepository.html":{},"interfaces/BaseRepositoryInterface.html":{},"entities/CustomerEntity.html":{},"interfaces/CustomerModel.html":{},"injectables/CustomerRepository.html":{},"injectables/CustomerService.html":{},"interfaces/DataRangeModel.html":{},"entities/DepositEntity.html":{},"interfaces/DepositModel.html":{},"injectables/DepositRepository.html":{},"injectables/DepositService.html":{},"injectables/DocumentTypeRepository.html":{},"classes/PaginationDTO.html":{},"interfaces/PaginationModel.html":{},"injectables/PipesPipe.html":{},"injectables/SecurityService.html":{},"interfaces/TransferModel.html":{},"injectables/TransferRepository.html":{},"injectables/TransferService.html":{}}}],["encontr",{"_index":705,"title":{},"body":{"injectables/CustomerRepository.html":{},"interfaces/CustomerRepositoryInterface.html":{}}}],["encontrada",{"_index":324,"title":{},"body":{"injectables/AccountRepository.html":{},"interfaces/BaseRepositoryInterface.html":{},"injectables/TransferRepository.html":{},"interfaces/TransferRepositoryInterface.html":{}}}],["encontradas",{"_index":316,"title":{},"body":{"injectables/AccountRepository.html":{}}}],["encontrado",{"_index":483,"title":{},"body":{"injectables/AccountTypeRepository.html":{},"interfaces/CustomerRepositoryInterface.html":{},"injectables/CustomerService.html":{},"injectables/DepositRepository.html":{},"injectables/DocumentTypeRepository.html":{}}}],["encontrados",{"_index":480,"title":{},"body":{"injectables/AccountTypeRepository.html":{},"injectables/DocumentTypeRepository.html":{}}}],["encontrar",{"_index":910,"title":{},"body":{"injectables/DepositRepository.html":{},"injectables/DocumentTypeRepository.html":{},"injectables/TransferRepository.html":{}}}],["encuentra",{"_index":312,"title":{},"body":{"injectables/AccountRepository.html":{},"interfaces/AccountRepositoryInterface.html":{},"injectables/AccountTypeRepository.html":{},"interfaces/AccountTypeRepositoryInterface.html":{},"interfaces/BaseRepositoryInterface.html":{},"injectables/CustomerRepository.html":{},"interfaces/CustomerRepositoryInterface.html":{},"injectables/DepositRepository.html":{},"interfaces/DepositRepositoryInterface.html":{},"injectables/DocumentTypeRepository.html":{},"interfaces/DocumentTypeRepositoryInterface.html":{},"injectables/TransferRepository.html":{},"interfaces/TransferRepositoryInterface.html":{}}}],["end",{"_index":963,"title":{},"body":{"injectables/DepositService.html":{},"injectables/TransferService.html":{}}}],["endamount",{"_index":825,"title":{},"body":{"classes/DataRangeDTO.html":{},"interfaces/DataRangeModel.html":{}}}],["enddate",{"_index":826,"title":{},"body":{"classes/DataRangeDTO.html":{},"interfaces/DataRangeModel.html":{}}}],["entidad",{"_index":98,"title":{},"body":{"controllers/AccountController.html":{},"entities/AccountEntity.html":{},"injectables/AccountRepository.html":{},"entities/AccountTypeEntity.html":{},"injectables/AccountTypeRepository.html":{},"interfaces/BaseRepositoryInterface.html":{},"entities/CustomerEntity.html":{},"injectables/CustomerService.html":{},"controllers/DepositController.html":{},"entities/DepositEntity.html":{},"injectables/DepositService.html":{},"entities/DocumentTypeEntity.html":{},"controllers/TransferController.html":{},"entities/TransferEntity.html":{},"controllers/UserController.html":{}}}],["entidades",{"_index":113,"title":{},"body":{"controllers/AccountController.html":{},"interfaces/BaseRepositoryInterface.html":{},"controllers/DepositController.html":{},"controllers/TransferController.html":{},"controllers/UserController.html":{}}}],["entities",{"_index":208,"title":{},"body":{"entities/AccountEntity.html":{},"injectables/AccountRepository.html":{},"interfaces/AccountRepositoryInterface.html":{},"entities/AccountTypeEntity.html":{},"interfaces/AccountTypeRepositoryInterface.html":{},"entities/CustomerEntity.html":{},"injectables/CustomerRepository.html":{},"interfaces/CustomerRepositoryInterface.html":{},"entities/DepositEntity.html":{},"injectables/DepositRepository.html":{},"interfaces/DepositRepositoryInterface.html":{},"entities/DocumentTypeEntity.html":{},"injectables/DocumentTypeRepository.html":{},"interfaces/DocumentTypeRepositoryInterface.html":{},"injectables/SecurityService.html":{},"entities/TransferEntity.html":{},"injectables/TransferRepository.html":{},"interfaces/TransferRepositoryInterface.html":{},"injectables/TypesOrmPostgresConfigService.html":{},"overview.html":{}}}],["entities/account",{"_index":488,"title":{},"body":{"injectables/AccountTypeRepository.html":{}}}],["entity",{"_index":207,"title":{"entities/AccountEntity.html":{},"entities/AccountTypeEntity.html":{},"entities/CustomerEntity.html":{},"entities/DepositEntity.html":{},"entities/DocumentTypeEntity.html":{},"entities/TransferEntity.html":{}},"body":{"entities/AccountEntity.html":{},"injectables/AccountRepository.html":{},"entities/AccountTypeEntity.html":{},"injectables/AccountTypeRepository.html":{},"interfaces/BaseRepositoryInterface.html":{},"entities/CustomerEntity.html":{},"injectables/CustomerRepository.html":{},"entities/DepositEntity.html":{},"injectables/DepositRepository.html":{},"entities/DocumentTypeEntity.html":{},"injectables/DocumentTypeRepository.html":{},"entities/TransferEntity.html":{},"injectables/TransferRepository.html":{},"coverage.html":{}}}],["entity).then((result",{"_index":348,"title":{},"body":{"injectables/AccountRepository.html":{},"injectables/AccountTypeRepository.html":{},"injectables/CustomerRepository.html":{},"injectables/DepositRepository.html":{},"injectables/DocumentTypeRepository.html":{},"injectables/TransferRepository.html":{}}}],["entorno",{"_index":1608,"title":{},"body":{"miscellaneous/variables.html":{}}}],["entrada",{"_index":1289,"title":{},"body":{"interfaces/TransferModel.html":{},"injectables/TransferRepository.html":{},"interfaces/TransferRepositoryInterface.html":{},"injectables/TransferService.html":{}}}],["entre",{"_index":1273,"title":{},"body":{"entities/TransferEntity.html":{},"interfaces/TransferModel.html":{},"injectables/TransferService.html":{}}}],["enviar",{"_index":1395,"title":{},"body":{"classes/TypeOrmExceptionFilter.html":{}}}],["err",{"_index":1059,"title":{},"body":{"guards/GuardsGuard.html":{}}}],["error",{"_index":1385,"title":{},"body":{"classes/TypeOrmExceptionFilter.html":{}}}],["errorcode",{"_index":1393,"title":{},"body":{"classes/TypeOrmExceptionFilter.html":{}}}],["errores",{"_index":1373,"title":{},"body":{"classes/TypeOrmExceptionFilter.html":{}}}],["errors",{"_index":1391,"title":{},"body":{"classes/TypeOrmExceptionFilter.html":{}}}],["es",{"_index":1160,"title":{},"body":{"controllers/SecurityController.html":{},"injectables/TransferRepository.html":{}}}],["especificada",{"_index":686,"title":{},"body":{"injectables/CustomerRepository.html":{},"interfaces/DepositRepositoryInterface.html":{}}}],["especificado",{"_index":381,"title":{},"body":{"interfaces/AccountRepositoryInterface.html":{},"interfaces/AccountTypeRepositoryInterface.html":{},"injectables/CustomerRepository.html":{},"interfaces/CustomerRepositoryInterface.html":{},"interfaces/DepositRepositoryInterface.html":{},"interfaces/DocumentTypeRepositoryInterface.html":{},"interfaces/TransferRepositoryInterface.html":{}}}],["específicos",{"_index":376,"title":{},"body":{"interfaces/AccountRepositoryInterface.html":{},"interfaces/AccountTypeRepositoryInterface.html":{},"interfaces/CustomerRepositoryInterface.html":{},"interfaces/DepositRepositoryInterface.html":{},"interfaces/DocumentTypeRepositoryInterface.html":{},"interfaces/TransferRepositoryInterface.html":{}}}],["est",{"_index":1045,"title":{},"body":{"guards/GuardsGuard.html":{},"miscellaneous/variables.html":{}}}],["esta",{"_index":272,"title":{},"body":{"interfaces/AccountModel.html":{},"interfaces/AccountTypeModel.html":{},"interfaces/CustomerModel.html":{},"interfaces/DataRangeModel.html":{},"interfaces/DepositModel.html":{},"interfaces/DocumentTypeModel.html":{},"interfaces/PaginationModel.html":{},"interfaces/TransferModel.html":{}}}],["estado",{"_index":88,"title":{},"body":{"controllers/AccountController.html":{},"entities/AccountEntity.html":{},"interfaces/AccountModel.html":{},"injectables/AccountRepository.html":{},"interfaces/AccountRepositoryInterface.html":{},"injectables/AccountService.html":{},"entities/AccountTypeEntity.html":{},"interfaces/AccountTypeModel.html":{},"injectables/AccountTypeRepository.html":{},"interfaces/AccountTypeRepositoryInterface.html":{},"entities/CustomerEntity.html":{},"interfaces/CustomerModel.html":{},"injectables/CustomerRepository.html":{},"interfaces/CustomerRepositoryInterface.html":{},"entities/DocumentTypeEntity.html":{},"interfaces/DocumentTypeModel.html":{},"injectables/DocumentTypeRepository.html":{},"interfaces/DocumentTypeRepositoryInterface.html":{}}}],["este",{"_index":1615,"title":{},"body":{"miscellaneous/variables.html":{}}}],["estructura",{"_index":270,"title":{},"body":{"interfaces/AccountModel.html":{},"interfaces/AccountTypeModel.html":{},"interfaces/CustomerModel.html":{},"interfaces/DataRangeModel.html":{},"interfaces/DepositModel.html":{},"interfaces/DocumentTypeModel.html":{},"interfaces/PaginationModel.html":{},"interfaces/TransferModel.html":{},"index.html":{}}}],["example",{"_index":1539,"title":{},"body":{"index.html":{}}}],["excepciones",{"_index":1010,"title":{},"body":{"classes/ExceptionFiltersFilter.html":{},"classes/TypeOrmExceptionFilter.html":{}}}],["excepción",{"_index":1021,"title":{},"body":{"classes/ExceptionFiltersFilter.html":{},"classes/TypeOrmExceptionFilter.html":{}}}],["exception",{"_index":1020,"title":{},"body":{"classes/ExceptionFiltersFilter.html":{},"classes/TypeOrmExceptionFilter.html":{}}}],["exception.message",{"_index":1379,"title":{},"body":{"classes/TypeOrmExceptionFilter.html":{}}}],["exceptionfilter",{"_index":1012,"title":{},"body":{"classes/ExceptionFiltersFilter.html":{},"classes/TypeOrmExceptionFilter.html":{}}}],["exceptionfiltersfilter",{"_index":1005,"title":{"classes/ExceptionFiltersFilter.html":{}},"body":{"classes/ExceptionFiltersFilter.html":{},"coverage.html":{}}}],["executioncontext",{"_index":1038,"title":{},"body":{"guards/GuardsGuard.html":{},"injectables/InterceptorsInterceptor.html":{}}}],["existe",{"_index":353,"title":{},"body":{"injectables/AccountRepository.html":{},"injectables/AccountTypeRepository.html":{},"injectables/CustomerRepository.html":{},"injectables/CustomerService.html":{},"injectables/DepositRepository.html":{},"injectables/DocumentTypeRepository.html":{},"injectables/SecurityService.html":{},"injectables/TransferRepository.html":{}}}],["existemail",{"_index":673,"title":{},"body":{"injectables/CustomerRepository.html":{}}}],["existemail(email",{"_index":683,"title":{},"body":{"injectables/CustomerRepository.html":{}}}],["existente",{"_index":337,"title":{},"body":{"injectables/AccountRepository.html":{},"injectables/AccountTypeRepository.html":{},"interfaces/BaseRepositoryInterface.html":{},"injectables/CustomerRepository.html":{},"injectables/DepositRepository.html":{},"injectables/DocumentTypeRepository.html":{},"injectables/TransferRepository.html":{},"controllers/UserController.html":{}}}],["exitosa",{"_index":134,"title":{},"body":{"controllers/AccountController.html":{},"controllers/UserController.html":{}}}],["exitoso",{"_index":1154,"title":{},"body":{"controllers/SecurityController.html":{}}}],["export",{"_index":152,"title":{},"body":{"controllers/AccountController.html":{},"classes/AccountDTO.html":{},"entities/AccountEntity.html":{},"interfaces/AccountModel.html":{},"injectables/AccountRepository.html":{},"interfaces/AccountRepositoryInterface.html":{},"injectables/AccountService.html":{},"entities/AccountTypeEntity.html":{},"interfaces/AccountTypeModel.html":{},"injectables/AccountTypeRepository.html":{},"interfaces/AccountTypeRepositoryInterface.html":{},"modules/AppModule.html":{},"interfaces/BaseRepositoryInterface.html":{},"classes/CustomerDTO.html":{},"entities/CustomerEntity.html":{},"interfaces/CustomerModel.html":{},"injectables/CustomerRepository.html":{},"interfaces/CustomerRepositoryInterface.html":{},"injectables/CustomerService.html":{},"classes/CustomerUpdateDTO.html":{},"classes/DataRangeDTO.html":{},"interfaces/DataRangeModel.html":{},"controllers/DepositController.html":{},"classes/DepositDTO.html":{},"entities/DepositEntity.html":{},"interfaces/DepositModel.html":{},"injectables/DepositRepository.html":{},"interfaces/DepositRepositoryInterface.html":{},"injectables/DepositService.html":{},"entities/DocumentTypeEntity.html":{},"interfaces/DocumentTypeModel.html":{},"injectables/DocumentTypeRepository.html":{},"interfaces/DocumentTypeRepositoryInterface.html":{},"classes/ExceptionFiltersFilter.html":{},"guards/GuardsGuard.html":{},"injectables/InterceptorsInterceptor.html":{},"injectables/MiddlewaresMiddleware.html":{},"classes/PaginationDTO.html":{},"interfaces/PaginationModel.html":{},"injectables/PipesPipe.html":{},"controllers/SecurityController.html":{},"injectables/SecurityService.html":{},"classes/SignDTO.html":{},"controllers/TransferController.html":{},"classes/TransferDTO.html":{},"entities/TransferEntity.html":{},"interfaces/TransferModel.html":{},"injectables/TransferRepository.html":{},"interfaces/TransferRepositoryInterface.html":{},"injectables/TransferService.html":{},"classes/TypeOrmExceptionFilter.html":{},"injectables/TypesOrmPostgresConfigService.html":{},"controllers/UserController.html":{}}}],["exporta",{"_index":1617,"title":{},"body":{"miscellaneous/variables.html":{}}}],["exports",{"_index":518,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["express",{"_index":1108,"title":{},"body":{"injectables/MiddlewaresMiddleware.html":{},"dependencies.html":{}}}],["extends",{"_index":377,"title":{},"body":{"interfaces/AccountRepositoryInterface.html":{},"interfaces/AccountTypeRepositoryInterface.html":{},"interfaces/CustomerRepositoryInterface.html":{},"interfaces/DepositRepositoryInterface.html":{},"interfaces/DocumentTypeRepositoryInterface.html":{},"interfaces/TransferRepositoryInterface.html":{}}}],["extiende",{"_index":373,"title":{},"body":{"interfaces/AccountRepositoryInterface.html":{},"interfaces/AccountTypeRepositoryInterface.html":{},"interfaces/CustomerRepositoryInterface.html":{},"interfaces/DepositRepositoryInterface.html":{},"interfaces/DocumentTypeRepositoryInterface.html":{},"interfaces/TransferRepositoryInterface.html":{}}}],["extranjería",{"_index":998,"title":{},"body":{"injectables/DocumentTypeRepository.html":{}}}],["f9098e18cf9a",{"_index":997,"title":{},"body":{"injectables/DocumentTypeRepository.html":{}}}],["false",{"_index":232,"title":{},"body":{"entities/AccountEntity.html":{},"entities/CustomerEntity.html":{},"injectables/CustomerRepository.html":{},"injectables/CustomerService.html":{},"entities/DepositEntity.html":{},"guards/GuardsGuard.html":{},"injectables/SecurityService.html":{},"entities/TransferEntity.html":{}}}],["false})@joincolumn",{"_index":659,"title":{},"body":{"entities/CustomerEntity.html":{}}}],["fecha",{"_index":234,"title":{},"body":{"entities/AccountEntity.html":{},"interfaces/AccountModel.html":{},"entities/CustomerEntity.html":{},"interfaces/CustomerModel.html":{},"classes/DataRangeDTO.html":{},"interfaces/DataRangeModel.html":{},"entities/DepositEntity.html":{},"interfaces/DepositModel.html":{},"injectables/DepositRepository.html":{},"interfaces/DepositRepositoryInterface.html":{},"entities/TransferEntity.html":{},"interfaces/TransferModel.html":{},"injectables/TransferRepository.html":{},"interfaces/TransferRepositoryInterface.html":{}}}],["fechas",{"_index":844,"title":{},"body":{"interfaces/DataRangeModel.html":{},"controllers/DepositController.html":{},"injectables/DepositRepository.html":{},"interfaces/DepositRepositoryInterface.html":{},"injectables/DepositService.html":{},"injectables/TransferRepository.html":{},"interfaces/TransferRepositoryInterface.html":{}}}],["file",{"_index":5,"title":{},"body":{"controllers/AccountController.html":{},"classes/AccountDTO.html":{},"entities/AccountEntity.html":{},"interfaces/AccountModel.html":{},"injectables/AccountRepository.html":{},"interfaces/AccountRepositoryInterface.html":{},"injectables/AccountService.html":{},"entities/AccountTypeEntity.html":{},"interfaces/AccountTypeModel.html":{},"injectables/AccountTypeRepository.html":{},"interfaces/AccountTypeRepositoryInterface.html":{},"modules/AppModule.html":{},"interfaces/BaseRepositoryInterface.html":{},"classes/CustomerDTO.html":{},"entities/CustomerEntity.html":{},"interfaces/CustomerModel.html":{},"injectables/CustomerRepository.html":{},"interfaces/CustomerRepositoryInterface.html":{},"injectables/CustomerService.html":{},"classes/CustomerUpdateDTO.html":{},"classes/DataRangeDTO.html":{},"interfaces/DataRangeModel.html":{},"controllers/DepositController.html":{},"classes/DepositDTO.html":{},"entities/DepositEntity.html":{},"interfaces/DepositModel.html":{},"injectables/DepositRepository.html":{},"interfaces/DepositRepositoryInterface.html":{},"injectables/DepositService.html":{},"entities/DocumentTypeEntity.html":{},"interfaces/DocumentTypeModel.html":{},"injectables/DocumentTypeRepository.html":{},"interfaces/DocumentTypeRepositoryInterface.html":{},"classes/ExceptionFiltersFilter.html":{},"guards/GuardsGuard.html":{},"injectables/InterceptorsInterceptor.html":{},"injectables/MiddlewaresMiddleware.html":{},"classes/PaginationDTO.html":{},"interfaces/PaginationModel.html":{},"injectables/PipesPipe.html":{},"controllers/SecurityController.html":{},"injectables/SecurityService.html":{},"classes/SignDTO.html":{},"controllers/TransferController.html":{},"classes/TransferDTO.html":{},"entities/TransferEntity.html":{},"interfaces/TransferModel.html":{},"injectables/TransferRepository.html":{},"interfaces/TransferRepositoryInterface.html":{},"injectables/TransferService.html":{},"classes/TypeOrmExceptionFilter.html":{},"injectables/TypesOrmPostgresConfigService.html":{},"controllers/UserController.html":{},"coverage.html":{}}}],["files",{"_index":1568,"title":{},"body":{"index.html":{}}}],["filter",{"_index":1362,"title":{},"body":{"injectables/TransferService.html":{}}}],["filters",{"_index":555,"title":{},"body":{"modules/AppModule.html":{}}}],["filters.filter.ts",{"_index":1008,"title":{},"body":{"classes/ExceptionFiltersFilter.html":{},"coverage.html":{}}}],["filters.filter.ts:20",{"_index":1017,"title":{},"body":{"classes/ExceptionFiltersFilter.html":{}}}],["filters.ts",{"_index":1371,"title":{},"body":{"classes/TypeOrmExceptionFilter.html":{},"coverage.html":{}}}],["filters.ts:14",{"_index":1375,"title":{},"body":{"classes/TypeOrmExceptionFilter.html":{}}}],["filters/exception",{"_index":1007,"title":{},"body":{"classes/ExceptionFiltersFilter.html":{},"coverage.html":{}}}],["filters/typeorm.exception",{"_index":554,"title":{},"body":{"modules/AppModule.html":{},"classes/TypeOrmExceptionFilter.html":{},"coverage.html":{}}}],["filtrar",{"_index":842,"title":{},"body":{"interfaces/DataRangeModel.html":{},"injectables/DepositService.html":{}}}],["filtro",{"_index":1009,"title":{},"body":{"classes/ExceptionFiltersFilter.html":{},"classes/TypeOrmExceptionFilter.html":{}}}],["fin",{"_index":831,"title":{},"body":{"classes/DataRangeDTO.html":{},"interfaces/DataRangeModel.html":{},"injectables/DepositRepository.html":{},"interfaces/DepositRepositoryInterface.html":{},"injectables/TransferRepository.html":{}}}],["final",{"_index":1323,"title":{},"body":{"interfaces/TransferRepositoryInterface.html":{}}}],["find",{"_index":732,"title":{},"body":{"injectables/CustomerRepository.html":{}}}],["findall",{"_index":285,"title":{},"body":{"injectables/AccountRepository.html":{},"injectables/AccountService.html":{},"injectables/AccountTypeRepository.html":{},"interfaces/BaseRepositoryInterface.html":{},"injectables/CustomerRepository.html":{},"injectables/CustomerService.html":{},"injectables/DepositRepository.html":{},"injectables/DocumentTypeRepository.html":{},"injectables/TransferRepository.html":{},"interfaces/TransferRepositoryInterface.html":{}}}],["findalldeleted",{"_index":674,"title":{},"body":{"injectables/CustomerRepository.html":{},"injectables/CustomerService.html":{}}}],["findallusers",{"_index":1419,"title":{},"body":{"controllers/UserController.html":{}}}],["findallusersdeleted",{"_index":1420,"title":{},"body":{"controllers/UserController.html":{}}}],["findbyaccountid",{"_index":896,"title":{},"body":{"injectables/DepositRepository.html":{},"interfaces/DepositRepositoryInterface.html":{}}}],["findbyaccountid(accountid",{"_index":902,"title":{},"body":{"injectables/DepositRepository.html":{},"interfaces/DepositRepositoryInterface.html":{}}}],["findbyaccounttype",{"_index":286,"title":{},"body":{"injectables/AccountRepository.html":{},"interfaces/AccountRepositoryInterface.html":{}}}],["findbyaccounttype(accounttypeid",{"_index":314,"title":{},"body":{"injectables/AccountRepository.html":{},"interfaces/AccountRepositoryInterface.html":{}}}],["findbycustomer",{"_index":287,"title":{},"body":{"injectables/AccountRepository.html":{},"interfaces/AccountRepositoryInterface.html":{}}}],["findbycustomer(customerid",{"_index":317,"title":{},"body":{"injectables/AccountRepository.html":{},"interfaces/AccountRepositoryInterface.html":{}}}],["findbydatarange",{"_index":897,"title":{},"body":{"injectables/DepositRepository.html":{},"interfaces/DepositRepositoryInterface.html":{},"injectables/TransferRepository.html":{}}}],["findbydatarange(dateinit",{"_index":904,"title":{},"body":{"injectables/DepositRepository.html":{},"interfaces/DepositRepositoryInterface.html":{},"injectables/TransferRepository.html":{}}}],["findbyfullname",{"_index":675,"title":{},"body":{"injectables/CustomerRepository.html":{},"interfaces/CustomerRepositoryInterface.html":{}}}],["findbyfullname(fullname",{"_index":693,"title":{},"body":{"injectables/CustomerRepository.html":{},"interfaces/CustomerRepositoryInterface.html":{}}}],["findbyname",{"_index":473,"title":{},"body":{"injectables/AccountTypeRepository.html":{},"interfaces/AccountTypeRepositoryInterface.html":{},"injectables/DocumentTypeRepository.html":{},"interfaces/DocumentTypeRepositoryInterface.html":{}}}],["findbyname(name",{"_index":478,"title":{},"body":{"injectables/AccountTypeRepository.html":{},"interfaces/AccountTypeRepositoryInterface.html":{},"injectables/DocumentTypeRepository.html":{},"interfaces/DocumentTypeRepositoryInterface.html":{}}}],["findbystate",{"_index":288,"title":{},"body":{"injectables/AccountRepository.html":{},"interfaces/AccountRepositoryInterface.html":{},"injectables/AccountTypeRepository.html":{},"interfaces/AccountTypeRepositoryInterface.html":{},"injectables/CustomerRepository.html":{},"interfaces/CustomerRepositoryInterface.html":{},"injectables/DocumentTypeRepository.html":{},"interfaces/DocumentTypeRepositoryInterface.html":{}}}],["findbystate(state",{"_index":319,"title":{},"body":{"injectables/AccountRepository.html":{},"interfaces/AccountRepositoryInterface.html":{},"injectables/AccountTypeRepository.html":{},"interfaces/AccountTypeRepositoryInterface.html":{},"injectables/CustomerRepository.html":{},"interfaces/CustomerRepositoryInterface.html":{},"injectables/DocumentTypeRepository.html":{},"interfaces/DocumentTypeRepositoryInterface.html":{}}}],["findincomebydatarange",{"_index":1292,"title":{},"body":{"injectables/TransferRepository.html":{},"interfaces/TransferRepositoryInterface.html":{}}}],["findincomebydatarange(accountid",{"_index":1299,"title":{},"body":{"injectables/TransferRepository.html":{},"interfaces/TransferRepositoryInterface.html":{}}}],["findone",{"_index":357,"title":{},"body":{"injectables/AccountRepository.html":{},"injectables/AccountTypeRepository.html":{},"injectables/CustomerRepository.html":{},"injectables/DepositRepository.html":{},"injectables/DocumentTypeRepository.html":{},"injectables/TransferRepository.html":{}}}],["findonebydocumenttypeanddocument",{"_index":676,"title":{},"body":{"injectables/CustomerRepository.html":{},"interfaces/CustomerRepositoryInterface.html":{}}}],["findonebydocumenttypeanddocument(documenttypeid",{"_index":696,"title":{},"body":{"injectables/CustomerRepository.html":{},"interfaces/CustomerRepositoryInterface.html":{}}}],["findonebyemail",{"_index":677,"title":{},"body":{"injectables/CustomerRepository.html":{},"interfaces/CustomerRepositoryInterface.html":{}}}],["findonebyemail(email",{"_index":701,"title":{},"body":{"injectables/CustomerRepository.html":{},"interfaces/CustomerRepositoryInterface.html":{}}}],["findonebyemailandpassword",{"_index":678,"title":{},"body":{"injectables/CustomerRepository.html":{},"interfaces/CustomerRepositoryInterface.html":{}}}],["findonebyemailandpassword(email",{"_index":703,"title":{},"body":{"injectables/CustomerRepository.html":{},"interfaces/CustomerRepositoryInterface.html":{}}}],["findonebyid",{"_index":289,"title":{},"body":{"injectables/AccountRepository.html":{},"injectables/AccountTypeRepository.html":{},"interfaces/BaseRepositoryInterface.html":{},"injectables/CustomerRepository.html":{},"injectables/DepositRepository.html":{},"injectables/DocumentTypeRepository.html":{},"injectables/TransferRepository.html":{},"interfaces/TransferRepositoryInterface.html":{}}}],["findonebyid(id",{"_index":322,"title":{},"body":{"injectables/AccountRepository.html":{},"injectables/AccountTypeRepository.html":{},"interfaces/BaseRepositoryInterface.html":{},"injectables/CustomerRepository.html":{},"injectables/DepositRepository.html":{},"injectables/DocumentTypeRepository.html":{},"injectables/TransferRepository.html":{},"interfaces/TransferRepositoryInterface.html":{}}}],["findonebyphone",{"_index":679,"title":{},"body":{"injectables/CustomerRepository.html":{},"interfaces/CustomerRepositoryInterface.html":{}}}],["findonebyphone(phone",{"_index":709,"title":{},"body":{"injectables/CustomerRepository.html":{},"interfaces/CustomerRepositoryInterface.html":{}}}],["findoutcomebydatarange",{"_index":1293,"title":{},"body":{"injectables/TransferRepository.html":{},"interfaces/TransferRepositoryInterface.html":{}}}],["findoutcomebydatarange(accountid",{"_index":1302,"title":{},"body":{"injectables/TransferRepository.html":{},"interfaces/TransferRepositoryInterface.html":{}}}],["finduser",{"_index":1421,"title":{},"body":{"controllers/UserController.html":{}}}],["finduser(@param('id",{"_index":1450,"title":{},"body":{"controllers/UserController.html":{}}}],["finduser(id",{"_index":1431,"title":{},"body":{"controllers/UserController.html":{}}}],["finduserbyemail",{"_index":1422,"title":{},"body":{"controllers/UserController.html":{}}}],["finduserbyemail(@param('email",{"_index":1452,"title":{},"body":{"controllers/UserController.html":{}}}],["finduserbyemail(email",{"_index":1434,"title":{},"body":{"controllers/UserController.html":{}}}],["firmar",{"_index":1621,"title":{},"body":{"miscellaneous/variables.html":{}}}],["folder",{"_index":1571,"title":{},"body":{"index.html":{}}}],["folders",{"_index":1566,"title":{},"body":{"index.html":{}}}],["following",{"_index":1560,"title":{},"body":{"index.html":{}}}],["fondos",{"_index":1272,"title":{},"body":{"entities/TransferEntity.html":{},"interfaces/TransferModel.html":{}}}],["forget",{"_index":1579,"title":{},"body":{"index.html":{}}}],["framework",{"_index":1529,"title":{},"body":{"index.html":{}}}],["fue",{"_index":133,"title":{},"body":{"controllers/AccountController.html":{},"interfaces/AccountModel.html":{},"interfaces/CustomerModel.html":{},"interfaces/DepositModel.html":{},"controllers/SecurityController.html":{},"interfaces/TransferModel.html":{},"controllers/UserController.html":{}}}],["full_name",{"_index":663,"title":{},"body":{"entities/CustomerEntity.html":{}}}],["fullname",{"_index":606,"title":{},"body":{"classes/CustomerDTO.html":{},"entities/CustomerEntity.html":{},"interfaces/CustomerModel.html":{},"injectables/CustomerRepository.html":{},"interfaces/CustomerRepositoryInterface.html":{},"classes/CustomerUpdateDTO.html":{}}}],["función",{"_index":1103,"title":{},"body":{"injectables/MiddlewaresMiddleware.html":{},"miscellaneous/functions.html":{}}}],["function",{"_index":258,"title":{},"body":{"entities/AccountEntity.html":{},"coverage.html":{}}}],["functions",{"_index":1521,"title":{"miscellaneous/functions.html":{}},"body":{"miscellaneous/functions.html":{}}}],["genera",{"_index":256,"title":{},"body":{"entities/AccountEntity.html":{},"miscellaneous/functions.html":{}}}],["generado",{"_index":257,"title":{},"body":{"entities/AccountEntity.html":{},"miscellaneous/functions.html":{}}}],["generateid",{"_index":241,"title":{},"body":{"entities/AccountEntity.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["genérico",{"_index":1011,"title":{},"body":{"classes/ExceptionFiltersFilter.html":{}}}],["gestionar",{"_index":12,"title":{},"body":{"controllers/AccountController.html":{},"controllers/DepositController.html":{},"controllers/SecurityController.html":{},"controllers/TransferController.html":{},"controllers/UserController.html":{}}}],["get('/account/:id",{"_index":66,"title":{},"body":{"controllers/AccountController.html":{}}}],["get('/customer/:id",{"_index":108,"title":{},"body":{"controllers/AccountController.html":{}}}],["get('/select/:id",{"_index":1248,"title":{},"body":{"controllers/TransferController.html":{}}}],["get('/select/:id')@useguards(guardsguard",{"_index":1241,"title":{},"body":{"controllers/TransferController.html":{}}}],["get(':id",{"_index":1432,"title":{},"body":{"controllers/UserController.html":{}}}],["get('amount/:id",{"_index":161,"title":{},"body":{"controllers/AccountController.html":{}}}],["get('amount/:id')@useguards(guardsguard",{"_index":121,"title":{},"body":{"controllers/AccountController.html":{}}}],["get('balance/:id",{"_index":118,"title":{},"body":{"controllers/AccountController.html":{}}}],["get('deleted",{"_index":1429,"title":{},"body":{"controllers/UserController.html":{}}}],["get('email/:email",{"_index":1435,"title":{},"body":{"controllers/UserController.html":{}}}],["get('logout",{"_index":1150,"title":{},"body":{"controllers/SecurityController.html":{}}}],["get('state/:id",{"_index":125,"title":{},"body":{"controllers/AccountController.html":{}}}],["get()@useguards(guardsguard",{"_index":114,"title":{},"body":{"controllers/AccountController.html":{}}}],["getaccountbycustomerid",{"_index":27,"title":{},"body":{"controllers/AccountController.html":{},"injectables/AccountService.html":{}}}],["getaccountbycustomerid(customerid",{"_index":411,"title":{},"body":{"injectables/AccountService.html":{}}}],["getaccountbycustomerid(id",{"_index":107,"title":{},"body":{"controllers/AccountController.html":{}}}],["getaccounttype",{"_index":389,"title":{},"body":{"injectables/AccountService.html":{}}}],["getaccounttype(accountid",{"_index":413,"title":{},"body":{"injectables/AccountService.html":{}}}],["getall",{"_index":28,"title":{},"body":{"controllers/AccountController.html":{},"controllers/DepositController.html":{}}}],["getall(body",{"_index":861,"title":{},"body":{"controllers/DepositController.html":{}}}],["getbalance",{"_index":29,"title":{},"body":{"controllers/AccountController.html":{},"injectables/AccountService.html":{}}}],["getbalance(@param('id",{"_index":157,"title":{},"body":{"controllers/AccountController.html":{}}}],["getbalance(accountid",{"_index":416,"title":{},"body":{"injectables/AccountService.html":{}}}],["getbalance(id",{"_index":117,"title":{},"body":{"controllers/AccountController.html":{}}}],["getbalanceall",{"_index":30,"title":{},"body":{"controllers/AccountController.html":{}}}],["getbalanceall(@param('id",{"_index":163,"title":{},"body":{"controllers/AccountController.html":{}}}],["getbalanceall(id",{"_index":120,"title":{},"body":{"controllers/AccountController.html":{}}}],["getcustomerinfo",{"_index":745,"title":{},"body":{"injectables/CustomerService.html":{}}}],["getcustomerinfo(customerid",{"_index":758,"title":{},"body":{"injectables/CustomerService.html":{}}}],["getcustomerinfobyemail",{"_index":746,"title":{},"body":{"injectables/CustomerService.html":{}}}],["getcustomerinfobyemail(email",{"_index":761,"title":{},"body":{"injectables/CustomerService.html":{}}}],["gethistory",{"_index":932,"title":{},"body":{"injectables/DepositService.html":{},"controllers/TransferController.html":{},"injectables/TransferService.html":{}}}],["gethistory(accountid",{"_index":939,"title":{},"body":{"injectables/DepositService.html":{},"injectables/TransferService.html":{}}}],["gethistory(body",{"_index":1227,"title":{},"body":{"controllers/TransferController.html":{}}}],["gethistoryin",{"_index":1218,"title":{},"body":{"controllers/TransferController.html":{},"injectables/TransferService.html":{}}}],["gethistoryin(accountid",{"_index":1336,"title":{},"body":{"injectables/TransferService.html":{}}}],["gethistoryin(body",{"_index":1230,"title":{},"body":{"controllers/TransferController.html":{}}}],["gethistoryout",{"_index":1219,"title":{},"body":{"controllers/TransferController.html":{},"injectables/TransferService.html":{}}}],["gethistoryout(accountid",{"_index":1338,"title":{},"body":{"injectables/TransferService.html":{}}}],["gethistoryout(body",{"_index":1235,"title":{},"body":{"controllers/TransferController.html":{}}}],["getstate",{"_index":31,"title":{},"body":{"controllers/AccountController.html":{},"injectables/AccountService.html":{}}}],["getstate(@param('id",{"_index":178,"title":{},"body":{"controllers/AccountController.html":{}}}],["getstate(accountid",{"_index":418,"title":{},"body":{"injectables/AccountService.html":{}}}],["getstate(id",{"_index":124,"title":{},"body":{"controllers/AccountController.html":{}}}],["getting",{"_index":1525,"title":{"index.html":{}},"body":{}}],["guard",{"_index":1026,"title":{"guards/GuardsGuard.html":{}},"body":{"guards/GuardsGuard.html":{},"coverage.html":{},"overview.html":{}}}],["guardan",{"_index":984,"title":{},"body":{"injectables/DocumentTypeRepository.html":{}}}],["guards",{"_index":1027,"title":{},"body":{"guards/GuardsGuard.html":{}}}],["guardsguard",{"_index":143,"title":{"guards/GuardsGuard.html":{}},"body":{"controllers/AccountController.html":{},"guards/GuardsGuard.html":{},"controllers/TransferController.html":{},"controllers/UserController.html":{},"coverage.html":{}}}],["guidelines",{"_index":1561,"title":{},"body":{"index.html":{}}}],["ha",{"_index":82,"title":{},"body":{"controllers/AccountController.html":{}}}],["han",{"_index":689,"title":{},"body":{"injectables/CustomerRepository.html":{}}}],["hard",{"_index":714,"title":{},"body":{"injectables/CustomerRepository.html":{},"injectables/DepositRepository.html":{}}}],["harddelete",{"_index":290,"title":{},"body":{"injectables/AccountRepository.html":{},"injectables/CustomerRepository.html":{},"injectables/DepositRepository.html":{},"injectables/TransferRepository.html":{}}}],["harddelete(id",{"_index":325,"title":{},"body":{"injectables/AccountRepository.html":{},"injectables/CustomerRepository.html":{},"injectables/DepositRepository.html":{},"injectables/TransferRepository.html":{}}}],["historial",{"_index":864,"title":{},"body":{"controllers/DepositController.html":{},"injectables/DepositService.html":{},"controllers/TransferController.html":{},"injectables/TransferService.html":{}}}],["hora",{"_index":236,"title":{},"body":{"entities/AccountEntity.html":{},"interfaces/AccountModel.html":{},"entities/CustomerEntity.html":{},"interfaces/CustomerModel.html":{},"entities/DepositEntity.html":{},"interfaces/DepositModel.html":{},"entities/TransferEntity.html":{},"interfaces/TransferModel.html":{}}}],["host",{"_index":566,"title":{},"body":{"modules/AppModule.html":{},"classes/ExceptionFiltersFilter.html":{},"classes/TypeOrmExceptionFilter.html":{},"injectables/TypesOrmPostgresConfigService.html":{}}}],["host.switchtohttp().getresponse",{"_index":1377,"title":{},"body":{"classes/TypeOrmExceptionFilter.html":{}}}],["http",{"_index":1102,"title":{},"body":{"injectables/MiddlewaresMiddleware.html":{}}}],["id",{"_index":50,"title":{},"body":{"controllers/AccountController.html":{},"entities/AccountEntity.html":{},"interfaces/AccountModel.html":{},"injectables/AccountRepository.html":{},"injectables/AccountService.html":{},"entities/AccountTypeEntity.html":{},"interfaces/AccountTypeModel.html":{},"injectables/AccountTypeRepository.html":{},"interfaces/BaseRepositoryInterface.html":{},"entities/CustomerEntity.html":{},"interfaces/CustomerModel.html":{},"injectables/CustomerRepository.html":{},"interfaces/CustomerRepositoryInterface.html":{},"injectables/CustomerService.html":{},"controllers/DepositController.html":{},"entities/DepositEntity.html":{},"interfaces/DepositModel.html":{},"injectables/DepositRepository.html":{},"interfaces/DepositRepositoryInterface.html":{},"injectables/DepositService.html":{},"entities/DocumentTypeEntity.html":{},"interfaces/DocumentTypeModel.html":{},"injectables/DocumentTypeRepository.html":{},"injectables/SecurityService.html":{},"controllers/TransferController.html":{},"entities/TransferEntity.html":{},"interfaces/TransferModel.html":{},"injectables/TransferRepository.html":{},"interfaces/TransferRepositoryInterface.html":{},"controllers/UserController.html":{},"miscellaneous/functions.html":{}}}],["identificación",{"_index":1197,"title":{},"body":{"injectables/SecurityService.html":{}}}],["identificador",{"_index":198,"title":{},"body":{"classes/AccountDTO.html":{},"entities/AccountEntity.html":{},"interfaces/AccountModel.html":{},"interfaces/AccountRepositoryInterface.html":{},"entities/AccountTypeEntity.html":{},"interfaces/AccountTypeModel.html":{},"interfaces/BaseRepositoryInterface.html":{},"classes/CustomerDTO.html":{},"entities/CustomerEntity.html":{},"interfaces/CustomerModel.html":{},"classes/DepositDTO.html":{},"entities/DepositEntity.html":{},"interfaces/DepositModel.html":{},"entities/DocumentTypeEntity.html":{},"interfaces/DocumentTypeModel.html":{},"classes/TransferDTO.html":{},"entities/TransferEntity.html":{},"interfaces/TransferModel.html":{},"miscellaneous/functions.html":{}}}],["identificarse",{"_index":1177,"title":{},"body":{"injectables/SecurityService.html":{}}}],["identifier",{"_index":1464,"title":{},"body":{"coverage.html":{}}}],["identify",{"_index":1564,"title":{},"body":{"index.html":{}}}],["implementar",{"_index":1123,"title":{},"body":{"interfaces/PaginationModel.html":{}}}],["implements",{"_index":253,"title":{},"body":{"entities/AccountEntity.html":{},"injectables/AccountRepository.html":{},"entities/AccountTypeEntity.html":{},"injectables/AccountTypeRepository.html":{},"modules/AppModule.html":{},"entities/CustomerEntity.html":{},"injectables/CustomerRepository.html":{},"entities/DepositEntity.html":{},"injectables/DepositRepository.html":{},"entities/DocumentTypeEntity.html":{},"injectables/DocumentTypeRepository.html":{},"classes/ExceptionFiltersFilter.html":{},"guards/GuardsGuard.html":{},"injectables/InterceptorsInterceptor.html":{},"injectables/MiddlewaresMiddleware.html":{},"injectables/PipesPipe.html":{},"entities/TransferEntity.html":{},"injectables/TransferRepository.html":{},"classes/TypeOrmExceptionFilter.html":{},"injectables/TypesOrmPostgresConfigService.html":{}}}],["import",{"_index":135,"title":{},"body":{"controllers/AccountController.html":{},"classes/AccountDTO.html":{},"entities/AccountEntity.html":{},"interfaces/AccountModel.html":{},"injectables/AccountRepository.html":{},"interfaces/AccountRepositoryInterface.html":{},"injectables/AccountService.html":{},"entities/AccountTypeEntity.html":{},"injectables/AccountTypeRepository.html":{},"interfaces/AccountTypeRepositoryInterface.html":{},"modules/AppModule.html":{},"classes/CustomerDTO.html":{},"entities/CustomerEntity.html":{},"interfaces/CustomerModel.html":{},"injectables/CustomerRepository.html":{},"interfaces/CustomerRepositoryInterface.html":{},"injectables/CustomerService.html":{},"classes/CustomerUpdateDTO.html":{},"classes/DataRangeDTO.html":{},"controllers/DepositController.html":{},"classes/DepositDTO.html":{},"entities/DepositEntity.html":{},"interfaces/DepositModel.html":{},"injectables/DepositRepository.html":{},"interfaces/DepositRepositoryInterface.html":{},"injectables/DepositService.html":{},"entities/DocumentTypeEntity.html":{},"injectables/DocumentTypeRepository.html":{},"interfaces/DocumentTypeRepositoryInterface.html":{},"classes/ExceptionFiltersFilter.html":{},"guards/GuardsGuard.html":{},"injectables/InterceptorsInterceptor.html":{},"injectables/MiddlewaresMiddleware.html":{},"classes/PaginationDTO.html":{},"injectables/PipesPipe.html":{},"controllers/SecurityController.html":{},"injectables/SecurityService.html":{},"classes/SignDTO.html":{},"controllers/TransferController.html":{},"classes/TransferDTO.html":{},"entities/TransferEntity.html":{},"interfaces/TransferModel.html":{},"injectables/TransferRepository.html":{},"interfaces/TransferRepositoryInterface.html":{},"injectables/TransferService.html":{},"classes/TypeOrmExceptionFilter.html":{},"injectables/TypesOrmPostgresConfigService.html":{},"controllers/UserController.html":{}}}],["important",{"_index":1577,"title":{},"body":{"index.html":{}}}],["imports",{"_index":559,"title":{},"body":{"modules/AppModule.html":{}}}],["inactivo",{"_index":971,"title":{},"body":{"interfaces/DocumentTypeModel.html":{}}}],["incluye",{"_index":1136,"title":{},"body":{"injectables/PipesPipe.html":{}}}],["incluyendo",{"_index":470,"title":{},"body":{"interfaces/AccountTypeModel.html":{}}}],["income",{"_index":1274,"title":{},"body":{"entities/TransferEntity.html":{},"interfaces/TransferModel.html":{},"injectables/TransferRepository.html":{},"injectables/TransferService.html":{}}}],["income.balance",{"_index":1354,"title":{},"body":{"injectables/TransferService.html":{}}}],["incomeid",{"_index":1260,"title":{},"body":{"classes/TransferDTO.html":{}}}],["index",{"_index":18,"title":{"index.html":{}},"body":{"controllers/AccountController.html":{},"classes/AccountDTO.html":{},"entities/AccountEntity.html":{},"interfaces/AccountModel.html":{},"injectables/AccountRepository.html":{},"interfaces/AccountRepositoryInterface.html":{},"injectables/AccountService.html":{},"entities/AccountTypeEntity.html":{},"interfaces/AccountTypeModel.html":{},"injectables/AccountTypeRepository.html":{},"interfaces/AccountTypeRepositoryInterface.html":{},"interfaces/BaseRepositoryInterface.html":{},"classes/CustomerDTO.html":{},"entities/CustomerEntity.html":{},"interfaces/CustomerModel.html":{},"injectables/CustomerRepository.html":{},"interfaces/CustomerRepositoryInterface.html":{},"injectables/CustomerService.html":{},"classes/CustomerUpdateDTO.html":{},"classes/DataRangeDTO.html":{},"interfaces/DataRangeModel.html":{},"controllers/DepositController.html":{},"classes/DepositDTO.html":{},"entities/DepositEntity.html":{},"interfaces/DepositModel.html":{},"injectables/DepositRepository.html":{},"interfaces/DepositRepositoryInterface.html":{},"injectables/DepositService.html":{},"entities/DocumentTypeEntity.html":{},"interfaces/DocumentTypeModel.html":{},"injectables/DocumentTypeRepository.html":{},"interfaces/DocumentTypeRepositoryInterface.html":{},"classes/ExceptionFiltersFilter.html":{},"guards/GuardsGuard.html":{},"injectables/InterceptorsInterceptor.html":{},"injectables/MiddlewaresMiddleware.html":{},"classes/PaginationDTO.html":{},"interfaces/PaginationModel.html":{},"injectables/PipesPipe.html":{},"controllers/SecurityController.html":{},"injectables/SecurityService.html":{},"classes/SignDTO.html":{},"controllers/TransferController.html":{},"classes/TransferDTO.html":{},"entities/TransferEntity.html":{},"interfaces/TransferModel.html":{},"injectables/TransferRepository.html":{},"interfaces/TransferRepositoryInterface.html":{},"injectables/TransferService.html":{},"classes/TypeOrmExceptionFilter.html":{},"injectables/TypesOrmPostgresConfigService.html":{},"controllers/UserController.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["indica",{"_index":302,"title":{},"body":{"injectables/AccountRepository.html":{},"injectables/CustomerRepository.html":{},"injectables/DepositRepository.html":{},"controllers/SecurityController.html":{},"injectables/TransferRepository.html":{}}}],["indicador",{"_index":591,"title":{},"body":{"interfaces/BaseRepositoryInterface.html":{}}}],["indicando",{"_index":75,"title":{},"body":{"controllers/AccountController.html":{},"injectables/CustomerRepository.html":{},"interfaces/CustomerRepositoryInterface.html":{},"guards/GuardsGuard.html":{},"controllers/UserController.html":{}}}],["info",{"_index":3,"title":{},"body":{"controllers/AccountController.html":{},"classes/AccountDTO.html":{},"entities/AccountEntity.html":{},"interfaces/AccountModel.html":{},"injectables/AccountRepository.html":{},"interfaces/AccountRepositoryInterface.html":{},"injectables/AccountService.html":{},"entities/AccountTypeEntity.html":{},"interfaces/AccountTypeModel.html":{},"injectables/AccountTypeRepository.html":{},"interfaces/AccountTypeRepositoryInterface.html":{},"modules/AppModule.html":{},"interfaces/BaseRepositoryInterface.html":{},"classes/CustomerDTO.html":{},"entities/CustomerEntity.html":{},"interfaces/CustomerModel.html":{},"injectables/CustomerRepository.html":{},"interfaces/CustomerRepositoryInterface.html":{},"injectables/CustomerService.html":{},"classes/CustomerUpdateDTO.html":{},"classes/DataRangeDTO.html":{},"interfaces/DataRangeModel.html":{},"controllers/DepositController.html":{},"classes/DepositDTO.html":{},"entities/DepositEntity.html":{},"interfaces/DepositModel.html":{},"injectables/DepositRepository.html":{},"interfaces/DepositRepositoryInterface.html":{},"injectables/DepositService.html":{},"entities/DocumentTypeEntity.html":{},"interfaces/DocumentTypeModel.html":{},"injectables/DocumentTypeRepository.html":{},"interfaces/DocumentTypeRepositoryInterface.html":{},"classes/ExceptionFiltersFilter.html":{},"guards/GuardsGuard.html":{},"injectables/InterceptorsInterceptor.html":{},"injectables/MiddlewaresMiddleware.html":{},"classes/PaginationDTO.html":{},"interfaces/PaginationModel.html":{},"injectables/PipesPipe.html":{},"controllers/SecurityController.html":{},"injectables/SecurityService.html":{},"classes/SignDTO.html":{},"controllers/TransferController.html":{},"classes/TransferDTO.html":{},"entities/TransferEntity.html":{},"interfaces/TransferModel.html":{},"injectables/TransferRepository.html":{},"interfaces/TransferRepositoryInterface.html":{},"injectables/TransferService.html":{},"classes/TypeOrmExceptionFilter.html":{},"injectables/TypesOrmPostgresConfigService.html":{},"controllers/UserController.html":{}}}],["información",{"_index":760,"title":{},"body":{"injectables/CustomerService.html":{},"classes/CustomerUpdateDTO.html":{},"controllers/SecurityController.html":{}}}],["information",{"_index":1574,"title":{},"body":{"index.html":{}}}],["ingreso",{"_index":1234,"title":{},"body":{"controllers/TransferController.html":{}}}],["ingresos",{"_index":1233,"title":{},"body":{"controllers/TransferController.html":{}}}],["inicia",{"_index":1159,"title":{},"body":{"controllers/SecurityController.html":{}}}],["inicial",{"_index":1322,"title":{},"body":{"interfaces/TransferRepositoryInterface.html":{}}}],["inicializar",{"_index":495,"title":{},"body":{"injectables/AccountTypeRepository.html":{},"injectables/DocumentTypeRepository.html":{}}}],["inicio",{"_index":836,"title":{},"body":{"classes/DataRangeDTO.html":{},"interfaces/DataRangeModel.html":{},"injectables/DepositRepository.html":{},"interfaces/DepositRepositoryInterface.html":{},"controllers/SecurityController.html":{},"classes/SignDTO.html":{},"injectables/TransferRepository.html":{},"miscellaneous/functions.html":{}}}],["injectable",{"_index":280,"title":{"injectables/AccountRepository.html":{},"injectables/AccountService.html":{},"injectables/AccountTypeRepository.html":{},"injectables/CustomerRepository.html":{},"injectables/CustomerService.html":{},"injectables/DepositRepository.html":{},"injectables/DepositService.html":{},"injectables/DocumentTypeRepository.html":{},"injectables/InterceptorsInterceptor.html":{},"injectables/MiddlewaresMiddleware.html":{},"injectables/PipesPipe.html":{},"injectables/SecurityService.html":{},"injectables/TransferRepository.html":{},"injectables/TransferService.html":{},"injectables/TypesOrmPostgresConfigService.html":{}},"body":{"injectables/AccountRepository.html":{},"injectables/AccountService.html":{},"injectables/AccountTypeRepository.html":{},"injectables/CustomerRepository.html":{},"injectables/CustomerService.html":{},"injectables/DepositRepository.html":{},"injectables/DepositService.html":{},"injectables/DocumentTypeRepository.html":{},"guards/GuardsGuard.html":{},"injectables/InterceptorsInterceptor.html":{},"injectables/MiddlewaresMiddleware.html":{},"injectables/PipesPipe.html":{},"injectables/SecurityService.html":{},"injectables/TransferRepository.html":{},"injectables/TransferService.html":{},"injectables/TypesOrmPostgresConfigService.html":{},"coverage.html":{}}}],["injectables",{"_index":282,"title":{},"body":{"injectables/AccountRepository.html":{},"injectables/AccountService.html":{},"injectables/AccountTypeRepository.html":{},"injectables/CustomerRepository.html":{},"injectables/CustomerService.html":{},"injectables/DepositRepository.html":{},"injectables/DepositService.html":{},"injectables/DocumentTypeRepository.html":{},"injectables/InterceptorsInterceptor.html":{},"injectables/MiddlewaresMiddleware.html":{},"injectables/PipesPipe.html":{},"injectables/SecurityService.html":{},"injectables/TransferRepository.html":{},"injectables/TransferService.html":{},"injectables/TypesOrmPostgresConfigService.html":{},"overview.html":{}}}],["injectrepository",{"_index":342,"title":{},"body":{"injectables/AccountRepository.html":{},"injectables/AccountTypeRepository.html":{},"injectables/CustomerRepository.html":{},"injectables/DepositRepository.html":{},"injectables/DocumentTypeRepository.html":{},"injectables/TransferRepository.html":{}}}],["injectrepository(accountentity",{"_index":345,"title":{},"body":{"injectables/AccountRepository.html":{}}}],["injectrepository(accounttypeentity",{"_index":491,"title":{},"body":{"injectables/AccountTypeRepository.html":{}}}],["injectrepository(customerentity",{"_index":719,"title":{},"body":{"injectables/CustomerRepository.html":{}}}],["injectrepository(depositentity",{"_index":917,"title":{},"body":{"injectables/DepositRepository.html":{}}}],["injectrepository(documenttypeentity",{"_index":983,"title":{},"body":{"injectables/DocumentTypeRepository.html":{}}}],["injectrepository(transferentity",{"_index":1309,"title":{},"body":{"injectables/TransferRepository.html":{}}}],["installation",{"_index":1538,"title":{},"body":{"index.html":{}}}],["installrunning",{"_index":1541,"title":{},"body":{"index.html":{}}}],["insuficientes",{"_index":1360,"title":{},"body":{"injectables/TransferService.html":{}}}],["intercept",{"_index":1066,"title":{},"body":{"injectables/InterceptorsInterceptor.html":{}}}],["intercept(context",{"_index":1067,"title":{},"body":{"injectables/InterceptorsInterceptor.html":{}}}],["intercepta",{"_index":1071,"title":{},"body":{"injectables/InterceptorsInterceptor.html":{}}}],["interceptor",{"_index":1062,"title":{},"body":{"injectables/InterceptorsInterceptor.html":{}}}],["interceptorsinterceptor",{"_index":1060,"title":{"injectables/InterceptorsInterceptor.html":{}},"body":{"injectables/InterceptorsInterceptor.html":{},"coverage.html":{}}}],["interface",{"_index":265,"title":{"interfaces/AccountModel.html":{},"interfaces/AccountRepositoryInterface.html":{},"interfaces/AccountTypeModel.html":{},"interfaces/AccountTypeRepositoryInterface.html":{},"interfaces/BaseRepositoryInterface.html":{},"interfaces/CustomerModel.html":{},"interfaces/CustomerRepositoryInterface.html":{},"interfaces/DataRangeModel.html":{},"interfaces/DepositModel.html":{},"interfaces/DepositRepositoryInterface.html":{},"interfaces/DocumentTypeModel.html":{},"interfaces/DocumentTypeRepositoryInterface.html":{},"interfaces/PaginationModel.html":{},"interfaces/TransferModel.html":{},"interfaces/TransferRepositoryInterface.html":{}},"body":{"interfaces/AccountModel.html":{},"interfaces/AccountRepositoryInterface.html":{},"interfaces/AccountTypeModel.html":{},"interfaces/AccountTypeRepositoryInterface.html":{},"interfaces/BaseRepositoryInterface.html":{},"interfaces/CustomerModel.html":{},"interfaces/CustomerRepositoryInterface.html":{},"interfaces/DataRangeModel.html":{},"interfaces/DepositModel.html":{},"interfaces/DepositRepositoryInterface.html":{},"interfaces/DocumentTypeModel.html":{},"interfaces/DocumentTypeRepositoryInterface.html":{},"interfaces/PaginationModel.html":{},"interfaces/TransferModel.html":{},"interfaces/TransferRepositoryInterface.html":{},"coverage.html":{}}}],["interfaces",{"_index":266,"title":{},"body":{"interfaces/AccountModel.html":{},"injectables/AccountRepository.html":{},"interfaces/AccountRepositoryInterface.html":{},"interfaces/AccountTypeModel.html":{},"injectables/AccountTypeRepository.html":{},"interfaces/AccountTypeRepositoryInterface.html":{},"interfaces/BaseRepositoryInterface.html":{},"interfaces/CustomerModel.html":{},"injectables/CustomerRepository.html":{},"interfaces/CustomerRepositoryInterface.html":{},"interfaces/DataRangeModel.html":{},"interfaces/DepositModel.html":{},"injectables/DepositRepository.html":{},"interfaces/DepositRepositoryInterface.html":{},"interfaces/DocumentTypeModel.html":{},"injectables/DocumentTypeRepository.html":{},"interfaces/DocumentTypeRepositoryInterface.html":{},"interfaces/PaginationModel.html":{},"interfaces/TransferModel.html":{},"injectables/TransferRepository.html":{},"interfaces/TransferRepositoryInterface.html":{},"overview.html":{}}}],["interfaz",{"_index":268,"title":{},"body":{"interfaces/AccountModel.html":{},"injectables/AccountRepository.html":{},"interfaces/AccountRepositoryInterface.html":{},"interfaces/AccountTypeModel.html":{},"injectables/AccountTypeRepository.html":{},"interfaces/AccountTypeRepositoryInterface.html":{},"interfaces/BaseRepositoryInterface.html":{},"interfaces/CustomerModel.html":{},"interfaces/CustomerRepositoryInterface.html":{},"interfaces/DataRangeModel.html":{},"interfaces/DepositModel.html":{},"interfaces/DepositRepositoryInterface.html":{},"interfaces/DocumentTypeModel.html":{},"interfaces/DocumentTypeRepositoryInterface.html":{},"interfaces/PaginationModel.html":{},"interfaces/TransferModel.html":{},"interfaces/TransferRepositoryInterface.html":{}}}],["internal",{"_index":1389,"title":{},"body":{"classes/TypeOrmExceptionFilter.html":{}}}],["internalservererrorexception",{"_index":1184,"title":{},"body":{"injectables/SecurityService.html":{}}}],["inválidos",{"_index":1198,"title":{},"body":{"injectables/SecurityService.html":{}}}],["isboolean",{"_index":201,"title":{},"body":{"classes/AccountDTO.html":{}}}],["isdatestring",{"_index":202,"title":{},"body":{"classes/AccountDTO.html":{},"classes/DataRangeDTO.html":{}}}],["isemail",{"_index":612,"title":{},"body":{"classes/CustomerDTO.html":{},"classes/CustomerUpdateDTO.html":{}}}],["isnumberstring",{"_index":203,"title":{},"body":{"classes/AccountDTO.html":{},"classes/CustomerDTO.html":{},"classes/CustomerUpdateDTO.html":{},"classes/DataRangeDTO.html":{},"classes/DepositDTO.html":{},"classes/PaginationDTO.html":{},"classes/TransferDTO.html":{}}}],["isnumberstring()@maxlength(30",{"_index":632,"title":{},"body":{"classes/CustomerDTO.html":{},"classes/CustomerUpdateDTO.html":{}}}],["isstring",{"_index":635,"title":{},"body":{"classes/CustomerDTO.html":{},"classes/CustomerUpdateDTO.html":{},"classes/SignDTO.html":{},"classes/TransferDTO.html":{}}}],["isstring()@maxlength(500",{"_index":616,"title":{},"body":{"classes/CustomerDTO.html":{},"classes/CustomerUpdateDTO.html":{},"classes/TransferDTO.html":{}}}],["isuuid",{"_index":196,"title":{},"body":{"classes/AccountDTO.html":{},"classes/CustomerDTO.html":{},"classes/CustomerUpdateDTO.html":{}}}],["item",{"_index":782,"title":{},"body":{"injectables/CustomerService.html":{},"injectables/DepositService.html":{},"injectables/TransferService.html":{}}}],["item.account.id",{"_index":959,"title":{},"body":{"injectables/DepositService.html":{}}}],["item.amount",{"_index":960,"title":{},"body":{"injectables/DepositService.html":{},"injectables/TransferService.html":{}}}],["item.deletedat",{"_index":783,"title":{},"body":{"injectables/CustomerService.html":{}}}],["item.income.id",{"_index":1366,"title":{},"body":{"injectables/TransferService.html":{}}}],["item.outcome.id",{"_index":1363,"title":{},"body":{"injectables/TransferService.html":{}}}],["joincolumn",{"_index":248,"title":{},"body":{"entities/AccountEntity.html":{},"entities/CustomerEntity.html":{},"entities/DepositEntity.html":{},"entities/TransferEntity.html":{}}}],["jwt",{"_index":1032,"title":{},"body":{"guards/GuardsGuard.html":{},"controllers/SecurityController.html":{},"injectables/SecurityService.html":{},"dependencies.html":{},"miscellaneous/variables.html":{}}}],["jwt_secret",{"_index":1609,"title":{},"body":{"miscellaneous/variables.html":{}}}],["jwtconstants",{"_index":548,"title":{},"body":{"modules/AppModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["jwtconstants.secret",{"_index":563,"title":{},"body":{"modules/AppModule.html":{}}}],["jwtmodule",{"_index":545,"title":{},"body":{"modules/AppModule.html":{}}}],["jwtmodule.register",{"_index":561,"title":{},"body":{"modules/AppModule.html":{}}}],["jwtoken",{"_index":1209,"title":{},"body":{"injectables/SecurityService.html":{}}}],["jwtservice",{"_index":1035,"title":{},"body":{"guards/GuardsGuard.html":{},"injectables/SecurityService.html":{}}}],["la",{"_index":53,"title":{},"body":{"controllers/AccountController.html":{},"entities/AccountEntity.html":{},"interfaces/AccountModel.html":{},"injectables/AccountRepository.html":{},"interfaces/AccountRepositoryInterface.html":{},"injectables/AccountService.html":{},"interfaces/AccountTypeModel.html":{},"injectables/AccountTypeRepository.html":{},"interfaces/AccountTypeRepositoryInterface.html":{},"interfaces/BaseRepositoryInterface.html":{},"entities/CustomerEntity.html":{},"interfaces/CustomerModel.html":{},"injectables/CustomerRepository.html":{},"interfaces/CustomerRepositoryInterface.html":{},"injectables/CustomerService.html":{},"interfaces/DataRangeModel.html":{},"controllers/DepositController.html":{},"classes/DepositDTO.html":{},"entities/DepositEntity.html":{},"interfaces/DepositModel.html":{},"injectables/DepositRepository.html":{},"interfaces/DepositRepositoryInterface.html":{},"injectables/DepositService.html":{},"interfaces/DocumentTypeModel.html":{},"injectables/DocumentTypeRepository.html":{},"interfaces/DocumentTypeRepositoryInterface.html":{},"classes/ExceptionFiltersFilter.html":{},"guards/GuardsGuard.html":{},"injectables/InterceptorsInterceptor.html":{},"injectables/MiddlewaresMiddleware.html":{},"classes/PaginationDTO.html":{},"interfaces/PaginationModel.html":{},"injectables/PipesPipe.html":{},"controllers/SecurityController.html":{},"controllers/TransferController.html":{},"classes/TransferDTO.html":{},"entities/TransferEntity.html":{},"interfaces/TransferModel.html":{},"injectables/TransferRepository.html":{},"interfaces/TransferRepositoryInterface.html":{},"classes/TypeOrmExceptionFilter.html":{},"injectables/TypesOrmPostgresConfigService.html":{},"controllers/UserController.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["lanza",{"_index":700,"title":{},"body":{"injectables/CustomerRepository.html":{}}}],["las",{"_index":13,"title":{},"body":{"controllers/AccountController.html":{},"injectables/AccountRepository.html":{},"interfaces/AccountRepositoryInterface.html":{},"interfaces/AccountTypeModel.html":{},"interfaces/BaseRepositoryInterface.html":{},"injectables/CustomerRepository.html":{},"controllers/DepositController.html":{},"injectables/MiddlewaresMiddleware.html":{},"controllers/SecurityController.html":{},"controllers/TransferController.html":{},"injectables/TransferRepository.html":{},"interfaces/TransferRepositoryInterface.html":{},"injectables/TypesOrmPostgresConfigService.html":{},"controllers/UserController.html":{}}}],["legend",{"_index":514,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["length",{"_index":459,"title":{},"body":{"entities/AccountTypeEntity.html":{},"entities/CustomerEntity.html":{},"entities/DocumentTypeEntity.html":{},"classes/PaginationDTO.html":{},"interfaces/PaginationModel.html":{},"entities/TransferEntity.html":{}}}],["letra",{"_index":625,"title":{},"body":{"classes/CustomerDTO.html":{},"classes/CustomerUpdateDTO.html":{}}}],["license",{"_index":1596,"title":{},"body":{"properties.html":{}}}],["link",{"_index":1572,"title":{},"body":{"index.html":{}}}],["lista",{"_index":691,"title":{},"body":{"injectables/CustomerRepository.html":{},"injectables/CustomerService.html":{},"injectables/DepositService.html":{},"interfaces/PaginationModel.html":{},"controllers/TransferController.html":{},"controllers/UserController.html":{}}}],["literal",{"_index":36,"title":{},"body":{"controllers/AccountController.html":{},"controllers/DepositController.html":{},"controllers/SecurityController.html":{},"controllers/TransferController.html":{}}}],["llama",{"_index":1104,"title":{},"body":{"injectables/MiddlewaresMiddleware.html":{}}}],["llamada",{"_index":1078,"title":{},"body":{"injectables/InterceptorsInterceptor.html":{}}}],["llega",{"_index":1282,"title":{},"body":{"entities/TransferEntity.html":{}}}],["lo",{"_index":698,"title":{},"body":{"injectables/CustomerRepository.html":{},"injectables/CustomerService.html":{},"miscellaneous/variables.html":{}}}],["logging",{"_index":1415,"title":{},"body":{"injectables/TypesOrmPostgresConfigService.html":{}}}],["logout",{"_index":1146,"title":{},"body":{"controllers/SecurityController.html":{}}}],["logout(@body",{"_index":1170,"title":{},"body":{"controllers/SecurityController.html":{}}}],["logout(body",{"_index":1149,"title":{},"body":{"controllers/SecurityController.html":{}}}],["longitud",{"_index":1116,"title":{},"body":{"classes/PaginationDTO.html":{},"interfaces/PaginationModel.html":{}}}],["los",{"_index":95,"title":{},"body":{"controllers/AccountController.html":{},"interfaces/AccountModel.html":{},"injectables/AccountTypeRepository.html":{},"interfaces/AccountTypeRepositoryInterface.html":{},"interfaces/BaseRepositoryInterface.html":{},"interfaces/CustomerModel.html":{},"injectables/CustomerRepository.html":{},"interfaces/CustomerRepositoryInterface.html":{},"injectables/CustomerService.html":{},"controllers/DepositController.html":{},"interfaces/DepositModel.html":{},"injectables/DepositRepository.html":{},"interfaces/DepositRepositoryInterface.html":{},"interfaces/DocumentTypeModel.html":{},"injectables/DocumentTypeRepository.html":{},"interfaces/DocumentTypeRepositoryInterface.html":{},"classes/ExceptionFiltersFilter.html":{},"injectables/MiddlewaresMiddleware.html":{},"classes/PaginationDTO.html":{},"interfaces/PaginationModel.html":{},"controllers/SecurityController.html":{},"classes/SignDTO.html":{},"controllers/TransferController.html":{},"interfaces/TransferModel.html":{},"injectables/TransferRepository.html":{},"classes/TypeOrmExceptionFilter.html":{},"controllers/UserController.html":{}}}],["lógica",{"_index":1063,"title":{},"body":{"injectables/InterceptorsInterceptor.html":{}}}],["lógico",{"_index":308,"title":{},"body":{"injectables/AccountRepository.html":{}}}],["make",{"_index":1580,"title":{},"body":{"index.html":{}}}],["manejador",{"_index":1077,"title":{},"body":{"injectables/InterceptorsInterceptor.html":{}}}],["manejan",{"_index":586,"title":{},"body":{"interfaces/BaseRepositoryInterface.html":{}}}],["manejar",{"_index":1019,"title":{},"body":{"classes/ExceptionFiltersFilter.html":{},"injectables/InterceptorsInterceptor.html":{},"classes/TypeOrmExceptionFilter.html":{}}}],["manejo",{"_index":1076,"title":{},"body":{"injectables/InterceptorsInterceptor.html":{}}}],["manipula",{"_index":1099,"title":{},"body":{"injectables/MiddlewaresMiddleware.html":{}}}],["manipular",{"_index":1090,"title":{},"body":{"injectables/MiddlewaresMiddleware.html":{}}}],["manytoone",{"_index":249,"title":{},"body":{"entities/AccountEntity.html":{},"entities/CustomerEntity.html":{},"entities/DepositEntity.html":{},"entities/TransferEntity.html":{}}}],["manytoone(undefined",{"_index":657,"title":{},"body":{"entities/CustomerEntity.html":{}}}],["manytoone(undefined)@joincolumn",{"_index":215,"title":{},"body":{"entities/AccountEntity.html":{},"entities/DepositEntity.html":{},"entities/TransferEntity.html":{}}}],["mapa",{"_index":810,"title":{},"body":{"injectables/CustomerService.html":{}}}],["mapa.deletedat",{"_index":811,"title":{},"body":{"injectables/CustomerService.html":{}}}],["matches",{"_index":636,"title":{},"body":{"classes/CustomerDTO.html":{},"classes/CustomerUpdateDTO.html":{}}}],["matches(new",{"_index":619,"title":{},"body":{"classes/CustomerDTO.html":{},"classes/CustomerUpdateDTO.html":{}}}],["matching",{"_index":187,"title":{},"body":{"controllers/AccountController.html":{},"classes/AccountDTO.html":{},"entities/AccountEntity.html":{},"interfaces/AccountModel.html":{},"injectables/AccountRepository.html":{},"interfaces/AccountRepositoryInterface.html":{},"injectables/AccountService.html":{},"entities/AccountTypeEntity.html":{},"interfaces/AccountTypeModel.html":{},"injectables/AccountTypeRepository.html":{},"interfaces/AccountTypeRepositoryInterface.html":{},"modules/AppModule.html":{},"interfaces/BaseRepositoryInterface.html":{},"classes/CustomerDTO.html":{},"entities/CustomerEntity.html":{},"interfaces/CustomerModel.html":{},"injectables/CustomerRepository.html":{},"interfaces/CustomerRepositoryInterface.html":{},"injectables/CustomerService.html":{},"classes/CustomerUpdateDTO.html":{},"classes/DataRangeDTO.html":{},"interfaces/DataRangeModel.html":{},"controllers/DepositController.html":{},"classes/DepositDTO.html":{},"entities/DepositEntity.html":{},"interfaces/DepositModel.html":{},"injectables/DepositRepository.html":{},"interfaces/DepositRepositoryInterface.html":{},"injectables/DepositService.html":{},"entities/DocumentTypeEntity.html":{},"interfaces/DocumentTypeModel.html":{},"injectables/DocumentTypeRepository.html":{},"interfaces/DocumentTypeRepositoryInterface.html":{},"classes/ExceptionFiltersFilter.html":{},"guards/GuardsGuard.html":{},"injectables/InterceptorsInterceptor.html":{},"injectables/MiddlewaresMiddleware.html":{},"classes/PaginationDTO.html":{},"interfaces/PaginationModel.html":{},"injectables/PipesPipe.html":{},"controllers/SecurityController.html":{},"injectables/SecurityService.html":{},"classes/SignDTO.html":{},"controllers/TransferController.html":{},"classes/TransferDTO.html":{},"entities/TransferEntity.html":{},"interfaces/TransferModel.html":{},"injectables/TransferRepository.html":{},"interfaces/TransferRepositoryInterface.html":{},"injectables/TransferService.html":{},"classes/TypeOrmExceptionFilter.html":{},"injectables/TypesOrmPostgresConfigService.html":{},"controllers/UserController.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/variables.html":{}}}],["math.floor(math.random",{"_index":263,"title":{},"body":{"entities/AccountEntity.html":{}}}],["maxlength",{"_index":637,"title":{},"body":{"classes/CustomerDTO.html":{},"classes/CustomerUpdateDTO.html":{},"classes/TransferDTO.html":{}}}],["maxlength(30",{"_index":640,"title":{},"body":{"classes/CustomerDTO.html":{},"classes/CustomerUpdateDTO.html":{}}}],["maxlength(500",{"_index":639,"title":{},"body":{"classes/CustomerDTO.html":{},"classes/CustomerUpdateDTO.html":{},"classes/TransferDTO.html":{}}}],["mayúscula",{"_index":626,"title":{},"body":{"classes/CustomerDTO.html":{},"classes/CustomerUpdateDTO.html":{}}}],["memberof",{"_index":205,"title":{},"body":{"classes/AccountDTO.html":{},"entities/AccountEntity.html":{},"injectables/AccountRepository.html":{},"interfaces/AccountRepositoryInterface.html":{},"injectables/AccountService.html":{},"entities/AccountTypeEntity.html":{},"injectables/AccountTypeRepository.html":{},"interfaces/AccountTypeRepositoryInterface.html":{},"interfaces/BaseRepositoryInterface.html":{},"classes/CustomerDTO.html":{},"entities/CustomerEntity.html":{},"interfaces/CustomerRepositoryInterface.html":{},"injectables/CustomerService.html":{},"classes/CustomerUpdateDTO.html":{},"classes/DataRangeDTO.html":{},"classes/DepositDTO.html":{},"entities/DepositEntity.html":{},"interfaces/DepositRepositoryInterface.html":{},"injectables/DepositService.html":{},"entities/DocumentTypeEntity.html":{},"interfaces/DocumentTypeRepositoryInterface.html":{},"classes/ExceptionFiltersFilter.html":{},"classes/PaginationDTO.html":{},"injectables/SecurityService.html":{},"classes/SignDTO.html":{},"classes/TransferDTO.html":{},"entities/TransferEntity.html":{},"interfaces/TransferRepositoryInterface.html":{},"injectables/TransferService.html":{},"injectables/TypesOrmPostgresConfigService.html":{}}}],["menos",{"_index":624,"title":{},"body":{"classes/CustomerDTO.html":{},"classes/CustomerUpdateDTO.html":{}}}],["message",{"_index":1378,"title":{},"body":{"classes/TypeOrmExceptionFilter.html":{},"index.html":{}}}],["metadata",{"_index":1131,"title":{},"body":{"injectables/PipesPipe.html":{},"dependencies.html":{}}}],["metadatos",{"_index":1605,"title":{},"body":{"miscellaneous/variables.html":{}}}],["methods",{"_index":19,"title":{},"body":{"controllers/AccountController.html":{},"injectables/AccountRepository.html":{},"interfaces/AccountRepositoryInterface.html":{},"injectables/AccountService.html":{},"injectables/AccountTypeRepository.html":{},"interfaces/AccountTypeRepositoryInterface.html":{},"modules/AppModule.html":{},"interfaces/BaseRepositoryInterface.html":{},"injectables/CustomerRepository.html":{},"interfaces/CustomerRepositoryInterface.html":{},"injectables/CustomerService.html":{},"controllers/DepositController.html":{},"injectables/DepositRepository.html":{},"interfaces/DepositRepositoryInterface.html":{},"injectables/DepositService.html":{},"injectables/DocumentTypeRepository.html":{},"interfaces/DocumentTypeRepositoryInterface.html":{},"classes/ExceptionFiltersFilter.html":{},"guards/GuardsGuard.html":{},"injectables/InterceptorsInterceptor.html":{},"injectables/MiddlewaresMiddleware.html":{},"injectables/PipesPipe.html":{},"controllers/SecurityController.html":{},"injectables/SecurityService.html":{},"controllers/TransferController.html":{},"injectables/TransferRepository.html":{},"interfaces/TransferRepositoryInterface.html":{},"injectables/TransferService.html":{},"classes/TypeOrmExceptionFilter.html":{},"injectables/TypesOrmPostgresConfigService.html":{},"controllers/UserController.html":{}}}],["middleware",{"_index":1087,"title":{},"body":{"injectables/MiddlewaresMiddleware.html":{}}}],["middlewareconsumer",{"_index":537,"title":{},"body":{"modules/AppModule.html":{}}}],["middlewaresmiddleware",{"_index":557,"title":{"injectables/MiddlewaresMiddleware.html":{}},"body":{"modules/AppModule.html":{},"injectables/MiddlewaresMiddleware.html":{},"coverage.html":{}}}],["minlength",{"_index":638,"title":{},"body":{"classes/CustomerDTO.html":{},"classes/CustomerUpdateDTO.html":{}}}],["minlength(8",{"_index":645,"title":{},"body":{"classes/CustomerDTO.html":{},"classes/CustomerUpdateDTO.html":{}}}],["minúscula",{"_index":627,"title":{},"body":{"classes/CustomerDTO.html":{},"classes/CustomerUpdateDTO.html":{}}}],["miscellaneous",{"_index":1520,"title":{"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}},"body":{"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["missing",{"_index":1565,"title":{},"body":{"index.html":{}}}],["mode",{"_index":1547,"title":{},"body":{"index.html":{}}}],["modelo",{"_index":271,"title":{},"body":{"interfaces/AccountModel.html":{},"interfaces/AccountTypeModel.html":{},"interfaces/CustomerModel.html":{},"interfaces/DataRangeModel.html":{},"interfaces/DepositModel.html":{},"interfaces/DocumentTypeModel.html":{},"interfaces/PaginationModel.html":{},"interfaces/TransferModel.html":{}}}],["models",{"_index":252,"title":{},"body":{"entities/AccountEntity.html":{},"entities/AccountTypeEntity.html":{},"entities/CustomerEntity.html":{},"entities/DepositEntity.html":{},"entities/DocumentTypeEntity.html":{},"entities/TransferEntity.html":{}}}],["module",{"_index":510,"title":{"modules/AppModule.html":{}},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["modules",{"_index":512,"title":{"modules.html":{}},"body":{"modules/AppModule.html":{},"modules.html":{}}}],["monto",{"_index":58,"title":{},"body":{"controllers/AccountController.html":{},"injectables/AccountService.html":{},"classes/DepositDTO.html":{},"entities/DepositEntity.html":{},"interfaces/DepositModel.html":{},"classes/TransferDTO.html":{},"entities/TransferEntity.html":{},"interfaces/TransferModel.html":{}}}],["montos",{"_index":942,"title":{},"body":{"injectables/DepositService.html":{}}}],["motivo",{"_index":1270,"title":{},"body":{"classes/TransferDTO.html":{},"entities/TransferEntity.html":{},"interfaces/TransferModel.html":{}}}],["máxima",{"_index":847,"title":{},"body":{"interfaces/DataRangeModel.html":{}}}],["máximo",{"_index":816,"title":{},"body":{"classes/CustomerUpdateDTO.html":{},"classes/TransferDTO.html":{}}}],["método",{"_index":1018,"title":{},"body":{"classes/ExceptionFiltersFilter.html":{},"guards/GuardsGuard.html":{},"injectables/MiddlewaresMiddleware.html":{},"injectables/PipesPipe.html":{},"classes/TypeOrmExceptionFilter.html":{},"injectables/TypesOrmPostgresConfigService.html":{},"miscellaneous/variables.html":{}}}],["métodos",{"_index":374,"title":{},"body":{"interfaces/AccountRepositoryInterface.html":{},"interfaces/AccountTypeRepositoryInterface.html":{},"interfaces/BaseRepositoryInterface.html":{},"interfaces/CustomerRepositoryInterface.html":{},"injectables/DepositRepository.html":{},"interfaces/DepositRepositoryInterface.html":{},"interfaces/DocumentTypeRepositoryInterface.html":{},"interfaces/TransferRepositoryInterface.html":{}}}],["mínima",{"_index":848,"title":{},"body":{"interfaces/DataRangeModel.html":{}}}],["mínimo",{"_index":629,"title":{},"body":{"classes/CustomerDTO.html":{},"classes/CustomerUpdateDTO.html":{}}}],["name",{"_index":48,"title":{},"body":{"controllers/AccountController.html":{},"entities/AccountEntity.html":{},"injectables/AccountRepository.html":{},"interfaces/AccountRepositoryInterface.html":{},"injectables/AccountService.html":{},"entities/AccountTypeEntity.html":{},"interfaces/AccountTypeModel.html":{},"injectables/AccountTypeRepository.html":{},"interfaces/AccountTypeRepositoryInterface.html":{},"modules/AppModule.html":{},"interfaces/BaseRepositoryInterface.html":{},"entities/CustomerEntity.html":{},"injectables/CustomerRepository.html":{},"interfaces/CustomerRepositoryInterface.html":{},"injectables/CustomerService.html":{},"controllers/DepositController.html":{},"entities/DepositEntity.html":{},"injectables/DepositRepository.html":{},"interfaces/DepositRepositoryInterface.html":{},"injectables/DepositService.html":{},"entities/DocumentTypeEntity.html":{},"interfaces/DocumentTypeModel.html":{},"injectables/DocumentTypeRepository.html":{},"interfaces/DocumentTypeRepositoryInterface.html":{},"classes/ExceptionFiltersFilter.html":{},"guards/GuardsGuard.html":{},"injectables/InterceptorsInterceptor.html":{},"injectables/MiddlewaresMiddleware.html":{},"injectables/PipesPipe.html":{},"controllers/SecurityController.html":{},"injectables/SecurityService.html":{},"controllers/TransferController.html":{},"entities/TransferEntity.html":{},"injectables/TransferRepository.html":{},"interfaces/TransferRepositoryInterface.html":{},"injectables/TransferService.html":{},"classes/TypeOrmExceptionFilter.html":{},"injectables/TypesOrmPostgresConfigService.html":{},"controllers/UserController.html":{}}}],["necesarios",{"_index":1122,"title":{},"body":{"interfaces/PaginationModel.html":{}}}],["nest",{"_index":1535,"title":{},"body":{"index.html":{}}}],["nestinterceptor",{"_index":1083,"title":{},"body":{"injectables/InterceptorsInterceptor.html":{}}}],["nestjs",{"_index":1129,"title":{},"body":{"injectables/PipesPipe.html":{}}}],["nestjs/common",{"_index":141,"title":{},"body":{"controllers/AccountController.html":{},"injectables/AccountRepository.html":{},"injectables/AccountService.html":{},"injectables/AccountTypeRepository.html":{},"modules/AppModule.html":{},"injectables/CustomerRepository.html":{},"injectables/CustomerService.html":{},"controllers/DepositController.html":{},"injectables/DepositRepository.html":{},"injectables/DepositService.html":{},"injectables/DocumentTypeRepository.html":{},"classes/ExceptionFiltersFilter.html":{},"guards/GuardsGuard.html":{},"injectables/InterceptorsInterceptor.html":{},"injectables/MiddlewaresMiddleware.html":{},"injectables/PipesPipe.html":{},"controllers/SecurityController.html":{},"injectables/SecurityService.html":{},"controllers/TransferController.html":{},"injectables/TransferRepository.html":{},"injectables/TransferService.html":{},"classes/TypeOrmExceptionFilter.html":{},"injectables/TypesOrmPostgresConfigService.html":{},"controllers/UserController.html":{},"dependencies.html":{}}}],["nestjs/common/exceptions",{"_index":428,"title":{},"body":{"injectables/AccountService.html":{}}}],["nestjs/config",{"_index":542,"title":{},"body":{"modules/AppModule.html":{},"injectables/TypesOrmPostgresConfigService.html":{},"dependencies.html":{}}}],["nestjs/core",{"_index":544,"title":{},"body":{"modules/AppModule.html":{},"dependencies.html":{}}}],["nestjs/jwt",{"_index":546,"title":{},"body":{"modules/AppModule.html":{},"guards/GuardsGuard.html":{},"injectables/SecurityService.html":{},"dependencies.html":{}}}],["nestjs/platform",{"_index":1507,"title":{},"body":{"dependencies.html":{}}}],["nestjs/typeorm",{"_index":343,"title":{},"body":{"injectables/AccountRepository.html":{},"injectables/AccountTypeRepository.html":{},"modules/AppModule.html":{},"injectables/CustomerRepository.html":{},"injectables/DepositRepository.html":{},"injectables/DocumentTypeRepository.html":{},"injectables/TransferRepository.html":{},"injectables/TypesOrmPostgresConfigService.html":{},"dependencies.html":{}}}],["nestmiddleware",{"_index":1107,"title":{},"body":{"injectables/MiddlewaresMiddleware.html":{}}}],["nestmodule",{"_index":540,"title":{},"body":{"modules/AppModule.html":{}}}],["new",{"_index":351,"title":{},"body":{"injectables/AccountRepository.html":{},"injectables/AccountService.html":{},"injectables/AccountTypeRepository.html":{},"injectables/CustomerRepository.html":{},"injectables/CustomerService.html":{},"injectables/DepositRepository.html":{},"injectables/DepositService.html":{},"injectables/DocumentTypeRepository.html":{},"injectables/SecurityService.html":{},"injectables/TransferRepository.html":{},"injectables/TransferService.html":{},"classes/TypeOrmExceptionFilter.html":{},"coverage.html":{}}}],["newaccount",{"_index":364,"title":{},"body":{"injectables/AccountRepository.html":{},"injectables/AccountService.html":{},"injectables/DepositService.html":{},"injectables/SecurityService.html":{}}}],["newaccount.accounttype",{"_index":433,"title":{},"body":{"injectables/AccountService.html":{}}}],["newaccount.accounttypeid",{"_index":1206,"title":{},"body":{"injectables/SecurityService.html":{}}}],["newaccount.balance",{"_index":446,"title":{},"body":{"injectables/AccountService.html":{},"injectables/DepositService.html":{}}}],["newaccount.customer",{"_index":430,"title":{},"body":{"injectables/AccountService.html":{}}}],["newaccount.customerid",{"_index":1205,"title":{},"body":{"injectables/SecurityService.html":{}}}],["newaccount.deletedat",{"_index":366,"title":{},"body":{"injectables/AccountRepository.html":{}}}],["newaccount.state",{"_index":453,"title":{},"body":{"injectables/AccountService.html":{}}}],["newarray",{"_index":954,"title":{},"body":{"injectables/DepositService.html":{},"injectables/TransferService.html":{}}}],["newarray).filter",{"_index":958,"title":{},"body":{"injectables/DepositService.html":{},"injectables/TransferService.html":{}}}],["newcustomer",{"_index":725,"title":{},"body":{"injectables/CustomerRepository.html":{},"injectables/CustomerService.html":{},"injectables/SecurityService.html":{}}}],["newcustomer(customer",{"_index":763,"title":{},"body":{"injectables/CustomerService.html":{}}}],["newcustomer.deletedat",{"_index":728,"title":{},"body":{"injectables/CustomerRepository.html":{}}}],["newcustomer.document",{"_index":788,"title":{},"body":{"injectables/CustomerService.html":{},"injectables/SecurityService.html":{}}}],["newcustomer.documenttype",{"_index":787,"title":{},"body":{"injectables/CustomerService.html":{},"injectables/SecurityService.html":{}}}],["newcustomer.email",{"_index":792,"title":{},"body":{"injectables/CustomerService.html":{},"injectables/SecurityService.html":{}}}],["newcustomer.fullname",{"_index":790,"title":{},"body":{"injectables/CustomerService.html":{},"injectables/SecurityService.html":{}}}],["newcustomer.password",{"_index":796,"title":{},"body":{"injectables/CustomerService.html":{},"injectables/SecurityService.html":{}}}],["newcustomer.phone",{"_index":794,"title":{},"body":{"injectables/CustomerService.html":{},"injectables/SecurityService.html":{}}}],["newdeposit",{"_index":921,"title":{},"body":{"injectables/DepositRepository.html":{}}}],["newdeposit.deletedat",{"_index":924,"title":{},"body":{"injectables/DepositRepository.html":{}}}],["newtransfer",{"_index":1313,"title":{},"body":{"injectables/TransferRepository.html":{},"injectables/TransferService.html":{}}}],["newtransfer.amount",{"_index":1349,"title":{},"body":{"injectables/TransferService.html":{}}}],["newtransfer.datetime",{"_index":1357,"title":{},"body":{"injectables/TransferService.html":{}}}],["newtransfer.deletedat",{"_index":1316,"title":{},"body":{"injectables/TransferRepository.html":{}}}],["newtransfer.income",{"_index":1347,"title":{},"body":{"injectables/TransferService.html":{}}}],["newtransfer.outcome",{"_index":1348,"title":{},"body":{"injectables/TransferService.html":{}}}],["newtransfer.reason",{"_index":1350,"title":{},"body":{"injectables/TransferService.html":{}}}],["next",{"_index":1068,"title":{},"body":{"injectables/InterceptorsInterceptor.html":{},"injectables/MiddlewaresMiddleware.html":{}}}],["next.handle",{"_index":1085,"title":{},"body":{"injectables/InterceptorsInterceptor.html":{}}}],["nextfunction",{"_index":1097,"title":{},"body":{"injectables/MiddlewaresMiddleware.html":{}}}],["nico",{"_index":199,"title":{},"body":{"classes/AccountDTO.html":{},"entities/AccountEntity.html":{},"interfaces/AccountModel.html":{},"entities/AccountTypeEntity.html":{},"interfaces/AccountTypeModel.html":{},"interfaces/BaseRepositoryInterface.html":{},"classes/CustomerDTO.html":{},"entities/CustomerEntity.html":{},"interfaces/CustomerModel.html":{},"entities/DepositEntity.html":{},"interfaces/DepositModel.html":{},"entities/DocumentTypeEntity.html":{},"interfaces/DocumentTypeModel.html":{},"entities/TransferEntity.html":{},"interfaces/TransferModel.html":{},"miscellaneous/functions.html":{}}}],["node.js",{"_index":1528,"title":{},"body":{"index.html":{}}}],["nombre",{"_index":462,"title":{},"body":{"entities/AccountTypeEntity.html":{},"interfaces/AccountTypeModel.html":{},"injectables/AccountTypeRepository.html":{},"interfaces/AccountTypeRepositoryInterface.html":{},"classes/CustomerDTO.html":{},"entities/CustomerEntity.html":{},"interfaces/CustomerModel.html":{},"injectables/CustomerRepository.html":{},"interfaces/CustomerRepositoryInterface.html":{},"classes/CustomerUpdateDTO.html":{},"entities/DocumentTypeEntity.html":{},"interfaces/DocumentTypeModel.html":{},"injectables/DocumentTypeRepository.html":{},"interfaces/DocumentTypeRepositoryInterface.html":{}}}],["note",{"_index":1578,"title":{},"body":{"index.html":{}}}],["notfoundexception",{"_index":341,"title":{},"body":{"injectables/AccountRepository.html":{},"injectables/AccountTypeRepository.html":{},"injectables/CustomerRepository.html":{},"injectables/CustomerService.html":{},"injectables/DepositRepository.html":{},"injectables/DocumentTypeRepository.html":{},"injectables/SecurityService.html":{},"injectables/TransferRepository.html":{},"injectables/TransferService.html":{}}}],["notfoundexception(`el",{"_index":352,"title":{},"body":{"injectables/AccountRepository.html":{},"injectables/AccountTypeRepository.html":{},"injectables/CustomerRepository.html":{},"injectables/DepositRepository.html":{},"injectables/DocumentTypeRepository.html":{}}}],["notfoundexception(`fondos",{"_index":1359,"title":{},"body":{"injectables/TransferService.html":{}}}],["notfoundexception(`no",{"_index":734,"title":{},"body":{"injectables/CustomerRepository.html":{}}}],["npm",{"_index":1540,"title":{},"body":{"index.html":{}}}],["nueva",{"_index":94,"title":{},"body":{"controllers/AccountController.html":{},"injectables/AccountRepository.html":{},"interfaces/BaseRepositoryInterface.html":{},"controllers/TransferController.html":{},"injectables/TransferRepository.html":{}}}],["nuevo",{"_index":64,"title":{},"body":{"controllers/AccountController.html":{},"injectables/AccountTypeRepository.html":{},"injectables/CustomerRepository.html":{},"injectables/CustomerService.html":{},"controllers/DepositController.html":{},"injectables/DepositRepository.html":{},"injectables/DocumentTypeRepository.html":{},"controllers/SecurityController.html":{},"controllers/UserController.html":{}}}],["nuevos",{"_index":339,"title":{},"body":{"injectables/AccountRepository.html":{},"injectables/AccountTypeRepository.html":{},"injectables/CustomerRepository.html":{},"injectables/CustomerService.html":{},"injectables/DepositRepository.html":{},"injectables/DocumentTypeRepository.html":{},"injectables/TransferRepository.html":{}}}],["null",{"_index":596,"title":{},"body":{"interfaces/BaseRepositoryInterface.html":{}}}],["nullable",{"_index":229,"title":{},"body":{"entities/AccountEntity.html":{},"entities/CustomerEntity.html":{},"entities/DepositEntity.html":{},"entities/TransferEntity.html":{}}}],["number",{"_index":171,"title":{},"body":{"controllers/AccountController.html":{},"entities/AccountEntity.html":{},"interfaces/AccountModel.html":{},"injectables/AccountService.html":{},"entities/CustomerEntity.html":{},"interfaces/CustomerModel.html":{},"classes/DataRangeDTO.html":{},"interfaces/DataRangeModel.html":{},"entities/DepositEntity.html":{},"interfaces/DepositModel.html":{},"injectables/DepositRepository.html":{},"interfaces/DepositRepositoryInterface.html":{},"classes/PaginationDTO.html":{},"interfaces/PaginationModel.html":{},"entities/TransferEntity.html":{},"interfaces/TransferModel.html":{},"injectables/TransferRepository.html":{},"interfaces/TransferRepositoryInterface.html":{},"classes/TypeOrmExceptionFilter.html":{}}}],["number(amount",{"_index":451,"title":{},"body":{"injectables/AccountService.html":{}}}],["number(datarange.startamount",{"_index":961,"title":{},"body":{"injectables/DepositService.html":{},"injectables/TransferService.html":{}}}],["number(deposit.amount",{"_index":947,"title":{},"body":{"injectables/DepositService.html":{}}}],["number(income.balance",{"_index":1355,"title":{},"body":{"injectables/TransferService.html":{}}}],["number(newaccount.balance",{"_index":950,"title":{},"body":{"injectables/DepositService.html":{}}}],["number(outcome.balance",{"_index":1352,"title":{},"body":{"injectables/TransferService.html":{}}}],["number(transfer.amount",{"_index":1346,"title":{},"body":{"injectables/TransferService.html":{}}}],["numeric",{"_index":221,"title":{},"body":{"entities/AccountEntity.html":{},"entities/DepositEntity.html":{},"entities/TransferEntity.html":{}}}],["número",{"_index":609,"title":{},"body":{"classes/CustomerDTO.html":{},"entities/CustomerEntity.html":{},"interfaces/CustomerModel.html":{},"injectables/CustomerRepository.html":{},"interfaces/CustomerRepositoryInterface.html":{},"classes/CustomerUpdateDTO.html":{},"classes/DataRangeDTO.html":{},"classes/DepositDTO.html":{},"classes/PaginationDTO.html":{},"classes/TransferDTO.html":{}}}],["o",{"_index":309,"title":{},"body":{"injectables/AccountRepository.html":{},"interfaces/BaseRepositoryInterface.html":{},"classes/DataRangeDTO.html":{},"injectables/DepositRepository.html":{},"interfaces/DocumentTypeModel.html":{},"injectables/InterceptorsInterceptor.html":{},"injectables/MiddlewaresMiddleware.html":{},"classes/TransferDTO.html":{},"interfaces/TransferModel.html":{},"injectables/TransferRepository.html":{},"miscellaneous/variables.html":{}}}],["object",{"_index":192,"title":{},"body":{"classes/AccountDTO.html":{},"classes/CustomerDTO.html":{},"classes/CustomerUpdateDTO.html":{},"classes/DataRangeDTO.html":{},"classes/DepositDTO.html":{},"classes/PaginationDTO.html":{},"classes/SignDTO.html":{},"classes/TransferDTO.html":{},"miscellaneous/variables.html":{}}}],["objeto",{"_index":834,"title":{},"body":{"classes/DataRangeDTO.html":{},"miscellaneous/variables.html":{}}}],["observable",{"_index":1081,"title":{},"body":{"injectables/InterceptorsInterceptor.html":{}}}],["obtener",{"_index":415,"title":{},"body":{"injectables/AccountService.html":{},"injectables/CustomerService.html":{},"injectables/DepositService.html":{},"injectables/TransferService.html":{}}}],["obtiene",{"_index":110,"title":{},"body":{"controllers/AccountController.html":{},"interfaces/BaseRepositoryInterface.html":{},"injectables/CustomerRepository.html":{},"controllers/DepositController.html":{},"controllers/TransferController.html":{},"controllers/UserController.html":{}}}],["ocurri",{"_index":1388,"title":{},"body":{"classes/TypeOrmExceptionFilter.html":{}}}],["opcional",{"_index":240,"title":{},"body":{"entities/AccountEntity.html":{},"interfaces/AccountModel.html":{},"interfaces/BaseRepositoryInterface.html":{},"entities/CustomerEntity.html":{},"interfaces/CustomerModel.html":{},"entities/DepositEntity.html":{},"interfaces/DepositModel.html":{},"interfaces/TransferModel.html":{},"injectables/TransferRepository.html":{}}}],["opcionalmente",{"_index":866,"title":{},"body":{"controllers/DepositController.html":{}}}],["opciones",{"_index":1401,"title":{},"body":{"injectables/TypesOrmPostgresConfigService.html":{}}}],["operaciones",{"_index":14,"title":{},"body":{"controllers/AccountController.html":{},"interfaces/BaseRepositoryInterface.html":{},"controllers/DepositController.html":{},"controllers/SecurityController.html":{}}}],["operación",{"_index":132,"title":{},"body":{"controllers/AccountController.html":{},"controllers/UserController.html":{}}}],["optional",{"_index":49,"title":{},"body":{"controllers/AccountController.html":{},"entities/AccountEntity.html":{},"interfaces/AccountModel.html":{},"injectables/AccountRepository.html":{},"interfaces/AccountRepositoryInterface.html":{},"injectables/AccountService.html":{},"injectables/AccountTypeRepository.html":{},"interfaces/AccountTypeRepositoryInterface.html":{},"modules/AppModule.html":{},"interfaces/BaseRepositoryInterface.html":{},"entities/CustomerEntity.html":{},"interfaces/CustomerModel.html":{},"injectables/CustomerRepository.html":{},"interfaces/CustomerRepositoryInterface.html":{},"injectables/CustomerService.html":{},"classes/DataRangeDTO.html":{},"interfaces/DataRangeModel.html":{},"controllers/DepositController.html":{},"entities/DepositEntity.html":{},"interfaces/DepositModel.html":{},"injectables/DepositRepository.html":{},"interfaces/DepositRepositoryInterface.html":{},"injectables/DepositService.html":{},"injectables/DocumentTypeRepository.html":{},"interfaces/DocumentTypeRepositoryInterface.html":{},"classes/ExceptionFiltersFilter.html":{},"guards/GuardsGuard.html":{},"injectables/InterceptorsInterceptor.html":{},"injectables/MiddlewaresMiddleware.html":{},"injectables/PipesPipe.html":{},"controllers/SecurityController.html":{},"injectables/SecurityService.html":{},"controllers/TransferController.html":{},"entities/TransferEntity.html":{},"interfaces/TransferModel.html":{},"injectables/TransferRepository.html":{},"interfaces/TransferRepositoryInterface.html":{},"injectables/TransferService.html":{},"classes/TypeOrmExceptionFilter.html":{},"injectables/TypesOrmPostgresConfigService.html":{},"controllers/UserController.html":{}}}],["origen",{"_index":1267,"title":{},"body":{"classes/TransferDTO.html":{}}}],["orm",{"_index":1398,"title":{},"body":{"injectables/TypesOrmPostgresConfigService.html":{},"coverage.html":{}}}],["out",{"_index":529,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["outcome",{"_index":1275,"title":{},"body":{"entities/TransferEntity.html":{},"interfaces/TransferModel.html":{},"injectables/TransferRepository.html":{},"injectables/TransferService.html":{}}}],["outcome.balance",{"_index":1345,"title":{},"body":{"injectables/TransferService.html":{}}}],["outcomeid",{"_index":1261,"title":{},"body":{"classes/TransferDTO.html":{}}}],["overview",{"_index":1589,"title":{"overview.html":{}},"body":{"overview.html":{}}}],["package",{"_index":1503,"title":{"dependencies.html":{},"properties.html":{}},"body":{}}],["page",{"_index":1114,"title":{},"body":{"classes/PaginationDTO.html":{},"interfaces/PaginationModel.html":{}}}],["paginación",{"_index":865,"title":{},"body":{"controllers/DepositController.html":{},"injectables/DepositService.html":{},"classes/PaginationDTO.html":{},"interfaces/PaginationModel.html":{},"controllers/TransferController.html":{}}}],["pagination",{"_index":872,"title":{},"body":{"controllers/DepositController.html":{},"injectables/DepositService.html":{},"controllers/TransferController.html":{},"injectables/TransferService.html":{}}}],["paginationdto",{"_index":867,"title":{"classes/PaginationDTO.html":{}},"body":{"controllers/DepositController.html":{},"injectables/DepositService.html":{},"classes/PaginationDTO.html":{},"controllers/TransferController.html":{},"coverage.html":{}}}],["paginationmodel",{"_index":1120,"title":{"interfaces/PaginationModel.html":{}},"body":{"interfaces/PaginationModel.html":{},"injectables/TransferService.html":{},"coverage.html":{}}}],["para",{"_index":11,"title":{},"body":{"controllers/AccountController.html":{},"classes/AccountDTO.html":{},"entities/AccountEntity.html":{},"interfaces/AccountModel.html":{},"injectables/AccountRepository.html":{},"interfaces/AccountRepositoryInterface.html":{},"entities/AccountTypeEntity.html":{},"interfaces/AccountTypeModel.html":{},"injectables/AccountTypeRepository.html":{},"interfaces/AccountTypeRepositoryInterface.html":{},"interfaces/BaseRepositoryInterface.html":{},"classes/CustomerDTO.html":{},"entities/CustomerEntity.html":{},"interfaces/CustomerModel.html":{},"interfaces/CustomerRepositoryInterface.html":{},"classes/CustomerUpdateDTO.html":{},"classes/DataRangeDTO.html":{},"interfaces/DataRangeModel.html":{},"controllers/DepositController.html":{},"classes/DepositDTO.html":{},"entities/DepositEntity.html":{},"interfaces/DepositModel.html":{},"injectables/DepositRepository.html":{},"interfaces/DepositRepositoryInterface.html":{},"injectables/DepositService.html":{},"entities/DocumentTypeEntity.html":{},"interfaces/DocumentTypeModel.html":{},"interfaces/DocumentTypeRepositoryInterface.html":{},"classes/ExceptionFiltersFilter.html":{},"guards/GuardsGuard.html":{},"injectables/InterceptorsInterceptor.html":{},"injectables/MiddlewaresMiddleware.html":{},"classes/PaginationDTO.html":{},"interfaces/PaginationModel.html":{},"controllers/SecurityController.html":{},"classes/SignDTO.html":{},"controllers/TransferController.html":{},"classes/TransferDTO.html":{},"entities/TransferEntity.html":{},"interfaces/TransferModel.html":{},"interfaces/TransferRepositoryInterface.html":{},"classes/TypeOrmExceptionFilter.html":{},"injectables/TypesOrmPostgresConfigService.html":{},"controllers/UserController.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["param",{"_index":137,"title":{},"body":{"controllers/AccountController.html":{},"injectables/AccountRepository.html":{},"interfaces/AccountRepositoryInterface.html":{},"injectables/AccountService.html":{},"injectables/AccountTypeRepository.html":{},"interfaces/AccountTypeRepositoryInterface.html":{},"interfaces/BaseRepositoryInterface.html":{},"injectables/CustomerRepository.html":{},"interfaces/CustomerRepositoryInterface.html":{},"injectables/CustomerService.html":{},"controllers/DepositController.html":{},"injectables/DepositRepository.html":{},"interfaces/DepositRepositoryInterface.html":{},"injectables/DepositService.html":{},"injectables/DocumentTypeRepository.html":{},"interfaces/DocumentTypeRepositoryInterface.html":{},"classes/ExceptionFiltersFilter.html":{},"guards/GuardsGuard.html":{},"injectables/InterceptorsInterceptor.html":{},"injectables/MiddlewaresMiddleware.html":{},"injectables/PipesPipe.html":{},"controllers/SecurityController.html":{},"injectables/SecurityService.html":{},"controllers/TransferController.html":{},"injectables/TransferRepository.html":{},"interfaces/TransferRepositoryInterface.html":{},"injectables/TransferService.html":{},"classes/TypeOrmExceptionFilter.html":{},"controllers/UserController.html":{}}}],["param('id",{"_index":169,"title":{},"body":{"controllers/AccountController.html":{}}}],["parameters",{"_index":47,"title":{},"body":{"controllers/AccountController.html":{},"injectables/AccountRepository.html":{},"interfaces/AccountRepositoryInterface.html":{},"injectables/AccountService.html":{},"injectables/AccountTypeRepository.html":{},"interfaces/AccountTypeRepositoryInterface.html":{},"modules/AppModule.html":{},"interfaces/BaseRepositoryInterface.html":{},"injectables/CustomerRepository.html":{},"interfaces/CustomerRepositoryInterface.html":{},"injectables/CustomerService.html":{},"controllers/DepositController.html":{},"injectables/DepositRepository.html":{},"interfaces/DepositRepositoryInterface.html":{},"injectables/DepositService.html":{},"injectables/DocumentTypeRepository.html":{},"interfaces/DocumentTypeRepositoryInterface.html":{},"classes/ExceptionFiltersFilter.html":{},"guards/GuardsGuard.html":{},"injectables/InterceptorsInterceptor.html":{},"injectables/MiddlewaresMiddleware.html":{},"injectables/PipesPipe.html":{},"controllers/SecurityController.html":{},"injectables/SecurityService.html":{},"controllers/TransferController.html":{},"injectables/TransferRepository.html":{},"interfaces/TransferRepositoryInterface.html":{},"injectables/TransferService.html":{},"classes/TypeOrmExceptionFilter.html":{},"injectables/TypesOrmPostgresConfigService.html":{},"controllers/UserController.html":{}}}],["pasar",{"_index":1105,"title":{},"body":{"injectables/MiddlewaresMiddleware.html":{}}}],["passport",{"_index":1512,"title":{},"body":{"dependencies.html":{}}}],["password",{"_index":572,"title":{},"body":{"modules/AppModule.html":{},"classes/CustomerDTO.html":{},"entities/CustomerEntity.html":{},"interfaces/CustomerModel.html":{},"injectables/CustomerRepository.html":{},"interfaces/CustomerRepositoryInterface.html":{},"classes/CustomerUpdateDTO.html":{},"classes/SignDTO.html":{},"injectables/TypesOrmPostgresConfigService.html":{}}}],["payload",{"_index":1056,"title":{},"body":{"guards/GuardsGuard.html":{},"injectables/SecurityService.html":{}}}],["permiso",{"_index":1041,"title":{},"body":{"guards/GuardsGuard.html":{}}}],["permite",{"_index":1072,"title":{},"body":{"injectables/InterceptorsInterceptor.html":{}}}],["personalizada",{"_index":1384,"title":{},"body":{"classes/TypeOrmExceptionFilter.html":{}}}],["pg",{"_index":1514,"title":{},"body":{"dependencies.html":{}}}],["phone",{"_index":607,"title":{},"body":{"classes/CustomerDTO.html":{},"entities/CustomerEntity.html":{},"interfaces/CustomerModel.html":{},"injectables/CustomerRepository.html":{},"interfaces/CustomerRepositoryInterface.html":{},"classes/CustomerUpdateDTO.html":{}}}],["pipe",{"_index":1127,"title":{},"body":{"injectables/PipesPipe.html":{}}}],["pipespipe",{"_index":1125,"title":{"injectables/PipesPipe.html":{}},"body":{"injectables/PipesPipe.html":{},"coverage.html":{}}}],["pipetransform",{"_index":1139,"title":{},"body":{"injectables/PipesPipe.html":{}}}],["please",{"_index":1573,"title":{},"body":{"index.html":{}}}],["por",{"_index":104,"title":{},"body":{"controllers/AccountController.html":{},"injectables/AccountRepository.html":{},"interfaces/AccountRepositoryInterface.html":{},"injectables/AccountTypeRepository.html":{},"interfaces/AccountTypeRepositoryInterface.html":{},"interfaces/BaseRepositoryInterface.html":{},"injectables/CustomerRepository.html":{},"interfaces/CustomerRepositoryInterface.html":{},"injectables/CustomerService.html":{},"interfaces/DataRangeModel.html":{},"controllers/DepositController.html":{},"injectables/DepositRepository.html":{},"interfaces/DepositRepositoryInterface.html":{},"injectables/DocumentTypeRepository.html":{},"interfaces/DocumentTypeRepositoryInterface.html":{},"controllers/TransferController.html":{},"injectables/TransferRepository.html":{},"interfaces/TransferRepositoryInterface.html":{},"controllers/UserController.html":{}}}],["port",{"_index":568,"title":{},"body":{"modules/AppModule.html":{},"injectables/TypesOrmPostgresConfigService.html":{}}}],["post",{"_index":138,"title":{},"body":{"controllers/AccountController.html":{},"controllers/DepositController.html":{},"controllers/SecurityController.html":{},"controllers/TransferController.html":{},"controllers/UserController.html":{}}}],["post(':id",{"_index":168,"title":{},"body":{"controllers/AccountController.html":{}}}],["post(':id')@useguards(guardsguard",{"_index":40,"title":{},"body":{"controllers/AccountController.html":{}}}],["post('all",{"_index":862,"title":{},"body":{"controllers/DepositController.html":{}}}],["post('history",{"_index":1257,"title":{},"body":{"controllers/TransferController.html":{}}}],["post('history')@useguards(guardsguard",{"_index":1228,"title":{},"body":{"controllers/TransferController.html":{}}}],["post('income",{"_index":1253,"title":{},"body":{"controllers/TransferController.html":{}}}],["post('income')@useguards(guardsguard",{"_index":1231,"title":{},"body":{"controllers/TransferController.html":{}}}],["post('outcome",{"_index":1255,"title":{},"body":{"controllers/TransferController.html":{}}}],["post('outcome')@useguards(guardsguard",{"_index":1236,"title":{},"body":{"controllers/TransferController.html":{}}}],["post('sign",{"_index":1157,"title":{},"body":{"controllers/SecurityController.html":{}}}],["post()@useguards(guardsguard",{"_index":91,"title":{},"body":{"controllers/AccountController.html":{},"controllers/TransferController.html":{}}}],["posterior",{"_index":1065,"title":{},"body":{"injectables/InterceptorsInterceptor.html":{}}}],["postgres",{"_index":565,"title":{},"body":{"modules/AppModule.html":{},"injectables/TypesOrmPostgresConfigService.html":{},"coverage.html":{}}}],["postgresql",{"_index":1402,"title":{},"body":{"injectables/TypesOrmPostgresConfigService.html":{}}}],["predeterminado",{"_index":1613,"title":{},"body":{"miscellaneous/variables.html":{}}}],["prefix",{"_index":7,"title":{},"body":{"controllers/AccountController.html":{},"controllers/DepositController.html":{},"controllers/SecurityController.html":{},"controllers/TransferController.html":{},"controllers/UserController.html":{}}}],["presentation/controllers",{"_index":556,"title":{},"body":{"modules/AppModule.html":{}}}],["presentation/middlewares/middlewares.middleware",{"_index":558,"title":{},"body":{"modules/AppModule.html":{}}}],["previa",{"_index":1064,"title":{},"body":{"injectables/InterceptorsInterceptor.html":{}}}],["primary",{"_index":243,"title":{},"body":{"entities/AccountEntity.html":{},"entities/AccountTypeEntity.html":{},"entities/CustomerEntity.html":{},"entities/DepositEntity.html":{},"entities/DocumentTypeEntity.html":{},"entities/TransferEntity.html":{}}}],["privados",{"_index":926,"title":{},"body":{"injectables/DepositRepository.html":{}}}],["private",{"_index":155,"title":{},"body":{"controllers/AccountController.html":{},"injectables/AccountRepository.html":{},"injectables/AccountService.html":{},"injectables/AccountTypeRepository.html":{},"injectables/CustomerRepository.html":{},"injectables/CustomerService.html":{},"injectables/DepositRepository.html":{},"injectables/DepositService.html":{},"injectables/DocumentTypeRepository.html":{},"injectables/SecurityService.html":{},"injectables/TransferRepository.html":{},"injectables/TransferService.html":{}}}],["proceder",{"_index":1042,"title":{},"body":{"guards/GuardsGuard.html":{}}}],["process.env.bank_id",{"_index":261,"title":{},"body":{"entities/AccountEntity.html":{}}}],["process.env.db_host",{"_index":567,"title":{},"body":{"modules/AppModule.html":{}}}],["process.env.db_name",{"_index":575,"title":{},"body":{"modules/AppModule.html":{}}}],["process.env.db_password",{"_index":573,"title":{},"body":{"modules/AppModule.html":{}}}],["process.env.db_user",{"_index":571,"title":{},"body":{"modules/AppModule.html":{}}}],["process.env.jwt_secret",{"_index":1614,"title":{},"body":{"miscellaneous/variables.html":{}}}],["production",{"_index":1549,"title":{},"body":{"index.html":{}}}],["progressive",{"_index":1527,"title":{},"body":{"index.html":{}}}],["promesa",{"_index":62,"title":{},"body":{"controllers/AccountController.html":{},"injectables/AccountRepository.html":{},"interfaces/AccountRepositoryInterface.html":{},"injectables/AccountTypeRepository.html":{},"interfaces/AccountTypeRepositoryInterface.html":{},"interfaces/BaseRepositoryInterface.html":{},"injectables/CustomerRepository.html":{},"interfaces/CustomerRepositoryInterface.html":{},"controllers/DepositController.html":{},"injectables/DepositRepository.html":{},"interfaces/DepositRepositoryInterface.html":{},"injectables/DocumentTypeRepository.html":{},"interfaces/DocumentTypeRepositoryInterface.html":{},"guards/GuardsGuard.html":{},"controllers/SecurityController.html":{},"controllers/TransferController.html":{},"injectables/TransferRepository.html":{},"interfaces/TransferRepositoryInterface.html":{},"controllers/UserController.html":{}}}],["promise",{"_index":61,"title":{},"body":{"controllers/AccountController.html":{},"injectables/AccountRepository.html":{},"interfaces/AccountRepositoryInterface.html":{},"injectables/AccountService.html":{},"injectables/AccountTypeRepository.html":{},"interfaces/AccountTypeRepositoryInterface.html":{},"interfaces/BaseRepositoryInterface.html":{},"injectables/CustomerRepository.html":{},"interfaces/CustomerRepositoryInterface.html":{},"injectables/CustomerService.html":{},"controllers/DepositController.html":{},"injectables/DepositRepository.html":{},"interfaces/DepositRepositoryInterface.html":{},"injectables/DepositService.html":{},"injectables/DocumentTypeRepository.html":{},"interfaces/DocumentTypeRepositoryInterface.html":{},"guards/GuardsGuard.html":{},"controllers/TransferController.html":{},"injectables/TransferRepository.html":{},"interfaces/TransferRepositoryInterface.html":{},"injectables/TransferService.html":{},"controllers/UserController.html":{}}}],["properly",{"_index":1583,"title":{},"body":{"index.html":{}}}],["properties",{"_index":194,"title":{"properties.html":{}},"body":{"classes/AccountDTO.html":{},"entities/AccountEntity.html":{},"interfaces/AccountModel.html":{},"entities/AccountTypeEntity.html":{},"interfaces/AccountTypeModel.html":{},"classes/CustomerDTO.html":{},"entities/CustomerEntity.html":{},"interfaces/CustomerModel.html":{},"classes/CustomerUpdateDTO.html":{},"classes/DataRangeDTO.html":{},"interfaces/DataRangeModel.html":{},"classes/DepositDTO.html":{},"entities/DepositEntity.html":{},"interfaces/DepositModel.html":{},"entities/DocumentTypeEntity.html":{},"interfaces/DocumentTypeModel.html":{},"classes/PaginationDTO.html":{},"interfaces/PaginationModel.html":{},"classes/SignDTO.html":{},"classes/TransferDTO.html":{},"entities/TransferEntity.html":{},"interfaces/TransferModel.html":{},"properties.html":{}}}],["propiedad",{"_index":1606,"title":{},"body":{"miscellaneous/variables.html":{}}}],["propiedades",{"_index":469,"title":{},"body":{"interfaces/AccountTypeModel.html":{}}}],["proporcionadas",{"_index":707,"title":{},"body":{"injectables/CustomerRepository.html":{}}}],["proteger",{"_index":1029,"title":{},"body":{"guards/GuardsGuard.html":{}}}],["provide",{"_index":579,"title":{},"body":{"modules/AppModule.html":{}}}],["providers",{"_index":517,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["proyecto",{"_index":1557,"title":{},"body":{"index.html":{}}}],["public",{"_index":255,"title":{},"body":{"entities/AccountEntity.html":{},"entities/AccountTypeEntity.html":{},"entities/CustomerEntity.html":{},"entities/DepositEntity.html":{},"entities/DocumentTypeEntity.html":{},"entities/TransferEntity.html":{}}}],["puede",{"_index":833,"title":{},"body":{"classes/DataRangeDTO.html":{},"interfaces/DataRangeModel.html":{}}}],["put",{"_index":139,"title":{},"body":{"controllers/AccountController.html":{},"controllers/UserController.html":{}}}],["put(':id",{"_index":86,"title":{},"body":{"controllers/AccountController.html":{},"controllers/UserController.html":{}}}],["put('accountype/:id",{"_index":77,"title":{},"body":{"controllers/AccountController.html":{}}}],["put('removebalance/:id')@useguards(guardsguard",{"_index":128,"title":{},"body":{"controllers/AccountController.html":{}}}],["put('unsuscribe/:id",{"_index":1440,"title":{},"body":{"controllers/UserController.html":{}}}],["página",{"_index":1118,"title":{},"body":{"classes/PaginationDTO.html":{},"interfaces/PaginationModel.html":{}}}],["que",{"_index":56,"title":{},"body":{"controllers/AccountController.html":{},"entities/AccountEntity.html":{},"interfaces/AccountModel.html":{},"injectables/AccountRepository.html":{},"interfaces/AccountRepositoryInterface.html":{},"interfaces/AccountTypeModel.html":{},"injectables/AccountTypeRepository.html":{},"interfaces/AccountTypeRepositoryInterface.html":{},"interfaces/BaseRepositoryInterface.html":{},"entities/CustomerEntity.html":{},"interfaces/CustomerModel.html":{},"injectables/CustomerRepository.html":{},"interfaces/CustomerRepositoryInterface.html":{},"classes/CustomerUpdateDTO.html":{},"classes/DataRangeDTO.html":{},"interfaces/DataRangeModel.html":{},"controllers/DepositController.html":{},"classes/DepositDTO.html":{},"entities/DepositEntity.html":{},"interfaces/DepositModel.html":{},"injectables/DepositRepository.html":{},"interfaces/DepositRepositoryInterface.html":{},"interfaces/DocumentTypeModel.html":{},"injectables/DocumentTypeRepository.html":{},"interfaces/DocumentTypeRepositoryInterface.html":{},"guards/GuardsGuard.html":{},"injectables/InterceptorsInterceptor.html":{},"injectables/MiddlewaresMiddleware.html":{},"classes/PaginationDTO.html":{},"interfaces/PaginationModel.html":{},"injectables/PipesPipe.html":{},"controllers/SecurityController.html":{},"controllers/TransferController.html":{},"classes/TransferDTO.html":{},"interfaces/TransferModel.html":{},"injectables/TransferRepository.html":{},"interfaces/TransferRepositoryInterface.html":{},"classes/TypeOrmExceptionFilter.html":{},"controllers/UserController.html":{},"miscellaneous/variables.html":{}}}],["range.dto.ts",{"_index":823,"title":{},"body":{"classes/DataRangeDTO.html":{},"coverage.html":{}}}],["range.dto.ts:20",{"_index":837,"title":{},"body":{"classes/DataRangeDTO.html":{}}}],["range.dto.ts:32",{"_index":832,"title":{},"body":{"classes/DataRangeDTO.html":{}}}],["range.dto.ts:44",{"_index":835,"title":{},"body":{"classes/DataRangeDTO.html":{}}}],["range.dto.ts:56",{"_index":829,"title":{},"body":{"classes/DataRangeDTO.html":{}}}],["range.model.ts",{"_index":840,"title":{},"body":{"interfaces/DataRangeModel.html":{},"coverage.html":{}}}],["rango",{"_index":824,"title":{},"body":{"classes/DataRangeDTO.html":{},"interfaces/DataRangeModel.html":{},"controllers/DepositController.html":{},"injectables/DepositRepository.html":{},"interfaces/DepositRepositoryInterface.html":{},"injectables/DepositService.html":{},"controllers/TransferController.html":{},"injectables/TransferRepository.html":{},"interfaces/TransferRepositoryInterface.html":{}}}],["razón",{"_index":1269,"title":{},"body":{"classes/TransferDTO.html":{},"interfaces/TransferModel.html":{}}}],["readonly",{"_index":156,"title":{},"body":{"controllers/AccountController.html":{},"injectables/AccountRepository.html":{},"injectables/AccountService.html":{},"injectables/AccountTypeRepository.html":{},"injectables/CustomerRepository.html":{},"injectables/CustomerService.html":{},"controllers/DepositController.html":{},"injectables/DepositRepository.html":{},"injectables/DepositService.html":{},"injectables/DocumentTypeRepository.html":{},"controllers/SecurityController.html":{},"injectables/SecurityService.html":{},"controllers/TransferController.html":{},"injectables/TransferRepository.html":{},"injectables/TransferService.html":{},"injectables/TypesOrmPostgresConfigService.html":{},"controllers/UserController.html":{}}}],["realiz",{"_index":894,"title":{},"body":{"interfaces/DepositModel.html":{}}}],["realiza",{"_index":712,"title":{},"body":{"injectables/CustomerRepository.html":{}}}],["realizar",{"_index":588,"title":{},"body":{"interfaces/BaseRepositoryInterface.html":{},"injectables/CustomerRepository.html":{},"injectables/DepositRepository.html":{},"injectables/TransferRepository.html":{}}}],["reason",{"_index":1262,"title":{},"body":{"classes/TransferDTO.html":{},"entities/TransferEntity.html":{},"interfaces/TransferModel.html":{}}}],["reflect",{"_index":1516,"title":{},"body":{"dependencies.html":{}}}],["regexp())@minlength(8",{"_index":620,"title":{},"body":{"classes/CustomerDTO.html":{},"classes/CustomerUpdateDTO.html":{}}}],["regexp(/^(?=.*\\d)(?=.*[a",{"_index":641,"title":{},"body":{"classes/CustomerDTO.html":{},"classes/CustomerUpdateDTO.html":{}}}],["register",{"_index":291,"title":{},"body":{"injectables/AccountRepository.html":{},"injectables/AccountTypeRepository.html":{},"interfaces/BaseRepositoryInterface.html":{},"injectables/CustomerRepository.html":{},"injectables/DepositRepository.html":{},"injectables/DocumentTypeRepository.html":{},"injectables/TransferRepository.html":{}}}],["register(entity",{"_index":327,"title":{},"body":{"injectables/AccountRepository.html":{},"injectables/AccountTypeRepository.html":{},"interfaces/BaseRepositoryInterface.html":{},"injectables/CustomerRepository.html":{},"injectables/DepositRepository.html":{},"injectables/DocumentTypeRepository.html":{},"injectables/TransferRepository.html":{}}}],["registeruser",{"_index":1423,"title":{},"body":{"controllers/UserController.html":{}}}],["registeruser(@body",{"_index":1454,"title":{},"body":{"controllers/UserController.html":{}}}],["registeruser(customer",{"_index":1437,"title":{},"body":{"controllers/UserController.html":{}}}],["registra",{"_index":329,"title":{},"body":{"injectables/AccountRepository.html":{},"injectables/AccountTypeRepository.html":{},"interfaces/BaseRepositoryInterface.html":{},"injectables/CustomerRepository.html":{},"injectables/DepositRepository.html":{},"injectables/DocumentTypeRepository.html":{},"controllers/SecurityController.html":{},"injectables/TransferRepository.html":{},"controllers/UserController.html":{}}}],["registrada",{"_index":331,"title":{},"body":{"injectables/AccountRepository.html":{},"interfaces/BaseRepositoryInterface.html":{},"injectables/TransferRepository.html":{}}}],["registrado",{"_index":485,"title":{},"body":{"injectables/AccountTypeRepository.html":{},"injectables/CustomerRepository.html":{},"injectables/DepositRepository.html":{},"injectables/DocumentTypeRepository.html":{},"controllers/SecurityController.html":{}}}],["registran",{"_index":492,"title":{},"body":{"injectables/AccountTypeRepository.html":{}}}],["registrar",{"_index":330,"title":{},"body":{"injectables/AccountRepository.html":{},"injectables/AccountTypeRepository.html":{},"interfaces/BaseRepositoryInterface.html":{},"injectables/CustomerRepository.html":{},"injectables/CustomerService.html":{},"injectables/DepositRepository.html":{},"injectables/DocumentTypeRepository.html":{},"injectables/TransferRepository.html":{}}}],["registro",{"_index":1143,"title":{},"body":{"controllers/SecurityController.html":{}}}],["relacionadas",{"_index":15,"title":{},"body":{"controllers/AccountController.html":{},"controllers/DepositController.html":{}}}],["relations",{"_index":370,"title":{},"body":{"injectables/AccountRepository.html":{},"injectables/DepositRepository.html":{},"injectables/TransferRepository.html":{}}}],["remarks",{"_index":279,"title":{},"body":{"interfaces/AccountModel.html":{},"interfaces/CustomerModel.html":{},"interfaces/DepositModel.html":{},"interfaces/TransferModel.html":{}}}],["removebalance",{"_index":32,"title":{},"body":{"controllers/AccountController.html":{},"injectables/AccountService.html":{}}}],["removebalance(accountid",{"_index":420,"title":{},"body":{"injectables/AccountService.html":{}}}],["removebalance(id",{"_index":127,"title":{},"body":{"controllers/AccountController.html":{}}}],["remover",{"_index":422,"title":{},"body":{"injectables/AccountService.html":{}}}],["repositories",{"_index":1186,"title":{},"body":{"injectables/SecurityService.html":{}}}],["repositories.interface.ts",{"_index":584,"title":{},"body":{"interfaces/BaseRepositoryInterface.html":{},"coverage.html":{}}}],["repositories.interface.ts:18",{"_index":598,"title":{},"body":{"interfaces/BaseRepositoryInterface.html":{}}}],["repositories.interface.ts:28",{"_index":599,"title":{},"body":{"interfaces/BaseRepositoryInterface.html":{}}}],["repositories.interface.ts:37",{"_index":590,"title":{},"body":{"interfaces/BaseRepositoryInterface.html":{}}}],["repositories.interface.ts:45",{"_index":592,"title":{},"body":{"interfaces/BaseRepositoryInterface.html":{}}}],["repositories.interface.ts:54",{"_index":594,"title":{},"body":{"interfaces/BaseRepositoryInterface.html":{}}}],["repositorio",{"_index":284,"title":{},"body":{"injectables/AccountRepository.html":{},"interfaces/AccountRepositoryInterface.html":{},"injectables/AccountTypeRepository.html":{},"interfaces/AccountTypeRepositoryInterface.html":{},"interfaces/CustomerRepositoryInterface.html":{},"interfaces/DepositRepositoryInterface.html":{},"injectables/DocumentTypeRepository.html":{},"interfaces/DocumentTypeRepositoryInterface.html":{},"interfaces/TransferRepositoryInterface.html":{}}}],["repositorios",{"_index":585,"title":{},"body":{"interfaces/BaseRepositoryInterface.html":{}}}],["repository",{"_index":295,"title":{},"body":{"injectables/AccountRepository.html":{},"injectables/AccountTypeRepository.html":{},"injectables/CustomerRepository.html":{},"injectables/DepositRepository.html":{},"injectables/DocumentTypeRepository.html":{},"injectables/TransferRepository.html":{},"index.html":{}}}],["repository.interface.ts",{"_index":372,"title":{},"body":{"interfaces/AccountRepositoryInterface.html":{},"interfaces/AccountTypeRepositoryInterface.html":{},"interfaces/CustomerRepositoryInterface.html":{},"interfaces/DepositRepositoryInterface.html":{},"interfaces/DocumentTypeRepositoryInterface.html":{},"interfaces/TransferRepositoryInterface.html":{},"coverage.html":{}}}],["repository.interface.ts:20",{"_index":1320,"title":{},"body":{"interfaces/TransferRepositoryInterface.html":{}}}],["repository.interface.ts:21",{"_index":385,"title":{},"body":{"interfaces/AccountRepositoryInterface.html":{},"interfaces/AccountTypeRepositoryInterface.html":{},"interfaces/DepositRepositoryInterface.html":{},"interfaces/DocumentTypeRepositoryInterface.html":{}}}],["repository.interface.ts:22",{"_index":740,"title":{},"body":{"interfaces/CustomerRepositoryInterface.html":{}}}],["repository.interface.ts:29",{"_index":1324,"title":{},"body":{"interfaces/TransferRepositoryInterface.html":{}}}],["repository.interface.ts:30",{"_index":382,"title":{},"body":{"interfaces/AccountRepositoryInterface.html":{},"interfaces/AccountTypeRepositoryInterface.html":{},"interfaces/DocumentTypeRepositoryInterface.html":{}}}],["repository.interface.ts:31",{"_index":930,"title":{},"body":{"interfaces/DepositRepositoryInterface.html":{}}}],["repository.interface.ts:32",{"_index":738,"title":{},"body":{"interfaces/CustomerRepositoryInterface.html":{}}}],["repository.interface.ts:39",{"_index":379,"title":{},"body":{"interfaces/AccountRepositoryInterface.html":{}}}],["repository.interface.ts:40",{"_index":1325,"title":{},"body":{"interfaces/TransferRepositoryInterface.html":{}}}],["repository.interface.ts:44",{"_index":739,"title":{},"body":{"interfaces/CustomerRepositoryInterface.html":{}}}],["repository.interface.ts:53",{"_index":742,"title":{},"body":{"interfaces/CustomerRepositoryInterface.html":{}}}],["repository.interface.ts:55",{"_index":1321,"title":{},"body":{"interfaces/TransferRepositoryInterface.html":{}}}],["repository.interface.ts:62",{"_index":737,"title":{},"body":{"interfaces/CustomerRepositoryInterface.html":{}}}],["repository.interface.ts:71",{"_index":736,"title":{},"body":{"interfaces/CustomerRepositoryInterface.html":{}}}],["representa",{"_index":273,"title":{},"body":{"interfaces/AccountModel.html":{},"interfaces/CustomerModel.html":{},"classes/CustomerUpdateDTO.html":{},"classes/DataRangeDTO.html":{},"classes/DepositDTO.html":{},"interfaces/DepositModel.html":{},"interfaces/DocumentTypeModel.html":{},"classes/PaginationDTO.html":{},"interfaces/PaginationModel.html":{},"classes/TransferDTO.html":{},"interfaces/TransferModel.html":{},"classes/TypeOrmExceptionFilter.html":{}}}],["representar",{"_index":193,"title":{},"body":{"classes/AccountDTO.html":{},"classes/CustomerDTO.html":{},"classes/DataRangeDTO.html":{},"classes/DepositDTO.html":{},"classes/TransferDTO.html":{}}}],["req",{"_index":1101,"title":{},"body":{"injectables/MiddlewaresMiddleware.html":{}}}],["req.headers.authorization",{"_index":1109,"title":{},"body":{"injectables/MiddlewaresMiddleware.html":{}}}],["req.headers['authorization",{"_index":1111,"title":{},"body":{"injectables/MiddlewaresMiddleware.html":{}}}],["request",{"_index":1047,"title":{},"body":{"guards/GuardsGuard.html":{},"injectables/MiddlewaresMiddleware.html":{}}}],["request.headers.authorization",{"_index":1050,"title":{},"body":{"guards/GuardsGuard.html":{}}}],["request.user",{"_index":1058,"title":{},"body":{"guards/GuardsGuard.html":{}}}],["res",{"_index":1095,"title":{},"body":{"injectables/MiddlewaresMiddleware.html":{}}}],["reset",{"_index":528,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["response",{"_index":1096,"title":{},"body":{"injectables/MiddlewaresMiddleware.html":{},"classes/TypeOrmExceptionFilter.html":{}}}],["response.status(customresponse.status).json(customresponse",{"_index":1396,"title":{},"body":{"classes/TypeOrmExceptionFilter.html":{}}}],["respuesta",{"_index":1082,"title":{},"body":{"injectables/InterceptorsInterceptor.html":{},"injectables/MiddlewaresMiddleware.html":{},"classes/TypeOrmExceptionFilter.html":{}}}],["resuelve",{"_index":63,"title":{},"body":{"controllers/AccountController.html":{},"injectables/AccountRepository.html":{},"interfaces/AccountRepositoryInterface.html":{},"injectables/AccountTypeRepository.html":{},"interfaces/AccountTypeRepositoryInterface.html":{},"interfaces/BaseRepositoryInterface.html":{},"injectables/CustomerRepository.html":{},"interfaces/CustomerRepositoryInterface.html":{},"controllers/DepositController.html":{},"injectables/DepositRepository.html":{},"interfaces/DepositRepositoryInterface.html":{},"injectables/DocumentTypeRepository.html":{},"interfaces/DocumentTypeRepositoryInterface.html":{},"guards/GuardsGuard.html":{},"controllers/SecurityController.html":{},"controllers/TransferController.html":{},"injectables/TransferRepository.html":{},"interfaces/TransferRepositoryInterface.html":{},"controllers/UserController.html":{}}}],["result",{"_index":359,"title":{},"body":{"injectables/AccountRepository.html":{},"injectables/AccountTypeRepository.html":{},"injectables/CustomerRepository.html":{},"injectables/DepositRepository.html":{},"injectables/DocumentTypeRepository.html":{},"injectables/TransferRepository.html":{}}}],["result.affected",{"_index":349,"title":{},"body":{"injectables/AccountRepository.html":{},"injectables/AccountTypeRepository.html":{},"injectables/CustomerRepository.html":{},"injectables/DepositRepository.html":{},"injectables/DocumentTypeRepository.html":{},"injectables/TransferRepository.html":{}}}],["result.id",{"_index":923,"title":{},"body":{"injectables/DepositRepository.html":{}}}],["result.length",{"_index":733,"title":{},"body":{"injectables/CustomerRepository.html":{}}}],["results",{"_index":186,"title":{},"body":{"controllers/AccountController.html":{},"classes/AccountDTO.html":{},"entities/AccountEntity.html":{},"interfaces/AccountModel.html":{},"injectables/AccountRepository.html":{},"interfaces/AccountRepositoryInterface.html":{},"injectables/AccountService.html":{},"entities/AccountTypeEntity.html":{},"interfaces/AccountTypeModel.html":{},"injectables/AccountTypeRepository.html":{},"interfaces/AccountTypeRepositoryInterface.html":{},"modules/AppModule.html":{},"interfaces/BaseRepositoryInterface.html":{},"classes/CustomerDTO.html":{},"entities/CustomerEntity.html":{},"interfaces/CustomerModel.html":{},"injectables/CustomerRepository.html":{},"interfaces/CustomerRepositoryInterface.html":{},"injectables/CustomerService.html":{},"classes/CustomerUpdateDTO.html":{},"classes/DataRangeDTO.html":{},"interfaces/DataRangeModel.html":{},"controllers/DepositController.html":{},"classes/DepositDTO.html":{},"entities/DepositEntity.html":{},"interfaces/DepositModel.html":{},"injectables/DepositRepository.html":{},"interfaces/DepositRepositoryInterface.html":{},"injectables/DepositService.html":{},"entities/DocumentTypeEntity.html":{},"interfaces/DocumentTypeModel.html":{},"injectables/DocumentTypeRepository.html":{},"interfaces/DocumentTypeRepositoryInterface.html":{},"classes/ExceptionFiltersFilter.html":{},"guards/GuardsGuard.html":{},"injectables/InterceptorsInterceptor.html":{},"injectables/MiddlewaresMiddleware.html":{},"classes/PaginationDTO.html":{},"interfaces/PaginationModel.html":{},"injectables/PipesPipe.html":{},"controllers/SecurityController.html":{},"injectables/SecurityService.html":{},"classes/SignDTO.html":{},"controllers/TransferController.html":{},"classes/TransferDTO.html":{},"entities/TransferEntity.html":{},"interfaces/TransferModel.html":{},"injectables/TransferRepository.html":{},"interfaces/TransferRepositoryInterface.html":{},"injectables/TransferService.html":{},"classes/TypeOrmExceptionFilter.html":{},"injectables/TypesOrmPostgresConfigService.html":{},"controllers/UserController.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/variables.html":{}}}],["retirar",{"_index":426,"title":{},"body":{"injectables/AccountService.html":{}}}],["return",{"_index":158,"title":{},"body":{"controllers/AccountController.html":{},"entities/AccountEntity.html":{},"injectables/AccountRepository.html":{},"injectables/AccountService.html":{},"injectables/AccountTypeRepository.html":{},"injectables/CustomerRepository.html":{},"injectables/CustomerService.html":{},"controllers/DepositController.html":{},"injectables/DepositRepository.html":{},"injectables/DepositService.html":{},"injectables/DocumentTypeRepository.html":{},"guards/GuardsGuard.html":{},"injectables/InterceptorsInterceptor.html":{},"injectables/PipesPipe.html":{},"controllers/SecurityController.html":{},"injectables/SecurityService.html":{},"controllers/TransferController.html":{},"injectables/TransferRepository.html":{},"injectables/TransferService.html":{},"injectables/TypesOrmPostgresConfigService.html":{},"controllers/UserController.html":{}}}],["returns",{"_index":60,"title":{},"body":{"controllers/AccountController.html":{},"entities/AccountEntity.html":{},"injectables/AccountRepository.html":{},"interfaces/AccountRepositoryInterface.html":{},"injectables/AccountService.html":{},"injectables/AccountTypeRepository.html":{},"interfaces/AccountTypeRepositoryInterface.html":{},"modules/AppModule.html":{},"interfaces/BaseRepositoryInterface.html":{},"injectables/CustomerRepository.html":{},"interfaces/CustomerRepositoryInterface.html":{},"injectables/CustomerService.html":{},"controllers/DepositController.html":{},"injectables/DepositRepository.html":{},"interfaces/DepositRepositoryInterface.html":{},"injectables/DepositService.html":{},"injectables/DocumentTypeRepository.html":{},"interfaces/DocumentTypeRepositoryInterface.html":{},"classes/ExceptionFiltersFilter.html":{},"guards/GuardsGuard.html":{},"injectables/InterceptorsInterceptor.html":{},"injectables/MiddlewaresMiddleware.html":{},"injectables/PipesPipe.html":{},"controllers/SecurityController.html":{},"injectables/SecurityService.html":{},"controllers/TransferController.html":{},"injectables/TransferRepository.html":{},"interfaces/TransferRepositoryInterface.html":{},"injectables/TransferService.html":{},"classes/TypeOrmExceptionFilter.html":{},"injectables/TypesOrmPostgresConfigService.html":{},"controllers/UserController.html":{},"miscellaneous/functions.html":{}}}],["run",{"_index":1544,"title":{},"body":{"index.html":{}}}],["rutas",{"_index":1030,"title":{},"body":{"guards/GuardsGuard.html":{}}}],["rxjs",{"_index":1084,"title":{},"body":{"injectables/InterceptorsInterceptor.html":{},"dependencies.html":{}}}],["saldo",{"_index":44,"title":{},"body":{"controllers/AccountController.html":{},"entities/AccountEntity.html":{},"interfaces/AccountModel.html":{}}}],["sale",{"_index":1285,"title":{},"body":{"entities/TransferEntity.html":{}}}],["salida",{"_index":1290,"title":{},"body":{"interfaces/TransferModel.html":{},"injectables/TransferRepository.html":{},"interfaces/TransferRepositoryInterface.html":{},"injectables/TransferService.html":{}}}],["salir",{"_index":1181,"title":{},"body":{"injectables/SecurityService.html":{}}}],["scalable",{"_index":1532,"title":{},"body":{"index.html":{}}}],["schema",{"_index":254,"title":{},"body":{"entities/AccountEntity.html":{},"entities/AccountTypeEntity.html":{},"entities/CustomerEntity.html":{},"entities/DepositEntity.html":{},"entities/DocumentTypeEntity.html":{},"entities/TransferEntity.html":{}}}],["se",{"_index":238,"title":{},"body":{"entities/AccountEntity.html":{},"injectables/AccountTypeRepository.html":{},"interfaces/BaseRepositoryInterface.html":{},"entities/CustomerEntity.html":{},"injectables/CustomerRepository.html":{},"interfaces/CustomerRepositoryInterface.html":{},"injectables/CustomerService.html":{},"entities/DepositEntity.html":{},"interfaces/DepositModel.html":{},"injectables/DepositRepository.html":{},"injectables/DocumentTypeRepository.html":{},"injectables/MiddlewaresMiddleware.html":{},"injectables/PipesPipe.html":{},"entities/TransferEntity.html":{},"injectables/TransferRepository.html":{},"miscellaneous/variables.html":{}}}],["secret",{"_index":562,"title":{},"body":{"modules/AppModule.html":{},"miscellaneous/variables.html":{}}}],["secreta",{"_index":1619,"title":{},"body":{"miscellaneous/variables.html":{}}}],["secretkey",{"_index":1612,"title":{},"body":{"miscellaneous/variables.html":{}}}],["security",{"_index":1141,"title":{},"body":{"controllers/SecurityController.html":{}}}],["securitycontroller",{"_index":533,"title":{"controllers/SecurityController.html":{}},"body":{"modules/AppModule.html":{},"controllers/SecurityController.html":{},"coverage.html":{}}}],["securityservice",{"_index":524,"title":{"injectables/SecurityService.html":{}},"body":{"modules/AppModule.html":{},"controllers/SecurityController.html":{},"injectables/SecurityService.html":{},"coverage.html":{},"overview.html":{}}}],["seguridad",{"_index":1142,"title":{},"body":{"controllers/SecurityController.html":{}}}],["selecciona",{"_index":1243,"title":{},"body":{"controllers/TransferController.html":{}}}],["seleccionada",{"_index":1244,"title":{},"body":{"controllers/TransferController.html":{}}}],["select",{"_index":231,"title":{},"body":{"entities/AccountEntity.html":{},"entities/CustomerEntity.html":{},"entities/DepositEntity.html":{},"entities/TransferEntity.html":{}}}],["selecttransfer",{"_index":1220,"title":{},"body":{"controllers/TransferController.html":{},"injectables/TransferService.html":{}}}],["selecttransfer(@param('id",{"_index":1249,"title":{},"body":{"controllers/TransferController.html":{}}}],["selecttransfer(id",{"_index":1240,"title":{},"body":{"controllers/TransferController.html":{}}}],["selecttransfer(transferid",{"_index":1340,"title":{},"body":{"injectables/TransferService.html":{}}}],["ser",{"_index":305,"title":{},"body":{"injectables/AccountRepository.html":{},"classes/CustomerUpdateDTO.html":{},"classes/DataRangeDTO.html":{},"interfaces/DataRangeModel.html":{},"classes/DepositDTO.html":{},"classes/PaginationDTO.html":{},"classes/SignDTO.html":{},"classes/TransferDTO.html":{}}}],["server",{"_index":1390,"title":{},"body":{"classes/TypeOrmExceptionFilter.html":{},"index.html":{}}}],["services",{"_index":1187,"title":{},"body":{"injectables/SecurityService.html":{}}}],["servicio",{"_index":1400,"title":{},"body":{"injectables/TypesOrmPostgresConfigService.html":{}}}],["sesión",{"_index":1144,"title":{},"body":{"controllers/SecurityController.html":{},"classes/SignDTO.html":{}}}],["setmetadata('decorators",{"_index":1603,"title":{},"body":{"miscellaneous/variables.html":{}}}],["short",{"_index":1558,"title":{},"body":{"index.html":{}}}],["si",{"_index":69,"title":{},"body":{"controllers/AccountController.html":{},"injectables/AccountRepository.html":{},"interfaces/BaseRepositoryInterface.html":{},"injectables/CustomerRepository.html":{},"interfaces/CustomerRepositoryInterface.html":{},"injectables/CustomerService.html":{},"injectables/DepositRepository.html":{},"injectables/DocumentTypeRepository.html":{},"guards/GuardsGuard.html":{},"controllers/SecurityController.html":{},"entities/TransferEntity.html":{},"injectables/TransferRepository.html":{},"controllers/UserController.html":{},"miscellaneous/variables.html":{}}}],["side",{"_index":1533,"title":{},"body":{"index.html":{}}}],["sido",{"_index":83,"title":{},"body":{"controllers/AccountController.html":{},"injectables/CustomerRepository.html":{}}}],["signdto",{"_index":1156,"title":{"classes/SignDTO.html":{}},"body":{"controllers/SecurityController.html":{},"injectables/SecurityService.html":{},"classes/SignDTO.html":{},"coverage.html":{}}}],["signin",{"_index":1147,"title":{},"body":{"controllers/SecurityController.html":{},"injectables/SecurityService.html":{}}}],["signin(@body",{"_index":1168,"title":{},"body":{"controllers/SecurityController.html":{}}}],["signin(customer",{"_index":1155,"title":{},"body":{"controllers/SecurityController.html":{}}}],["signin(user",{"_index":1175,"title":{},"body":{"injectables/SecurityService.html":{}}}],["signout",{"_index":1173,"title":{},"body":{"injectables/SecurityService.html":{}}}],["signout(jwt",{"_index":1179,"title":{},"body":{"injectables/SecurityService.html":{}}}],["signup",{"_index":1148,"title":{},"body":{"controllers/SecurityController.html":{},"injectables/SecurityService.html":{}}}],["signup(@body",{"_index":1166,"title":{},"body":{"controllers/SecurityController.html":{}}}],["signup(customer",{"_index":1161,"title":{},"body":{"controllers/SecurityController.html":{}}}],["signup(user",{"_index":1182,"title":{},"body":{"injectables/SecurityService.html":{}}}],["siguiente",{"_index":1080,"title":{},"body":{"injectables/InterceptorsInterceptor.html":{},"injectables/MiddlewaresMiddleware.html":{}}}],["sistema",{"_index":753,"title":{},"body":{"injectables/CustomerService.html":{},"injectables/SecurityService.html":{}}}],["slice(start",{"_index":962,"title":{},"body":{"injectables/DepositService.html":{},"injectables/TransferService.html":{}}}],["soft",{"_index":299,"title":{},"body":{"injectables/AccountRepository.html":{},"interfaces/BaseRepositoryInterface.html":{},"injectables/CustomerRepository.html":{},"injectables/DepositRepository.html":{},"injectables/TransferRepository.html":{}}}],["softdelete",{"_index":292,"title":{},"body":{"injectables/AccountRepository.html":{},"injectables/CustomerRepository.html":{},"injectables/DepositRepository.html":{},"injectables/TransferRepository.html":{}}}],["softdelete(id",{"_index":332,"title":{},"body":{"injectables/AccountRepository.html":{},"injectables/CustomerRepository.html":{},"injectables/DepositRepository.html":{},"injectables/TransferRepository.html":{}}}],["solicitud",{"_index":55,"title":{},"body":{"controllers/AccountController.html":{},"controllers/DepositController.html":{},"guards/GuardsGuard.html":{},"injectables/InterceptorsInterceptor.html":{},"injectables/MiddlewaresMiddleware.html":{},"controllers/SecurityController.html":{},"controllers/TransferController.html":{},"classes/TypeOrmExceptionFilter.html":{}}}],["source",{"_index":4,"title":{},"body":{"controllers/AccountController.html":{},"classes/AccountDTO.html":{},"entities/AccountEntity.html":{},"interfaces/AccountModel.html":{},"injectables/AccountRepository.html":{},"interfaces/AccountRepositoryInterface.html":{},"injectables/AccountService.html":{},"entities/AccountTypeEntity.html":{},"interfaces/AccountTypeModel.html":{},"injectables/AccountTypeRepository.html":{},"interfaces/AccountTypeRepositoryInterface.html":{},"modules/AppModule.html":{},"interfaces/BaseRepositoryInterface.html":{},"classes/CustomerDTO.html":{},"entities/CustomerEntity.html":{},"interfaces/CustomerModel.html":{},"injectables/CustomerRepository.html":{},"interfaces/CustomerRepositoryInterface.html":{},"injectables/CustomerService.html":{},"classes/CustomerUpdateDTO.html":{},"classes/DataRangeDTO.html":{},"interfaces/DataRangeModel.html":{},"controllers/DepositController.html":{},"classes/DepositDTO.html":{},"entities/DepositEntity.html":{},"interfaces/DepositModel.html":{},"injectables/DepositRepository.html":{},"interfaces/DepositRepositoryInterface.html":{},"injectables/DepositService.html":{},"entities/DocumentTypeEntity.html":{},"interfaces/DocumentTypeModel.html":{},"injectables/DocumentTypeRepository.html":{},"interfaces/DocumentTypeRepositoryInterface.html":{},"classes/ExceptionFiltersFilter.html":{},"guards/GuardsGuard.html":{},"injectables/InterceptorsInterceptor.html":{},"injectables/MiddlewaresMiddleware.html":{},"classes/PaginationDTO.html":{},"interfaces/PaginationModel.html":{},"injectables/PipesPipe.html":{},"controllers/SecurityController.html":{},"injectables/SecurityService.html":{},"classes/SignDTO.html":{},"controllers/TransferController.html":{},"classes/TransferDTO.html":{},"entities/TransferEntity.html":{},"interfaces/TransferModel.html":{},"injectables/TransferRepository.html":{},"interfaces/TransferRepositoryInterface.html":{},"injectables/TransferService.html":{},"classes/TypeOrmExceptionFilter.html":{},"injectables/TypesOrmPostgresConfigService.html":{},"controllers/UserController.html":{}}}],["src/.../account.entity.ts",{"_index":1523,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../decorators.decorator.ts",{"_index":1600,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../main.ts",{"_index":1522,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../secret.ts",{"_index":1601,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/app.module.ts",{"_index":530,"title":{},"body":{"modules/AppModule.html":{}}}],["src/app.module.ts:92",{"_index":538,"title":{},"body":{"modules/AppModule.html":{}}}],["src/business/dtos",{"_index":142,"title":{},"body":{"controllers/AccountController.html":{},"injectables/AccountService.html":{},"injectables/CustomerService.html":{},"controllers/DepositController.html":{},"injectables/DepositService.html":{},"controllers/TransferController.html":{},"injectables/TransferService.html":{}}}],["src/business/dtos/account.dto.ts",{"_index":189,"title":{},"body":{"classes/AccountDTO.html":{},"coverage.html":{}}}],["src/business/dtos/account.dto.ts:23",{"_index":197,"title":{},"body":{"classes/AccountDTO.html":{}}}],["src/business/dtos/account.dto.ts:33",{"_index":200,"title":{},"body":{"classes/AccountDTO.html":{}}}],["src/business/dtos/customer.dto.ts",{"_index":602,"title":{},"body":{"classes/CustomerDTO.html":{},"coverage.html":{}}}],["src/business/dtos/customer.dto.ts:26",{"_index":611,"title":{},"body":{"classes/CustomerDTO.html":{}}}],["src/business/dtos/customer.dto.ts:36",{"_index":608,"title":{},"body":{"classes/CustomerDTO.html":{}}}],["src/business/dtos/customer.dto.ts:48",{"_index":617,"title":{},"body":{"classes/CustomerDTO.html":{}}}],["src/business/dtos/customer.dto.ts:58",{"_index":613,"title":{},"body":{"classes/CustomerDTO.html":{}}}],["src/business/dtos/customer.dto.ts:70",{"_index":633,"title":{},"body":{"classes/CustomerDTO.html":{}}}],["src/business/dtos/customer.dto.ts:83",{"_index":621,"title":{},"body":{"classes/CustomerDTO.html":{}}}],["src/business/dtos/data",{"_index":822,"title":{},"body":{"classes/DataRangeDTO.html":{},"coverage.html":{}}}],["src/business/dtos/deposit.dto.ts",{"_index":880,"title":{},"body":{"classes/DepositDTO.html":{},"coverage.html":{}}}],["src/business/dtos/deposit.dto.ts:20",{"_index":881,"title":{},"body":{"classes/DepositDTO.html":{}}}],["src/business/dtos/deposit.dto.ts:32",{"_index":882,"title":{},"body":{"classes/DepositDTO.html":{}}}],["src/business/dtos/pagination.dto.ts",{"_index":1113,"title":{},"body":{"classes/PaginationDTO.html":{},"coverage.html":{}}}],["src/business/dtos/pagination.dto.ts:20",{"_index":1115,"title":{},"body":{"classes/PaginationDTO.html":{}}}],["src/business/dtos/pagination.dto.ts:32",{"_index":1119,"title":{},"body":{"classes/PaginationDTO.html":{}}}],["src/business/dtos/sign.dto.ts",{"_index":1211,"title":{},"body":{"classes/SignDTO.html":{},"coverage.html":{}}}],["src/business/dtos/sign.dto.ts:20",{"_index":1212,"title":{},"body":{"classes/SignDTO.html":{}}}],["src/business/dtos/sign.dto.ts:32",{"_index":1213,"title":{},"body":{"classes/SignDTO.html":{}}}],["src/business/dtos/transfer.dto.ts",{"_index":1259,"title":{},"body":{"classes/TransferDTO.html":{},"coverage.html":{}}}],["src/business/dtos/transfer.dto.ts:20",{"_index":1266,"title":{},"body":{"classes/TransferDTO.html":{}}}],["src/business/dtos/transfer.dto.ts:32",{"_index":1264,"title":{},"body":{"classes/TransferDTO.html":{}}}],["src/business/dtos/transfer.dto.ts:44",{"_index":1263,"title":{},"body":{"classes/TransferDTO.html":{}}}],["src/business/dtos/transfer.dto.ts:58",{"_index":1268,"title":{},"body":{"classes/TransferDTO.html":{}}}],["src/business/dtos/update",{"_index":777,"title":{},"body":{"injectables/CustomerService.html":{},"classes/CustomerUpdateDTO.html":{},"controllers/UserController.html":{},"coverage.html":{}}}],["src/business/services/account/account.service.ts",{"_index":387,"title":{},"body":{"injectables/AccountService.html":{},"coverage.html":{}}}],["src/business/services/account/account.service.ts:115",{"_index":424,"title":{},"body":{"injectables/AccountService.html":{}}}],["src/business/services/account/account.service.ts:137",{"_index":419,"title":{},"body":{"injectables/AccountService.html":{}}}],["src/business/services/account/account.service.ts:148",{"_index":403,"title":{},"body":{"injectables/AccountService.html":{}}}],["src/business/services/account/account.service.ts:15",{"_index":394,"title":{},"body":{"injectables/AccountService.html":{}}}],["src/business/services/account/account.service.ts:162",{"_index":414,"title":{},"body":{"injectables/AccountService.html":{}}}],["src/business/services/account/account.service.ts:180",{"_index":400,"title":{},"body":{"injectables/AccountService.html":{}}}],["src/business/services/account/account.service.ts:204",{"_index":408,"title":{},"body":{"injectables/AccountService.html":{}}}],["src/business/services/account/account.service.ts:29",{"_index":404,"title":{},"body":{"injectables/AccountService.html":{}}}],["src/business/services/account/account.service.ts:40",{"_index":406,"title":{},"body":{"injectables/AccountService.html":{}}}],["src/business/services/account/account.service.ts:54",{"_index":417,"title":{},"body":{"injectables/AccountService.html":{}}}],["src/business/services/account/account.service.ts:63",{"_index":412,"title":{},"body":{"injectables/AccountService.html":{}}}],["src/business/services/account/account.service.ts:67",{"_index":410,"title":{},"body":{"injectables/AccountService.html":{}}}],["src/business/services/account/account.service.ts:78",{"_index":396,"title":{},"body":{"injectables/AccountService.html":{}}}],["src/business/services/account/account.service.ts:95",{"_index":421,"title":{},"body":{"injectables/AccountService.html":{}}}],["src/business/services/customer/customer.service.ts",{"_index":743,"title":{},"body":{"injectables/CustomerService.html":{},"coverage.html":{}}}],["src/business/services/customer/customer.service.ts:130",{"_index":776,"title":{},"body":{"injectables/CustomerService.html":{}}}],["src/business/services/customer/customer.service.ts:152",{"_index":770,"title":{},"body":{"injectables/CustomerService.html":{}}}],["src/business/services/customer/customer.service.ts:16",{"_index":750,"title":{},"body":{"injectables/CustomerService.html":{}}}],["src/business/services/customer/customer.service.ts:171",{"_index":752,"title":{},"body":{"injectables/CustomerService.html":{}}}],["src/business/services/customer/customer.service.ts:30",{"_index":759,"title":{},"body":{"injectables/CustomerService.html":{}}}],["src/business/services/customer/customer.service.ts:42",{"_index":762,"title":{},"body":{"injectables/CustomerService.html":{}}}],["src/business/services/customer/customer.service.ts:53",{"_index":755,"title":{},"body":{"injectables/CustomerService.html":{}}}],["src/business/services/customer/customer.service.ts:65",{"_index":757,"title":{},"body":{"injectables/CustomerService.html":{}}}],["src/business/services/customer/customer.service.ts:76",{"_index":767,"title":{},"body":{"injectables/CustomerService.html":{}}}],["src/business/services/customer/customer.service.ts:96",{"_index":764,"title":{},"body":{"injectables/CustomerService.html":{}}}],["src/business/services/deposit/deposit.service.ts",{"_index":931,"title":{},"body":{"injectables/DepositService.html":{},"coverage.html":{}}}],["src/business/services/deposit/deposit.service.ts:13",{"_index":933,"title":{},"body":{"injectables/DepositService.html":{}}}],["src/business/services/deposit/deposit.service.ts:26",{"_index":935,"title":{},"body":{"injectables/DepositService.html":{}}}],["src/business/services/deposit/deposit.service.ts:46",{"_index":937,"title":{},"body":{"injectables/DepositService.html":{}}}],["src/business/services/deposit/deposit.service.ts:59",{"_index":940,"title":{},"body":{"injectables/DepositService.html":{}}}],["src/business/services/security/secret.ts",{"_index":1475,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/business/services/security/security.service.ts",{"_index":1172,"title":{},"body":{"injectables/SecurityService.html":{},"coverage.html":{}}}],["src/business/services/security/security.service.ts:100",{"_index":1180,"title":{},"body":{"injectables/SecurityService.html":{}}}],["src/business/services/security/security.service.ts:24",{"_index":1174,"title":{},"body":{"injectables/SecurityService.html":{}}}],["src/business/services/security/security.service.ts:39",{"_index":1176,"title":{},"body":{"injectables/SecurityService.html":{}}}],["src/business/services/security/security.service.ts:58",{"_index":1183,"title":{},"body":{"injectables/SecurityService.html":{}}}],["src/business/services/transfer/transfer.service.ts",{"_index":1326,"title":{},"body":{"injectables/TransferService.html":{},"coverage.html":{}}}],["src/business/services/transfer/transfer.service.ts:130",{"_index":1334,"title":{},"body":{"injectables/TransferService.html":{}}}],["src/business/services/transfer/transfer.service.ts:15",{"_index":1327,"title":{},"body":{"injectables/TransferService.html":{}}}],["src/business/services/transfer/transfer.service.ts:167",{"_index":1331,"title":{},"body":{"injectables/TransferService.html":{}}}],["src/business/services/transfer/transfer.service.ts:171",{"_index":1341,"title":{},"body":{"injectables/TransferService.html":{}}}],["src/business/services/transfer/transfer.service.ts:28",{"_index":1328,"title":{},"body":{"injectables/TransferService.html":{}}}],["src/business/services/transfer/transfer.service.ts:60",{"_index":1339,"title":{},"body":{"injectables/TransferService.html":{}}}],["src/business/services/transfer/transfer.service.ts:95",{"_index":1337,"title":{},"body":{"injectables/TransferService.html":{}}}],["src/common/decorators/decorators.decorator.ts",{"_index":1480,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/common/exception",{"_index":1006,"title":{},"body":{"classes/ExceptionFiltersFilter.html":{},"coverage.html":{}}}],["src/data/models/account",{"_index":466,"title":{},"body":{"interfaces/AccountTypeModel.html":{},"coverage.html":{}}}],["src/data/models/account.model.ts",{"_index":267,"title":{},"body":{"interfaces/AccountModel.html":{},"coverage.html":{}}}],["src/data/models/customer.model.ts",{"_index":669,"title":{},"body":{"interfaces/CustomerModel.html":{},"coverage.html":{}}}],["src/data/models/data",{"_index":839,"title":{},"body":{"interfaces/DataRangeModel.html":{},"coverage.html":{}}}],["src/data/models/deposit.model.ts",{"_index":893,"title":{},"body":{"interfaces/DepositModel.html":{},"coverage.html":{}}}],["src/data/models/document",{"_index":966,"title":{},"body":{"interfaces/DocumentTypeModel.html":{},"coverage.html":{}}}],["src/data/models/pagination.model.ts",{"_index":1121,"title":{},"body":{"interfaces/PaginationModel.html":{},"coverage.html":{}}}],["src/data/models/transfer.model.ts",{"_index":1288,"title":{},"body":{"interfaces/TransferModel.html":{},"coverage.html":{}}}],["src/data/persistence/configs/types",{"_index":1397,"title":{},"body":{"injectables/TypesOrmPostgresConfigService.html":{},"coverage.html":{}}}],["src/data/persistence/entities/account",{"_index":455,"title":{},"body":{"entities/AccountTypeEntity.html":{},"coverage.html":{}}}],["src/data/persistence/entities/account.entity.ts",{"_index":209,"title":{},"body":{"entities/AccountEntity.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/data/persistence/entities/account.entity.ts:28",{"_index":244,"title":{},"body":{"entities/AccountEntity.html":{}}}],["src/data/persistence/entities/account.entity.ts:38",{"_index":224,"title":{},"body":{"entities/AccountEntity.html":{}}}],["src/data/persistence/entities/account.entity.ts:48",{"_index":216,"title":{},"body":{"entities/AccountEntity.html":{}}}],["src/data/persistence/entities/account.entity.ts:60",{"_index":222,"title":{},"body":{"entities/AccountEntity.html":{}}}],["src/data/persistence/entities/account.entity.ts:72",{"_index":245,"title":{},"body":{"entities/AccountEntity.html":{}}}],["src/data/persistence/entities/account.entity.ts:86",{"_index":233,"title":{},"body":{"entities/AccountEntity.html":{}}}],["src/data/persistence/entities/customer.entity.ts",{"_index":646,"title":{},"body":{"entities/CustomerEntity.html":{},"coverage.html":{}}}],["src/data/persistence/entities/customer.entity.ts:106",{"_index":666,"title":{},"body":{"entities/CustomerEntity.html":{}}}],["src/data/persistence/entities/customer.entity.ts:120",{"_index":651,"title":{},"body":{"entities/CustomerEntity.html":{}}}],["src/data/persistence/entities/customer.entity.ts:132",{"_index":668,"title":{},"body":{"entities/CustomerEntity.html":{}}}],["src/data/persistence/entities/customer.entity.ts:146",{"_index":654,"title":{},"body":{"entities/CustomerEntity.html":{}}}],["src/data/persistence/entities/customer.entity.ts:29",{"_index":665,"title":{},"body":{"entities/CustomerEntity.html":{}}}],["src/data/persistence/entities/customer.entity.ts:41",{"_index":660,"title":{},"body":{"entities/CustomerEntity.html":{}}}],["src/data/persistence/entities/customer.entity.ts:54",{"_index":656,"title":{},"body":{"entities/CustomerEntity.html":{}}}],["src/data/persistence/entities/customer.entity.ts:67",{"_index":664,"title":{},"body":{"entities/CustomerEntity.html":{}}}],["src/data/persistence/entities/customer.entity.ts:80",{"_index":662,"title":{},"body":{"entities/CustomerEntity.html":{}}}],["src/data/persistence/entities/customer.entity.ts:93",{"_index":667,"title":{},"body":{"entities/CustomerEntity.html":{}}}],["src/data/persistence/entities/deposit.entity.ts",{"_index":883,"title":{},"body":{"entities/DepositEntity.html":{},"coverage.html":{}}}],["src/data/persistence/entities/deposit.entity.ts:29",{"_index":891,"title":{},"body":{"entities/DepositEntity.html":{}}}],["src/data/persistence/entities/deposit.entity.ts:41",{"_index":887,"title":{},"body":{"entities/DepositEntity.html":{}}}],["src/data/persistence/entities/deposit.entity.ts:51",{"_index":885,"title":{},"body":{"entities/DepositEntity.html":{}}}],["src/data/persistence/entities/deposit.entity.ts:63",{"_index":889,"title":{},"body":{"entities/DepositEntity.html":{}}}],["src/data/persistence/entities/deposit.entity.ts:77",{"_index":890,"title":{},"body":{"entities/DepositEntity.html":{}}}],["src/data/persistence/entities/document",{"_index":964,"title":{},"body":{"entities/DocumentTypeEntity.html":{},"coverage.html":{}}}],["src/data/persistence/entities/transfer.entitty.ts",{"_index":1271,"title":{},"body":{"entities/TransferEntity.html":{},"coverage.html":{}}}],["src/data/persistence/entities/transfer.entitty.ts:100",{"_index":1278,"title":{},"body":{"entities/TransferEntity.html":{}}}],["src/data/persistence/entities/transfer.entitty.ts:29",{"_index":1279,"title":{},"body":{"entities/TransferEntity.html":{}}}],["src/data/persistence/entities/transfer.entitty.ts:39",{"_index":1284,"title":{},"body":{"entities/TransferEntity.html":{}}}],["src/data/persistence/entities/transfer.entitty.ts:49",{"_index":1280,"title":{},"body":{"entities/TransferEntity.html":{}}}],["src/data/persistence/entities/transfer.entitty.ts:61",{"_index":1276,"title":{},"body":{"entities/TransferEntity.html":{}}}],["src/data/persistence/entities/transfer.entitty.ts:74",{"_index":1286,"title":{},"body":{"entities/TransferEntity.html":{}}}],["src/data/persistence/entities/transfer.entitty.ts:86",{"_index":1277,"title":{},"body":{"entities/TransferEntity.html":{}}}],["src/data/persistence/repositories/account",{"_index":471,"title":{},"body":{"injectables/AccountTypeRepository.html":{},"coverage.html":{}}}],["src/data/persistence/repositories/account.repository.ts",{"_index":283,"title":{},"body":{"injectables/AccountRepository.html":{},"coverage.html":{}}}],["src/data/persistence/repositories/account.repository.ts:111",{"_index":311,"title":{},"body":{"injectables/AccountRepository.html":{}}}],["src/data/persistence/repositories/account.repository.ts:125",{"_index":320,"title":{},"body":{"injectables/AccountRepository.html":{}}}],["src/data/persistence/repositories/account.repository.ts:137",{"_index":318,"title":{},"body":{"injectables/AccountRepository.html":{}}}],["src/data/persistence/repositories/account.repository.ts:15",{"_index":296,"title":{},"body":{"injectables/AccountRepository.html":{}}}],["src/data/persistence/repositories/account.repository.ts:152",{"_index":315,"title":{},"body":{"injectables/AccountRepository.html":{}}}],["src/data/persistence/repositories/account.repository.ts:28",{"_index":328,"title":{},"body":{"injectables/AccountRepository.html":{}}}],["src/data/persistence/repositories/account.repository.ts:40",{"_index":335,"title":{},"body":{"injectables/AccountRepository.html":{}}}],["src/data/persistence/repositories/account.repository.ts:56",{"_index":323,"title":{},"body":{"injectables/AccountRepository.html":{}}}],["src/data/persistence/repositories/account.repository.ts:80",{"_index":300,"title":{},"body":{"injectables/AccountRepository.html":{}}}],["src/data/persistence/repositories/account.repository.ts:89",{"_index":326,"title":{},"body":{"injectables/AccountRepository.html":{}}}],["src/data/persistence/repositories/account.repository.ts:93",{"_index":333,"title":{},"body":{"injectables/AccountRepository.html":{}}}],["src/data/persistence/repositories/customer.repository.ts",{"_index":672,"title":{},"body":{"injectables/CustomerRepository.html":{},"coverage.html":{}}}],["src/data/persistence/repositories/customer.repository.ts:102",{"_index":692,"title":{},"body":{"injectables/CustomerRepository.html":{}}}],["src/data/persistence/repositories/customer.repository.ts:113",{"_index":708,"title":{},"body":{"injectables/CustomerRepository.html":{}}}],["src/data/persistence/repositories/customer.repository.ts:127",{"_index":704,"title":{},"body":{"injectables/CustomerRepository.html":{}}}],["src/data/persistence/repositories/customer.repository.ts:151",{"_index":697,"title":{},"body":{"injectables/CustomerRepository.html":{}}}],["src/data/persistence/repositories/customer.repository.ts:175",{"_index":702,"title":{},"body":{"injectables/CustomerRepository.html":{}}}],["src/data/persistence/repositories/customer.repository.ts:18",{"_index":715,"title":{},"body":{"injectables/CustomerRepository.html":{}}}],["src/data/persistence/repositories/customer.repository.ts:195",{"_index":684,"title":{},"body":{"injectables/CustomerRepository.html":{}}}],["src/data/persistence/repositories/customer.repository.ts:215",{"_index":710,"title":{},"body":{"injectables/CustomerRepository.html":{}}}],["src/data/persistence/repositories/customer.repository.ts:235",{"_index":695,"title":{},"body":{"injectables/CustomerRepository.html":{}}}],["src/data/persistence/repositories/customer.repository.ts:247",{"_index":694,"title":{},"body":{"injectables/CustomerRepository.html":{}}}],["src/data/persistence/repositories/customer.repository.ts:29",{"_index":717,"title":{},"body":{"injectables/CustomerRepository.html":{}}}],["src/data/persistence/repositories/customer.repository.ts:43",{"_index":682,"title":{},"body":{"injectables/CustomerRepository.html":{}}}],["src/data/persistence/repositories/customer.repository.ts:57",{"_index":711,"title":{},"body":{"injectables/CustomerRepository.html":{}}}],["src/data/persistence/repositories/customer.repository.ts:65",{"_index":716,"title":{},"body":{"injectables/CustomerRepository.html":{}}}],["src/data/persistence/repositories/customer.repository.ts:8",{"_index":681,"title":{},"body":{"injectables/CustomerRepository.html":{}}}],["src/data/persistence/repositories/customer.repository.ts:93",{"_index":687,"title":{},"body":{"injectables/CustomerRepository.html":{}}}],["src/data/persistence/repositories/deposit.repository.ts",{"_index":895,"title":{},"body":{"injectables/DepositRepository.html":{},"coverage.html":{}}}],["src/data/persistence/repositories/deposit.repository.ts:119",{"_index":903,"title":{},"body":{"injectables/DepositRepository.html":{}}}],["src/data/persistence/repositories/deposit.repository.ts:132",{"_index":906,"title":{},"body":{"injectables/DepositRepository.html":{}}}],["src/data/persistence/repositories/deposit.repository.ts:18",{"_index":912,"title":{},"body":{"injectables/DepositRepository.html":{}}}],["src/data/persistence/repositories/deposit.repository.ts:28",{"_index":914,"title":{},"body":{"injectables/DepositRepository.html":{}}}],["src/data/persistence/repositories/deposit.repository.ts:41",{"_index":900,"title":{},"body":{"injectables/DepositRepository.html":{}}}],["src/data/persistence/repositories/deposit.repository.ts:50",{"_index":911,"title":{},"body":{"injectables/DepositRepository.html":{}}}],["src/data/persistence/repositories/deposit.repository.ts:56",{"_index":913,"title":{},"body":{"injectables/DepositRepository.html":{}}}],["src/data/persistence/repositories/deposit.repository.ts:8",{"_index":899,"title":{},"body":{"injectables/DepositRepository.html":{}}}],["src/data/persistence/repositories/deposit.repository.ts:84",{"_index":901,"title":{},"body":{"injectables/DepositRepository.html":{}}}],["src/data/persistence/repositories/deposit.repository.ts:97",{"_index":909,"title":{},"body":{"injectables/DepositRepository.html":{}}}],["src/data/persistence/repositories/document",{"_index":972,"title":{},"body":{"injectables/DocumentTypeRepository.html":{},"coverage.html":{}}}],["src/data/persistence/repositories/interfaces/account",{"_index":371,"title":{},"body":{"interfaces/AccountRepositoryInterface.html":{},"interfaces/AccountTypeRepositoryInterface.html":{},"coverage.html":{}}}],["src/data/persistence/repositories/interfaces/base/base",{"_index":583,"title":{},"body":{"interfaces/BaseRepositoryInterface.html":{},"coverage.html":{}}}],["src/data/persistence/repositories/interfaces/customer",{"_index":735,"title":{},"body":{"interfaces/CustomerRepositoryInterface.html":{},"coverage.html":{}}}],["src/data/persistence/repositories/interfaces/deposit",{"_index":929,"title":{},"body":{"interfaces/DepositRepositoryInterface.html":{},"coverage.html":{}}}],["src/data/persistence/repositories/interfaces/document",{"_index":1004,"title":{},"body":{"interfaces/DocumentTypeRepositoryInterface.html":{},"coverage.html":{}}}],["src/data/persistence/repositories/interfaces/transfer",{"_index":1319,"title":{},"body":{"interfaces/TransferRepositoryInterface.html":{},"coverage.html":{}}}],["src/data/persistence/repositories/transfer.repository.ts",{"_index":1291,"title":{},"body":{"injectables/TransferRepository.html":{},"coverage.html":{}}}],["src/data/persistence/repositories/transfer.repository.ts:102",{"_index":1301,"title":{},"body":{"injectables/TransferRepository.html":{}}}],["src/data/persistence/repositories/transfer.repository.ts:126",{"_index":1303,"title":{},"body":{"injectables/TransferRepository.html":{}}}],["src/data/persistence/repositories/transfer.repository.ts:147",{"_index":1300,"title":{},"body":{"injectables/TransferRepository.html":{}}}],["src/data/persistence/repositories/transfer.repository.ts:161",{"_index":1298,"title":{},"body":{"injectables/TransferRepository.html":{}}}],["src/data/persistence/repositories/transfer.repository.ts:19",{"_index":1305,"title":{},"body":{"injectables/TransferRepository.html":{}}}],["src/data/persistence/repositories/transfer.repository.ts:30",{"_index":1307,"title":{},"body":{"injectables/TransferRepository.html":{}}}],["src/data/persistence/repositories/transfer.repository.ts:46",{"_index":1296,"title":{},"body":{"injectables/TransferRepository.html":{}}}],["src/data/persistence/repositories/transfer.repository.ts:55",{"_index":1304,"title":{},"body":{"injectables/TransferRepository.html":{}}}],["src/data/persistence/repositories/transfer.repository.ts:61",{"_index":1306,"title":{},"body":{"injectables/TransferRepository.html":{}}}],["src/data/persistence/repositories/transfer.repository.ts:8",{"_index":1295,"title":{},"body":{"injectables/TransferRepository.html":{}}}],["src/data/persistence/repositories/transfer.repository.ts:89",{"_index":1297,"title":{},"body":{"injectables/TransferRepository.html":{}}}],["src/data/persistence/utils/exception",{"_index":1370,"title":{},"body":{"classes/TypeOrmExceptionFilter.html":{},"coverage.html":{}}}],["src/main.ts",{"_index":1498,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/presentation/controllers/account/account.controller.ts",{"_index":6,"title":{},"body":{"controllers/AccountController.html":{},"coverage.html":{}}}],["src/presentation/controllers/account/account.controller.ts:114",{"_index":109,"title":{},"body":{"controllers/AccountController.html":{}}}],["src/presentation/controllers/account/account.controller.ts:127",{"_index":67,"title":{},"body":{"controllers/AccountController.html":{}}}],["src/presentation/controllers/account/account.controller.ts:141",{"_index":87,"title":{},"body":{"controllers/AccountController.html":{}}}],["src/presentation/controllers/account/account.controller.ts:155",{"_index":126,"title":{},"body":{"controllers/AccountController.html":{}}}],["src/presentation/controllers/account/account.controller.ts:166",{"_index":78,"title":{},"body":{"controllers/AccountController.html":{}}}],["src/presentation/controllers/account/account.controller.ts:180",{"_index":102,"title":{},"body":{"controllers/AccountController.html":{}}}],["src/presentation/controllers/account/account.controller.ts:33",{"_index":119,"title":{},"body":{"controllers/AccountController.html":{}}}],["src/presentation/controllers/account/account.controller.ts:44",{"_index":122,"title":{},"body":{"controllers/AccountController.html":{}}}],["src/presentation/controllers/account/account.controller.ts:54",{"_index":115,"title":{},"body":{"controllers/AccountController.html":{}}}],["src/presentation/controllers/account/account.controller.ts:65",{"_index":92,"title":{},"body":{"controllers/AccountController.html":{}}}],["src/presentation/controllers/account/account.controller.ts:77",{"_index":42,"title":{},"body":{"controllers/AccountController.html":{}}}],["src/presentation/controllers/account/account.controller.ts:94",{"_index":129,"title":{},"body":{"controllers/AccountController.html":{}}}],["src/presentation/controllers/deposit/deposit.controller.ts",{"_index":849,"title":{},"body":{"controllers/DepositController.html":{},"coverage.html":{}}}],["src/presentation/controllers/deposit/deposit.controller.ts:19",{"_index":856,"title":{},"body":{"controllers/DepositController.html":{}}}],["src/presentation/controllers/deposit/deposit.controller.ts:29",{"_index":863,"title":{},"body":{"controllers/DepositController.html":{}}}],["src/presentation/controllers/deposit/deposit.controller.ts:49",{"_index":860,"title":{},"body":{"controllers/DepositController.html":{}}}],["src/presentation/controllers/security/security.controller.ts",{"_index":1140,"title":{},"body":{"controllers/SecurityController.html":{},"coverage.html":{}}}],["src/presentation/controllers/security/security.controller.ts:18",{"_index":1163,"title":{},"body":{"controllers/SecurityController.html":{}}}],["src/presentation/controllers/security/security.controller.ts:28",{"_index":1158,"title":{},"body":{"controllers/SecurityController.html":{}}}],["src/presentation/controllers/security/security.controller.ts:38",{"_index":1151,"title":{},"body":{"controllers/SecurityController.html":{}}}],["src/presentation/controllers/transfer/transfer.controller.ts",{"_index":1214,"title":{},"body":{"controllers/TransferController.html":{},"coverage.html":{}}}],["src/presentation/controllers/transfer/transfer.controller.ts:107",{"_index":1229,"title":{},"body":{"controllers/TransferController.html":{}}}],["src/presentation/controllers/transfer/transfer.controller.ts:29",{"_index":1223,"title":{},"body":{"controllers/TransferController.html":{}}}],["src/presentation/controllers/transfer/transfer.controller.ts:40",{"_index":1242,"title":{},"body":{"controllers/TransferController.html":{}}}],["src/presentation/controllers/transfer/transfer.controller.ts:50",{"_index":1226,"title":{},"body":{"controllers/TransferController.html":{}}}],["src/presentation/controllers/transfer/transfer.controller.ts:63",{"_index":1232,"title":{},"body":{"controllers/TransferController.html":{}}}],["src/presentation/controllers/transfer/transfer.controller.ts:85",{"_index":1237,"title":{},"body":{"controllers/TransferController.html":{}}}],["src/presentation/controllers/user/user.controller.ts",{"_index":1416,"title":{},"body":{"controllers/UserController.html":{},"coverage.html":{}}}],["src/presentation/controllers/user/user.controller.ts:102",{"_index":1441,"title":{},"body":{"controllers/UserController.html":{}}}],["src/presentation/controllers/user/user.controller.ts:30",{"_index":1428,"title":{},"body":{"controllers/UserController.html":{}}}],["src/presentation/controllers/user/user.controller.ts:39",{"_index":1430,"title":{},"body":{"controllers/UserController.html":{}}}],["src/presentation/controllers/user/user.controller.ts:49",{"_index":1433,"title":{},"body":{"controllers/UserController.html":{}}}],["src/presentation/controllers/user/user.controller.ts:59",{"_index":1436,"title":{},"body":{"controllers/UserController.html":{}}}],["src/presentation/controllers/user/user.controller.ts:69",{"_index":1438,"title":{},"body":{"controllers/UserController.html":{}}}],["src/presentation/controllers/user/user.controller.ts:81",{"_index":1444,"title":{},"body":{"controllers/UserController.html":{}}}],["src/presentation/controllers/user/user.controller.ts:92",{"_index":1427,"title":{},"body":{"controllers/UserController.html":{}}}],["src/presentation/guards/guards.guard",{"_index":144,"title":{},"body":{"controllers/AccountController.html":{},"controllers/TransferController.html":{},"controllers/UserController.html":{}}}],["src/presentation/guards/guards.guard.ts",{"_index":1028,"title":{},"body":{"guards/GuardsGuard.html":{},"coverage.html":{}}}],["src/presentation/guards/guards.guard.ts:16",{"_index":1039,"title":{},"body":{"guards/GuardsGuard.html":{}}}],["src/presentation/guards/guards.guard.ts:8",{"_index":1036,"title":{},"body":{"guards/GuardsGuard.html":{}}}],["src/presentation/interceptors/interceptors.interceptor.ts",{"_index":1061,"title":{},"body":{"injectables/InterceptorsInterceptor.html":{},"coverage.html":{}}}],["src/presentation/interceptors/interceptors.interceptor.ts:20",{"_index":1070,"title":{},"body":{"injectables/InterceptorsInterceptor.html":{}}}],["src/presentation/middlewares/middlewares.middleware.ts",{"_index":1086,"title":{},"body":{"injectables/MiddlewaresMiddleware.html":{},"coverage.html":{}}}],["src/presentation/middlewares/middlewares.middleware.ts:15",{"_index":1098,"title":{},"body":{"injectables/MiddlewaresMiddleware.html":{}}}],["src/presentation/pipes/pipes.pipe.ts",{"_index":1126,"title":{},"body":{"injectables/PipesPipe.html":{},"coverage.html":{}}}],["src/presentation/pipes/pipes.pipe.ts:14",{"_index":1133,"title":{},"body":{"injectables/PipesPipe.html":{}}}],["start",{"_index":1545,"title":{},"body":{"index.html":{}}}],["start:dev",{"_index":1548,"title":{},"body":{"index.html":{}}}],["start:prodhow",{"_index":1550,"title":{},"body":{"index.html":{}}}],["startamount",{"_index":827,"title":{},"body":{"classes/DataRangeDTO.html":{},"interfaces/DataRangeModel.html":{}}}],["startdate",{"_index":828,"title":{},"body":{"classes/DataRangeDTO.html":{},"interfaces/DataRangeModel.html":{}}}],["started",{"_index":1526,"title":{"index.html":{}},"body":{}}],["starter",{"_index":1537,"title":{},"body":{"index.html":{}}}],["state",{"_index":175,"title":{},"body":{"controllers/AccountController.html":{},"entities/AccountEntity.html":{},"interfaces/AccountModel.html":{},"injectables/AccountRepository.html":{},"interfaces/AccountRepositoryInterface.html":{},"injectables/AccountService.html":{},"entities/AccountTypeEntity.html":{},"interfaces/AccountTypeModel.html":{},"injectables/AccountTypeRepository.html":{},"interfaces/AccountTypeRepositoryInterface.html":{},"entities/CustomerEntity.html":{},"interfaces/CustomerModel.html":{},"injectables/CustomerRepository.html":{},"interfaces/CustomerRepositoryInterface.html":{},"entities/DocumentTypeEntity.html":{},"interfaces/DocumentTypeModel.html":{},"injectables/DocumentTypeRepository.html":{},"interfaces/DocumentTypeRepositoryInterface.html":{}}}],["statements",{"_index":1465,"title":{},"body":{"coverage.html":{}}}],["status",{"_index":1387,"title":{},"body":{"classes/TypeOrmExceptionFilter.html":{}}}],["string",{"_index":34,"title":{},"body":{"controllers/AccountController.html":{},"classes/AccountDTO.html":{},"entities/AccountEntity.html":{},"interfaces/AccountModel.html":{},"injectables/AccountRepository.html":{},"interfaces/AccountRepositoryInterface.html":{},"injectables/AccountService.html":{},"entities/AccountTypeEntity.html":{},"interfaces/AccountTypeModel.html":{},"injectables/AccountTypeRepository.html":{},"interfaces/AccountTypeRepositoryInterface.html":{},"interfaces/BaseRepositoryInterface.html":{},"classes/CustomerDTO.html":{},"entities/CustomerEntity.html":{},"interfaces/CustomerModel.html":{},"injectables/CustomerRepository.html":{},"interfaces/CustomerRepositoryInterface.html":{},"injectables/CustomerService.html":{},"classes/CustomerUpdateDTO.html":{},"controllers/DepositController.html":{},"classes/DepositDTO.html":{},"entities/DepositEntity.html":{},"interfaces/DepositModel.html":{},"injectables/DepositRepository.html":{},"interfaces/DepositRepositoryInterface.html":{},"injectables/DepositService.html":{},"entities/DocumentTypeEntity.html":{},"interfaces/DocumentTypeModel.html":{},"injectables/DocumentTypeRepository.html":{},"interfaces/DocumentTypeRepositoryInterface.html":{},"controllers/SecurityController.html":{},"injectables/SecurityService.html":{},"classes/SignDTO.html":{},"controllers/TransferController.html":{},"classes/TransferDTO.html":{},"entities/TransferEntity.html":{},"interfaces/TransferModel.html":{},"injectables/TransferRepository.html":{},"interfaces/TransferRepositoryInterface.html":{},"injectables/TransferService.html":{},"controllers/UserController.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["su",{"_index":105,"title":{},"body":{"controllers/AccountController.html":{},"injectables/AccountRepository.html":{},"interfaces/AccountTypeModel.html":{},"injectables/AccountTypeRepository.html":{},"interfaces/BaseRepositoryInterface.html":{},"injectables/CustomerRepository.html":{},"injectables/CustomerService.html":{},"controllers/DepositController.html":{},"injectables/DepositRepository.html":{},"injectables/DocumentTypeRepository.html":{},"controllers/TransferController.html":{},"injectables/TransferRepository.html":{},"interfaces/TransferRepositoryInterface.html":{},"controllers/UserController.html":{}}}],["suave",{"_index":306,"title":{},"body":{"injectables/AccountRepository.html":{},"interfaces/BaseRepositoryInterface.html":{},"injectables/CustomerRepository.html":{},"injectables/DepositRepository.html":{},"injectables/TransferRepository.html":{}}}],["sub",{"_index":1194,"title":{},"body":{"injectables/SecurityService.html":{}}}],["submitted",{"_index":1563,"title":{},"body":{"index.html":{}}}],["suficiente",{"_index":71,"title":{},"body":{"controllers/AccountController.html":{}}}],["support",{"_index":1586,"title":{},"body":{"modules.html":{}}}],["svg",{"_index":1587,"title":{},"body":{"modules.html":{}}}],["synchronize",{"_index":576,"title":{},"body":{"modules/AppModule.html":{},"injectables/TypesOrmPostgresConfigService.html":{}}}],["t",{"_index":1015,"title":{},"body":{"classes/ExceptionFiltersFilter.html":{}}}],["table",{"_index":1502,"title":{},"body":{"coverage.html":{}}}],["tablesort(document.getelementbyid('coverage",{"_index":1501,"title":{},"body":{"coverage.html":{}}}],["taken",{"_index":1562,"title":{},"body":{"index.html":{}}}],["teléfono",{"_index":634,"title":{},"body":{"classes/CustomerDTO.html":{},"entities/CustomerEntity.html":{},"interfaces/CustomerModel.html":{},"injectables/CustomerRepository.html":{},"interfaces/CustomerRepositoryInterface.html":{},"classes/CustomerUpdateDTO.html":{}}}],["template",{"_index":1025,"title":{},"body":{"classes/ExceptionFiltersFilter.html":{}}}],["tener",{"_index":628,"title":{},"body":{"classes/CustomerDTO.html":{},"classes/CustomerUpdateDTO.html":{}}}],["then((result",{"_index":358,"title":{},"body":{"injectables/AccountRepository.html":{},"injectables/AccountTypeRepository.html":{},"injectables/CustomerRepository.html":{},"injectables/DepositRepository.html":{},"injectables/DocumentTypeRepository.html":{},"injectables/TransferRepository.html":{}}}],["this.accountrepository.delete(accountid",{"_index":454,"title":{},"body":{"injectables/AccountService.html":{}}}],["this.accountrepository.findall",{"_index":448,"title":{},"body":{"injectables/AccountService.html":{}}}],["this.accountrepository.findall()).filter",{"_index":437,"title":{},"body":{"injectables/AccountService.html":{}}}],["this.accountrepository.findall()).map",{"_index":809,"title":{},"body":{"injectables/CustomerService.html":{}}}],["this.accountrepository.findbycustomer(customerid",{"_index":447,"title":{},"body":{"injectables/AccountService.html":{}}}],["this.accountrepository.findonebyid",{"_index":944,"title":{},"body":{"injectables/DepositService.html":{},"injectables/TransferService.html":{}}}],["this.accountrepository.findonebyid(accountid",{"_index":445,"title":{},"body":{"injectables/AccountService.html":{}}}],["this.accountrepository.findonebyid(accountid)).state",{"_index":452,"title":{},"body":{"injectables/AccountService.html":{}}}],["this.accountrepository.findonebyid(deposit.accountid",{"_index":949,"title":{},"body":{"injectables/DepositService.html":{}}}],["this.accountrepository.findonebyid(transfer.incomeid",{"_index":1343,"title":{},"body":{"injectables/TransferService.html":{}}}],["this.accountrepository.register(account",{"_index":805,"title":{},"body":{"injectables/CustomerService.html":{}}}],["this.accountrepository.register(newaccount",{"_index":436,"title":{},"body":{"injectables/AccountService.html":{}}}],["this.accountrepository.update(accountid",{"_index":449,"title":{},"body":{"injectables/AccountService.html":{}}}],["this.accountrepository.update(deposit.accountid",{"_index":951,"title":{},"body":{"injectables/DepositService.html":{}}}],["this.accountrepository.update(income.id",{"_index":1356,"title":{},"body":{"injectables/TransferService.html":{}}}],["this.accountrepository.update(outcome.id",{"_index":1353,"title":{},"body":{"injectables/TransferService.html":{}}}],["this.accountservice.changeaccounttype(id",{"_index":181,"title":{},"body":{"controllers/AccountController.html":{}}}],["this.accountservice.changestate(id",{"_index":176,"title":{},"body":{"controllers/AccountController.html":{}}}],["this.accountservice.createaccount(account",{"_index":167,"title":{},"body":{"controllers/AccountController.html":{}}}],["this.accountservice.createaccount(newaccount",{"_index":1207,"title":{},"body":{"injectables/SecurityService.html":{}}}],["this.accountservice.customerbalance(id",{"_index":164,"title":{},"body":{"controllers/AccountController.html":{}}}],["this.accountservice.deleteaccount(id",{"_index":185,"title":{},"body":{"controllers/AccountController.html":{}}}],["this.accountservice.findall",{"_index":165,"title":{},"body":{"controllers/AccountController.html":{}}}],["this.accountservice.getaccountbycustomerid(id",{"_index":173,"title":{},"body":{"controllers/AccountController.html":{}}}],["this.accountservice.getbalance(id",{"_index":160,"title":{},"body":{"controllers/AccountController.html":{}}}],["this.accountservice.getstate(id",{"_index":179,"title":{},"body":{"controllers/AccountController.html":{}}}],["this.accountservice.verifyamountintobalance(id",{"_index":174,"title":{},"body":{"controllers/AccountController.html":{}}}],["this.accounttyperepository.findonebyid",{"_index":434,"title":{},"body":{"injectables/AccountService.html":{}}}],["this.accounttyperepository.findonebyid(typeid",{"_index":802,"title":{},"body":{"injectables/CustomerService.html":{}}}],["this.configservice.get('db_host",{"_index":1410,"title":{},"body":{"injectables/TypesOrmPostgresConfigService.html":{}}}],["this.configservice.get('db_name",{"_index":1414,"title":{},"body":{"injectables/TypesOrmPostgresConfigService.html":{}}}],["this.configservice.get('db_password",{"_index":1413,"title":{},"body":{"injectables/TypesOrmPostgresConfigService.html":{}}}],["this.configservice.get('db_port",{"_index":1411,"title":{},"body":{"injectables/TypesOrmPostgresConfigService.html":{}}}],["this.configservice.get('db_user",{"_index":1412,"title":{},"body":{"injectables/TypesOrmPostgresConfigService.html":{}}}],["this.customerrepository",{"_index":726,"title":{},"body":{"injectables/CustomerRepository.html":{}}}],["this.customerrepository.delete(id",{"_index":724,"title":{},"body":{"injectables/CustomerRepository.html":{},"injectables/CustomerService.html":{}}}],["this.customerrepository.existemail(customer.email",{"_index":798,"title":{},"body":{"injectables/CustomerService.html":{}}}],["this.customerrepository.existemail(user.email",{"_index":1204,"title":{},"body":{"injectables/SecurityService.html":{}}}],["this.customerrepository.find",{"_index":730,"title":{},"body":{"injectables/CustomerRepository.html":{}}}],["this.customerrepository.findall()).filter",{"_index":781,"title":{},"body":{"injectables/CustomerService.html":{}}}],["this.customerrepository.findalldeleted",{"_index":784,"title":{},"body":{"injectables/CustomerService.html":{}}}],["this.customerrepository.findone",{"_index":731,"title":{},"body":{"injectables/CustomerRepository.html":{}}}],["this.customerrepository.findonebyemail(email",{"_index":780,"title":{},"body":{"injectables/CustomerService.html":{}}}],["this.customerrepository.findonebyemail(user.email",{"_index":1193,"title":{},"body":{"injectables/SecurityService.html":{}}}],["this.customerrepository.findonebyemailandpassword",{"_index":1190,"title":{},"body":{"injectables/SecurityService.html":{}}}],["this.customerrepository.findonebyid",{"_index":431,"title":{},"body":{"injectables/AccountService.html":{}}}],["this.customerrepository.findonebyid(customerid",{"_index":779,"title":{},"body":{"injectables/CustomerService.html":{}}}],["this.customerrepository.findonebyid(id",{"_index":806,"title":{},"body":{"injectables/CustomerService.html":{}}}],["this.customerrepository.findonebyid(id)).deletedat",{"_index":807,"title":{},"body":{"injectables/CustomerService.html":{}}}],["this.customerrepository.register(newcustomer",{"_index":804,"title":{},"body":{"injectables/CustomerService.html":{},"injectables/SecurityService.html":{}}}],["this.customerrepository.save(entity",{"_index":721,"title":{},"body":{"injectables/CustomerRepository.html":{}}}],["this.customerrepository.update(id",{"_index":723,"title":{},"body":{"injectables/CustomerRepository.html":{},"injectables/CustomerService.html":{}}}],["this.customerservice.deletecustomer(id",{"_index":1459,"title":{},"body":{"controllers/UserController.html":{}}}],["this.customerservice.findall",{"_index":1448,"title":{},"body":{"controllers/UserController.html":{}}}],["this.customerservice.findalldeleted",{"_index":1449,"title":{},"body":{"controllers/UserController.html":{}}}],["this.customerservice.getcustomerinfo(id",{"_index":1451,"title":{},"body":{"controllers/UserController.html":{}}}],["this.customerservice.getcustomerinfobyemail(email",{"_index":1453,"title":{},"body":{"controllers/UserController.html":{}}}],["this.customerservice.newcustomer(customer",{"_index":1455,"title":{},"body":{"controllers/UserController.html":{}}}],["this.customerservice.unsuscribe(id",{"_index":1461,"title":{},"body":{"controllers/UserController.html":{}}}],["this.customerservice.updatedcustomer(id",{"_index":1457,"title":{},"body":{"controllers/UserController.html":{}}}],["this.depositrepository",{"_index":922,"title":{},"body":{"injectables/DepositRepository.html":{}}}],["this.depositrepository.delete",{"_index":920,"title":{},"body":{"injectables/DepositRepository.html":{}}}],["this.depositrepository.delete(depositid",{"_index":953,"title":{},"body":{"injectables/DepositService.html":{}}}],["this.depositrepository.find",{"_index":927,"title":{},"body":{"injectables/DepositRepository.html":{}}}],["this.depositrepository.findbydatarange",{"_index":955,"title":{},"body":{"injectables/DepositService.html":{}}}],["this.depositrepository.register(depositentity",{"_index":952,"title":{},"body":{"injectables/DepositService.html":{}}}],["this.depositrepository.save(entity",{"_index":918,"title":{},"body":{"injectables/DepositRepository.html":{}}}],["this.depositrepository.update(id",{"_index":919,"title":{},"body":{"injectables/DepositRepository.html":{}}}],["this.depositservice.createdeposit(account",{"_index":871,"title":{},"body":{"controllers/DepositController.html":{}}}],["this.depositservice.deletedeposit(id",{"_index":879,"title":{},"body":{"controllers/DepositController.html":{}}}],["this.depositservice.gethistory",{"_index":874,"title":{},"body":{"controllers/DepositController.html":{}}}],["this.documenttyperepository",{"_index":1003,"title":{},"body":{"injectables/DocumentTypeRepository.html":{}}}],["this.documenttyperepository.delete(id).then((result",{"_index":1001,"title":{},"body":{"injectables/DocumentTypeRepository.html":{}}}],["this.documenttyperepository.find",{"_index":1002,"title":{},"body":{"injectables/DocumentTypeRepository.html":{}}}],["this.documenttyperepository.findonebyid",{"_index":1199,"title":{},"body":{"injectables/SecurityService.html":{}}}],["this.documenttyperepository.save",{"_index":985,"title":{},"body":{"injectables/DocumentTypeRepository.html":{}}}],["this.documenttyperepository.save(entity",{"_index":999,"title":{},"body":{"injectables/DocumentTypeRepository.html":{}}}],["this.documenttyperepository.update(id",{"_index":1000,"title":{},"body":{"injectables/DocumentTypeRepository.html":{}}}],["this.findonebyid(id",{"_index":360,"title":{},"body":{"injectables/AccountRepository.html":{},"injectables/CustomerRepository.html":{},"injectables/DepositRepository.html":{},"injectables/DocumentTypeRepository.html":{},"injectables/TransferRepository.html":{}}}],["this.getstate(accountid",{"_index":442,"title":{},"body":{"injectables/AccountService.html":{}}}],["this.harddelete(id",{"_index":362,"title":{},"body":{"injectables/AccountRepository.html":{},"injectables/CustomerRepository.html":{},"injectables/DepositRepository.html":{},"injectables/TransferRepository.html":{}}}],["this.jwtservice.sign(payload",{"_index":1195,"title":{},"body":{"injectables/SecurityService.html":{}}}],["this.jwtservice.verify(jwt",{"_index":1210,"title":{},"body":{"injectables/SecurityService.html":{}}}],["this.jwtservice.verify(token",{"_index":1057,"title":{},"body":{"guards/GuardsGuard.html":{}}}],["this.register",{"_index":496,"title":{},"body":{"injectables/AccountTypeRepository.html":{}}}],["this.securityservice.signin(customer",{"_index":1169,"title":{},"body":{"controllers/SecurityController.html":{}}}],["this.securityservice.signout(body.jwt",{"_index":1171,"title":{},"body":{"controllers/SecurityController.html":{}}}],["this.securityservice.signup(customer",{"_index":1167,"title":{},"body":{"controllers/SecurityController.html":{}}}],["this.softdelete(id",{"_index":361,"title":{},"body":{"injectables/AccountRepository.html":{},"injectables/CustomerRepository.html":{},"injectables/DepositRepository.html":{},"injectables/TransferRepository.html":{}}}],["this.transferrepository",{"_index":1314,"title":{},"body":{"injectables/TransferRepository.html":{}}}],["this.transferrepository.delete",{"_index":1312,"title":{},"body":{"injectables/TransferRepository.html":{}}}],["this.transferrepository.delete(transferid",{"_index":1368,"title":{},"body":{"injectables/TransferService.html":{}}}],["this.transferrepository.find",{"_index":1318,"title":{},"body":{"injectables/TransferRepository.html":{}}}],["this.transferrepository.findbydatarange",{"_index":1367,"title":{},"body":{"injectables/TransferService.html":{}}}],["this.transferrepository.findincomebydatarange",{"_index":1365,"title":{},"body":{"injectables/TransferService.html":{}}}],["this.transferrepository.findonebyid(transferid",{"_index":1369,"title":{},"body":{"injectables/TransferService.html":{}}}],["this.transferrepository.findoutcomebydatarange",{"_index":1361,"title":{},"body":{"injectables/TransferService.html":{}}}],["this.transferrepository.register(newtransfer",{"_index":1358,"title":{},"body":{"injectables/TransferService.html":{}}}],["this.transferrepository.save(entity",{"_index":1310,"title":{},"body":{"injectables/TransferRepository.html":{}}}],["this.transferrepository.update(id",{"_index":1311,"title":{},"body":{"injectables/TransferRepository.html":{}}}],["this.transferservice.createtransfer(transfer",{"_index":1247,"title":{},"body":{"controllers/TransferController.html":{}}}],["this.transferservice.deletetransfer(id",{"_index":1252,"title":{},"body":{"controllers/TransferController.html":{}}}],["this.transferservice.gethistory",{"_index":1258,"title":{},"body":{"controllers/TransferController.html":{}}}],["this.transferservice.gethistoryin",{"_index":1254,"title":{},"body":{"controllers/TransferController.html":{}}}],["this.transferservice.gethistoryout",{"_index":1256,"title":{},"body":{"controllers/TransferController.html":{}}}],["this.transferservice.selecttransfer(id",{"_index":1250,"title":{},"body":{"controllers/TransferController.html":{}}}],["this.update(account.id",{"_index":368,"title":{},"body":{"injectables/AccountRepository.html":{}}}],["this.update(customer.id",{"_index":729,"title":{},"body":{"injectables/CustomerRepository.html":{}}}],["this.update(result.id",{"_index":925,"title":{},"body":{"injectables/DepositRepository.html":{}}}],["this.update(transfer.id",{"_index":1317,"title":{},"body":{"injectables/TransferRepository.html":{}}}],["this.userrepository",{"_index":356,"title":{},"body":{"injectables/AccountRepository.html":{},"injectables/AccountTypeRepository.html":{}}}],["this.userrepository.delete(id",{"_index":363,"title":{},"body":{"injectables/AccountRepository.html":{}}}],["this.userrepository.delete(id).then((result",{"_index":509,"title":{},"body":{"injectables/AccountTypeRepository.html":{}}}],["this.userrepository.find",{"_index":369,"title":{},"body":{"injectables/AccountRepository.html":{},"injectables/AccountTypeRepository.html":{}}}],["this.userrepository.save(entity",{"_index":346,"title":{},"body":{"injectables/AccountRepository.html":{},"injectables/AccountTypeRepository.html":{}}}],["this.userrepository.update(id",{"_index":347,"title":{},"body":{"injectables/AccountRepository.html":{},"injectables/AccountTypeRepository.html":{}}}],["this.verifyamountintobalance(accountid",{"_index":450,"title":{},"body":{"injectables/AccountService.html":{}}}],["throw",{"_index":350,"title":{},"body":{"injectables/AccountRepository.html":{},"injectables/AccountService.html":{},"injectables/AccountTypeRepository.html":{},"injectables/CustomerRepository.html":{},"injectables/CustomerService.html":{},"injectables/DepositRepository.html":{},"injectables/DocumentTypeRepository.html":{},"injectables/SecurityService.html":{},"injectables/TransferRepository.html":{},"injectables/TransferService.html":{}}}],["throws",{"_index":722,"title":{},"body":{"injectables/CustomerRepository.html":{},"injectables/DepositRepository.html":{},"injectables/DocumentTypeRepository.html":{},"injectables/TransferRepository.html":{}}}],["tiene",{"_index":70,"title":{},"body":{"controllers/AccountController.html":{},"guards/GuardsGuard.html":{}}}],["tienen",{"_index":380,"title":{},"body":{"interfaces/AccountRepositoryInterface.html":{},"interfaces/AccountTypeRepositoryInterface.html":{},"interfaces/CustomerRepositoryInterface.html":{}}}],["timestamp",{"_index":228,"title":{},"body":{"entities/AccountEntity.html":{},"entities/CustomerEntity.html":{},"classes/DataRangeDTO.html":{},"entities/DepositEntity.html":{},"entities/TransferEntity.html":{},"classes/TypeOrmExceptionFilter.html":{}}}],["tipo",{"_index":80,"title":{},"body":{"controllers/AccountController.html":{},"classes/AccountDTO.html":{},"entities/AccountEntity.html":{},"interfaces/AccountModel.html":{},"injectables/AccountRepository.html":{},"interfaces/AccountRepositoryInterface.html":{},"injectables/AccountService.html":{},"entities/AccountTypeEntity.html":{},"interfaces/AccountTypeModel.html":{},"injectables/AccountTypeRepository.html":{},"interfaces/AccountTypeRepositoryInterface.html":{},"classes/CustomerDTO.html":{},"entities/CustomerEntity.html":{},"interfaces/CustomerModel.html":{},"injectables/CustomerRepository.html":{},"interfaces/CustomerRepositoryInterface.html":{},"entities/DocumentTypeEntity.html":{},"interfaces/DocumentTypeModel.html":{},"injectables/DocumentTypeRepository.html":{},"interfaces/DocumentTypeRepositoryInterface.html":{},"classes/ExceptionFiltersFilter.html":{},"injectables/PipesPipe.html":{}}}],["tipos",{"_index":275,"title":{},"body":{"interfaces/AccountModel.html":{},"injectables/AccountTypeRepository.html":{},"interfaces/AccountTypeRepositoryInterface.html":{},"interfaces/CustomerModel.html":{},"interfaces/DepositModel.html":{},"injectables/DocumentTypeRepository.html":{},"interfaces/DocumentTypeRepositoryInterface.html":{},"interfaces/TransferModel.html":{}}}],["title",{"_index":1553,"title":{},"body":{"index.html":{}}}],["todas",{"_index":116,"title":{},"body":{"controllers/AccountController.html":{},"injectables/AccountRepository.html":{},"interfaces/BaseRepositoryInterface.html":{},"injectables/TransferRepository.html":{},"interfaces/TransferRepositoryInterface.html":{}}}],["todos",{"_index":477,"title":{},"body":{"injectables/AccountTypeRepository.html":{},"injectables/CustomerRepository.html":{},"injectables/CustomerService.html":{},"injectables/DepositRepository.html":{},"injectables/DocumentTypeRepository.html":{},"controllers/UserController.html":{}}}],["token",{"_index":1052,"title":{},"body":{"guards/GuardsGuard.html":{},"injectables/MiddlewaresMiddleware.html":{},"controllers/SecurityController.html":{}}}],["tokens",{"_index":1622,"title":{},"body":{"miscellaneous/variables.html":{}}}],["total",{"_index":123,"title":{},"body":{"controllers/AccountController.html":{},"interfaces/PaginationModel.html":{}}}],["transacciones",{"_index":1335,"title":{},"body":{"injectables/TransferService.html":{}}}],["transacción",{"_index":1332,"title":{},"body":{"injectables/TransferService.html":{}}}],["transfer",{"_index":191,"title":{},"body":{"classes/AccountDTO.html":{},"classes/CustomerDTO.html":{},"classes/CustomerUpdateDTO.html":{},"classes/DataRangeDTO.html":{},"classes/DepositDTO.html":{},"classes/PaginationDTO.html":{},"classes/SignDTO.html":{},"controllers/TransferController.html":{},"classes/TransferDTO.html":{},"entities/TransferEntity.html":{},"injectables/TransferRepository.html":{},"injectables/TransferService.html":{}}}],["transfer.id",{"_index":1315,"title":{},"body":{"injectables/TransferRepository.html":{}}}],["transfer.outcomeid",{"_index":1344,"title":{},"body":{"injectables/TransferService.html":{}}}],["transfer.reason",{"_index":1351,"title":{},"body":{"injectables/TransferService.html":{}}}],["transfercontroller",{"_index":532,"title":{"controllers/TransferController.html":{}},"body":{"modules/AppModule.html":{},"controllers/TransferController.html":{},"coverage.html":{}}}],["transferdto",{"_index":1222,"title":{"classes/TransferDTO.html":{}},"body":{"controllers/TransferController.html":{},"classes/TransferDTO.html":{},"injectables/TransferService.html":{},"coverage.html":{}}}],["transferencia",{"_index":1224,"title":{},"body":{"controllers/TransferController.html":{},"classes/TransferDTO.html":{},"entities/TransferEntity.html":{},"interfaces/TransferModel.html":{},"injectables/TransferRepository.html":{},"interfaces/TransferRepositoryInterface.html":{},"injectables/TransferService.html":{}}}],["transferencias",{"_index":1215,"title":{},"body":{"controllers/TransferController.html":{},"injectables/TransferRepository.html":{},"interfaces/TransferRepositoryInterface.html":{}}}],["transferentity",{"_index":551,"title":{"entities/TransferEntity.html":{}},"body":{"modules/AppModule.html":{},"controllers/TransferController.html":{},"entities/TransferEntity.html":{},"injectables/TransferRepository.html":{},"interfaces/TransferRepositoryInterface.html":{},"injectables/TransferService.html":{},"injectables/TypesOrmPostgresConfigService.html":{},"coverage.html":{}}}],["transferid",{"_index":1333,"title":{},"body":{"injectables/TransferService.html":{}}}],["transfermodel",{"_index":1287,"title":{"interfaces/TransferModel.html":{}},"body":{"entities/TransferEntity.html":{},"interfaces/TransferModel.html":{},"injectables/TransferService.html":{},"coverage.html":{}}}],["transferrepository",{"_index":525,"title":{"injectables/TransferRepository.html":{}},"body":{"modules/AppModule.html":{},"injectables/TransferRepository.html":{},"injectables/TransferService.html":{},"coverage.html":{},"overview.html":{}}}],["transferrepositoryinterface",{"_index":1308,"title":{"interfaces/TransferRepositoryInterface.html":{}},"body":{"injectables/TransferRepository.html":{},"interfaces/TransferRepositoryInterface.html":{},"coverage.html":{}}}],["transferservice",{"_index":526,"title":{"injectables/TransferService.html":{}},"body":{"modules/AppModule.html":{},"controllers/TransferController.html":{},"injectables/TransferService.html":{},"coverage.html":{},"overview.html":{}}}],["transform",{"_index":747,"title":{},"body":{"injectables/CustomerService.html":{},"injectables/PipesPipe.html":{}}}],["transform(customer",{"_index":766,"title":{},"body":{"injectables/CustomerService.html":{}}}],["transform(value",{"_index":1130,"title":{},"body":{"injectables/PipesPipe.html":{}}}],["transformación",{"_index":1128,"title":{},"body":{"injectables/PipesPipe.html":{}}}],["transformado",{"_index":1138,"title":{},"body":{"injectables/PipesPipe.html":{}}}],["transformar",{"_index":768,"title":{},"body":{"injectables/CustomerService.html":{},"injectables/PipesPipe.html":{}}}],["transformer",{"_index":1509,"title":{},"body":{"dependencies.html":{}}}],["true",{"_index":230,"title":{},"body":{"entities/AccountEntity.html":{},"entities/AccountTypeEntity.html":{},"injectables/AccountTypeRepository.html":{},"modules/AppModule.html":{},"entities/CustomerEntity.html":{},"injectables/CustomerRepository.html":{},"injectables/CustomerService.html":{},"entities/DepositEntity.html":{},"entities/DocumentTypeEntity.html":{},"injectables/DocumentTypeRepository.html":{},"guards/GuardsGuard.html":{},"injectables/SecurityService.html":{},"entities/TransferEntity.html":{},"injectables/TransferRepository.html":{},"injectables/TypesOrmPostgresConfigService.html":{}}}],["try",{"_index":1055,"title":{},"body":{"guards/GuardsGuard.html":{}}}],["type",{"_index":37,"title":{},"body":{"controllers/AccountController.html":{},"classes/AccountDTO.html":{},"entities/AccountEntity.html":{},"interfaces/AccountModel.html":{},"injectables/AccountRepository.html":{},"interfaces/AccountRepositoryInterface.html":{},"injectables/AccountService.html":{},"entities/AccountTypeEntity.html":{},"interfaces/AccountTypeModel.html":{},"injectables/AccountTypeRepository.html":{},"interfaces/AccountTypeRepositoryInterface.html":{},"modules/AppModule.html":{},"interfaces/BaseRepositoryInterface.html":{},"classes/CustomerDTO.html":{},"entities/CustomerEntity.html":{},"interfaces/CustomerModel.html":{},"injectables/CustomerRepository.html":{},"interfaces/CustomerRepositoryInterface.html":{},"injectables/CustomerService.html":{},"classes/CustomerUpdateDTO.html":{},"classes/DataRangeDTO.html":{},"interfaces/DataRangeModel.html":{},"controllers/DepositController.html":{},"classes/DepositDTO.html":{},"entities/DepositEntity.html":{},"interfaces/DepositModel.html":{},"injectables/DepositRepository.html":{},"interfaces/DepositRepositoryInterface.html":{},"injectables/DepositService.html":{},"entities/DocumentTypeEntity.html":{},"interfaces/DocumentTypeModel.html":{},"injectables/DocumentTypeRepository.html":{},"interfaces/DocumentTypeRepositoryInterface.html":{},"classes/ExceptionFiltersFilter.html":{},"guards/GuardsGuard.html":{},"injectables/InterceptorsInterceptor.html":{},"injectables/MiddlewaresMiddleware.html":{},"classes/PaginationDTO.html":{},"interfaces/PaginationModel.html":{},"injectables/PipesPipe.html":{},"controllers/SecurityController.html":{},"injectables/SecurityService.html":{},"classes/SignDTO.html":{},"controllers/TransferController.html":{},"classes/TransferDTO.html":{},"entities/TransferEntity.html":{},"interfaces/TransferModel.html":{},"injectables/TransferRepository.html":{},"interfaces/TransferRepositoryInterface.html":{},"injectables/TransferService.html":{},"classes/TypeOrmExceptionFilter.html":{},"injectables/TypesOrmPostgresConfigService.html":{},"controllers/UserController.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["type.entity",{"_index":489,"title":{},"body":{"injectables/AccountTypeRepository.html":{}}}],["type.entity.ts",{"_index":456,"title":{},"body":{"entities/AccountTypeEntity.html":{},"entities/DocumentTypeEntity.html":{},"coverage.html":{}}}],["type.entity.ts:28",{"_index":458,"title":{},"body":{"entities/AccountTypeEntity.html":{},"entities/DocumentTypeEntity.html":{}}}],["type.entity.ts:41",{"_index":461,"title":{},"body":{"entities/AccountTypeEntity.html":{},"entities/DocumentTypeEntity.html":{}}}],["type.entity.ts:53",{"_index":463,"title":{},"body":{"entities/AccountTypeEntity.html":{},"entities/DocumentTypeEntity.html":{}}}],["type.mode.ts",{"_index":467,"title":{},"body":{"interfaces/AccountTypeModel.html":{},"coverage.html":{}}}],["type.model.ts",{"_index":967,"title":{},"body":{"interfaces/DocumentTypeModel.html":{},"coverage.html":{}}}],["type.repository.ts",{"_index":472,"title":{},"body":{"injectables/AccountTypeRepository.html":{},"injectables/DocumentTypeRepository.html":{},"coverage.html":{}}}],["type.repository.ts:104",{"_index":977,"title":{},"body":{"injectables/DocumentTypeRepository.html":{}}}],["type.repository.ts:119",{"_index":481,"title":{},"body":{"injectables/AccountTypeRepository.html":{}}}],["type.repository.ts:130",{"_index":479,"title":{},"body":{"injectables/AccountTypeRepository.html":{}}}],["type.repository.ts:15",{"_index":474,"title":{},"body":{"injectables/AccountTypeRepository.html":{}}}],["type.repository.ts:31",{"_index":980,"title":{},"body":{"injectables/DocumentTypeRepository.html":{}}}],["type.repository.ts:40",{"_index":476,"title":{},"body":{"injectables/AccountTypeRepository.html":{}}}],["type.repository.ts:42",{"_index":981,"title":{},"body":{"injectables/DocumentTypeRepository.html":{}}}],["type.repository.ts:51",{"_index":484,"title":{},"body":{"injectables/AccountTypeRepository.html":{}}}],["type.repository.ts:55",{"_index":975,"title":{},"body":{"injectables/DocumentTypeRepository.html":{}}}],["type.repository.ts:63",{"_index":486,"title":{},"body":{"injectables/AccountTypeRepository.html":{}}}],["type.repository.ts:68",{"_index":976,"title":{},"body":{"injectables/DocumentTypeRepository.html":{}}}],["type.repository.ts:78",{"_index":979,"title":{},"body":{"injectables/DocumentTypeRepository.html":{}}}],["type.repository.ts:8",{"_index":974,"title":{},"body":{"injectables/DocumentTypeRepository.html":{}}}],["type.repository.ts:81",{"_index":475,"title":{},"body":{"injectables/AccountTypeRepository.html":{}}}],["type.repository.ts:95",{"_index":978,"title":{},"body":{"injectables/DocumentTypeRepository.html":{}}}],["type.repository.ts:96",{"_index":482,"title":{},"body":{"injectables/AccountTypeRepository.html":{}}}],["typeid",{"_index":800,"title":{},"body":{"injectables/CustomerService.html":{}}}],["typeorm",{"_index":250,"title":{},"body":{"entities/AccountEntity.html":{},"injectables/AccountRepository.html":{},"entities/AccountTypeEntity.html":{},"injectables/AccountTypeRepository.html":{},"entities/CustomerEntity.html":{},"injectables/CustomerRepository.html":{},"entities/DepositEntity.html":{},"injectables/DepositRepository.html":{},"entities/DocumentTypeEntity.html":{},"injectables/DocumentTypeRepository.html":{},"entities/TransferEntity.html":{},"injectables/TransferRepository.html":{},"classes/TypeOrmExceptionFilter.html":{},"injectables/TypesOrmPostgresConfigService.html":{},"dependencies.html":{}}}],["typeormerror",{"_index":1374,"title":{},"body":{"classes/TypeOrmExceptionFilter.html":{}}}],["typeormexceptionfilter",{"_index":552,"title":{"classes/TypeOrmExceptionFilter.html":{}},"body":{"modules/AppModule.html":{},"classes/TypeOrmExceptionFilter.html":{},"coverage.html":{}}}],["typeormmodule",{"_index":547,"title":{},"body":{"modules/AppModule.html":{}}}],["typeormmodule.forfeature",{"_index":578,"title":{},"body":{"modules/AppModule.html":{}}}],["typeormmodule.forroot",{"_index":564,"title":{},"body":{"modules/AppModule.html":{}}}],["typeormmoduleoptions",{"_index":1408,"title":{},"body":{"injectables/TypesOrmPostgresConfigService.html":{}}}],["typeormoptionsfactory",{"_index":1409,"title":{},"body":{"injectables/TypesOrmPostgresConfigService.html":{}}}],["typescript",{"_index":1536,"title":{},"body":{"index.html":{}}}],["typesormpostgresconfigservice",{"_index":581,"title":{"injectables/TypesOrmPostgresConfigService.html":{}},"body":{"modules/AppModule.html":{},"injectables/TypesOrmPostgresConfigService.html":{},"coverage.html":{}}}],["un",{"_index":73,"title":{},"body":{"controllers/AccountController.html":{},"entities/AccountEntity.html":{},"injectables/AccountRepository.html":{},"interfaces/AccountRepositoryInterface.html":{},"injectables/AccountService.html":{},"interfaces/AccountTypeModel.html":{},"injectables/AccountTypeRepository.html":{},"interfaces/AccountTypeRepositoryInterface.html":{},"interfaces/BaseRepositoryInterface.html":{},"classes/CustomerDTO.html":{},"interfaces/CustomerModel.html":{},"injectables/CustomerRepository.html":{},"interfaces/CustomerRepositoryInterface.html":{},"injectables/CustomerService.html":{},"classes/CustomerUpdateDTO.html":{},"classes/DataRangeDTO.html":{},"interfaces/DataRangeModel.html":{},"controllers/DepositController.html":{},"classes/DepositDTO.html":{},"interfaces/DepositModel.html":{},"injectables/DepositRepository.html":{},"interfaces/DepositRepositoryInterface.html":{},"injectables/DepositService.html":{},"interfaces/DocumentTypeModel.html":{},"injectables/DocumentTypeRepository.html":{},"interfaces/DocumentTypeRepositoryInterface.html":{},"guards/GuardsGuard.html":{},"injectables/InterceptorsInterceptor.html":{},"classes/PaginationDTO.html":{},"controllers/SecurityController.html":{},"classes/TransferDTO.html":{},"injectables/TransferRepository.html":{},"interfaces/TransferRepositoryInterface.html":{},"classes/TypeOrmExceptionFilter.html":{},"controllers/UserController.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["una",{"_index":45,"title":{},"body":{"controllers/AccountController.html":{},"classes/AccountDTO.html":{},"interfaces/AccountModel.html":{},"injectables/AccountRepository.html":{},"injectables/AccountService.html":{},"interfaces/BaseRepositoryInterface.html":{},"classes/CustomerDTO.html":{},"injectables/CustomerRepository.html":{},"classes/CustomerUpdateDTO.html":{},"classes/DataRangeDTO.html":{},"controllers/DepositController.html":{},"classes/DepositDTO.html":{},"interfaces/DepositModel.html":{},"injectables/DepositRepository.html":{},"injectables/DepositService.html":{},"injectables/DocumentTypeRepository.html":{},"guards/GuardsGuard.html":{},"injectables/InterceptorsInterceptor.html":{},"classes/PaginationDTO.html":{},"interfaces/PaginationModel.html":{},"controllers/SecurityController.html":{},"classes/SignDTO.html":{},"controllers/TransferController.html":{},"classes/TransferDTO.html":{},"interfaces/TransferModel.html":{},"injectables/TransferRepository.html":{},"interfaces/TransferRepositoryInterface.html":{},"injectables/TransferService.html":{},"classes/TypeOrmExceptionFilter.html":{},"controllers/UserController.html":{}}}],["unauthorizedexception",{"_index":1185,"title":{},"body":{"injectables/SecurityService.html":{}}}],["unauthorizedexception('datos",{"_index":1196,"title":{},"body":{"injectables/SecurityService.html":{}}}],["undefined",{"_index":355,"title":{},"body":{"injectables/AccountRepository.html":{},"injectables/CustomerRepository.html":{},"injectables/CustomerService.html":{},"injectables/DepositRepository.html":{},"injectables/TransferRepository.html":{}}}],["unknown",{"_index":1178,"title":{},"body":{"injectables/SecurityService.html":{}}}],["unlicensed",{"_index":1597,"title":{},"body":{"properties.html":{}}}],["unsuscribe",{"_index":748,"title":{},"body":{"injectables/CustomerService.html":{}}}],["unsuscribe(id",{"_index":769,"title":{},"body":{"injectables/CustomerService.html":{}}}],["unsuscribeuser",{"_index":1424,"title":{},"body":{"controllers/UserController.html":{}}}],["unsuscribeuser(@param('id",{"_index":1460,"title":{},"body":{"controllers/UserController.html":{}}}],["unsuscribeuser(id",{"_index":1439,"title":{},"body":{"controllers/UserController.html":{}}}],["up",{"_index":1162,"title":{},"body":{"controllers/SecurityController.html":{}}}],["update",{"_index":293,"title":{},"body":{"injectables/AccountRepository.html":{},"injectables/AccountTypeRepository.html":{},"interfaces/BaseRepositoryInterface.html":{},"injectables/CustomerRepository.html":{},"injectables/DepositRepository.html":{},"injectables/DocumentTypeRepository.html":{},"injectables/TransferRepository.html":{}}}],["update(id",{"_index":334,"title":{},"body":{"injectables/AccountRepository.html":{},"injectables/AccountTypeRepository.html":{},"interfaces/BaseRepositoryInterface.html":{},"injectables/CustomerRepository.html":{},"injectables/DepositRepository.html":{},"injectables/DocumentTypeRepository.html":{},"injectables/TransferRepository.html":{}}}],["updatedcustomer",{"_index":749,"title":{},"body":{"injectables/CustomerService.html":{}}}],["updatedcustomer(id",{"_index":774,"title":{},"body":{"injectables/CustomerService.html":{}}}],["updateuser",{"_index":1425,"title":{},"body":{"controllers/UserController.html":{}}}],["updateuser(@param('id",{"_index":1456,"title":{},"body":{"controllers/UserController.html":{}}}],["updateuser(id",{"_index":1443,"title":{},"body":{"controllers/UserController.html":{}}}],["url",{"_index":652,"title":{},"body":{"entities/CustomerEntity.html":{},"interfaces/CustomerModel.html":{}}}],["usa",{"_index":1611,"title":{},"body":{"miscellaneous/variables.html":{}}}],["use",{"_index":1093,"title":{},"body":{"injectables/MiddlewaresMiddleware.html":{},"index.html":{}}}],["use(req",{"_index":1094,"title":{},"body":{"injectables/MiddlewaresMiddleware.html":{}}}],["useclass",{"_index":580,"title":{},"body":{"modules/AppModule.html":{}}}],["useguards",{"_index":140,"title":{},"body":{"controllers/AccountController.html":{},"controllers/TransferController.html":{},"controllers/UserController.html":{}}}],["useguards(guardsguard",{"_index":162,"title":{},"body":{"controllers/AccountController.html":{},"controllers/TransferController.html":{},"controllers/UserController.html":{}}}],["user",{"_index":438,"title":{},"body":{"injectables/AccountService.html":{},"injectables/SecurityService.html":{},"controllers/UserController.html":{}}}],["user.balance",{"_index":440,"title":{},"body":{"injectables/AccountService.html":{}}}],["user.customer.id",{"_index":439,"title":{},"body":{"injectables/AccountService.html":{}}}],["user.document",{"_index":1201,"title":{},"body":{"injectables/SecurityService.html":{}}}],["user.documenttypeid",{"_index":1200,"title":{},"body":{"injectables/SecurityService.html":{}}}],["user.email",{"_index":1191,"title":{},"body":{"injectables/SecurityService.html":{}}}],["user.fullname",{"_index":1202,"title":{},"body":{"injectables/SecurityService.html":{}}}],["user.password",{"_index":1192,"title":{},"body":{"injectables/SecurityService.html":{}}}],["user.phone",{"_index":1203,"title":{},"body":{"injectables/SecurityService.html":{}}}],["usercontroller",{"_index":531,"title":{"controllers/UserController.html":{}},"body":{"modules/AppModule.html":{},"controllers/UserController.html":{},"coverage.html":{}}}],["username",{"_index":570,"title":{},"body":{"modules/AppModule.html":{},"injectables/TypesOrmPostgresConfigService.html":{}}}],["userrepository",{"_index":297,"title":{},"body":{"injectables/AccountRepository.html":{},"injectables/AccountTypeRepository.html":{}}}],["using",{"_index":1575,"title":{},"body":{"index.html":{}}}],["usuario",{"_index":1153,"title":{},"body":{"controllers/SecurityController.html":{},"injectables/SecurityService.html":{},"classes/SignDTO.html":{},"controllers/UserController.html":{}}}],["usuarios",{"_index":1417,"title":{},"body":{"controllers/UserController.html":{}}}],["utilizada",{"_index":1620,"title":{},"body":{"miscellaneous/variables.html":{}}}],["utilizado",{"_index":841,"title":{},"body":{"interfaces/DataRangeModel.html":{}}}],["uuid",{"_index":457,"title":{},"body":{"entities/AccountTypeEntity.html":{},"entities/CustomerEntity.html":{},"entities/DepositEntity.html":{},"entities/DocumentTypeEntity.html":{},"entities/TransferEntity.html":{}}}],["v4",{"_index":464,"title":{},"body":{"entities/AccountTypeEntity.html":{},"entities/CustomerEntity.html":{},"entities/DepositEntity.html":{},"entities/DocumentTypeEntity.html":{},"entities/TransferEntity.html":{}}}],["va",{"_index":1134,"title":{},"body":{"injectables/PipesPipe.html":{}}}],["validator",{"_index":204,"title":{},"body":{"classes/AccountDTO.html":{},"classes/CustomerDTO.html":{},"classes/CustomerUpdateDTO.html":{},"classes/DataRangeDTO.html":{},"classes/DepositDTO.html":{},"classes/PaginationDTO.html":{},"classes/SignDTO.html":{},"classes/TransferDTO.html":{},"dependencies.html":{}}}],["valor",{"_index":741,"title":{},"body":{"interfaces/CustomerRepositoryInterface.html":{},"injectables/PipesPipe.html":{},"miscellaneous/variables.html":{}}}],["value",{"_index":218,"title":{},"body":{"entities/AccountEntity.html":{},"entities/AccountTypeEntity.html":{},"entities/CustomerEntity.html":{},"entities/DepositEntity.html":{},"entities/DocumentTypeEntity.html":{},"injectables/PipesPipe.html":{},"entities/TransferEntity.html":{},"miscellaneous/variables.html":{}}}],["varchar",{"_index":242,"title":{},"body":{"entities/AccountEntity.html":{},"entities/AccountTypeEntity.html":{},"entities/CustomerEntity.html":{},"entities/DocumentTypeEntity.html":{},"entities/TransferEntity.html":{}}}],["variable",{"_index":1476,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["variables",{"_index":1599,"title":{"miscellaneous/variables.html":{}},"body":{"miscellaneous/variables.html":{}}}],["verifica",{"_index":68,"title":{},"body":{"controllers/AccountController.html":{},"injectables/CustomerRepository.html":{}}}],["verificar",{"_index":72,"title":{},"body":{"controllers/AccountController.html":{},"injectables/AccountService.html":{},"miscellaneous/variables.html":{}}}],["verifyamountintobalance",{"_index":390,"title":{},"body":{"injectables/AccountService.html":{}}}],["verifyamountintobalance(accountid",{"_index":423,"title":{},"body":{"injectables/AccountService.html":{}}}],["version",{"_index":1594,"title":{},"body":{"properties.html":{}}}],["void",{"_index":310,"title":{},"body":{"injectables/AccountRepository.html":{},"injectables/AccountService.html":{},"injectables/AccountTypeRepository.html":{},"modules/AppModule.html":{},"interfaces/BaseRepositoryInterface.html":{},"injectables/CustomerRepository.html":{},"controllers/DepositController.html":{},"injectables/DepositRepository.html":{},"injectables/DepositService.html":{},"injectables/DocumentTypeRepository.html":{},"classes/ExceptionFiltersFilter.html":{},"injectables/MiddlewaresMiddleware.html":{},"injectables/TransferRepository.html":{},"injectables/TransferService.html":{},"classes/TypeOrmExceptionFilter.html":{}}}],["watch",{"_index":1546,"title":{},"body":{"index.html":{}}}],["week",{"_index":1555,"title":{},"body":{"index.html":{}}}],["workshop",{"_index":1552,"title":{},"body":{"index.html":{}}}],["xito",{"_index":754,"title":{},"body":{"injectables/CustomerService.html":{}}}],["y",{"_index":235,"title":{},"body":{"entities/AccountEntity.html":{},"interfaces/AccountModel.html":{},"interfaces/AccountRepositoryInterface.html":{},"interfaces/AccountTypeModel.html":{},"interfaces/AccountTypeRepositoryInterface.html":{},"classes/CustomerDTO.html":{},"entities/CustomerEntity.html":{},"interfaces/CustomerModel.html":{},"injectables/CustomerRepository.html":{},"interfaces/CustomerRepositoryInterface.html":{},"injectables/CustomerService.html":{},"classes/CustomerUpdateDTO.html":{},"controllers/DepositController.html":{},"entities/DepositEntity.html":{},"interfaces/DepositModel.html":{},"interfaces/DepositRepositoryInterface.html":{},"injectables/DepositService.html":{},"interfaces/DocumentTypeModel.html":{},"interfaces/DocumentTypeRepositoryInterface.html":{},"injectables/InterceptorsInterceptor.html":{},"controllers/SecurityController.html":{},"controllers/TransferController.html":{},"entities/TransferEntity.html":{},"interfaces/TransferModel.html":{},"injectables/TransferRepository.html":{},"interfaces/TransferRepositoryInterface.html":{},"controllers/UserController.html":{},"miscellaneous/variables.html":{}}}],["y/o",{"_index":845,"title":{},"body":{"interfaces/DataRangeModel.html":{}}}],["ya",{"_index":799,"title":{},"body":{"injectables/CustomerService.html":{},"injectables/SecurityService.html":{}}}],["yes",{"_index":301,"title":{},"body":{"injectables/AccountRepository.html":{},"interfaces/BaseRepositoryInterface.html":{},"injectables/CustomerRepository.html":{},"injectables/DepositRepository.html":{},"injectables/DepositService.html":{},"injectables/TransferRepository.html":{},"injectables/TransferService.html":{}}}],["z])(?=.*[a",{"_index":642,"title":{},"body":{"classes/CustomerDTO.html":{},"classes/CustomerUpdateDTO.html":{}}}],["z]).{8",{"_index":644,"title":{},"body":{"classes/CustomerDTO.html":{},"classes/CustomerUpdateDTO.html":{}}}],["za",{"_index":643,"title":{},"body":{"classes/CustomerDTO.html":{},"classes/CustomerUpdateDTO.html":{}}}],["zoom",{"_index":527,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"controllers/AccountController.html":{"url":"controllers/AccountController.html","title":"controller - AccountController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AccountController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/presentation/controllers/account/account.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                account\n            \n\n\n            \n                Description\n            \n            \n                Controlador para gestionar las operaciones relacionadas con las cuentas.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    Async\n                                addBalance\n                            \n                            \n                                    \n                                    Async\n                                amountBalance\n                            \n                            \n                                    \n                                changeAccountType\n                            \n                            \n                                    \n                                changeState\n                            \n                            \n                                    \n                                    \n                                    Async\n                                createAccount\n                            \n                            \n                                    \n                                deleteAccount\n                            \n                            \n                                    \n                                    Async\n                                getAccountByCustomerId\n                            \n                            \n                                    \n                                    \n                                    Async\n                                getAll\n                            \n                            \n                                    \n                                    Async\n                                getBalance\n                            \n                            \n                                    \n                                    \n                                    Async\n                                getBalanceAll\n                            \n                            \n                                    \n                                    Async\n                                getState\n                            \n                            \n                                    \n                                    \n                                removeBalance\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Async\n                        addBalance\n                        \n                    \n                \n            \n            \n                \n                        \n                    addBalance(id: string, body: literal type)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post(':id')@UseGuards(GuardsGuard)\n                \n            \n\n                    \n                        \n                            Defined in src/presentation/controllers/account/account.controller.ts:77\n                        \n                    \n\n\n            \n                \n                        Añade saldo a una cuenta.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    El ID de la cuenta.\n\n                                            \n                                        \n                                        \n                                                body\n                                            \n                                                        literal type\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    El cuerpo de la solicitud que contiene el monto a añadir.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                Una promesa que resuelve con el nuevo saldo de la cuenta.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        amountBalance\n                        \n                    \n                \n            \n            \n                \n                        \n                    amountBalance(id: string, body: literal type)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/account/:id')\n                \n            \n\n                    \n                        \n                            Defined in src/presentation/controllers/account/account.controller.ts:127\n                        \n                    \n\n\n            \n                \n                        Verifica si una cuenta tiene suficiente saldo.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    El ID de la cuenta.\n\n                                            \n                                        \n                                        \n                                                body\n                                            \n                                                        literal type\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    El cuerpo de la solicitud que contiene el monto a verificar.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                Una promesa que resuelve con un booleano indicando si la cuenta tiene suficiente saldo.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        changeAccountType\n                        \n                    \n                \n            \n            \n                \n                        \n                    changeAccountType(id: string, body: literal type)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Put('accountype/:id')\n                \n            \n\n                    \n                        \n                            Defined in src/presentation/controllers/account/account.controller.ts:166\n                        \n                    \n\n\n            \n                \n                        Cambia el tipo de cuenta.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    El ID de la cuenta.\n\n                                            \n                                        \n                                        \n                                                body\n                                            \n                                                        literal type\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    El cuerpo de la solicitud que contiene el ID del nuevo tipo de cuenta.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         string\n\n                        \n                            \n                                Un string indicando que el tipo de cuenta ha sido cambiado.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        changeState\n                        \n                    \n                \n            \n            \n                \n                        \n                    changeState(id: string, body: literal type)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Put(':id')\n                \n            \n\n                    \n                        \n                            Defined in src/presentation/controllers/account/account.controller.ts:141\n                        \n                    \n\n\n            \n                \n                        Cambia el estado de una cuenta.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    El ID de la cuenta.\n\n                                            \n                                        \n                                        \n                                                body\n                                            \n                                                        literal type\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    El cuerpo de la solicitud que contiene el nuevo estado.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         string\n\n                        \n                            \n                                Un string indicando que el estado ha sido cambiado.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Async\n                        createAccount\n                        \n                    \n                \n            \n            \n                \n                        \n                    createAccount(account: AccountDTO)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post()@UseGuards(GuardsGuard)\n                \n            \n\n                    \n                        \n                            Defined in src/presentation/controllers/account/account.controller.ts:65\n                        \n                    \n\n\n            \n                \n                        Crea una nueva cuenta.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                account\n                                            \n                                                            AccountDTO\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Los datos de la cuenta a crear.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                Una promesa que resuelve con la entidad de cuenta creada.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        deleteAccount\n                        \n                    \n                \n            \n            \n                \n                        \n                    deleteAccount(id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete(':id')\n                \n            \n\n                    \n                        \n                            Defined in src/presentation/controllers/account/account.controller.ts:180\n                        \n                    \n\n\n            \n                \n                        Elimina una cuenta por su ID.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    El ID de la cuenta.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         string\n\n                        \n                            \n                                Un string indicando que la cuenta ha sido eliminada.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        getAccountByCustomerId\n                        \n                    \n                \n            \n            \n                \n                        \n                    getAccountByCustomerId(id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/customer/:id')\n                \n            \n\n                    \n                        \n                            Defined in src/presentation/controllers/account/account.controller.ts:114\n                        \n                    \n\n\n            \n                \n                        Obtiene las cuentas de un cliente por su ID.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    El ID del cliente.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                Una promesa que resuelve con un array de entidades de cuenta.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Async\n                        getAll\n                        \n                    \n                \n            \n            \n                \n                        \n                    getAll()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()@UseGuards(GuardsGuard)\n                \n            \n\n                    \n                        \n                            Defined in src/presentation/controllers/account/account.controller.ts:54\n                        \n                    \n\n\n            \n                \n                        Obtiene todas las cuentas.\n\n\n                        \n                            Returns :         Promise\n\n                        \n                            \n                                Una promesa que resuelve con un array de entidades de cuenta.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        getBalance\n                        \n                    \n                \n            \n            \n                \n                        \n                    getBalance(id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('balance/:id')\n                \n            \n\n                    \n                        \n                            Defined in src/presentation/controllers/account/account.controller.ts:33\n                        \n                    \n\n\n            \n                \n                        Obtiene el saldo de una cuenta por su ID.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    El ID de la cuenta.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                Una promesa que resuelve con el saldo de la cuenta.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Async\n                        getBalanceAll\n                        \n                    \n                \n            \n            \n                \n                        \n                    getBalanceAll(id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('amount/:id')@UseGuards(GuardsGuard)\n                \n            \n\n                    \n                        \n                            Defined in src/presentation/controllers/account/account.controller.ts:44\n                        \n                    \n\n\n            \n                \n                        Verifica el saldo total de un cliente.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    El ID del cliente.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                Una promesa que resuelve con un booleano indicando si el cliente tiene saldo.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        getState\n                        \n                    \n                \n            \n            \n                \n                        \n                    getState(id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('state/:id')\n                \n            \n\n                    \n                        \n                            Defined in src/presentation/controllers/account/account.controller.ts:155\n                        \n                    \n\n\n            \n                \n                        Obtiene el estado de una cuenta por su ID.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    El ID de la cuenta.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                Una promesa que resuelve con el estado de la cuenta.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        removeBalance\n                        \n                    \n                \n            \n            \n                \n                        \n                    removeBalance(id: string, body: literal type)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Put('removebalance/:id')@UseGuards(GuardsGuard)\n                \n            \n\n                    \n                        \n                            Defined in src/presentation/controllers/account/account.controller.ts:94\n                        \n                    \n\n\n            \n                \n                        Elimina saldo de una cuenta.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    El ID de la cuenta.\n\n                                            \n                                        \n                                        \n                                                body\n                                            \n                                                        literal type\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    El cuerpo de la solicitud que contiene el monto a eliminar.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         boolean\n\n                        \n                            \n                                Un booleano indicando si la operación fue exitosa.\n\n                            \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Body,\n  Controller,\n  Delete,\n  Get,\n  Param,\n  Post,\n  Put,\n  UseGuards,\n} from '@nestjs/common';\nimport { AccountDTO } from 'src/business/dtos';\nimport { GuardsGuard } from 'src/presentation/guards/guards.guard';\nimport { AccountService } from '../../../business/services';\nimport { CustomerService } from '../../../business/services/customer/customer.service';\nimport { AccountEntity } from '../../../data/persistence/entities';\n\n/**\n * Controlador para gestionar las operaciones relacionadas con las cuentas.\n */\n@Controller('account')\nexport class AccountController {\n  constructor(\n    private readonly accountService: AccountService,\n    private readonly customerService: CustomerService,\n  ) {}\n\n  /**\n   * Obtiene el saldo de una cuenta por su ID.\n   * @param id El ID de la cuenta.\n   * @returns Una promesa que resuelve con el saldo de la cuenta.\n   */\n  @Get('balance/:id')\n  async getBalance(@Param('id') id: string): Promise {\n    return await this.accountService.getBalance(id);\n  }\n\n  /**\n   * Verifica el saldo total de un cliente.\n   * @param id El ID del cliente.\n   * @returns Una promesa que resuelve con un booleano indicando si el cliente tiene saldo.\n   */\n  @Get('amount/:id')\n  @UseGuards(GuardsGuard)\n  async getBalanceAll(@Param('id') id: string): Promise {\n    return await this.accountService.CustomerBalance(id);\n  }\n\n  /**\n   * Obtiene todas las cuentas.\n   * @returns Una promesa que resuelve con un array de entidades de cuenta.\n   */\n  @Get()\n  @UseGuards(GuardsGuard)\n  async getAll(): Promise {\n    return await this.accountService.findAll();\n  }\n\n  /**\n   * Crea una nueva cuenta.\n   * @param account Los datos de la cuenta a crear.\n   * @returns Una promesa que resuelve con la entidad de cuenta creada.\n   */\n  @Post()\n  @UseGuards(GuardsGuard)\n  async createAccount(@Body() account: AccountDTO): Promise {\n    return await this.accountService.createAccount(account);\n  }\n\n  /**\n   * Añade saldo a una cuenta.\n   * @param id El ID de la cuenta.\n   * @param body El cuerpo de la solicitud que contiene el monto a añadir.\n   * @returns Una promesa que resuelve con el nuevo saldo de la cuenta.\n   */\n  @Post(':id')\n  @UseGuards(GuardsGuard)\n  async addBalance(\n    @Param('id') id: string,\n    @Body() body: { amount: number },\n  ): Promise {\n    if (body.amount  {\n    return await this.accountService.getAccountByCustomerId(id);\n  }\n\n  /**\n   * Verifica si una cuenta tiene suficiente saldo.\n   * @param id El ID de la cuenta.\n   * @param body El cuerpo de la solicitud que contiene el monto a verificar.\n   * @returns Una promesa que resuelve con un booleano indicando si la cuenta tiene suficiente saldo.\n   */\n  @Get('/account/:id')\n  async amountBalance(\n    @Param('id') id: string,\n    @Body() body: { amount: number },\n  ): Promise {\n    return await this.accountService.verifyAmountIntoBalance(id, body.amount);\n  }\n\n  /**\n   * Cambia el estado de una cuenta.\n   * @param id El ID de la cuenta.\n   * @param body El cuerpo de la solicitud que contiene el nuevo estado.\n   * @returns Un string indicando que el estado ha sido cambiado.\n   */\n  @Put(':id')\n  changeState(\n    @Param('id') id: string,\n    @Body() body: { state: boolean },\n  ): string {\n    this.accountService.changeState(id, body.state);\n    return 'estado cambiado';\n  }\n\n  /**\n   * Obtiene el estado de una cuenta por su ID.\n   * @param id El ID de la cuenta.\n   * @returns Una promesa que resuelve con el estado de la cuenta.\n   */\n  @Get('state/:id')\n  async getState(@Param('id') id: string): Promise {\n    return await this.accountService.getState(id);\n  }\n\n  /**\n   * Cambia el tipo de cuenta.\n   * @param id El ID de la cuenta.\n   * @param body El cuerpo de la solicitud que contiene el ID del nuevo tipo de cuenta.\n   * @returns Un string indicando que el tipo de cuenta ha sido cambiado.\n   */\n  @Put('accountype/:id')\n  changeAccountType(\n    @Param('id') id: string,\n    @Body() body: { accountTypeId: string },\n  ): string {\n    this.accountService.changeAccountType(id, body.accountTypeId);\n    return 'cuenta cambiada';\n  }\n\n  /**\n   * Elimina una cuenta por su ID.\n   * @param id El ID de la cuenta.\n   * @returns Un string indicando que la cuenta ha sido eliminada.\n   */\n  @Delete(':id')\n  deleteAccount(@Param('id') id: string): string {\n    this.accountService.deleteAccount(id);\n    return 'cuenta eliminada';\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/AccountDTO.html":{"url":"classes/AccountDTO.html","title":"class - AccountDTO","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  AccountDTO\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/business/dtos/account.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                Data Transfer Object para representar una cuenta.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                accountTypeId\n                            \n                            \n                                    \n                                customerId\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        accountTypeId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsUUID()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/business/dtos/account.dto.ts:23\n                        \n                    \n\n            \n                \n                    Identificador único del tipo de cuenta.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        customerId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsUUID()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/business/dtos/account.dto.ts:33\n                        \n                    \n\n            \n                \n                    Identificador único del cliente.\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {\n  IsBoolean,\n  IsDateString,\n  IsNumberString,\n  IsUUID,\n} from 'class-validator';\n\n/**\n * Data Transfer Object para representar una cuenta.\n *\n * @export\n * @class AccountDTO\n */\nexport class AccountDTO {\n  /**\n   * Identificador único del tipo de cuenta.\n   * \n   * @type {string}\n   * @memberof AccountDTO\n   * @decorator IsUUID\n   */\n  @IsUUID()\n  accountTypeId: string;\n\n  /**\n   * Identificador único del cliente.\n   * \n   * @type {string}\n   * @memberof AccountDTO\n   * @decorator IsUUID\n   */\n  @IsUUID()\n  customerId: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/AccountEntity.html":{"url":"entities/AccountEntity.html","title":"entity - AccountEntity","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  AccountEntity\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/data/persistence/entities/account.entity.ts\n        \n\n\n            \n                Description\n            \n            \n                Entidad para la cuenta del cliente\n\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                accountType\n                            \n                            \n                                    \n                                balance\n                            \n                            \n                                    \n                                    \n                                customer\n                            \n                            \n                                    \n                                    Optional\n                                deletedAt\n                            \n                            \n                                    \n                                id\n                            \n                            \n                                    \n                                state\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        accountType\n                        \n                    \n                \n            \n                \n                    \n                        Type :         AccountTypeEntity\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ManyToOne(undefined)@JoinColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/data/persistence/entities/account.entity.ts:48\n                        \n                    \n\n            \n                \n                    Tipo de cuenta\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        balance\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 0\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({name: 'balance', type: 'numeric'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/data/persistence/entities/account.entity.ts:60\n                        \n                    \n\n            \n                \n                    Saldo de la cuenta\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        customer\n                        \n                    \n                \n            \n                \n                    \n                        Type :         CustomerEntity\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ManyToOne(undefined)@JoinColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/data/persistence/entities/account.entity.ts:38\n                        \n                    \n\n            \n                \n                    Cliente asociado a la cuenta\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        deletedAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Date | number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({name: 'deleted_at', type: 'timestamp', nullable: true, select: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/data/persistence/entities/account.entity.ts:86\n                        \n                    \n\n            \n                \n                    Fecha y hora en la que se eliminó la cuenta (opcional)\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Default value : generateID()\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({name: 'id', type: 'varchar', primary: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/data/persistence/entities/account.entity.ts:28\n                        \n                    \n\n            \n                \n                    Identificador único de la cuenta\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        state\n                        \n                    \n                \n            \n                \n                    \n                        Default value : true\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({name: 'state', type: 'boolean'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/data/persistence/entities/account.entity.ts:72\n                        \n                    \n\n            \n                \n                    Estado de la cuenta (activo/inactivo)\n\n                \n            \n\n        \n    \n\n    \n\n\n    \n        import { Column, Entity, JoinColumn, ManyToOne } from 'typeorm';\nimport { AccountTypeEntity, CustomerEntity } from '.';\nimport { AccountModel } from '../../models';\n\n/**\n * Entidad para la cuenta del cliente\n *\n * @export\n * @class AccountEntity\n * @implements {AccountModel}\n */\n@Entity({\n  name: 'account',\n  schema: 'public',\n})\nexport class AccountEntity implements AccountModel {\n  /**\n   * Identificador único de la cuenta\n   *\n   * @type {string}\n   * @memberof AccountEntity\n   */\n  @Column({\n    name: 'id',\n    type: 'varchar',\n    primary: true,\n  })\n  id = generateID();\n\n  /**\n   * Cliente asociado a la cuenta\n   *\n   * @type {CustomerEntity}\n   * @memberof AccountEntity\n   */\n  @ManyToOne(() => CustomerEntity)\n  @JoinColumn()\n  customer: CustomerEntity;\n\n  /**\n   * Tipo de cuenta\n   *\n   * @type {AccountTypeEntity}\n   * @memberof AccountEntity\n   */\n  @ManyToOne(() => AccountTypeEntity)\n  @JoinColumn()\n  accountType: AccountTypeEntity;\n\n  /**\n   * Saldo de la cuenta\n   *\n   * @type {number}\n   * @memberof AccountEntity\n   */\n  @Column({\n    name: 'balance',\n    type: 'numeric',\n  })\n  balance = 0;\n\n  /**\n   * Estado de la cuenta (activo/inactivo)\n   *\n   * @type {boolean}\n   * @memberof AccountEntity\n   */\n  @Column({\n    name: 'state',\n    type: 'boolean',\n  })\n  state = true;\n\n  /**\n   * Fecha y hora en la que se eliminó la cuenta (opcional)\n   *\n   * @type {(Date | number)}\n   * @memberof AccountEntity\n   */\n  @Column({\n    name: 'deleted_at',\n    type: 'timestamp',\n    nullable: true,\n    select: false,\n  })\n  deletedAt?: Date | number;\n}\n\n/**\n * Genera un identificador único para la cuenta\n *\n * @returns {string} ID generado\n */\nfunction generateID(): string {\n  const bank = process.env.BANK_ID ?? '';\n  return '20000' + bank + Math.floor(Math.random() * 10000);\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/AccountModel.html":{"url":"interfaces/AccountModel.html","title":"interface - AccountModel","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  AccountModel\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/data/models/account.model.ts\n        \n\n\n            \n                Description\n            \n            \n                Interfaz que define la estructura de datos para el modelo de cuenta.\nEsta interfaz representa los campos y tipos de datos asociados con una cuenta.\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            accountType\n                                        \n                                \n                                \n                                        \n                                            balance\n                                        \n                                \n                                \n                                        \n                                            customer\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            deletedAt\n                                        \n                                \n                                \n                                        \n                                            id\n                                        \n                                \n                                \n                                        \n                                            state\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        accountType\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        accountType:         AccountTypeModel\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         AccountTypeModel\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Tipo de cuenta\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        balance\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        balance:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Saldo de la cuenta\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        customer\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        customer:         CustomerModel\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         CustomerModel\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Cliente asociado a la cuenta\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        deletedAt\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        deletedAt:     Date | number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     Date | number\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Fecha y hora en la que la cuenta fue eliminada (opcional)\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        id\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        id:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Identificador único de la cuenta\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        state\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        state:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Estado de la cuenta (activo/inactivo)\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import { CustomerModel } from '.';\nimport { AccountTypeModel } from '.';\n\n/**\n * Interfaz que define la estructura de datos para el modelo de cuenta.\n * \n * @remarks\n * Esta interfaz representa los campos y tipos de datos asociados con una cuenta.\n * \n * @export\n * @interface AccountModel\n */\nexport interface AccountModel {\n  /** Identificador único de la cuenta */\n  id: string;\n\n  /** Cliente asociado a la cuenta */\n  customer: CustomerModel;\n\n  /** Tipo de cuenta */\n  accountType: AccountTypeModel;\n\n  /** Saldo de la cuenta */\n  balance: number;\n\n  /** Estado de la cuenta (activo/inactivo) */\n  state: boolean;\n\n  /** Fecha y hora en la que la cuenta fue eliminada (opcional) */\n  deletedAt?: Date | number;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AccountRepository.html":{"url":"injectables/AccountRepository.html","title":"injectable - AccountRepository","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AccountRepository\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/data/persistence/repositories/account.repository.ts\n        \n\n\n            \n                Description\n            \n            \n                Repositorio para la entidad de cuenta.\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                delete\n                            \n                            \n                                findAll\n                            \n                            \n                                findByAccountType\n                            \n                            \n                                findByCustomer\n                            \n                            \n                                findByState\n                            \n                            \n                                findOneById\n                            \n                            \n                                    Private\n                                hardDelete\n                            \n                            \n                                register\n                            \n                            \n                                    Private\n                                    Async\n                                softDelete\n                            \n                            \n                                    Async\n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(userRepository: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/data/persistence/repositories/account.repository.ts:15\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        userRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        delete\n                        \n                    \n                \n            \n            \n                \ndelete(id: string, soft?: boolean)\n                \n            \n\n\n                    \n                        \n                            Defined in src/data/persistence/repositories/account.repository.ts:80\n                        \n                    \n\n\n            \n                \n                        Elimina una cuenta.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    ID de la cuenta a eliminar\n\n                                            \n                                        \n                                        \n                                                soft\n                                            \n                                                            boolean\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                            \n                                                    Indica si la eliminación debe ser suave (borrado lógico) o no\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findAll\n                        \n                    \n                \n            \n            \n                \nfindAll()\n                \n            \n\n\n                    \n                        \n                            Defined in src/data/persistence/repositories/account.repository.ts:111\n                        \n                    \n\n\n            \n                \n                        Encuentra todas las cuentas.\n\n\n                        \n                            Returns :         Promise\n\n                        \n                            \n                                Promesa que resuelve con un arreglo de todas las cuentas\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findByAccountType\n                        \n                    \n                \n            \n            \n                \nfindByAccountType(accountTypeId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/data/persistence/repositories/account.repository.ts:152\n                        \n                    \n\n\n            \n                \n                        Encuentra cuentas por el ID de su tipo de cuenta.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                accountTypeId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    ID del tipo de cuenta asociado a las cuentas\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                Promesa que resuelve con un arreglo de cuentas encontradas\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findByCustomer\n                        \n                    \n                \n            \n            \n                \nfindByCustomer(customerId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/data/persistence/repositories/account.repository.ts:137\n                        \n                    \n\n\n            \n                \n                        Encuentra cuentas por el ID de su cliente.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                customerId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    ID del cliente asociado a las cuentas\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                Promesa que resuelve con un arreglo de cuentas encontradas\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findByState\n                        \n                    \n                \n            \n            \n                \nfindByState(state: boolean)\n                \n            \n\n\n                    \n                        \n                            Defined in src/data/persistence/repositories/account.repository.ts:125\n                        \n                    \n\n\n            \n                \n                        Encuentra cuentas por su estado.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                state\n                                            \n                                                            boolean\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Estado de las cuentas a buscar\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                Promesa que resuelve con un arreglo de cuentas encontradas\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findOneById\n                        \n                    \n                \n            \n            \n                \nfindOneById(id: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/data/persistence/repositories/account.repository.ts:56\n                        \n                    \n\n\n            \n                \n                        Encuentra una cuenta por su ID.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    ID de la cuenta a buscar\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                Promesa que resuelve con la cuenta encontrada\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        hardDelete\n                        \n                    \n                \n            \n            \n                \n                        \n                    hardDelete(id: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/data/persistence/repositories/account.repository.ts:89\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        register\n                        \n                    \n                \n            \n            \n                \nregister(entity: AccountEntity)\n                \n            \n\n\n                    \n                        \n                            Defined in src/data/persistence/repositories/account.repository.ts:28\n                        \n                    \n\n\n            \n                \n                        Registra una nueva cuenta.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                entity\n                                            \n                                                            AccountEntity\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Entidad de la cuenta a registrar\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                Promesa que resuelve con la cuenta registrada\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Async\n                        softDelete\n                        \n                    \n                \n            \n            \n                \n                        \n                    softDelete(id: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/data/persistence/repositories/account.repository.ts:93\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        update\n                        \n                    \n                \n            \n            \n                \n                        \n                    update(id: string, entity: AccountEntity)\n                \n            \n\n\n                    \n                        \n                            Defined in src/data/persistence/repositories/account.repository.ts:40\n                        \n                    \n\n\n            \n                \n                        Actualiza una cuenta existente.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    ID de la cuenta a actualizar\n\n                                            \n                                        \n                                        \n                                                entity\n                                            \n                                                            AccountEntity\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Nuevos datos de la cuenta\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                Promesa que resuelve con la cuenta actualizada\n\n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, NotFoundException } from '@nestjs/common';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { Repository } from 'typeorm';\nimport { AccountEntity } from '../entities';\nimport { AccountRepositoryInterface } from './interfaces/';\n\n/**\n * Repositorio para la entidad de cuenta.\n *\n * @export\n * @class AccountRepository\n * @implements {AccountRepositoryInterface} Interfaz del repositorio de cuentas\n */\n@Injectable()\nexport class AccountRepository implements AccountRepositoryInterface {\n  constructor(\n    @InjectRepository(AccountEntity)\n    private readonly userRepository: Repository,\n  ) {}\n\n  /**\n   * Registra una nueva cuenta.\n   *\n   * @param {AccountEntity} entity Entidad de la cuenta a registrar\n   * @returns {Promise} Promesa que resuelve con la cuenta registrada\n   * @memberof AccountRepository\n   */\n  register(entity: AccountEntity): Promise {\n    return this.userRepository.save(entity);\n  }\n\n  /**\n   * Actualiza una cuenta existente.\n   *\n   * @param {string} id ID de la cuenta a actualizar\n   * @param {AccountEntity} entity Nuevos datos de la cuenta\n   * @returns {Promise} Promesa que resuelve con la cuenta actualizada\n   * @memberof AccountRepository\n   */\n  async update(id: string, entity: AccountEntity): Promise {\n    return this.userRepository.update(id, entity).then((result) => {\n      if (result.affected === 0) {\n        throw new NotFoundException(`El Id: ${id} no existe en la base de datos`);\n      }\n      return entity;\n    });\n  }\n\n  /**\n   * Encuentra una cuenta por su ID.\n   *\n   * @param {string} id ID de la cuenta a buscar\n   * @returns {Promise} Promesa que resuelve con la cuenta encontrada\n   * @memberof AccountRepository\n   */\n  findOneById(id: string): Promise {\n    const deletedAt = undefined;\n    return this.userRepository\n      .findOne({\n        where: { id, deletedAt },\n      })\n      .then((result) => {\n        if (result) {\n          return result;\n        } else {\n          throw new NotFoundException(\n            `El Id: ${id} no existe en la base de datos`,\n          );\n        }\n      });\n  }\n\n  /**\n   * Elimina una cuenta.\n   *\n   * @param {string} id ID de la cuenta a eliminar\n   * @param {boolean} [soft] Indica si la eliminación debe ser suave (borrado lógico) o no\n   * @memberof AccountRepository\n   */\n  delete(id: string, soft?: boolean): void {\n    this.findOneById(id);\n    if (soft || soft === undefined) {\n      this.softDelete(id);\n    } else {\n      this.hardDelete(id);\n    }\n  }\n\n  private hardDelete(id: string): void {\n    this.userRepository.delete(id);\n  }\n\n  private async softDelete(id: string) {\n    let newAccount = new AccountEntity();\n    const account = await this.findOneById(id);\n    newAccount = {\n      ...newAccount,\n      ...account,\n      id: account.id,\n    };\n    newAccount.deletedAt = Date.now();\n    this.update(account.id, newAccount);\n  }\n\n  /**\n   * Encuentra todas las cuentas.\n   *\n   * @returns {Promise} Promesa que resuelve con un arreglo de todas las cuentas\n   * @memberof AccountRepository\n   */\n  findAll(): Promise {\n    const deletedAt = undefined;\n    return this.userRepository.find({\n      where: { deletedAt },\n    });\n  }\n\n  /**\n   * Encuentra cuentas por su estado.\n   *\n   * @param {boolean} state Estado de las cuentas a buscar\n   * @returns {Promise} Promesa que resuelve con un arreglo de cuentas encontradas\n   * @memberof AccountRepository\n   */\n  findByState(state: boolean): Promise {\n    const deletedAt = undefined;\n    return this.userRepository.find({ where: { state, deletedAt } });\n  }\n\n  /**\n   * Encuentra cuentas por el ID de su cliente.\n   *\n   * @param {string} customerId ID del cliente asociado a las cuentas\n   * @returns {Promise} Promesa que resuelve con un arreglo de cuentas encontradas\n   * @memberof AccountRepository\n   */\n  findByCustomer(customerId: string): Promise {\n    const deletedAt = undefined;\n    return this.userRepository.find({\n      where: { customer: { id: customerId }, deletedAt },\n      relations: ['accountType'],\n    });\n  }\n\n  /**\n   * Encuentra cuentas por el ID de su tipo de cuenta.\n   *\n   * @param {string} accountTypeId ID del tipo de cuenta asociado a las cuentas\n   * @returns {Promise} Promesa que resuelve con un arreglo de cuentas encontradas\n   * @memberof AccountRepository\n   */\n  findByAccountType(accountTypeId: string): Promise {\n    const deletedAt = undefined;\n    return this.userRepository.find({\n      where: { accountType: { id: accountTypeId }, deletedAt },\n    });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/AccountRepositoryInterface.html":{"url":"interfaces/AccountRepositoryInterface.html","title":"interface - AccountRepositoryInterface","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  AccountRepositoryInterface\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/data/persistence/repositories/interfaces/account-repository.interface.ts\n        \n\n\n            \n                Description\n            \n            \n                Interfaz para el repositorio de cuentas.\nExtiende la interfaz base de repositorio y define métodos adicionales específicos para las cuentas.\n\n            \n\n            \n                Extends\n            \n            \n                            BaseRepositoryInterface\n            \n\n        \n            Index\n            \n                \n                    \n                        \n                            Methods\n                        \n                    \n                    \n                        \n                            \n                                \n                                    \n                                        findByAccountType\n                                    \n                                \n                                \n                                    \n                                        findByCustomer\n                                    \n                                \n                                \n                                    \n                                        findByState\n                                    \n                                \n                            \n                        \n                    \n                \n            \n        \n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        findByAccountType\n                        \n                    \n                \n            \n            \n                \nfindByAccountType(accountTypeId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/data/persistence/repositories/interfaces/account-repository.interface.ts:39\n                        \n                    \n\n\n            \n                \n                        Encuentra cuentas por tipo de cuenta.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                accountTypeId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Identificador del tipo de cuenta\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                Promesa que resuelve con un arreglo de cuentas que tienen el tipo de cuenta especificado\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findByCustomer\n                        \n                    \n                \n            \n            \n                \nfindByCustomer(customerId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/data/persistence/repositories/interfaces/account-repository.interface.ts:30\n                        \n                    \n\n\n            \n                \n                        Encuentra cuentas por cliente.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                customerId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Identificador del cliente asociado a las cuentas\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                Promesa que resuelve con un arreglo de cuentas asociadas al cliente especificado\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findByState\n                        \n                    \n                \n            \n            \n                \nfindByState(state: boolean)\n                \n            \n\n\n                    \n                        \n                            Defined in src/data/persistence/repositories/interfaces/account-repository.interface.ts:21\n                        \n                    \n\n\n            \n                \n                        Encuentra cuentas por estado.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                state\n                                            \n                                                            boolean\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Estado de la cuenta a buscar\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                Promesa que resuelve con un arreglo de cuentas que coinciden con el estado especificado\n\n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { AccountEntity } from '../../entities';\nimport { BaseRepositoryInterface } from './base/';\n\n/**\n * Interfaz para el repositorio de cuentas.\n *\n * Extiende la interfaz base de repositorio y define métodos adicionales específicos para las cuentas.\n *\n * @export\n * @interface AccountRepositoryInterface\n * @extends {BaseRepositoryInterface} Interfaz base de repositorio para cuentas\n */\nexport interface AccountRepositoryInterface extends BaseRepositoryInterface {\n  /**\n   * Encuentra cuentas por estado.\n   *\n   * @param {boolean} state Estado de la cuenta a buscar\n   * @returns {Promise} Promesa que resuelve con un arreglo de cuentas que coinciden con el estado especificado\n   * @memberof AccountRepositoryInterface\n   */\n  findByState(state: boolean): Promise;\n\n  /**\n   * Encuentra cuentas por cliente.\n   *\n   * @param {string} customerId Identificador del cliente asociado a las cuentas\n   * @returns {Promise} Promesa que resuelve con un arreglo de cuentas asociadas al cliente especificado\n   * @memberof AccountRepositoryInterface\n   */\n  findByCustomer(customerId: string): Promise;\n\n  /**\n   * Encuentra cuentas por tipo de cuenta.\n   *\n   * @param {string} accountTypeId Identificador del tipo de cuenta\n   * @returns {Promise} Promesa que resuelve con un arreglo de cuentas que tienen el tipo de cuenta especificado\n   * @memberof AccountRepositoryInterface\n   */\n  findByAccountType(accountTypeId: string): Promise;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AccountService.html":{"url":"injectables/AccountService.html","title":"injectable - AccountService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AccountService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/business/services/account/account.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                addBalance\n                            \n                            \n                                    Async\n                                changeAccountType\n                            \n                            \n                                    Async\n                                changeState\n                            \n                            \n                                    Async\n                                createAccount\n                            \n                            \n                                    Async\n                                CustomerBalance\n                            \n                            \n                                deleteAccount\n                            \n                            \n                                    Async\n                                findAll\n                            \n                            \n                                    Async\n                                getAccountByCustomerId\n                            \n                            \n                                    Async\n                                getAccountType\n                            \n                            \n                                    Async\n                                getBalance\n                            \n                            \n                                    Async\n                                getState\n                            \n                            \n                                    Async\n                                removeBalance\n                            \n                            \n                                    Async\n                                verifyAmountIntoBalance\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(accountRepository: AccountRepository, accountTypeRepository: AccountTypeRepository, customerRepository: CustomerRepository)\n                    \n                \n                        \n                            \n                                Defined in src/business/services/account/account.service.ts:15\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        accountRepository\n                                                  \n                                                        \n                                                                        AccountRepository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        accountTypeRepository\n                                                  \n                                                        \n                                                                        AccountTypeRepository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        customerRepository\n                                                  \n                                                        \n                                                                        CustomerRepository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        addBalance\n                        \n                    \n                \n            \n            \n                \n                        \n                    addBalance(accountId: string, amount: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/business/services/account/account.service.ts:78\n                        \n                    \n\n\n            \n                \n                        Agregar balance a una cuenta\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                accountId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                amount\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        changeAccountType\n                        \n                    \n                \n            \n            \n                \n                        \n                    changeAccountType(accountId: string, accountTypeId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/business/services/account/account.service.ts:180\n                        \n                    \n\n\n            \n                \n                        Cambiar el tipo de cuenta a una cuenta\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                accountId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                accountTypeId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                {AccountTypeEntity}\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        changeState\n                        \n                    \n                \n            \n            \n                \n                        \n                    changeState(accountId: string, state: boolean)\n                \n            \n\n\n                    \n                        \n                            Defined in src/business/services/account/account.service.ts:148\n                        \n                    \n\n\n            \n                \n                        Cambiar el estado de una cuenta\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                accountId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                state\n                                            \n                                                            boolean\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        createAccount\n                        \n                    \n                \n            \n            \n                \n                        \n                    createAccount(account: AccountDTO)\n                \n            \n\n\n                    \n                        \n                            Defined in src/business/services/account/account.service.ts:29\n                        \n                    \n\n\n            \n                \n                        Crear una cuenta\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                account\n                                            \n                                                            AccountDTO\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                {AccountEntity}\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        CustomerBalance\n                        \n                    \n                \n            \n            \n                \n                        \n                    CustomerBalance(id: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/business/services/account/account.service.ts:40\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        deleteAccount\n                        \n                    \n                \n            \n            \n                \ndeleteAccount(accountId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/business/services/account/account.service.ts:204\n                        \n                    \n\n\n            \n                \n                        Borrar una cuenta\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                accountId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        findAll\n                        \n                    \n                \n            \n            \n                \n                        \n                    findAll()\n                \n            \n\n\n                    \n                        \n                            Defined in src/business/services/account/account.service.ts:67\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         Promise\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        getAccountByCustomerId\n                        \n                    \n                \n            \n            \n                \n                        \n                    getAccountByCustomerId(customerId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/business/services/account/account.service.ts:63\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                customerId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        getAccountType\n                        \n                    \n                \n            \n            \n                \n                        \n                    getAccountType(accountId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/business/services/account/account.service.ts:162\n                        \n                    \n\n\n            \n                \n                        Obtener el tipo de cuenta de una cuenta\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                accountId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                {AccountTypeEntity}\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        getBalance\n                        \n                    \n                \n            \n            \n                \n                        \n                    getBalance(accountId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/business/services/account/account.service.ts:54\n                        \n                    \n\n\n            \n                \n                        Obtener el balance de una cuenta\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                accountId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                {number}\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        getState\n                        \n                    \n                \n            \n            \n                \n                        \n                    getState(accountId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/business/services/account/account.service.ts:137\n                        \n                    \n\n\n            \n                \n                        Obtener el estado de una cuenta\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                accountId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                {boolean}\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        removeBalance\n                        \n                    \n                \n            \n            \n                \n                        \n                    removeBalance(accountId: string, amount: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/business/services/account/account.service.ts:95\n                        \n                    \n\n\n            \n                \n                        Remover balance de una cuenta\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                accountId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                amount\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        verifyAmountIntoBalance\n                        \n                    \n                \n            \n            \n                \n                        \n                    verifyAmountIntoBalance(accountId: string, amount: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/business/services/account/account.service.ts:115\n                        \n                    \n\n\n            \n                \n                        Verificar la disponibilidad de un monto a retirar en una cuenta\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                accountId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                amount\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                {boolean}\n\n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { ConflictException } from '@nestjs/common/exceptions';\nimport { AccountDTO } from 'src/business/dtos';\nimport {\n  AccountEntity,\n  AccountTypeEntity,\n} from '../../../data/persistence/entities';\nimport {\n  AccountRepository,\n  AccountTypeRepository,\n  CustomerRepository,\n} from '../../../data/persistence/repositories';\n\n@Injectable()\nexport class AccountService {\n  constructor(\n    private readonly accountRepository: AccountRepository,\n    private readonly accountTypeRepository: AccountTypeRepository,\n    private readonly customerRepository: CustomerRepository,\n  ) {}\n\n  /**\n   * Crear una cuenta\n   *\n   * @param {AccountModel} account\n   * @return {*}  {AccountEntity}\n   * @memberof AccountService\n   */\n  async createAccount(account: AccountDTO): Promise {\n    const newAccount = new AccountEntity();\n    newAccount.customer = await this.customerRepository.findOneById(\n      account.customerId,\n    );\n    newAccount.accountType = await this.accountTypeRepository.findOneById(\n      account.accountTypeId,\n    );\n    return this.accountRepository.register(newAccount);\n  }\n\n  async CustomerBalance(id: string): Promise {\n    const array = (await this.accountRepository.findAll()).filter(\n      (user) => user.customer.id === id && user.balance > 0,\n    );\n    return array.length  {\n    if (!this.getState(accountId)) {\n      throw new ConflictException(`Cuenta desactivada`);\n    }\n    let newAccount = new AccountEntity();\n    newAccount = await this.accountRepository.findOneById(accountId);\n    return newAccount.balance;\n  }\n\n  async getAccountByCustomerId(customerId: string): Promise {\n    return await this.accountRepository.findByCustomer(customerId);\n  }\n\n  async findAll(): Promise {\n    return await this.accountRepository.findAll();\n  }\n\n  /**\n   * Agregar balance a una cuenta\n   *\n   * @param {string} accountId\n   * @param {number} amount\n   * @memberof AccountService\n   */\n  async addBalance(accountId: string, amount: number) {\n    if (!this.getState(accountId)) {\n      throw new ConflictException(`Cuenta desactivada`);\n    }\n    let newAccount = new AccountEntity();\n    newAccount = await this.accountRepository.findOneById(accountId);\n    newAccount.balance += amount;\n    this.accountRepository.update(accountId, newAccount);\n  }\n\n  /**\n   * Remover balance de una cuenta\n   *\n   * @param {string} accountId\n   * @param {number} amount\n   * @memberof AccountService\n   */\n  async removeBalance(accountId: string, amount: number) {\n    if (!this.getState(accountId)) {\n      throw new ConflictException(`Cuenta desactivada`);\n    }\n    if (await this.verifyAmountIntoBalance(accountId, amount)) {\n      let newAccount = new AccountEntity();\n      newAccount = await this.accountRepository.findOneById(accountId);\n      newAccount.balance -= Number(amount);\n      this.accountRepository.update(accountId, newAccount);\n    }\n  }\n\n  /**\n   * Verificar la disponibilidad de un monto a retirar en una cuenta\n   *\n   * @param {string} accountId\n   * @param {number} amount\n   * @return {*}  {boolean}\n   * @memberof AccountService\n   */\n  async verifyAmountIntoBalance(\n    accountId: string,\n    amount: number,\n  ): Promise {\n    if (!this.getState(accountId)) {\n      throw new ConflictException(`Cuenta desactivada`);\n    }\n    let newAccount = new AccountEntity();\n    newAccount = await this.accountRepository.findOneById(accountId);\n    if (newAccount.balance  {\n    return (await this.accountRepository.findOneById(accountId)).state;\n  }\n\n  /**\n   * Cambiar el estado de una cuenta\n   *\n   * @param {string} accountId\n   * @param {boolean} state\n   * @memberof AccountService\n   */\n  async changeState(accountId: string, state: boolean) {\n    let newAccount = new AccountEntity();\n    newAccount = await this.accountRepository.findOneById(accountId);\n    newAccount.state = state;\n    this.accountRepository.update(accountId, newAccount);\n  }\n\n  /**\n   * Obtener el tipo de cuenta de una cuenta\n   *\n   * @param {string} accountId\n   * @return {*}  {AccountTypeEntity}\n   * @memberof AccountService\n   */\n  async getAccountType(accountId: string): Promise {\n    if (!this.getState(accountId)) {\n      throw new ConflictException(`Cuenta desactivada`);\n    }\n    let newAccount = new AccountEntity();\n    newAccount = await this.accountRepository.findOneById(accountId);\n    const AccountTypeEntity = newAccount.accountType;\n    return AccountTypeEntity;\n  }\n\n  /**\n   * Cambiar el tipo de cuenta a una cuenta\n   *\n   * @param {string} accountId\n   * @param {string} accountTypeId\n   * @return {*}  {AccountTypeEntity}\n   * @memberof AccountService\n   */\n  async changeAccountType(\n    accountId: string,\n    accountTypeId: string,\n  ): Promise {\n    if (!this.getState(accountId)) {\n      throw new ConflictException(`Cuenta desactivada`);\n    }\n    let newAccount = new AccountEntity();\n    newAccount = await this.accountRepository.findOneById(accountId);\n    const accountType = await this.accountTypeRepository.findOneById(\n      accountTypeId,\n    );\n    newAccount.accountType = accountType;\n\n    return (await this.accountRepository.update(accountId, newAccount))\n      .accountType;\n  }\n\n  /**\n   * Borrar una cuenta\n   *\n   * @param {string} accountId\n   * @memberof AccountService\n   */\n  deleteAccount(accountId: string): void {\n    if (!this.getState(accountId)) {\n      throw new ConflictException(`Cuenta desactivada`);\n    }\n    this.accountRepository.delete(accountId);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/AccountTypeEntity.html":{"url":"entities/AccountTypeEntity.html","title":"entity - AccountTypeEntity","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  AccountTypeEntity\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/data/persistence/entities/account-type.entity.ts\n        \n\n\n            \n                Description\n            \n            \n                Entidad para el tipo de cuenta\n\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                id\n                            \n                            \n                                    \n                                name\n                            \n                            \n                                    \n                                state\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Default value : uuid()\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({name: 'id', type: 'uuid', primary: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/data/persistence/entities/account-type.entity.ts:28\n                        \n                    \n\n            \n                \n                    Identificador único del tipo de cuenta\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({name: 'name', type: 'varchar', length: 50})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/data/persistence/entities/account-type.entity.ts:41\n                        \n                    \n\n            \n                \n                    Nombre del tipo de cuenta\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        state\n                        \n                    \n                \n            \n                \n                    \n                        Default value : true\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({name: 'state', type: 'boolean'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/data/persistence/entities/account-type.entity.ts:53\n                        \n                    \n\n            \n                \n                    Estado del tipo de cuenta (activo/inactivo)\n\n                \n            \n\n        \n    \n\n    \n\n\n    \n        import { Column, Entity } from 'typeorm';\nimport { v4 as uuid } from 'uuid';\nimport { AccountTypeModel } from '../../models';\n\n/**\n * Entidad para el tipo de cuenta\n *\n * @export\n * @class AccountTypeEntity\n * @implements {AccountTypeModel}\n */\n@Entity({\n  name: 'account_type',\n  schema: 'public',\n})\nexport class AccountTypeEntity implements AccountTypeModel {\n  /**\n   * Identificador único del tipo de cuenta\n   *\n   * @type {string}\n   * @memberof AccountTypeEntity\n   */\n  @Column({\n    name: 'id',\n    type: 'uuid',\n    primary: true,\n  })\n  id = uuid();\n\n  /**\n   * Nombre del tipo de cuenta\n   *\n   * @type {string}\n   * @memberof AccountTypeEntity\n   */\n  @Column({\n    name: 'name',\n    type: 'varchar',\n    length: 50,\n  })\n  name: string;\n\n  /**\n   * Estado del tipo de cuenta (activo/inactivo)\n   *\n   * @type {boolean}\n   * @memberof AccountTypeEntity\n   */\n  @Column({\n    name: 'state',\n    type: 'boolean',\n  })\n  state = true;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/AccountTypeModel.html":{"url":"interfaces/AccountTypeModel.html","title":"interface - AccountTypeModel","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  AccountTypeModel\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/data/models/account-type.mode.ts\n        \n\n\n            \n                Description\n            \n            \n                Interfaz que define la estructura de datos para el modelo de tipo de cuenta.\nEsta interfaz describe las propiedades de un tipo de cuenta, incluyendo su identificador único, nombre y estado.\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            id\n                                        \n                                \n                                \n                                        \n                                            name\n                                        \n                                \n                                \n                                        \n                                            state\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        id\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        id:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Identificador único del tipo de cuenta\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        name\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        name:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Nombre del tipo de cuenta\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        state\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        state:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Estado del tipo de cuenta\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        export interface AccountTypeModel {\n  /** Identificador único del tipo de cuenta */\n  id: string;\n\n  /** Nombre del tipo de cuenta */\n  name: string;\n\n  /** Estado del tipo de cuenta */\n  state: boolean;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AccountTypeRepository.html":{"url":"injectables/AccountTypeRepository.html","title":"injectable - AccountTypeRepository","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AccountTypeRepository\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/data/persistence/repositories/account-type.repository.ts\n        \n\n\n            \n                Description\n            \n            \n                Repositorio para la entidad de tipos de cuenta.\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                delete\n                            \n                            \n                                findAll\n                            \n                            \n                                findByName\n                            \n                            \n                                findByState\n                            \n                            \n                                    Async\n                                findOneById\n                            \n                            \n                                register\n                            \n                            \n                                    Async\n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(userRepository: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/data/persistence/repositories/account-type.repository.ts:15\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        userRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        delete\n                        \n                    \n                \n            \n            \n                \ndelete(id: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/data/persistence/repositories/account-type.repository.ts:81\n                        \n                    \n\n\n            \n                \n                        Elimina un tipo de cuenta.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    ID del tipo de cuenta a eliminar\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findAll\n                        \n                    \n                \n            \n            \n                \nfindAll()\n                \n            \n\n\n                    \n                        \n                            Defined in src/data/persistence/repositories/account-type.repository.ts:40\n                        \n                    \n\n\n            \n                \n                        Encuentra todos los tipos de cuenta.\n\n\n                        \n                            Returns :         Promise\n\n                        \n                            \n                                Promesa que resuelve con un arreglo de todos los tipos de cuenta\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findByName\n                        \n                    \n                \n            \n            \n                \nfindByName(name: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/data/persistence/repositories/account-type.repository.ts:130\n                        \n                    \n\n\n            \n                \n                        Encuentra tipos de cuenta por su nombre.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                name\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Nombre de los tipos de cuenta a buscar\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                Promesa que resuelve con un arreglo de tipos de cuenta encontrados\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findByState\n                        \n                    \n                \n            \n            \n                \nfindByState(state: boolean)\n                \n            \n\n\n                    \n                        \n                            Defined in src/data/persistence/repositories/account-type.repository.ts:119\n                        \n                    \n\n\n            \n                \n                        Encuentra tipos de cuenta por su estado.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                state\n                                            \n                                                            boolean\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Estado de los tipos de cuenta a buscar\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                Promesa que resuelve con un arreglo de tipos de cuenta encontrados\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        findOneById\n                        \n                    \n                \n            \n            \n                \n                        \n                    findOneById(id: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/data/persistence/repositories/account-type.repository.ts:96\n                        \n                    \n\n\n            \n                \n                        Encuentra un tipo de cuenta por su ID.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    ID del tipo de cuenta a buscar\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                Promesa que resuelve con el tipo de cuenta encontrado\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        register\n                        \n                    \n                \n            \n            \n                \nregister(entity: AccountTypeEntity)\n                \n            \n\n\n                    \n                        \n                            Defined in src/data/persistence/repositories/account-type.repository.ts:51\n                        \n                    \n\n\n            \n                \n                        Registra un nuevo tipo de cuenta.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                entity\n                                            \n                                                            AccountTypeEntity\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Entidad del tipo de cuenta a registrar\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                Promesa que resuelve con el tipo de cuenta registrado\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        update\n                        \n                    \n                \n            \n            \n                \n                        \n                    update(id: string, entity: AccountTypeEntity)\n                \n            \n\n\n                    \n                        \n                            Defined in src/data/persistence/repositories/account-type.repository.ts:63\n                        \n                    \n\n\n            \n                \n                        Actualiza un tipo de cuenta existente.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    ID del tipo de cuenta a actualizar\n\n                                            \n                                        \n                                        \n                                                entity\n                                            \n                                                            AccountTypeEntity\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Nuevos datos del tipo de cuenta\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                Promesa que resuelve con el tipo de cuenta actualizado\n\n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, NotFoundException } from '@nestjs/common';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { Repository } from 'typeorm';\nimport { AccountTypeEntity } from '../entities/account-type.entity';\nimport { AccountTypeRepositoryInterface } from './interfaces/';\n\n/**\n * Repositorio para la entidad de tipos de cuenta.\n *\n * @export\n * @class AccountTypeRepository\n * @implements {AccountTypeRepositoryInterface} Interfaz del repositorio de tipos de cuenta\n */\n@Injectable()\nexport class AccountTypeRepository implements AccountTypeRepositoryInterface {\n  constructor(\n    @InjectRepository(AccountTypeEntity)\n    private readonly userRepository: Repository,\n  ) {\n    // Se registran algunos tipos de cuenta por defecto al inicializar el repositorio\n    this.register({\n      id: 'ab27c9ac-a01c-4c22-a6d6-ce5ab3b79185',\n      name: 'Cuenta de ahorros',\n      state: true,\n    });\n\n    this.register({\n      id: '10b6c590-85fa-4621-b85a-4021e882c080',\n      name: 'Cuenta corriente',\n      state: true,\n    });\n  }\n\n  /**\n   * Encuentra todos los tipos de cuenta.\n   *\n   * @returns {Promise} Promesa que resuelve con un arreglo de todos los tipos de cuenta\n   * @memberof AccountTypeRepository\n   */\n  findAll(): Promise {\n    return this.userRepository.find();\n  }\n\n  /**\n   * Registra un nuevo tipo de cuenta.\n   *\n   * @param {AccountTypeEntity} entity Entidad del tipo de cuenta a registrar\n   * @returns {Promise} Promesa que resuelve con el tipo de cuenta registrado\n   * @memberof AccountTypeRepository\n   */\n  register(entity: AccountTypeEntity): Promise {\n    return this.userRepository.save(entity);\n  }\n\n  /**\n   * Actualiza un tipo de cuenta existente.\n   *\n   * @param {string} id ID del tipo de cuenta a actualizar\n   * @param {AccountTypeEntity} entity Nuevos datos del tipo de cuenta\n   * @returns {Promise} Promesa que resuelve con el tipo de cuenta actualizado\n   * @memberof AccountTypeRepository\n   */\n  async update(\n    id: string,\n    entity: AccountTypeEntity,\n  ): Promise {\n    return this.userRepository.update(id, entity).then((result) => {\n      if (result.affected === 0) {\n        throw new NotFoundException(`El Id: ${id} no existe en la base de datos`);\n      }\n      return entity;\n    });\n  }\n\n  /**\n   * Elimina un tipo de cuenta.\n   *\n   * @param {string} id ID del tipo de cuenta a eliminar\n   * @memberof AccountTypeRepository\n   */\n  delete(id: string): void {\n    this.userRepository.delete(id).then((result) => {\n      if (result.affected === 0) {\n        throw new NotFoundException(`El Id: ${id} no existe en la base de datos`);\n      }\n    });\n  }\n\n  /**\n   * Encuentra un tipo de cuenta por su ID.\n   *\n   * @param {string} id ID del tipo de cuenta a buscar\n   * @returns {Promise} Promesa que resuelve con el tipo de cuenta encontrado\n   * @memberof AccountTypeRepository\n   */\n  async findOneById(id: string): Promise {\n    return this.userRepository\n      .findOne({\n        where: { id },\n      })\n      ?.then((result) => {\n        if (result) {\n          return result;\n        } else {\n          throw new NotFoundException(\n            `El Id: ${id} no existe en la base de datos`,\n          );\n        }\n      });\n  }\n\n  /**\n   * Encuentra tipos de cuenta por su estado.\n   *\n   * @param {boolean} state Estado de los tipos de cuenta a buscar\n   * @returns {Promise} Promesa que resuelve con un arreglo de tipos de cuenta encontrados\n   * @memberof AccountTypeRepository\n   */\n  findByState(state: boolean): Promise {\n    return this.userRepository.find({ where: { state } });\n  }\n\n  /**\n   * Encuentra tipos de cuenta por su nombre.\n   *\n   * @param {string} name Nombre de los tipos de cuenta a buscar\n   * @returns {Promise} Promesa que resuelve con un arreglo de tipos de cuenta encontrados\n   * @memberof AccountTypeRepository\n   */\n  findByName(name: string): Promise {\n    return this.userRepository.find({ where: { name } });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/AccountTypeRepositoryInterface.html":{"url":"interfaces/AccountTypeRepositoryInterface.html","title":"interface - AccountTypeRepositoryInterface","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  AccountTypeRepositoryInterface\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/data/persistence/repositories/interfaces/account-type-repository.interface.ts\n        \n\n\n            \n                Description\n            \n            \n                Interfaz para el repositorio de tipos de cuenta.\nExtiende la interfaz base de repositorio y define métodos adicionales específicos para los tipos de cuenta.\n\n            \n\n            \n                Extends\n            \n            \n                            BaseRepositoryInterface\n            \n\n        \n            Index\n            \n                \n                    \n                        \n                            Methods\n                        \n                    \n                    \n                        \n                            \n                                \n                                    \n                                        findByName\n                                    \n                                \n                                \n                                    \n                                        findByState\n                                    \n                                \n                            \n                        \n                    \n                \n            \n        \n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        findByName\n                        \n                    \n                \n            \n            \n                \nfindByName(name: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/data/persistence/repositories/interfaces/account-type-repository.interface.ts:30\n                        \n                    \n\n\n            \n                \n                        Encuentra tipos de cuenta por nombre.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                name\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Nombre del tipo de cuenta\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                Promesa que resuelve con un arreglo de tipos de cuenta que tienen el nombre especificado\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findByState\n                        \n                    \n                \n            \n            \n                \nfindByState(state: boolean)\n                \n            \n\n\n                    \n                        \n                            Defined in src/data/persistence/repositories/interfaces/account-type-repository.interface.ts:21\n                        \n                    \n\n\n            \n                \n                        Encuentra tipos de cuenta por estado.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                state\n                                            \n                                                            boolean\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Estado del tipo de cuenta a buscar\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                Promesa que resuelve con un arreglo de tipos de cuenta que coinciden con el estado especificado\n\n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { AccountTypeEntity } from '../../entities';\nimport { BaseRepositoryInterface } from './base/';\n\n/**\n * Interfaz para el repositorio de tipos de cuenta.\n *\n * Extiende la interfaz base de repositorio y define métodos adicionales específicos para los tipos de cuenta.\n *\n * @export\n * @interface AccountTypeRepositoryInterface\n * @extends {BaseRepositoryInterface} Interfaz base de repositorio para tipos de cuenta\n */\nexport interface AccountTypeRepositoryInterface extends BaseRepositoryInterface {\n  /**\n   * Encuentra tipos de cuenta por estado.\n   *\n   * @param {boolean} state Estado del tipo de cuenta a buscar\n   * @returns {Promise} Promesa que resuelve con un arreglo de tipos de cuenta que coinciden con el estado especificado\n   * @memberof AccountTypeRepositoryInterface\n   */\n  findByState(state: boolean): Promise;\n\n  /**\n   * Encuentra tipos de cuenta por nombre.\n   *\n   * @param {string} name Nombre del tipo de cuenta\n   * @returns {Promise} Promesa que resuelve con un arreglo de tipos de cuenta que tienen el nombre especificado\n   * @memberof AccountTypeRepositoryInterface\n   */\n  findByName(name: string): Promise;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AppModule.html":{"url":"modules/AppModule.html","title":"module - AppModule","body":"\n                   \n\n\n\n\n    Modules\n    AppModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AppModule\n\n\n\ncluster_AppModule_providers\n\n\n\n\nAccountRepository\n\nAccountRepository\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAccountRepository->AppModule\n\n\n\n\n\nAccountService\n\nAccountService\n\nAppModule -->\n\nAccountService->AppModule\n\n\n\n\n\nAccountTypeRepository\n\nAccountTypeRepository\n\nAppModule -->\n\nAccountTypeRepository->AppModule\n\n\n\n\n\nCustomerRepository\n\nCustomerRepository\n\nAppModule -->\n\nCustomerRepository->AppModule\n\n\n\n\n\nCustomerService\n\nCustomerService\n\nAppModule -->\n\nCustomerService->AppModule\n\n\n\n\n\nDepositRepository\n\nDepositRepository\n\nAppModule -->\n\nDepositRepository->AppModule\n\n\n\n\n\nDepositService\n\nDepositService\n\nAppModule -->\n\nDepositService->AppModule\n\n\n\n\n\nDocumentTypeRepository\n\nDocumentTypeRepository\n\nAppModule -->\n\nDocumentTypeRepository->AppModule\n\n\n\n\n\nSecurityService\n\nSecurityService\n\nAppModule -->\n\nSecurityService->AppModule\n\n\n\n\n\nTransferRepository\n\nTransferRepository\n\nAppModule -->\n\nTransferRepository->AppModule\n\n\n\n\n\nTransferService\n\nTransferService\n\nAppModule -->\n\nTransferService->AppModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/app.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AccountRepository\n                        \n                        \n                            AccountService\n                        \n                        \n                            AccountTypeRepository\n                        \n                        \n                            CustomerRepository\n                        \n                        \n                            CustomerService\n                        \n                        \n                            DepositRepository\n                        \n                        \n                            DepositService\n                        \n                        \n                            DocumentTypeRepository\n                        \n                        \n                            SecurityService\n                        \n                        \n                            TransferRepository\n                        \n                        \n                            TransferService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            UserController\n                        \n                        \n                            TransferController\n                        \n                        \n                            SecurityController\n                        \n                        \n                            DepositController\n                        \n                        \n                            AccountController\n                        \n                    \n                \n            \n        \n\n        \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        configure\n                        \n                    \n                \n            \n            \n                \nconfigure(consumer: MiddlewareConsumer)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app.module.ts:92\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                consumer\n                                            \n                                                        MiddlewareConsumer\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n    \n\n\n    \n        import { MiddlewareConsumer, Module, NestModule } from '@nestjs/common';\nimport { ConfigModule } from '@nestjs/config';\nimport { APP_FILTER } from '@nestjs/core';\nimport { JwtModule } from '@nestjs/jwt';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { jwtConstants } from './business/services';\nimport {\n  AccountService,\n  CustomerService,\n  DepositService,\n  SecurityService,\n  TransferService,\n} from './business/services/';\nimport {\n  AccountEntity,\n  AccountTypeEntity,\n  CustomerEntity,\n  DepositEntity,\n  DocumentTypeEntity,\n  TransferEntity,\n} from './data/persistence/entities';\nimport {\n  AccountRepository,\n  AccountTypeRepository,\n  CustomerRepository,\n  DepositRepository,\n  DocumentTypeRepository,\n  TransferRepository,\n} from './data/persistence/repositories/';\nimport { TypeOrmExceptionFilter } from './data/persistence/utils/exception-filters/typeorm.exception-filters';\nimport {\n  AccountController,\n  DepositController,\n  SecurityController,\n  TransferController,\n  UserController,\n} from './presentation/controllers/';\nimport { MiddlewaresMiddleware } from './presentation/middlewares/middlewares.middleware';\n\n@Module({\n  imports: [\n    ConfigModule.forRoot(),\n    JwtModule.register({\n      secret: jwtConstants.secret,\n    }),\n    TypeOrmModule.forRoot({\n      type: 'postgres',\n      host: process.env.DB_HOST,\n      port: 5432,\n      username: process.env.DB_USER,\n      password: process.env.DB_PASSWORD,\n      database: process.env.DB_NAME,\n      synchronize: true,\n      autoLoadEntities: true,\n    }),\n    TypeOrmModule.forFeature([\n      AccountEntity,\n      AccountTypeEntity,\n      CustomerEntity,\n      DepositEntity,\n      DocumentTypeEntity,\n      TransferEntity,\n    ]),\n  ],\n  controllers: [\n    UserController,\n    TransferController,\n    SecurityController,\n    DepositController,\n    AccountController,\n  ],\n  providers: [\n    {\n      provide: APP_FILTER,\n      useClass: TypeOrmExceptionFilter,\n    },\n    // TypesOrmPostgresConfigService,\n    CustomerService,\n    TransferService,\n    SecurityService,\n    DepositService,\n    AccountService,\n    CustomerRepository,\n    TransferRepository,\n    DepositRepository,\n    AccountRepository,\n    AccountTypeRepository,\n    DocumentTypeRepository,\n  ],\n})\nexport class AppModule implements NestModule {\n  configure(consumer: MiddlewareConsumer) {\n    consumer.apply(MiddlewaresMiddleware).forRoutes('*');\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/BaseRepositoryInterface.html":{"url":"interfaces/BaseRepositoryInterface.html","title":"interface - BaseRepositoryInterface","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  BaseRepositoryInterface\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/data/persistence/repositories/interfaces/base/base-repositories.interface.ts\n        \n\n\n            \n                Description\n            \n            \n                Interfaz base para los repositorios que manejan entidades.\nDefine métodos comunes para realizar operaciones CRUD en la base de datos.\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Methods\n                        \n                    \n                    \n                        \n                            \n                                \n                                    \n                                        delete\n                                    \n                                \n                                \n                                    \n                                        findAll\n                                    \n                                \n                                \n                                    \n                                        findOneById\n                                    \n                                \n                                \n                                    \n                                        register\n                                    \n                                \n                                \n                                    \n                                        update\n                                    \n                                \n                            \n                        \n                    \n                \n            \n        \n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        delete\n                        \n                    \n                \n            \n            \n                \ndelete(id: string, soft?: boolean)\n                \n            \n\n\n                    \n                        \n                            Defined in src/data/persistence/repositories/interfaces/base/base-repositories.interface.ts:37\n                        \n                    \n\n\n            \n                \n                        Elimina una entidad de la base de datos.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Identificador de la entidad a eliminar\n\n                                            \n                                        \n                                        \n                                                soft\n                                            \n                                                            boolean\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                            \n                                                    Indicador de eliminación suave (opcional)\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findAll\n                        \n                    \n                \n            \n            \n                \nfindAll()\n                \n            \n\n\n                    \n                        \n                            Defined in src/data/persistence/repositories/interfaces/base/base-repositories.interface.ts:45\n                        \n                    \n\n\n            \n                \n                        Obtiene todas las entidades almacenadas en la base de datos.\n\n\n                        \n                            Returns :     Promise\n\n                        \n                            \n                                Promesa que resuelve con un arreglo de todas las entidades\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findOneById\n                        \n                    \n                \n            \n            \n                \nfindOneById(id: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/data/persistence/repositories/interfaces/base/base-repositories.interface.ts:54\n                        \n                    \n\n\n            \n                \n                        Busca una entidad por su identificador único en la base de datos.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Identificador de la entidad a buscar\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                Promesa que resuelve con la entidad encontrada (o null si no se encuentra)\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        register\n                        \n                    \n                \n            \n            \n                \nregister(entity: E)\n                \n            \n\n\n                    \n                        \n                            Defined in src/data/persistence/repositories/interfaces/base/base-repositories.interface.ts:18\n                        \n                    \n\n\n            \n                \n                        Registra una nueva entidad en la base de datos.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                entity\n                                            \n                                                        E\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Entidad a registrar\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                Promesa que resuelve con la entidad registrada\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        update\n                        \n                    \n                \n            \n            \n                \nupdate(id: string, entity: E)\n                \n            \n\n\n                    \n                        \n                            Defined in src/data/persistence/repositories/interfaces/base/base-repositories.interface.ts:28\n                        \n                    \n\n\n            \n                \n                        Actualiza una entidad existente en la base de datos.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Identificador de la entidad a actualizar\n\n                                            \n                                        \n                                        \n                                                entity\n                                            \n                                                        E\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Datos actualizados de la entidad\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                Promesa que resuelve con la entidad actualizada\n\n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        export interface BaseRepositoryInterface {\n  /**\n   * Registra una nueva entidad en la base de datos.\n   *\n   * @param {E} entity Entidad a registrar\n   * @returns {Promise} Promesa que resuelve con la entidad registrada\n   * @memberof BaseRepositoryInterface\n   */\n  register(entity: E): Promise;\n\n  /**\n   * Actualiza una entidad existente en la base de datos.\n   *\n   * @param {string} id Identificador de la entidad a actualizar\n   * @param {E} entity Datos actualizados de la entidad\n   * @returns {Promise} Promesa que resuelve con la entidad actualizada\n   * @memberof BaseRepositoryInterface\n   */\n  update(id: string, entity: E): Promise;\n\n  /**\n   * Elimina una entidad de la base de datos.\n   *\n   * @param {string} id Identificador de la entidad a eliminar\n   * @param {boolean} [soft] Indicador de eliminación suave (opcional)\n   * @memberof BaseRepositoryInterface\n   */\n  delete(id: string, soft?: boolean): void;\n\n  /**\n   * Obtiene todas las entidades almacenadas en la base de datos.\n   *\n   * @returns {Promise} Promesa que resuelve con un arreglo de todas las entidades\n   * @memberof BaseRepositoryInterface\n   */\n  findAll(): Promise;\n\n  /**\n   * Busca una entidad por su identificador único en la base de datos.\n   *\n   * @param {string} id Identificador de la entidad a buscar\n   * @returns {Promise} Promesa que resuelve con la entidad encontrada (o null si no se encuentra)\n   * @memberof BaseRepositoryInterface\n   */\n  findOneById(id: string): Promise;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CustomerDTO.html":{"url":"classes/CustomerDTO.html","title":"class - CustomerDTO","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CustomerDTO\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/business/dtos/customer.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                Data Transfer Object para representar un cliente.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                document\n                            \n                            \n                                    \n                                documentTypeId\n                            \n                            \n                                    \n                                email\n                            \n                            \n                                    \n                                    \n                                fullName\n                            \n                            \n                                    \n                                    \n                                password\n                            \n                            \n                                    \n                                    \n                                phone\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        document\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNumberString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/business/dtos/customer.dto.ts:36\n                        \n                    \n\n            \n                \n                    Número del documento.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        documentTypeId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsUUID()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/business/dtos/customer.dto.ts:26\n                        \n                    \n\n            \n                \n                    Identificador único del tipo de documento.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsEmail()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/business/dtos/customer.dto.ts:58\n                        \n                    \n\n            \n                \n                    Correo electrónico del cliente.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        fullName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@MaxLength(500)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/business/dtos/customer.dto.ts:48\n                        \n                    \n\n            \n                \n                    Nombre completo del cliente.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Matches(new RegExp())@MinLength(8)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/business/dtos/customer.dto.ts:83\n                        \n                    \n\n            \n                \n                    Contraseña del cliente.\nDebe contener al menos una letra mayúscula, una letra minúscula, un número y tener un mínimo de 8 caracteres.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        phone\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNumberString()@MaxLength(30)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/business/dtos/customer.dto.ts:70\n                        \n                    \n\n            \n                \n                    Número de teléfono del cliente.\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {\n  IsEmail,\n  IsNumberString,\n  IsString,\n  IsUUID,\n  Matches,\n  MaxLength,\n  MinLength,\n} from 'class-validator';\n\n/**\n * Data Transfer Object para representar un cliente.\n *\n * @export\n * @class CustomerDTO\n */\nexport class CustomerDTO {\n  /**\n   * Identificador único del tipo de documento.\n   * \n   * @type {string}\n   * @memberof CustomerDTO\n   * @decorator IsUUID\n   */\n  @IsUUID()\n  documentTypeId: string;\n\n  /**\n   * Número del documento.\n   * \n   * @type {string}\n   * @memberof CustomerDTO\n   * @decorator IsNumberString\n   */\n  @IsNumberString()\n  document: string;\n\n  /**\n   * Nombre completo del cliente.\n   * \n   * @type {string}\n   * @memberof CustomerDTO\n   * @decorator IsString\n   * @decorator MaxLength\n   */\n  @IsString()\n  @MaxLength(500)\n  fullName: string;\n\n  /**\n   * Correo electrónico del cliente.\n   * \n   * @type {string}\n   * @memberof CustomerDTO\n   * @decorator IsEmail\n   */\n  @IsEmail()\n  email: string;\n\n  /**\n   * Número de teléfono del cliente.\n   * \n   * @type {string}\n   * @memberof CustomerDTO\n   * @decorator IsNumberString\n   * @decorator MaxLength\n   */\n  @IsNumberString()\n  @MaxLength(30)\n  phone: string;\n\n  /**\n   * Contraseña del cliente.\n   * Debe contener al menos una letra mayúscula, una letra minúscula, un número y tener un mínimo de 8 caracteres.\n   * \n   * @type {string}\n   * @memberof CustomerDTO\n   * @decorator Matches\n   * @decorator MinLength\n   */\n  @Matches(new RegExp(/^(?=.*\\d)(?=.*[a-z])(?=.*[A-Z])(?=.*[a-zA-Z]).{8,}$/))\n  @MinLength(8)\n  password: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/CustomerEntity.html":{"url":"entities/CustomerEntity.html","title":"entity - CustomerEntity","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  CustomerEntity\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/data/persistence/entities/customer.entity.ts\n        \n\n\n            \n                Description\n            \n            \n                Entidad para el cliente\n\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    Optional\n                                avatarUrl\n                            \n                            \n                                    \n                                    Optional\n                                deletedAt\n                            \n                            \n                                    \n                                document\n                            \n                            \n                                    \n                                    \n                                documentType\n                            \n                            \n                                    \n                                email\n                            \n                            \n                                    \n                                fullName\n                            \n                            \n                                    \n                                id\n                            \n                            \n                                    \n                                password\n                            \n                            \n                                    \n                                phone\n                            \n                            \n                                    \n                                state\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        avatarUrl\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({name: 'avatar_url', type: 'varchar', length: 255, nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/data/persistence/entities/customer.entity.ts:120\n                        \n                    \n\n            \n                \n                    URL del avatar del cliente (opcional)\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        deletedAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Date | number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({name: 'deleted_at', type: 'timestamp', nullable: true, select: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/data/persistence/entities/customer.entity.ts:146\n                        \n                    \n\n            \n                \n                    Fecha y hora en la que se eliminó el cliente (opcional)\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        document\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({name: 'document', type: 'varchar', length: 20})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/data/persistence/entities/customer.entity.ts:54\n                        \n                    \n\n            \n                \n                    Número de documento del cliente\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        documentType\n                        \n                    \n                \n            \n                \n                    \n                        Type :         DocumentTypeEntity\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ManyToOne(undefined, {cascade: false})@JoinColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/data/persistence/entities/customer.entity.ts:41\n                        \n                    \n\n            \n                \n                    Tipo de documento del cliente\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({name: 'email', type: 'varchar', length: 100})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/data/persistence/entities/customer.entity.ts:80\n                        \n                    \n\n            \n                \n                    Correo electrónico del cliente\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        fullName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({name: 'full_name', type: 'varchar', length: 100})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/data/persistence/entities/customer.entity.ts:67\n                        \n                    \n\n            \n                \n                    Nombre completo del cliente\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Default value : uuid()\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({name: 'id', type: 'uuid', primary: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/data/persistence/entities/customer.entity.ts:29\n                        \n                    \n\n            \n                \n                    Identificador único del cliente\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({name: 'password', type: 'varchar', length: 100})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/data/persistence/entities/customer.entity.ts:106\n                        \n                    \n\n            \n                \n                    Contraseña del cliente\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        phone\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({name: 'phone', type: 'varchar', length: 20})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/data/persistence/entities/customer.entity.ts:93\n                        \n                    \n\n            \n                \n                    Número de teléfono del cliente\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        state\n                        \n                    \n                \n            \n                \n                    \n                        Default value : true\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({name: 'state', type: 'boolean'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/data/persistence/entities/customer.entity.ts:132\n                        \n                    \n\n            \n                \n                    Estado del cliente (activo/inactivo)\n\n                \n            \n\n        \n    \n\n    \n\n\n    \n        import { Column, Entity, JoinColumn, ManyToOne } from 'typeorm';\nimport { v4 as uuid } from 'uuid';\nimport { CustomerModel } from '../../models';\nimport { DocumentTypeEntity } from './';\n\n/**\n * Entidad para el cliente\n *\n * @export\n * @class CustomerEntity\n * @implements {CustomerModel}\n */\n@Entity({\n  name: 'customer',\n  schema: 'public',\n})\nexport class CustomerEntity implements CustomerModel {\n  /**\n   * Identificador único del cliente\n   *\n   * @type {string}\n   * @memberof CustomerEntity\n   */\n  @Column({\n    name: 'id',\n    type: 'uuid',\n    primary: true,\n  })\n  id = uuid();\n\n  /**\n   * Tipo de documento del cliente\n   *\n   * @type {DocumentTypeEntity}\n   * @memberof CustomerEntity\n   */\n  @ManyToOne(() => DocumentTypeEntity, {\n    cascade: false,\n  })\n  @JoinColumn()\n  documentType: DocumentTypeEntity;\n\n  /**\n   * Número de documento del cliente\n   *\n   * @type {string}\n   * @memberof CustomerEntity\n   */\n  @Column({\n    name: 'document',\n    type: 'varchar',\n    length: 20,\n  })\n  document: string;\n\n  /**\n   * Nombre completo del cliente\n   *\n   * @type {string}\n   * @memberof CustomerEntity\n   */\n  @Column({\n    name: 'full_name',\n    type: 'varchar',\n    length: 100,\n  })\n  fullName: string;\n\n  /**\n   * Correo electrónico del cliente\n   *\n   * @type {string}\n   * @memberof CustomerEntity\n   */\n  @Column({\n    name: 'email',\n    type: 'varchar',\n    length: 100,\n  })\n  email: string;\n\n  /**\n   * Número de teléfono del cliente\n   *\n   * @type {string}\n   * @memberof CustomerEntity\n   */\n  @Column({\n    name: 'phone',\n    type: 'varchar',\n    length: 20,\n  })\n  phone: string;\n\n  /**\n   * Contraseña del cliente\n   *\n   * @type {string}\n   * @memberof CustomerEntity\n   */\n  @Column({\n    name: 'password',\n    type: 'varchar',\n    length: 100,\n  })\n  password: string;\n\n  /**\n   * URL del avatar del cliente (opcional)\n   *\n   * @type {string}\n   * @memberof CustomerEntity\n   */\n  @Column({\n    name: 'avatar_url',\n    type: 'varchar',\n    length: 255,\n    nullable: true,\n  })\n  avatarUrl?: string;\n\n  /**\n   * Estado del cliente (activo/inactivo)\n   *\n   * @type {boolean}\n   * @memberof CustomerEntity\n   */\n  @Column({\n    name: 'state',\n    type: 'boolean',\n  })\n  state = true;\n\n  /**\n   * Fecha y hora en la que se eliminó el cliente (opcional)\n   *\n   * @type {(Date | number)}\n   * @memberof CustomerEntity\n   */\n  @Column({\n    name: 'deleted_at',\n    type: 'timestamp',\n    nullable: true,\n    select: false,\n  })\n  deletedAt?: Date | number;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/CustomerModel.html":{"url":"interfaces/CustomerModel.html","title":"interface - CustomerModel","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  CustomerModel\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/data/models/customer.model.ts\n        \n\n\n            \n                Description\n            \n            \n                Interfaz que define la estructura de datos para el modelo de cliente.\nEsta interfaz representa los campos y tipos de datos asociados con un cliente.\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        \n                                            avatarUrl\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            deletedAt\n                                        \n                                \n                                \n                                        \n                                            document\n                                        \n                                \n                                \n                                        \n                                            documentType\n                                        \n                                \n                                \n                                        \n                                            email\n                                        \n                                \n                                \n                                        \n                                            fullName\n                                        \n                                \n                                \n                                        \n                                            id\n                                        \n                                \n                                \n                                        \n                                            password\n                                        \n                                \n                                \n                                        \n                                            phone\n                                        \n                                \n                                \n                                        \n                                            state\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        avatarUrl\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        avatarUrl:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    URL del avatar del cliente (opcional)\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        deletedAt\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        deletedAt:     Date | number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     Date | number\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Fecha y hora en la que el cliente fue eliminado (opcional)\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        document\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        document:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Número de documento del cliente\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        documentType\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        documentType:         DocumentTypeModel\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         DocumentTypeModel\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Tipo de documento del cliente\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        email\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        email:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Correo electrónico del cliente\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        fullName\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        fullName:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Nombre completo del cliente\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        id\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        id:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Identificador único del cliente\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        password\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        password:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Contraseña del cliente\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        phone\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        phone:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Número de teléfono del cliente\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        state\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        state:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Estado del cliente (activo/inactivo)\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import { DocumentTypeModel } from '.';\n\n/**\n * Interfaz que define la estructura de datos para el modelo de cliente.\n * \n * @remarks\n * Esta interfaz representa los campos y tipos de datos asociados con un cliente.\n * \n * @export\n * @interface CustomerModel\n */\nexport interface CustomerModel {\n  /** Identificador único del cliente */\n  id: string;\n\n  /** Tipo de documento del cliente */\n  documentType: DocumentTypeModel;\n\n  /** Número de documento del cliente */\n  document: string;\n\n  /** Nombre completo del cliente */\n  fullName: string;\n\n  /** Correo electrónico del cliente */\n  email: string;\n\n  /** Número de teléfono del cliente */\n  phone: string;\n\n  /** Contraseña del cliente */\n  password: string;\n\n  /** URL del avatar del cliente (opcional) */\n  avatarUrl?: string;\n\n  /** Estado del cliente (activo/inactivo) */\n  state: boolean;\n\n  /** Fecha y hora en la que el cliente fue eliminado (opcional) */\n  deletedAt?: Date | number;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/CustomerRepository.html":{"url":"injectables/CustomerRepository.html","title":"injectable - CustomerRepository","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  CustomerRepository\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/data/persistence/repositories/customer.repository.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                delete\n                            \n                            \n                                    Async\n                                existEmail\n                            \n                            \n                                findAll\n                            \n                            \n                                findAllDeleted\n                            \n                            \n                                findByFullName\n                            \n                            \n                                findByState\n                            \n                            \n                                    Async\n                                findOneByDocumentTypeAndDocument\n                            \n                            \n                                    Async\n                                findOneByEmail\n                            \n                            \n                                    Async\n                                findOneByEmailAndPassword\n                            \n                            \n                                    Async\n                                findOneById\n                            \n                            \n                                    Async\n                                findOneByPhone\n                            \n                            \n                                    Private\n                                hardDelete\n                            \n                            \n                                register\n                            \n                            \n                                    Private\n                                    Async\n                                softDelete\n                            \n                            \n                                    Async\n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(customerRepository: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/data/persistence/repositories/customer.repository.ts:8\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        customerRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        delete\n                        \n                    \n                \n            \n            \n                \ndelete(id: string, soft?: boolean)\n                \n            \n\n\n                    \n                        \n                            Defined in src/data/persistence/repositories/customer.repository.ts:43\n                        \n                    \n\n\n            \n                \n                        Elimina un cliente de la base de datos.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    El ID del cliente a eliminar.\n\n                                            \n                                        \n                                        \n                                                soft\n                                            \n                                                            boolean\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                            \n                                                    Indica si se debe realizar un borrado suave (soft delete).\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        existEmail\n                        \n                    \n                \n            \n            \n                \n                        \n                    existEmail(email: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/data/persistence/repositories/customer.repository.ts:195\n                        \n                    \n\n\n            \n                \n                        Verifica si existe un cliente con la dirección de correo electrónico especificada en la base de datos.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                email\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    La dirección de correo electrónico del cliente.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                Una promesa que resuelve en un booleano indicando si existe un cliente con la dirección de correo electrónico especificada.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findAll\n                        \n                    \n                \n            \n            \n                \nfindAll()\n                \n            \n\n\n                    \n                        \n                            Defined in src/data/persistence/repositories/customer.repository.ts:93\n                        \n                    \n\n\n            \n                \n                        Obtiene todos los clientes de la base de datos que no han sido eliminados.\n\n\n                        \n                            Returns :         Promise\n\n                        \n                            \n                                Una promesa que resuelve en una lista de clientes.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findAllDeleted\n                        \n                    \n                \n            \n            \n                \nfindAllDeleted()\n                \n            \n\n\n                    \n                        \n                            Defined in src/data/persistence/repositories/customer.repository.ts:102\n                        \n                    \n\n\n            \n                \n                        Obtiene todos los clientes eliminados de la base de datos.\n\n\n                        \n                            Returns :         Promise\n\n                        \n                            \n                                Una promesa que resuelve en una lista de clientes eliminados.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findByFullName\n                        \n                    \n                \n            \n            \n                \nfindByFullName(fullName: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/data/persistence/repositories/customer.repository.ts:247\n                        \n                    \n\n\n            \n                \n                        Busca clientes por nombre completo en la base de datos.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                fullName\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    El nombre completo de los clientes a buscar.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                Una promesa que resuelve en una lista de clientes con el nombre completo especificado.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findByState\n                        \n                    \n                \n            \n            \n                \nfindByState(state: boolean)\n                \n            \n\n\n                    \n                        \n                            Defined in src/data/persistence/repositories/customer.repository.ts:235\n                        \n                    \n\n\n            \n                \n                        Busca clientes por estado en la base de datos.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                state\n                                            \n                                                            boolean\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    El estado de los clientes a buscar.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                Una promesa que resuelve en una lista de clientes con el estado especificado.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        findOneByDocumentTypeAndDocument\n                        \n                    \n                \n            \n            \n                \n                        \n                    findOneByDocumentTypeAndDocument(documentTypeId: string, document: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/data/persistence/repositories/customer.repository.ts:151\n                        \n                    \n\n\n            \n                \n                        Busca un cliente por tipo de documento y número de documento en la base de datos.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                documentTypeId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    El ID del tipo de documento del cliente.\n\n                                            \n                                        \n                                        \n                                                document\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    El número de documento del cliente.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                Una promesa que resuelve en un cliente si se encuentra, de lo contrario lanza una NotFoundException.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        findOneByEmail\n                        \n                    \n                \n            \n            \n                \n                        \n                    findOneByEmail(email: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/data/persistence/repositories/customer.repository.ts:175\n                        \n                    \n\n\n            \n                \n                        Busca un cliente por su dirección de correo electrónico en la base de datos.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                email\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    La dirección de correo electrónico del cliente.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                Una promesa que resuelve en un cliente si se encuentra, de lo contrario lanza una NotFoundException.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        findOneByEmailAndPassword\n                        \n                    \n                \n            \n            \n                \n                        \n                    findOneByEmailAndPassword(email: string, password: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/data/persistence/repositories/customer.repository.ts:127\n                        \n                    \n\n\n            \n                \n                        Busca un cliente por su email y contraseña en la base de datos.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                email\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    El email del cliente.\n\n                                            \n                                        \n                                        \n                                                password\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    La contraseña del cliente.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                Una promesa que resuelve en un booleano indicando si se encontró un cliente con las credenciales proporcionadas.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        findOneById\n                        \n                    \n                \n            \n            \n                \n                        \n                    findOneById(id: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/data/persistence/repositories/customer.repository.ts:113\n                        \n                    \n\n\n            \n                \n                        Busca un cliente por su ID en la base de datos.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    El ID del cliente a buscar.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                Una promesa que resuelve en un cliente si se encuentra, de lo contrario lanza una NotFoundException.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        findOneByPhone\n                        \n                    \n                \n            \n            \n                \n                        \n                    findOneByPhone(phone: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/data/persistence/repositories/customer.repository.ts:215\n                        \n                    \n\n\n            \n                \n                        Busca un cliente por su número de teléfono en la base de datos.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                phone\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    El número de teléfono del cliente.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                Una promesa que resuelve en un cliente si se encuentra, de lo contrario lanza una NotFoundException.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        hardDelete\n                        \n                    \n                \n            \n            \n                \n                        \n                    hardDelete(id: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/data/persistence/repositories/customer.repository.ts:57\n                        \n                    \n\n\n            \n                \n                        Realiza un borrado duro (hard delete) de un cliente de la base de datos.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    El ID del cliente a eliminar.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        register\n                        \n                    \n                \n            \n            \n                \nregister(entity: CustomerEntity)\n                \n            \n\n\n                    \n                        \n                            Defined in src/data/persistence/repositories/customer.repository.ts:18\n                        \n                    \n\n\n            \n                \n                        Registra un nuevo cliente en la base de datos.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                entity\n                                            \n                                                            CustomerEntity\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Los datos del cliente a registrar.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                Una promesa que resuelve en el cliente registrado.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Async\n                        softDelete\n                        \n                    \n                \n            \n            \n                \n                        \n                    softDelete(id: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/data/persistence/repositories/customer.repository.ts:65\n                        \n                    \n\n\n            \n                \n                        Realiza un borrado suave (soft delete) de un cliente de la base de datos.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    El ID del cliente a eliminar.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        update\n                        \n                    \n                \n            \n            \n                \n                        \n                    update(id: string, entity: CustomerEntity)\n                \n            \n\n\n                    \n                        \n                            Defined in src/data/persistence/repositories/customer.repository.ts:29\n                        \n                    \n\n\n            \n                \n                        Actualiza un cliente existente en la base de datos.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    El ID del cliente a actualizar.\n\n                                            \n                                        \n                                        \n                                                entity\n                                            \n                                                            CustomerEntity\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Los nuevos datos del cliente.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                Una promesa que resuelve en el cliente actualizado.\n\n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, NotFoundException } from '@nestjs/common';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { Repository } from 'typeorm';\nimport { CustomerEntity } from '../entities';\nimport { CustomerRepositoryInterface } from './interfaces/';\n\n@Injectable()\nexport class CustomerRepository implements CustomerRepositoryInterface {\n  constructor(\n    @InjectRepository(CustomerEntity)\n    private readonly customerRepository: Repository,\n  ) {}\n  /**\n   * Registra un nuevo cliente en la base de datos.\n   * @param entity Los datos del cliente a registrar.\n   * @returns Una promesa que resuelve en el cliente registrado.\n   */\n  register(entity: CustomerEntity): Promise {\n    console.log(entity);\n    return this.customerRepository.save(entity);\n  }\n  /**\n   * Actualiza un cliente existente en la base de datos.\n   * @param id El ID del cliente a actualizar.\n   * @param entity Los nuevos datos del cliente.\n   * @returns Una promesa que resuelve en el cliente actualizado.\n   * @throws `NotFoundException` si el cliente no existe.\n   */\n  async update(id: string, entity: CustomerEntity): Promise {\n    return this.customerRepository.update(id, entity).then((result) => {\n      if (result.affected === 0) {\n        throw new NotFoundException(`El Id: ${id} no existe en base de datos`);\n      }\n      return entity;\n    });\n  }\n\n  /**\n   * Elimina un cliente de la base de datos.\n   * @param id El ID del cliente a eliminar.\n   * @param soft Indica si se debe realizar un borrado suave (soft delete).\n   */\n  delete(id: string, soft?: boolean) {\n    this.findOneById(id);\n    if (soft || soft === undefined) {\n      this.softDelete(id);\n    } else {\n      this.hardDelete(id);\n    }\n  }\n\n  /**\n   * Realiza un borrado duro (hard delete) de un cliente de la base de datos.\n   *\n   * @param id El ID del cliente a eliminar.\n   */\n  private hardDelete(id: string): void {\n    this.customerRepository.delete(id);\n  }\n  /**\n   * Realiza un borrado suave (soft delete) de un cliente de la base de datos.\n   *\n   * @param id El ID del cliente a eliminar.\n   */\n  private async softDelete(id: string) {\n    let newCustomer = new CustomerEntity();\n    const customer = await this.customerRepository\n      .findOne({\n        where: { id },\n      })\n      .then((result) => {\n        if (result) {\n          return result;\n        } else {\n          throw new NotFoundException(\n            `El Id: ${id} no existe en base de datos`,\n          );\n        }\n      });\n    newCustomer = {\n      ...newCustomer,\n      ...customer,\n      id: customer.id,\n    };\n    newCustomer.deletedAt = Date.now();\n    this.update(customer.id, newCustomer);\n  }\n  /**\n   * Obtiene todos los clientes de la base de datos que no han sido eliminados.\n   *\n   * @returns Una promesa que resuelve en una lista de clientes.\n   */\n  findAll(): Promise {\n    const deletedAt = undefined;\n    return this.customerRepository.find({ where: { deletedAt } });\n  }\n  /**\n   * Obtiene todos los clientes eliminados de la base de datos.\n   *\n   * @returns Una promesa que resuelve en una lista de clientes eliminados.\n   */\n  findAllDeleted(): Promise {\n    return this.customerRepository.find({\n      where: { deletedAt: undefined },\n    });\n  }\n  /**\n   * Busca un cliente por su ID en la base de datos.\n   *\n   * @param id El ID del cliente a buscar.\n   * @returns Una promesa que resuelve en un cliente si se encuentra, de lo contrario lanza una NotFoundException.\n   */\n  async findOneById(id: string): Promise {\n    const customer = await this.customerRepository.findOne({\n      where: { id, deletedAt: undefined },\n    });\n    if (customer) return customer;\n    else throw new NotFoundException(`El ID ${id} no existe en base de datos`);\n  }\n  /**\n   * Busca un cliente por su email y contraseña en la base de datos.\n   *\n   * @param email El email del cliente.\n   * @param password La contraseña del cliente.\n   * @returns Una promesa que resuelve en un booleano indicando si se encontró un cliente con las credenciales proporcionadas.\n   */\n  async findOneByEmailAndPassword(\n    email: string,\n    password: string,\n  ): Promise {\n    return this.customerRepository\n      .find({\n        where: { email, password, deletedAt: undefined },\n      })\n      .then((result) => {\n        if (result.length > 0) {\n          return true;\n        } else {\n          return false;\n        }\n      });\n  }\n\n  /**\n   * Busca un cliente por tipo de documento y número de documento en la base de datos.\n   *\n   * @param documentTypeId El ID del tipo de documento del cliente.\n   * @param document El número de documento del cliente.\n   * @returns Una promesa que resuelve en un cliente si se encuentra, de lo contrario lanza una NotFoundException.\n   */\n  async findOneByDocumentTypeAndDocument(\n    documentTypeId: string,\n    document: string,\n  ): Promise {\n    const result = await this.customerRepository.findOne({\n      where: {\n        documentType: { id: documentTypeId },\n        document,\n        deletedAt: undefined,\n      },\n    });\n    if (result) {\n      return result;\n    } else {\n      throw new NotFoundException(`no existe en base de datos`);\n    }\n  }\n\n  /**\n   * Busca un cliente por su dirección de correo electrónico en la base de datos.\n   *\n   * @param email La dirección de correo electrónico del cliente.\n   * @returns Una promesa que resuelve en un cliente si se encuentra, de lo contrario lanza una NotFoundException.\n   */\n  async findOneByEmail(email: string): Promise {\n    return this.customerRepository\n      .findOne({\n        where: { email, deletedAt: undefined },\n      })\n      .then((result) => {\n        if (result) {\n          return result;\n        } else {\n          throw new NotFoundException(`no existe en base de datos`);\n        }\n      });\n  }\n\n  /**\n   * Verifica si existe un cliente con la dirección de correo electrónico especificada en la base de datos.\n   *\n   * @param email La dirección de correo electrónico del cliente.\n   * @returns Una promesa que resuelve en un booleano indicando si existe un cliente con la dirección de correo electrónico especificada.\n   */\n  async existEmail(email: string): Promise {\n    return this.customerRepository\n      .find({\n        where: { email, deletedAt: undefined },\n      })\n      .then((result) => {\n        if (result.length > 0) {\n          return true;\n        } else {\n          return false;\n        }\n      });\n  }\n\n  /**\n   * Busca un cliente por su número de teléfono en la base de datos.\n   *\n   * @param phone El número de teléfono del cliente.\n   * @returns Una promesa que resuelve en un cliente si se encuentra, de lo contrario lanza una NotFoundException.\n   */\n  async findOneByPhone(phone: string): Promise {\n    return this.customerRepository\n      .findOne({\n        where: { phone, deletedAt: undefined },\n      })\n      .then((result) => {\n        if (result) {\n          return result;\n        } else {\n          throw new NotFoundException(`no existe en base de datos`);\n        }\n      });\n  }\n\n  /**\n   * Busca clientes por estado en la base de datos.\n   *\n   * @param state El estado de los clientes a buscar.\n   * @returns Una promesa que resuelve en una lista de clientes con el estado especificado.\n   */\n  findByState(state: boolean): Promise {\n    return this.customerRepository.find({\n      where: { state, deletedAt: undefined },\n    });\n  }\n\n  /**\n   * Busca clientes por nombre completo en la base de datos.\n   *\n   * @param fullName El nombre completo de los clientes a buscar.\n   * @returns Una promesa que resuelve en una lista de clientes con el nombre completo especificado.\n   */\n  findByFullName(fullName: string): Promise {\n    return this.customerRepository.find({\n      where: { fullName, deletedAt: undefined },\n    });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/CustomerRepositoryInterface.html":{"url":"interfaces/CustomerRepositoryInterface.html","title":"interface - CustomerRepositoryInterface","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  CustomerRepositoryInterface\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/data/persistence/repositories/interfaces/customer-repository.interface.ts\n        \n\n\n            \n                Description\n            \n            \n                Interfaz para el repositorio de clientes.\nExtiende la interfaz base de repositorio y define métodos adicionales específicos para los clientes.\n\n            \n\n            \n                Extends\n            \n            \n                            BaseRepositoryInterface\n            \n\n        \n            Index\n            \n                \n                    \n                        \n                            Methods\n                        \n                    \n                    \n                        \n                            \n                                \n                                    \n                                        findByFullName\n                                    \n                                \n                                \n                                    \n                                        findByState\n                                    \n                                \n                                \n                                    \n                                        findOneByDocumentTypeAndDocument\n                                    \n                                \n                                \n                                    \n                                        findOneByEmail\n                                    \n                                \n                                \n                                    \n                                        findOneByEmailAndPassword\n                                    \n                                \n                                \n                                    \n                                        findOneByPhone\n                                    \n                                \n                            \n                        \n                    \n                \n            \n        \n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        findByFullName\n                        \n                    \n                \n            \n            \n                \nfindByFullName(fullName: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/data/persistence/repositories/interfaces/customer-repository.interface.ts:71\n                        \n                    \n\n\n            \n                \n                        Encuentra clientes por nombre completo.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                fullName\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Nombre completo del cliente\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                Promesa que resuelve con un arreglo de clientes que tienen el nombre completo especificado\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findByState\n                        \n                    \n                \n            \n            \n                \nfindByState(state: boolean)\n                \n            \n\n\n                    \n                        \n                            Defined in src/data/persistence/repositories/interfaces/customer-repository.interface.ts:62\n                        \n                    \n\n\n            \n                \n                        Encuentra clientes por estado.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                state\n                                            \n                                                            boolean\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Estado del cliente a buscar\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                Promesa que resuelve con un arreglo de clientes que coinciden con el estado especificado\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findOneByDocumentTypeAndDocument\n                        \n                    \n                \n            \n            \n                \nfindOneByDocumentTypeAndDocument(documentTypeId: string, document: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/data/persistence/repositories/interfaces/customer-repository.interface.ts:32\n                        \n                    \n\n\n            \n                \n                        Encuentra un cliente por tipo de documento y número de documento.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                documentTypeId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    ID del tipo de documento del cliente\n\n                                            \n                                        \n                                        \n                                                document\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Número de documento del cliente\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                Promesa que resuelve con el cliente encontrado\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findOneByEmail\n                        \n                    \n                \n            \n            \n                \nfindOneByEmail(email: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/data/persistence/repositories/interfaces/customer-repository.interface.ts:44\n                        \n                    \n\n\n            \n                \n                        Encuentra un cliente por correo electrónico.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                email\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Correo electrónico del cliente\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                Promesa que resuelve con el cliente encontrado\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findOneByEmailAndPassword\n                        \n                    \n                \n            \n            \n                \nfindOneByEmailAndPassword(email: string, password: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/data/persistence/repositories/interfaces/customer-repository.interface.ts:22\n                        \n                    \n\n\n            \n                \n                        Encuentra un cliente por email y contraseña.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                email\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Correo electrónico del cliente\n\n                                            \n                                        \n                                        \n                                                password\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Contraseña del cliente\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                Promesa que resuelve con un valor booleano indicando si se encontró el cliente\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findOneByPhone\n                        \n                    \n                \n            \n            \n                \nfindOneByPhone(phone: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/data/persistence/repositories/interfaces/customer-repository.interface.ts:53\n                        \n                    \n\n\n            \n                \n                        Encuentra un cliente por número de teléfono.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                phone\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Número de teléfono del cliente\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                Promesa que resuelve con el cliente encontrado\n\n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { CustomerEntity } from '../../entities';\nimport { BaseRepositoryInterface } from './base/';\n\n/**\n * Interfaz para el repositorio de clientes.\n *\n * Extiende la interfaz base de repositorio y define métodos adicionales específicos para los clientes.\n *\n * @export\n * @interface CustomerRepositoryInterface\n * @extends {BaseRepositoryInterface} Interfaz base de repositorio para clientes\n */\nexport interface CustomerRepositoryInterface extends BaseRepositoryInterface {\n  /**\n   * Encuentra un cliente por email y contraseña.\n   *\n   * @param {string} email Correo electrónico del cliente\n   * @param {string} password Contraseña del cliente\n   * @returns {Promise} Promesa que resuelve con un valor booleano indicando si se encontró el cliente\n   * @memberof CustomerRepositoryInterface\n   */\n  findOneByEmailAndPassword(email: string, password: string): Promise;\n\n  /**\n   * Encuentra un cliente por tipo de documento y número de documento.\n   *\n   * @param {string} documentTypeId ID del tipo de documento del cliente\n   * @param {string} document Número de documento del cliente\n   * @returns {Promise} Promesa que resuelve con el cliente encontrado\n   * @memberof CustomerRepositoryInterface\n   */\n  findOneByDocumentTypeAndDocument(\n    documentTypeId: string,\n    document: string,\n  ): Promise;\n\n  /**\n   * Encuentra un cliente por correo electrónico.\n   *\n   * @param {string} email Correo electrónico del cliente\n   * @returns {Promise} Promesa que resuelve con el cliente encontrado\n   * @memberof CustomerRepositoryInterface\n   */\n  findOneByEmail(email: string): Promise;\n\n  /**\n   * Encuentra un cliente por número de teléfono.\n   *\n   * @param {string} phone Número de teléfono del cliente\n   * @returns {Promise} Promesa que resuelve con el cliente encontrado\n   * @memberof CustomerRepositoryInterface\n   */\n  findOneByPhone(phone: string): Promise;\n\n  /**\n   * Encuentra clientes por estado.\n   *\n   * @param {boolean} state Estado del cliente a buscar\n   * @returns {Promise} Promesa que resuelve con un arreglo de clientes que coinciden con el estado especificado\n   * @memberof CustomerRepositoryInterface\n   */\n  findByState(state: boolean): Promise;\n\n  /**\n   * Encuentra clientes por nombre completo.\n   *\n   * @param {string} fullName Nombre completo del cliente\n   * @returns {Promise} Promesa que resuelve con un arreglo de clientes que tienen el nombre completo especificado\n   * @memberof CustomerRepositoryInterface\n   */\n  findByFullName(fullName: string): Promise;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/CustomerService.html":{"url":"injectables/CustomerService.html","title":"injectable - CustomerService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  CustomerService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/business/services/customer/customer.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                deleteCustomer\n                            \n                            \n                                    Async\n                                findAll\n                            \n                            \n                                findAllDeleted\n                            \n                            \n                                    Async\n                                getCustomerInfo\n                            \n                            \n                                    Async\n                                getCustomerInfoByEmail\n                            \n                            \n                                    Async\n                                newCustomer\n                            \n                            \n                                transform\n                            \n                            \n                                    Async\n                                unsuscribe\n                            \n                            \n                                    Async\n                                updatedCustomer\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(customerRepository: CustomerRepository, accountRepository: AccountRepository, accountTypeRepository: AccountTypeRepository)\n                    \n                \n                        \n                            \n                                Defined in src/business/services/customer/customer.service.ts:16\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        customerRepository\n                                                  \n                                                        \n                                                                        CustomerRepository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        accountRepository\n                                                  \n                                                        \n                                                                        AccountRepository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        accountTypeRepository\n                                                  \n                                                        \n                                                                        AccountTypeRepository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        deleteCustomer\n                        \n                    \n                \n            \n            \n                \n                        \n                    deleteCustomer(id: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/business/services/customer/customer.service.ts:171\n                        \n                    \n\n\n            \n                \n                        Eliminar un cliente del sistema\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    ID del cliente a eliminar\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                {Promise} true si el cliente se eliminó con éxito, false de lo contrario\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        findAll\n                        \n                    \n                \n            \n            \n                \n                        \n                    findAll()\n                \n            \n\n\n                    \n                        \n                            Defined in src/business/services/customer/customer.service.ts:53\n                        \n                    \n\n\n            \n                \n                        Obtener todos los clientes activos\n\n\n                        \n                            Returns :         Promise\n\n                        \n                            \n                                {Promise} Lista de clientes activos\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findAllDeleted\n                        \n                    \n                \n            \n            \n                \nfindAllDeleted()\n                \n            \n\n\n                    \n                        \n                            Defined in src/business/services/customer/customer.service.ts:65\n                        \n                    \n\n\n            \n                \n                        Obtener todos los clientes eliminados\n\n\n                        \n                            Returns :         Promise\n\n                        \n                            \n                                {Promise} Lista de clientes eliminados\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        getCustomerInfo\n                        \n                    \n                \n            \n            \n                \n                        \n                    getCustomerInfo(customerId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/business/services/customer/customer.service.ts:30\n                        \n                    \n\n\n            \n                \n                        Obtener información de un cliente por su ID\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                customerId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    ID del cliente\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                {Promise} Entidad del cliente encontrado\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        getCustomerInfoByEmail\n                        \n                    \n                \n            \n            \n                \n                        \n                    getCustomerInfoByEmail(email: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/business/services/customer/customer.service.ts:42\n                        \n                    \n\n\n            \n                \n                        Obtener información de un cliente por su correo electrónico\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                email\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Correo electrónico del cliente\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                {Promise} Entidad del cliente encontrado\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        newCustomer\n                        \n                    \n                \n            \n            \n                \n                        \n                    newCustomer(customer: CustomerDTO)\n                \n            \n\n\n                    \n                        \n                            Defined in src/business/services/customer/customer.service.ts:96\n                        \n                    \n\n\n            \n                \n                        Registrar un nuevo cliente en el sistema\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                customer\n                                            \n                                                            CustomerDTO\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Datos del nuevo cliente\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                {Promise} Cliente y cuenta creados\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        transform\n                        \n                    \n                \n            \n            \n                \ntransform(customer: CustomerDTO)\n                \n            \n\n\n                    \n                        \n                            Defined in src/business/services/customer/customer.service.ts:76\n                        \n                    \n\n\n            \n                \n                        Transformar datos del cliente a entidad del cliente\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                customer\n                                            \n                                                            CustomerDTO\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Datos del cliente\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         CustomerEntity\n\n                        \n                            \n                                {CustomerEntity} Entidad del cliente creada\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        unsuscribe\n                        \n                    \n                \n            \n            \n                \n                        \n                    unsuscribe(id: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/business/services/customer/customer.service.ts:152\n                        \n                    \n\n\n            \n                \n                        Dar de baja a un cliente en el sistema\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    ID del cliente a dar de baja\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                {Promise} true si el cliente se dio de baja con éxito, false de lo contrario\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        updatedCustomer\n                        \n                    \n                \n            \n            \n                \n                        \n                    updatedCustomer(id: string, customer: CustomerUpdateDTO)\n                \n            \n\n\n                    \n                        \n                            Defined in src/business/services/customer/customer.service.ts:130\n                        \n                    \n\n\n            \n                \n                        Actualizar información de un cliente\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    ID del cliente a actualizar\n\n                                            \n                                        \n                                        \n                                                customer\n                                            \n                                                            CustomerUpdateDTO\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Nuevos datos del cliente\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                {Promise} Entidad del cliente actualizado\n\n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, NotFoundException } from '@nestjs/common';\nimport { CustomerDTO } from 'src/business/dtos';\nimport { CustomerUpdateDTO } from 'src/business/dtos/update-customer.dto';\nimport {\n  AccountEntity,\n  CustomerEntity,\n  DocumentTypeEntity,\n} from '../../../data/persistence/entities';\nimport {\n  AccountRepository,\n  AccountTypeRepository,\n  CustomerRepository,\n} from '../../../data/persistence/repositories';\n\n@Injectable()\nexport class CustomerService {\n  constructor(\n    private readonly customerRepository: CustomerRepository,\n    private readonly accountRepository: AccountRepository,\n    private readonly accountTypeRepository: AccountTypeRepository,\n  ) {}\n\n  /**\n   * Obtener información de un cliente por su ID\n   *\n   * @param {string} customerId ID del cliente\n   * @return {*} {Promise} Entidad del cliente encontrado\n   * @memberof CustomerService\n   */\n  async getCustomerInfo(customerId: string): Promise {\n    const newCustomer = await this.customerRepository.findOneById(customerId);\n    return newCustomer;\n  }\n\n  /**\n   * Obtener información de un cliente por su correo electrónico\n   *\n   * @param {string} email Correo electrónico del cliente\n   * @return {*} {Promise} Entidad del cliente encontrado\n   * @memberof CustomerService\n   */\n  async getCustomerInfoByEmail(email: string): Promise {\n    const newCustomer = await this.customerRepository.findOneByEmail(email);\n    return newCustomer;\n  }\n\n  /**\n   * Obtener todos los clientes activos\n   *\n   * @return {*} {Promise} Lista de clientes activos\n   * @memberof CustomerService\n   */\n  async findAll(): Promise {\n    return (await this.customerRepository.findAll()).filter(\n      (item) => (item.deletedAt ?? true) === true,\n    );\n  }\n\n  /**\n   * Obtener todos los clientes eliminados\n   *\n   * @return {*} {Promise} Lista de clientes eliminados\n   * @memberof CustomerService\n   */\n  findAllDeleted(): Promise {\n    return this.customerRepository.findAllDeleted();\n  }\n\n  /**\n   * Transformar datos del cliente a entidad del cliente\n   *\n   * @param {CustomerDTO} customer Datos del cliente\n   * @return {*} {CustomerEntity} Entidad del cliente creada\n   * @memberof CustomerService\n   */\n  transform(customer: CustomerDTO): CustomerEntity {\n    const documentType = new DocumentTypeEntity();\n    documentType.id = customer.documentTypeId;\n    const newCustomer = new CustomerEntity();\n    newCustomer.documentType = documentType;\n    newCustomer.document = customer.document;\n    newCustomer.fullName = customer.fullName;\n    newCustomer.email = customer.email;\n    newCustomer.phone = customer.phone;\n    newCustomer.password = customer.password;\n    return newCustomer;\n  }\n\n  /**\n   * Registrar un nuevo cliente en el sistema\n   *\n   * @param {CustomerDTO} customer Datos del nuevo cliente\n   * @return {*} {Promise} Cliente y cuenta creados\n   * @memberof CustomerService\n   */\n  async newCustomer(customer: CustomerDTO): Promise {\n    const documentType = new DocumentTypeEntity();\n    documentType.id = customer.documentTypeId;\n\n    const newCustomer = new CustomerEntity();\n    newCustomer.documentType = documentType;\n    newCustomer.document = customer.document;\n    newCustomer.fullName = customer.fullName;\n    if (await this.customerRepository.existEmail(customer.email)) {\n      throw new NotFoundException(\n        `El email ${customer.email} ya existe en la base de datos`,\n      );\n    }\n    newCustomer.email = customer.email;\n    newCustomer.phone = customer.phone;\n    newCustomer.password = customer.password;\n    const typeId = 'ab27c9ac-a01c-4c22-a6d6-ce5ab3b79185';\n    const account = new AccountEntity();\n    account.accountType = await this.accountTypeRepository.findOneById(typeId);\n    account.customer = newCustomer;\n    return {\n      customer: await this.customerRepository.register(newCustomer),\n      account: await this.accountRepository.register(account),\n    };\n  }\n\n  /**\n   * Actualizar información de un cliente\n   *\n   * @param {string} id ID del cliente a actualizar\n   * @param {CustomerUpdateDTO} customer Nuevos datos del cliente\n   * @return {*} {Promise} Entidad del cliente actualizado\n   * @memberof CustomerService\n   */\n  async updatedCustomer(\n    id: string,\n    customer: CustomerUpdateDTO,\n  ): Promise {\n    if (await this.customerRepository.findOneById(id)) {\n      const newCustomer = new CustomerEntity();\n      newCustomer.document = customer.document;\n      newCustomer.fullName = customer.fullName;\n      newCustomer.phone = customer.phone;\n      newCustomer.password = customer.password;\n      return this.customerRepository.update(id, newCustomer);\n    }\n    return new CustomerEntity();\n  }\n\n  /**\n   * Dar de baja a un cliente en el sistema\n   *\n   * @param {string} id ID del cliente a dar de baja\n   * @return {*} {Promise} true si el cliente se dio de baja con éxito, false de lo contrario\n   * @memberof CustomerService\n   */\n  async unsuscribe(id: string): Promise {\n    if (\n      (await this.customerRepository.findOneById(id)).deletedAt === undefined\n    ) {\n      const customer = await this.customerRepository.findOneById(id);\n      customer.state = false;\n      this.customerRepository.update(id, customer);\n      return true;\n    }\n    return false;\n  }\n\n  /**\n   * Eliminar un cliente del sistema\n   *\n   * @param {string} id ID del cliente a eliminar\n   * @return {*} {Promise} true si el cliente se eliminó con éxito, false de lo contrario\n   * @memberof CustomerService\n   */\n  async deleteCustomer(id: string): Promise {\n    if (\n      (await this.customerRepository.findOneById(id)).deletedAt === undefined\n    ) {\n      (await this.accountRepository.findAll()).map(\n        (mapa) => (mapa.deletedAt = Date.now()),\n      );\n      this.customerRepository.delete(id);\n      return true;\n    }\n    return false;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CustomerUpdateDTO.html":{"url":"classes/CustomerUpdateDTO.html","title":"class - CustomerUpdateDTO","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CustomerUpdateDTO\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/business/dtos/update-customer.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                Data Transfer Object para actualizar información del cliente.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                document\n                            \n                            \n                                    \n                                    \n                                fullName\n                            \n                            \n                                    \n                                    \n                                password\n                            \n                            \n                                    \n                                    \n                                phone\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        document\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNumberString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/business/dtos/update-customer.dto.ts:29\n                        \n                    \n\n            \n                \n                    Número de documento del cliente.\nDebe ser una cadena que representa un número.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        fullName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@MaxLength(500)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/business/dtos/update-customer.dto.ts:43\n                        \n                    \n\n            \n                \n                    Nombre completo del cliente.\nDebe ser una cadena con un máximo de 500 caracteres.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Matches(new RegExp())@MinLength(8)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/business/dtos/update-customer.dto.ts:70\n                        \n                    \n\n            \n                \n                    Contraseña del cliente.\nDebe contener al menos una letra mayúscula, una letra minúscula, un número y tener un mínimo de 8 caracteres.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        phone\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNumberString()@MaxLength(30)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/business/dtos/update-customer.dto.ts:57\n                        \n                    \n\n            \n                \n                    Número de teléfono del cliente.\nDebe ser una cadena que representa un número con un máximo de 30 caracteres.\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {\n  IsEmail,\n  IsNumberString,\n  IsString,\n  IsUUID,\n  Matches,\n  MaxLength,\n  MinLength,\n} from 'class-validator';\n\n/**\n * Data Transfer Object para actualizar información del cliente.\n *\n * @export\n * @class CustomerUpdateDTO\n */\nexport class CustomerUpdateDTO {\n  /**\n   * Número de documento del cliente.\n   * \n   * Debe ser una cadena que representa un número.\n   *\n   * @type {string}\n   * @memberof CustomerUpdateDTO\n   * @decorator IsNumberString\n   */\n  @IsNumberString()\n  document: string;\n\n  /**\n   * Nombre completo del cliente.\n   * \n   * Debe ser una cadena con un máximo de 500 caracteres.\n   *\n   * @type {string}\n   * @memberof CustomerUpdateDTO\n   * @decorator IsString\n   * @decorator MaxLength\n   */\n  @IsString()\n  @MaxLength(500)\n  fullName: string;\n\n  /**\n   * Número de teléfono del cliente.\n   * \n   * Debe ser una cadena que representa un número con un máximo de 30 caracteres.\n   *\n   * @type {string}\n   * @memberof CustomerUpdateDTO\n   * @decorator IsNumberString\n   * @decorator MaxLength\n   */\n  @IsNumberString()\n  @MaxLength(30)\n  phone: string;\n\n  /**\n   * Contraseña del cliente.\n   * Debe contener al menos una letra mayúscula, una letra minúscula, un número y tener un mínimo de 8 caracteres.\n   * \n   * @type {string}\n   * @memberof CustomerUpdateDTO\n   * @decorator Matches\n   * @decorator MinLength\n   */\n  @Matches(new RegExp(/^(?=.*\\d)(?=.*[a-z])(?=.*[A-Z])(?=.*[a-zA-Z]).{8,}$/))\n  @MinLength(8)\n  password: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/DataRangeDTO.html":{"url":"classes/DataRangeDTO.html","title":"class - DataRangeDTO","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  DataRangeDTO\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/business/dtos/data-range.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                Data Transfer Object para representar un rango de datos.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    Optional\n                                endAmount\n                            \n                            \n                                    \n                                    Optional\n                                endDate\n                            \n                            \n                                    \n                                    Optional\n                                startAmount\n                            \n                            \n                                    \n                                    Optional\n                                startDate\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        endAmount\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNumberString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/business/dtos/data-range.dto.ts:56\n                        \n                    \n\n            \n                \n                    Cantidad de fin del rango.\nDebe ser una cadena que representa un número.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        endDate\n                        \n                    \n                \n            \n                \n                    \n                        Type :     number | Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsDateString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/business/dtos/data-range.dto.ts:32\n                        \n                    \n\n            \n                \n                    Fecha de fin del rango.\nPuede ser un número (timestamp) o un objeto Date.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        startAmount\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNumberString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/business/dtos/data-range.dto.ts:44\n                        \n                    \n\n            \n                \n                    Cantidad de inicio del rango.\nDebe ser una cadena que representa un número.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        startDate\n                        \n                    \n                \n            \n                \n                    \n                        Type :     number | Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsDateString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/business/dtos/data-range.dto.ts:20\n                        \n                    \n\n            \n                \n                    Fecha de inicio del rango.\nPuede ser un número (timestamp) o un objeto Date.\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsDateString, IsNumberString } from 'class-validator';\n\n/**\n * Data Transfer Object para representar un rango de datos.\n *\n * @export\n * @class DataRangeDTO\n */\nexport class DataRangeDTO {\n  /**\n   * Fecha de inicio del rango.\n   * \n   * Puede ser un número (timestamp) o un objeto Date.\n   *\n   * @type {number | Date}\n   * @memberof DataRangeDTO\n   * @decorator IsDateString\n   */\n  @IsDateString()\n  startDate?: number | Date;\n\n  /**\n   * Fecha de fin del rango.\n   * \n   * Puede ser un número (timestamp) o un objeto Date.\n   *\n   * @type {number | Date}\n   * @memberof DataRangeDTO\n   * @decorator IsDateString\n   */\n  @IsDateString()\n  endDate?: number | Date;\n\n  /**\n   * Cantidad de inicio del rango.\n   * \n   * Debe ser una cadena que representa un número.\n   *\n   * @type {number}\n   * @memberof DataRangeDTO\n   * @decorator IsNumberString\n   */\n  @IsNumberString()\n  startAmount?: number;\n\n  /**\n   * Cantidad de fin del rango.\n   * \n   * Debe ser una cadena que representa un número.\n   *\n   * @type {number}\n   * @memberof DataRangeDTO\n   * @decorator IsNumberString\n   */\n  @IsNumberString()\n  endAmount?: number;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/DataRangeModel.html":{"url":"interfaces/DataRangeModel.html","title":"interface - DataRangeModel","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  DataRangeModel\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/data/models/data-range.model.ts\n        \n\n\n            \n                Description\n            \n            \n                Interfaz que define la estructura de datos para el modelo de rango de datos.\nEsta interfaz define un rango de datos que puede ser utilizado para filtrar consultas por fechas y/o cantidades.\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        \n                                            endAmount\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            endDate\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            startAmount\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            startDate\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        endAmount\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        endAmount:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Cantidad máxima en el rango\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        endDate\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        endDate:     number | Date\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     number | Date\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Fecha de fin del rango\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        startAmount\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        startAmount:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Cantidad mínima en el rango\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        startDate\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        startDate:     number | Date\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     number | Date\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Fecha de inicio del rango\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        export interface DataRangeModel {\n  /** Fecha de inicio del rango */\n  startDate?: number | Date;\n\n  /** Fecha de fin del rango */\n  endDate?: number | Date;\n\n  /** Cantidad mínima en el rango */\n  startAmount?: number;\n\n  /** Cantidad máxima en el rango */\n  endAmount?: number;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/DepositController.html":{"url":"controllers/DepositController.html","title":"controller - DepositController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  DepositController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/presentation/controllers/deposit/deposit.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                deposit\n            \n\n\n            \n                Description\n            \n            \n                Controlador para gestionar las operaciones relacionadas con los depósitos.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    Async\n                                createDeposit\n                            \n                            \n                                    \n                                deleteDeposit\n                            \n                            \n                                    \n                                    Async\n                                GetAll\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        createDeposit\n                        \n                    \n                \n            \n            \n                \n                        \n                    createDeposit(account: DepositDTO)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post()\n                \n            \n\n                    \n                        \n                            Defined in src/presentation/controllers/deposit/deposit.controller.ts:19\n                        \n                    \n\n\n            \n                \n                        Crea un nuevo depósito.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                account\n                                            \n                                                            DepositDTO\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Los datos del depósito a crear.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                Una promesa que resuelve con la entidad del depósito creado.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        deleteDeposit\n                        \n                    \n                \n            \n            \n                \n                        \n                    deleteDeposit(id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete(':id')\n                \n            \n\n                    \n                        \n                            Defined in src/presentation/controllers/deposit/deposit.controller.ts:49\n                        \n                    \n\n\n            \n                \n                        Elimina un depósito por su ID.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    El ID del depósito.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        GetAll\n                        \n                    \n                \n            \n            \n                \n                        \n                    GetAll(body: literal type)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('all')\n                \n            \n\n                    \n                        \n                            Defined in src/presentation/controllers/deposit/deposit.controller.ts:29\n                        \n                    \n\n\n            \n                \n                        Obtiene el historial de depósitos.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                body\n                                            \n                                                        literal type\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    El cuerpo de la solicitud que contiene el ID de la cuenta, la paginación y opcionalmente el rango de fechas.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                Una promesa que resuelve con un array de entidades de depósito.\n\n                            \n                \n            \n        \n    \n    \n\n\n    \n        import { Body, Controller, Delete, Param, Post } from '@nestjs/common';\nimport { DataRangeDTO, DepositDTO, PaginationDTO } from 'src/business/dtos';\nimport { DepositService } from '../../../business/services';\nimport { DepositEntity } from '../../../data/persistence/entities';\n\n/**\n * Controlador para gestionar las operaciones relacionadas con los depósitos.\n */\n@Controller('deposit')\nexport class DepositController {\n  constructor(private readonly depositService: DepositService) {}\n\n  /**\n   * Crea un nuevo depósito.\n   * @param account Los datos del depósito a crear.\n   * @returns Una promesa que resuelve con la entidad del depósito creado.\n   */\n  @Post()\n  async createDeposit(@Body() account: DepositDTO): Promise {\n    return await this.depositService.createDeposit(account);\n  }\n\n  /**\n   * Obtiene el historial de depósitos.\n   * @param body El cuerpo de la solicitud que contiene el ID de la cuenta, la paginación y opcionalmente el rango de fechas.\n   * @returns Una promesa que resuelve con un array de entidades de depósito.\n   */\n  @Post('all')\n  async GetAll(\n    @Body()\n    body: {\n      accountId: string;\n      pagination: PaginationDTO;\n      dataRange?: DataRangeDTO;\n    },\n  ): Promise {\n    return await this.depositService.getHistory(\n      body.accountId,\n      body.pagination,\n      body.dataRange,\n    );\n  }\n\n  /**\n   * Elimina un depósito por su ID.\n   * @param id El ID del depósito.\n   */\n  @Delete(':id')\n  deleteDeposit(@Param('id') id: string): void {\n    this.depositService.deleteDeposit(id);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/DepositDTO.html":{"url":"classes/DepositDTO.html","title":"class - DepositDTO","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  DepositDTO\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/business/dtos/deposit.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                Data Transfer Object para representar un depósito.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                accountId\n                            \n                            \n                                    \n                                amount\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        accountId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNumberString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/business/dtos/deposit.dto.ts:20\n                        \n                    \n\n            \n                \n                    Identificador de la cuenta.\nDebe ser una cadena que representa un número.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        amount\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNumberString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/business/dtos/deposit.dto.ts:32\n                        \n                    \n\n            \n                \n                    Monto del depósito.\nDebe ser una cadena que representa un número.\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsNumberString } from 'class-validator';\n\n/**\n * Data Transfer Object para representar un depósito.\n *\n * @export\n * @class DepositDTO\n */\nexport class DepositDTO {\n  /**\n   * Identificador de la cuenta.\n   * \n   * Debe ser una cadena que representa un número.\n   *\n   * @type {string}\n   * @memberof DepositDTO\n   * @decorator IsNumberString\n   */\n  @IsNumberString()\n  accountId: string;\n\n  /**\n   * Monto del depósito.\n   * \n   * Debe ser una cadena que representa un número.\n   *\n   * @type {string}\n   * @memberof DepositDTO\n   * @decorator IsNumberString\n   */\n  @IsNumberString()\n  amount: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/DepositEntity.html":{"url":"entities/DepositEntity.html","title":"entity - DepositEntity","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  DepositEntity\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/data/persistence/entities/deposit.entity.ts\n        \n\n\n            \n                Description\n            \n            \n                Entidad para el depósito\n\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                account\n                            \n                            \n                                    \n                                amount\n                            \n                            \n                                    \n                                dateTime\n                            \n                            \n                                    \n                                    Optional\n                                deletedAt\n                            \n                            \n                                    \n                                id\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        account\n                        \n                    \n                \n            \n                \n                    \n                        Type :         AccountEntity\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ManyToOne(undefined)@JoinColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/data/persistence/entities/deposit.entity.ts:51\n                        \n                    \n\n            \n                \n                    Cuenta asociada al depósito\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        amount\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 0\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({name: 'amount', type: 'numeric'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/data/persistence/entities/deposit.entity.ts:41\n                        \n                    \n\n            \n                \n                    Monto del depósito\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        dateTime\n                        \n                    \n                \n            \n                \n                    \n                        Type :     number | Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({name: 'date_time', type: 'numeric'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/data/persistence/entities/deposit.entity.ts:63\n                        \n                    \n\n            \n                \n                    Fecha y hora del depósito\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        deletedAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :     number | Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({name: 'deleted_at', type: 'timestamp', nullable: true, select: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/data/persistence/entities/deposit.entity.ts:77\n                        \n                    \n\n            \n                \n                    Fecha y hora en la que se eliminó el depósito (opcional)\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Default value : uuid()\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({name: 'id', type: 'uuid', primary: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/data/persistence/entities/deposit.entity.ts:29\n                        \n                    \n\n            \n                \n                    Identificador único del depósito\n\n                \n            \n\n        \n    \n\n    \n\n\n    \n        import { Column, Entity, JoinColumn, ManyToOne } from 'typeorm';\nimport { v4 as uuid } from 'uuid';\nimport { DepositModel } from '../../models';\nimport { AccountEntity } from './';\n\n/**\n * Entidad para el depósito\n *\n * @export\n * @class DepositEntity\n * @implements {DepositModel}\n */\n@Entity({\n  name: 'deposit',\n  schema: 'public',\n})\nexport class DepositEntity implements DepositModel {\n  /**\n   * Identificador único del depósito\n   *\n   * @type {string}\n   * @memberof DepositEntity\n   */\n  @Column({\n    name: 'id',\n    type: 'uuid',\n    primary: true,\n  })\n  id = uuid();\n\n  /**\n   * Monto del depósito\n   *\n   * @type {number}\n   * @memberof DepositEntity\n   */\n  @Column({\n    name: 'amount',\n    type: 'numeric',\n  })\n  amount = 0;\n\n  /**\n   * Cuenta asociada al depósito\n   *\n   * @type {AccountEntity}\n   * @memberof DepositEntity\n   */\n  @ManyToOne(() => AccountEntity)\n  @JoinColumn()\n  account: AccountEntity;\n\n  /**\n   * Fecha y hora del depósito\n   *\n   * @type {(number | Date)}\n   * @memberof DepositEntity\n   */\n  @Column({\n    name: 'date_time',\n    type: 'numeric',\n  })\n  dateTime: number | Date;\n\n  /**\n   * Fecha y hora en la que se eliminó el depósito (opcional)\n   *\n   * @type {(number | Date)}\n   * @memberof DepositEntity\n   */\n  @Column({\n    name: 'deleted_at',\n    type: 'timestamp',\n    nullable: true,\n    select: false,\n  })\n  deletedAt?: number | Date;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/DepositModel.html":{"url":"interfaces/DepositModel.html","title":"interface - DepositModel","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  DepositModel\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/data/models/deposit.model.ts\n        \n\n\n            \n                Description\n            \n            \n                Interfaz que define la estructura de datos para el modelo de depósito.\nEsta interfaz representa los campos y tipos de datos asociados con un depósito en una cuenta.\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            account\n                                        \n                                \n                                \n                                        \n                                            amount\n                                        \n                                \n                                \n                                        \n                                            dateTime\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            deletedAt\n                                        \n                                \n                                \n                                        \n                                            id\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        account\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        account:         AccountModel\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         AccountModel\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Cuenta en la que se realizó el depósito\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        amount\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        amount:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Monto del depósito\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        dateTime\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        dateTime:     Date | number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     Date | number\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Fecha y hora del depósito\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        deletedAt\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        deletedAt:     Date | number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     Date | number\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Fecha y hora en la que el depósito fue eliminado (opcional)\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        id\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        id:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Identificador único del depósito\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import { AccountModel } from '.';\n\n/**\n * Interfaz que define la estructura de datos para el modelo de depósito.\n * \n * @remarks\n * Esta interfaz representa los campos y tipos de datos asociados con un depósito en una cuenta.\n * \n * @export\n * @interface DepositModel\n */\nexport interface DepositModel {\n  /** Identificador único del depósito */\n  id: string;\n\n  /** Cuenta en la que se realizó el depósito */\n  account: AccountModel;\n\n  /** Monto del depósito */\n  amount: number;\n\n  /** Fecha y hora del depósito */\n  dateTime: Date | number;\n\n  /** Fecha y hora en la que el depósito fue eliminado (opcional) */\n  deletedAt?: Date | number;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/DepositRepository.html":{"url":"injectables/DepositRepository.html","title":"injectable - DepositRepository","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  DepositRepository\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/data/persistence/repositories/deposit.repository.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                delete\n                            \n                            \n                                findAll\n                            \n                            \n                                findByAccountId\n                            \n                            \n                                findByDataRange\n                            \n                            \n                                    Async\n                                findOneById\n                            \n                            \n                                    Private\n                                hardDelete\n                            \n                            \n                                register\n                            \n                            \n                                    Private\n                                softDelete\n                            \n                            \n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(depositRepository: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/data/persistence/repositories/deposit.repository.ts:8\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        depositRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        delete\n                        \n                    \n                \n            \n            \n                \ndelete(id: string, soft?: boolean)\n                \n            \n\n\n                    \n                        \n                            Defined in src/data/persistence/repositories/deposit.repository.ts:41\n                        \n                    \n\n\n            \n                \n                        Elimina un depósito de la base de datos.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    El ID del depósito a eliminar.\n\n                                            \n                                        \n                                        \n                                                soft\n                                            \n                                                            boolean\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                            \n                                                    Indica si se debe realizar un borrado suave (soft delete).\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findAll\n                        \n                    \n                \n            \n            \n                \nfindAll()\n                \n            \n\n\n                    \n                        \n                            Defined in src/data/persistence/repositories/deposit.repository.ts:84\n                        \n                    \n\n\n            \n                \n                        Encuentra todos los depósitos en la base de datos.\n\n\n                        \n                            Returns :         Promise\n\n                        \n                            \n                                Una promesa que resuelve en un arreglo de todos los depósitos.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findByAccountId\n                        \n                    \n                \n            \n            \n                \nfindByAccountId(accountId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/data/persistence/repositories/deposit.repository.ts:119\n                        \n                    \n\n\n            \n                \n                        Encuentra todos los depósitos asociados a una cuenta en la base de datos.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                accountId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    El ID de la cuenta asociada a los depósitos.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                Una promesa que resuelve en un arreglo de todos los depósitos asociados a la cuenta.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findByDataRange\n                        \n                    \n                \n            \n            \n                \nfindByDataRange(dateInit: Date | number, dateEnd: Date | number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/data/persistence/repositories/deposit.repository.ts:132\n                        \n                    \n\n\n            \n                \n                        Encuentra todos los depósitos dentro de un rango de fechas en la base de datos.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                dateInit\n                                            \n                                                        Date | number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    La fecha de inicio del rango.\n\n                                            \n                                        \n                                        \n                                                dateEnd\n                                            \n                                                        Date | number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    La fecha de fin del rango.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                Una promesa que resuelve en un arreglo de todos los depósitos dentro del rango de fechas.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        findOneById\n                        \n                    \n                \n            \n            \n                \n                        \n                    findOneById(id: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/data/persistence/repositories/deposit.repository.ts:97\n                        \n                    \n\n\n            \n                \n                        Encuentra un depósito por su ID en la base de datos.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    El ID del depósito a encontrar.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                Una promesa que resuelve en el depósito encontrado.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        hardDelete\n                        \n                    \n                \n            \n            \n                \n                        \n                    hardDelete(id: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/data/persistence/repositories/deposit.repository.ts:50\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        register\n                        \n                    \n                \n            \n            \n                \nregister(entity: DepositEntity)\n                \n            \n\n\n                    \n                        \n                            Defined in src/data/persistence/repositories/deposit.repository.ts:18\n                        \n                    \n\n\n            \n                \n                        Registra un nuevo depósito en la base de datos.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                entity\n                                            \n                                                            DepositEntity\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Los datos del depósito a registrar.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                Una promesa que resuelve en el depósito registrado.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        softDelete\n                        \n                    \n                \n            \n            \n                \n                        \n                    softDelete(id: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/data/persistence/repositories/deposit.repository.ts:56\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        update\n                        \n                    \n                \n            \n            \n                \nupdate(id: string, entity: DepositEntity)\n                \n            \n\n\n                    \n                        \n                            Defined in src/data/persistence/repositories/deposit.repository.ts:28\n                        \n                    \n\n\n            \n                \n                        Actualiza un depósito existente en la base de datos.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    El ID del depósito a actualizar.\n\n                                            \n                                        \n                                        \n                                                entity\n                                            \n                                                            DepositEntity\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Los nuevos datos del depósito.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                Una promesa que resuelve en el depósito actualizado.\n\n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, NotFoundException } from '@nestjs/common';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { Between, Repository } from 'typeorm';\nimport { DepositEntity } from '../entities';\nimport { DepositRepositoryInterface } from './interfaces/';\n\n@Injectable()\nexport class DepositRepository implements DepositRepositoryInterface {\n  constructor(\n    @InjectRepository(DepositEntity)\n    private readonly depositRepository: Repository,\n  ) {}\n  /**\n   * Registra un nuevo depósito en la base de datos.\n   * @param entity Los datos del depósito a registrar.\n   * @returns Una promesa que resuelve en el depósito registrado.\n   */\n  register(entity: DepositEntity): Promise {\n    return this.depositRepository.save(entity);\n  }\n  /**\n   * Actualiza un depósito existente en la base de datos.\n   * @param id El ID del depósito a actualizar.\n   * @param entity Los nuevos datos del depósito.\n   * @returns Una promesa que resuelve en el depósito actualizado.\n   * @throws `NotFoundException` si el depósito no existe.\n   */\n  update(id: string, entity: DepositEntity): Promise {\n    return this.depositRepository.update(id, entity).then((result) => {\n      if (result.affected === 0) {\n        throw new NotFoundException(`El Id: ${id} no existe en base de datos`);\n      }\n      return entity;\n    });\n  }\n  /**\n   * Elimina un depósito de la base de datos.\n   * @param id El ID del depósito a eliminar.\n   * @param soft Indica si se debe realizar un borrado suave (soft delete).\n   */\n  delete(id: string, soft?: boolean): void {\n    this.findOneById(id);\n    if (soft || soft === undefined) {\n      this.softDelete(id);\n    } else {\n      this.hardDelete(id);\n    }\n  }\n\n  private hardDelete(id: string) {\n    this.depositRepository.delete({\n      id,\n    });\n  }\n\n  private softDelete(id: string) {\n    let newDeposit = new DepositEntity();\n    this.depositRepository\n      .findOne({\n        where: { id },\n      })\n      .then((result) => {\n        if (result) {\n          newDeposit = {\n            ...newDeposit,\n            ...result,\n            id: result.id,\n          };\n          newDeposit.deletedAt = Date.now();\n          this.update(result.id, newDeposit);\n        } else {\n          throw new NotFoundException(\n            `El Id: ${id} no existe en base de datos`,\n          );\n        }\n      });\n  }\n  // Métodos privados para realizar borrado suave (soft delete) o borrado duro (hard delete)...\n\n  /**\n   * Encuentra todos los depósitos en la base de datos.\n   * @returns Una promesa que resuelve en un arreglo de todos los depósitos.\n   */\n  findAll(): Promise {\n    return this.depositRepository.find({\n      where: { deletedAt: undefined },\n      relations: ['account'],\n    });\n  }\n\n  /**\n   * Encuentra un depósito por su ID en la base de datos.\n   * @param id El ID del depósito a encontrar.\n   * @returns Una promesa que resuelve en el depósito encontrado.\n   * @throws `NotFoundException` si el depósito no existe.\n   */\n  async findOneById(id: string): Promise {\n    return this.depositRepository\n      .findOne({\n        where: { id, deletedAt: undefined },\n        relations: ['account'],\n      })\n      .then((result) => {\n        if (result) {\n          return result;\n        } else {\n          throw new NotFoundException(\n            `El ID ${id} no existe en la base de datos`,\n          );\n        }\n      });\n  }\n\n  /**\n   * Encuentra todos los depósitos asociados a una cuenta en la base de datos.\n   * @param accountId El ID de la cuenta asociada a los depósitos.\n   * @returns Una promesa que resuelve en un arreglo de todos los depósitos asociados a la cuenta.\n   */\n  findByAccountId(accountId: string): Promise {\n    return this.depositRepository.find({\n      where: { account: { id: accountId }, deletedAt: undefined },\n      relations: ['account'],\n    });\n  }\n\n  /**\n   * Encuentra todos los depósitos dentro de un rango de fechas en la base de datos.\n   * @param dateInit La fecha de inicio del rango.\n   * @param dateEnd La fecha de fin del rango.\n   * @returns Una promesa que resuelve en un arreglo de todos los depósitos dentro del rango de fechas.\n   */\n  findByDataRange(\n    dateInit: Date | number,\n    dateEnd: Date | number,\n  ): Promise {\n    return this.depositRepository.find({\n      where: {\n        dateTime: Between(dateInit, dateEnd),\n      },\n      relations: ['account'],\n    });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/DepositRepositoryInterface.html":{"url":"interfaces/DepositRepositoryInterface.html","title":"interface - DepositRepositoryInterface","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  DepositRepositoryInterface\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/data/persistence/repositories/interfaces/deposit-repository.interface.ts\n        \n\n\n            \n                Description\n            \n            \n                Interfaz para el repositorio de depósitos.\nExtiende la interfaz base de repositorio y define métodos adicionales específicos para los depósitos.\n\n            \n\n            \n                Extends\n            \n            \n                            BaseRepositoryInterface\n            \n\n        \n            Index\n            \n                \n                    \n                        \n                            Methods\n                        \n                    \n                    \n                        \n                            \n                                \n                                    \n                                        findByAccountId\n                                    \n                                \n                                \n                                    \n                                        findByDataRange\n                                    \n                                \n                            \n                        \n                    \n                \n            \n        \n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        findByAccountId\n                        \n                    \n                \n            \n            \n                \nfindByAccountId(accountId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/data/persistence/repositories/interfaces/deposit-repository.interface.ts:21\n                        \n                    \n\n\n            \n                \n                        Encuentra depósitos por ID de cuenta.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                accountId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    ID de la cuenta asociada a los depósitos\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                Promesa que resuelve con un arreglo de depósitos asociados a la cuenta especificada\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findByDataRange\n                        \n                    \n                \n            \n            \n                \nfindByDataRange(dateInit: Date | number, dateEnd: Date | number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/data/persistence/repositories/interfaces/deposit-repository.interface.ts:31\n                        \n                    \n\n\n            \n                \n                        Encuentra depósitos dentro de un rango de fechas.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                dateInit\n                                            \n                                                        Date | number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Fecha de inicio del rango\n\n                                            \n                                        \n                                        \n                                                dateEnd\n                                            \n                                                        Date | number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Fecha de fin del rango\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                Promesa que resuelve con un arreglo de depósitos dentro del rango de fechas especificado\n\n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { DepositEntity } from '../../entities';\nimport { BaseRepositoryInterface } from './base/';\n\n/**\n * Interfaz para el repositorio de depósitos.\n *\n * Extiende la interfaz base de repositorio y define métodos adicionales específicos para los depósitos.\n *\n * @export\n * @interface DepositRepositoryInterface\n * @extends {BaseRepositoryInterface} Interfaz base de repositorio para depósitos\n */\nexport interface DepositRepositoryInterface extends BaseRepositoryInterface {\n  /**\n   * Encuentra depósitos por ID de cuenta.\n   *\n   * @param {string} accountId ID de la cuenta asociada a los depósitos\n   * @returns {Promise} Promesa que resuelve con un arreglo de depósitos asociados a la cuenta especificada\n   * @memberof DepositRepositoryInterface\n   */\n  findByAccountId(accountId: string): Promise;\n\n  /**\n   * Encuentra depósitos dentro de un rango de fechas.\n   *\n   * @param {(Date | number)} dateInit Fecha de inicio del rango\n   * @param {(Date | number)} dateEnd Fecha de fin del rango\n   * @returns {Promise} Promesa que resuelve con un arreglo de depósitos dentro del rango de fechas especificado\n   * @memberof DepositRepositoryInterface\n   */\n  findByDataRange(\n    dateInit: Date | number,\n    dateEnd: Date | number,\n  ): Promise;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/DepositService.html":{"url":"injectables/DepositService.html","title":"injectable - DepositService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  DepositService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/business/services/deposit/deposit.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                createDeposit\n                            \n                            \n                                deleteDeposit\n                            \n                            \n                                    Async\n                                getHistory\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(depositRepository: DepositRepository, accountRepository: AccountRepository)\n                    \n                \n                        \n                            \n                                Defined in src/business/services/deposit/deposit.service.ts:13\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        depositRepository\n                                                  \n                                                        \n                                                                        DepositRepository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        accountRepository\n                                                  \n                                                        \n                                                                        AccountRepository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        createDeposit\n                        \n                    \n                \n            \n            \n                \n                        \n                    createDeposit(deposit: DepositDTO)\n                \n            \n\n\n                    \n                        \n                            Defined in src/business/services/deposit/deposit.service.ts:26\n                        \n                    \n\n\n            \n                \n                        Crear un depósito\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                deposit\n                                            \n                                                            DepositDTO\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Datos del depósito\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                {Promise} Entidad del depósito creado\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        deleteDeposit\n                        \n                    \n                \n            \n            \n                \ndeleteDeposit(depositId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/business/services/deposit/deposit.service.ts:46\n                        \n                    \n\n\n            \n                \n                        Borrar un depósito\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                depositId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    ID del depósito a borrar\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        getHistory\n                        \n                    \n                \n            \n            \n                \n                        \n                    getHistory(accountId: string, pagination: PaginationDTO, dataRange?: DataRangeDTO)\n                \n            \n\n\n                    \n                        \n                            Defined in src/business/services/deposit/deposit.service.ts:59\n                        \n                    \n\n\n            \n                \n                        Obtener el historial de depósitos en una cuenta\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                accountId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    ID de la cuenta\n\n                                            \n                                        \n                                        \n                                                pagination\n                                            \n                                                            PaginationDTO\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Configuración de paginación\n\n                                            \n                                        \n                                        \n                                                dataRange\n                                            \n                                                            DataRangeDTO\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                            \n                                                    Rango de fechas y montos para filtrar\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                {Promise} Lista de depósitos\n\n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { DataRangeDTO, DepositDTO, PaginationDTO } from 'src/business/dtos';\nimport {\n  AccountEntity,\n  DepositEntity\n} from '../../../data/persistence/entities';\nimport {\n  AccountRepository,\n  DepositRepository\n} from '../../../data/persistence/repositories';\n\n@Injectable()\nexport class DepositService {\n  constructor(\n    private readonly depositRepository: DepositRepository,\n    private readonly accountRepository: AccountRepository,\n  ) {}\n\n  /**\n   * Crear un depósito\n   *\n   * @param {DepositDTO} deposit Datos del depósito\n   * @return {*} {Promise} Entidad del depósito creado\n   * @memberof DepositService\n   */\n  async createDeposit(deposit: DepositDTO): Promise {\n    const depositEntity = new DepositEntity();\n    depositEntity.account = await this.accountRepository.findOneById(\n      deposit.accountId,\n    );\n    depositEntity.amount = Number(deposit.amount);\n    depositEntity.dateTime = Date.now();\n    let newAccount = new AccountEntity();\n    newAccount = await this.accountRepository.findOneById(deposit.accountId);\n    newAccount.balance = Number(newAccount.balance) + Number(deposit.amount);\n    this.accountRepository.update(deposit.accountId, newAccount);\n    return this.depositRepository.register(depositEntity);\n  }\n\n  /**\n   * Borrar un depósito\n   *\n   * @param {string} depositId ID del depósito a borrar\n   * @memberof DepositService\n   */\n  deleteDeposit(depositId: string): void {\n    this.depositRepository.delete(depositId);\n  }\n\n  /**\n   * Obtener el historial de depósitos en una cuenta\n   *\n   * @param {string} accountId ID de la cuenta\n   * @param {PaginationDTO} pagination Configuración de paginación\n   * @param {DataRangeDTO} [dataRange] Rango de fechas y montos para filtrar\n   * @return {*} {Promise} Lista de depósitos\n   * @memberof DepositService\n   */\n  async getHistory(\n    accountId: string,\n    pagination: PaginationDTO,\n    dataRange?: DataRangeDTO,\n  ): Promise {\n    if (dataRange) {\n      const newArray = this.depositRepository.findByDataRange(\n        dataRange.startDate ?? 0,\n        dataRange.endDate ?? Date.now(),\n      );\n      const array = (await newArray).filter(\n        (item) =>\n          item.account.id === accountId &&\n          (item.amount >= Number(dataRange.startAmount) ?? 0) &&\n          (item.amount  item.account.id === accountId)\n      .slice(start, end);\n    return array;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/DocumentTypeEntity.html":{"url":"entities/DocumentTypeEntity.html","title":"entity - DocumentTypeEntity","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  DocumentTypeEntity\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/data/persistence/entities/document-type.entity.ts\n        \n\n\n            \n                Description\n            \n            \n                Entidad para el tipo de documento\n\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                id\n                            \n                            \n                                    \n                                name\n                            \n                            \n                                    \n                                state\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Default value : uuid()\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({name: 'id', type: 'uuid', primary: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/data/persistence/entities/document-type.entity.ts:28\n                        \n                    \n\n            \n                \n                    Identificador único del tipo de documento\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({name: 'name', type: 'varchar', length: 50})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/data/persistence/entities/document-type.entity.ts:41\n                        \n                    \n\n            \n                \n                    Nombre del tipo de documento\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        state\n                        \n                    \n                \n            \n                \n                    \n                        Default value : true\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({name: 'state', type: 'boolean'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/data/persistence/entities/document-type.entity.ts:53\n                        \n                    \n\n            \n                \n                    Estado del tipo de documento\n\n                \n            \n\n        \n    \n\n    \n\n\n    \n        import { Column, Entity } from 'typeorm';\nimport { v4 as uuid } from 'uuid';\nimport { DocumentTypeModel } from '../../models';\n\n/**\n * Entidad para el tipo de documento\n *\n * @export\n * @class DocumentTypeEntity\n * @implements {DocumentTypeModel}\n */\n@Entity({\n  name: 'document_type',\n  schema: 'public',\n})\nexport class DocumentTypeEntity implements DocumentTypeModel {\n  /**\n   * Identificador único del tipo de documento\n   *\n   * @type {string}\n   * @memberof DocumentTypeEntity\n   */\n  @Column({\n    name: 'id',\n    type: 'uuid',\n    primary: true,\n  })\n  id = uuid();\n\n  /**\n   * Nombre del tipo de documento\n   *\n   * @type {string}\n   * @memberof DocumentTypeEntity\n   */\n  @Column({\n    name: 'name',\n    type: 'varchar',\n    length: 50,\n  })\n  name: string;\n\n  /**\n   * Estado del tipo de documento\n   *\n   * @type {boolean}\n   * @memberof DocumentTypeEntity\n   */\n  @Column({\n    name: 'state',\n    type: 'boolean',\n  })\n  state = true;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/DocumentTypeModel.html":{"url":"interfaces/DocumentTypeModel.html","title":"interface - DocumentTypeModel","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  DocumentTypeModel\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/data/models/document-type.model.ts\n        \n\n\n            \n                Description\n            \n            \n                Interfaz que define la estructura de datos para el modelo de tipo de documento.\nEsta interfaz representa los atributos de un tipo de documento, como el ID, el nombre y el estado.\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            id\n                                        \n                                \n                                \n                                        \n                                            name\n                                        \n                                \n                                \n                                        \n                                            state\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        id\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        id:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Identificador único del tipo de documento\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        name\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        name:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Nombre del tipo de documento\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        state\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        state:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Estado del tipo de documento (activo o inactivo)\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        export interface DocumentTypeModel {\n  /** Identificador único del tipo de documento */\n  id: string;\n\n  /** Nombre del tipo de documento */\n  name: string;\n\n  /** Estado del tipo de documento (activo o inactivo) */\n  state: boolean;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/DocumentTypeRepository.html":{"url":"injectables/DocumentTypeRepository.html","title":"injectable - DocumentTypeRepository","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  DocumentTypeRepository\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/data/persistence/repositories/document-type.repository.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                delete\n                            \n                            \n                                findAll\n                            \n                            \n                                findByName\n                            \n                            \n                                findByState\n                            \n                            \n                                findOneById\n                            \n                            \n                                register\n                            \n                            \n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(documentTypeRepository: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/data/persistence/repositories/document-type.repository.ts:8\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        documentTypeRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        delete\n                        \n                    \n                \n            \n            \n                \ndelete(id: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/data/persistence/repositories/document-type.repository.ts:55\n                        \n                    \n\n\n            \n                \n                        Elimina un tipo de documento de la base de datos.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    El ID del tipo de documento a eliminar.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findAll\n                        \n                    \n                \n            \n            \n                \nfindAll()\n                \n            \n\n\n                    \n                        \n                            Defined in src/data/persistence/repositories/document-type.repository.ts:68\n                        \n                    \n\n\n            \n                \n                        Encuentra todos los tipos de documento en la base de datos.\n\n\n                        \n                            Returns :         Promise\n\n                        \n                            \n                                Una promesa que resuelve en un arreglo de todos los tipos de documento.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findByName\n                        \n                    \n                \n            \n            \n                \nfindByName(name: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/data/persistence/repositories/document-type.repository.ts:104\n                        \n                    \n\n\n            \n                \n                        Encuentra todos los tipos de documento por su nombre en la base de datos.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                name\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    El nombre de los tipos de documento a encontrar.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                Una promesa que resuelve en un arreglo de todos los tipos de documento encontrados.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findByState\n                        \n                    \n                \n            \n            \n                \nfindByState(state: boolean)\n                \n            \n\n\n                    \n                        \n                            Defined in src/data/persistence/repositories/document-type.repository.ts:95\n                        \n                    \n\n\n            \n                \n                        Encuentra todos los tipos de documento por su estado en la base de datos.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                state\n                                            \n                                                            boolean\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    El estado de los tipos de documento a encontrar.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                Una promesa que resuelve en un arreglo de todos los tipos de documento encontrados.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findOneById\n                        \n                    \n                \n            \n            \n                \nfindOneById(id: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/data/persistence/repositories/document-type.repository.ts:78\n                        \n                    \n\n\n            \n                \n                        Encuentra un tipo de documento por su ID en la base de datos.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    El ID del tipo de documento a encontrar.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                Una promesa que resuelve en el tipo de documento encontrado.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        register\n                        \n                    \n                \n            \n            \n                \nregister(entity: DocumentTypeEntity)\n                \n            \n\n\n                    \n                        \n                            Defined in src/data/persistence/repositories/document-type.repository.ts:31\n                        \n                    \n\n\n            \n                \n                        Registra un nuevo tipo de documento en la base de datos.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                entity\n                                            \n                                                            DocumentTypeEntity\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Los datos del tipo de documento a registrar.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                Una promesa que resuelve en el tipo de documento registrado.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        update\n                        \n                    \n                \n            \n            \n                \nupdate(id: string, entity: DocumentTypeEntity)\n                \n            \n\n\n                    \n                        \n                            Defined in src/data/persistence/repositories/document-type.repository.ts:42\n                        \n                    \n\n\n            \n                \n                        Actualiza un tipo de documento existente en la base de datos.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    El ID del tipo de documento a actualizar.\n\n                                            \n                                        \n                                        \n                                                entity\n                                            \n                                                            DocumentTypeEntity\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Los nuevos datos del tipo de documento.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                Una promesa que resuelve en el tipo de documento actualizado.\n\n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, NotFoundException } from '@nestjs/common';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { Repository } from 'typeorm';\nimport { DocumentTypeEntity } from '../entities';\nimport { DocumentTypeRepositoryInterface } from './interfaces';\n\n@Injectable()\nexport class DocumentTypeRepository implements DocumentTypeRepositoryInterface {\n  constructor(\n    @InjectRepository(DocumentTypeEntity)\n    private readonly documentTypeRepository: Repository,\n  ) {\n    // Se guardan tipos de documento por defecto al inicializar el repositorio\n    this.documentTypeRepository.save({\n      id: 'c822487e-5e89-4a49-98d5-50ce60b300b1',\n      name: 'Cédula de ciudadanía',\n      state: true,\n    });\n    this.documentTypeRepository.save({\n      id: '64911806-283f-4e71-ab94-f9098e18cf9a',\n      name: 'Cédula de extranjería',\n      state: true,\n    });\n  }\n\n  /**\n   * Registra un nuevo tipo de documento en la base de datos.\n   * @param entity Los datos del tipo de documento a registrar.\n   * @returns Una promesa que resuelve en el tipo de documento registrado.\n   */\n  register(entity: DocumentTypeEntity): Promise {\n    return this.documentTypeRepository.save(entity);\n  }\n\n  /**\n   * Actualiza un tipo de documento existente en la base de datos.\n   * @param id El ID del tipo de documento a actualizar.\n   * @param entity Los nuevos datos del tipo de documento.\n   * @returns Una promesa que resuelve en el tipo de documento actualizado.\n   * @throws `NotFoundException` si el tipo de documento no existe.\n   */\n  update(id: string, entity: DocumentTypeEntity): Promise {\n    return this.documentTypeRepository.update(id, entity).then((result) => {\n      if (result.affected === 0) {\n        throw new NotFoundException(`El ID ${id} no existe en la base de datos`);\n      }\n      return entity;\n    });\n  }\n\n  /**\n   * Elimina un tipo de documento de la base de datos.\n   * @param id El ID del tipo de documento a eliminar.\n   */\n  delete(id: string): void {\n    this.findOneById(id);\n    this.documentTypeRepository.delete(id).then((result) => {\n      if (result.affected === 0) {\n        throw new NotFoundException(`El ID ${id} no existe en la base de datos`);\n      }\n    });\n  }\n\n  /**\n   * Encuentra todos los tipos de documento en la base de datos.\n   * @returns Una promesa que resuelve en un arreglo de todos los tipos de documento.\n   */\n  findAll(): Promise {\n    return this.documentTypeRepository.find();\n  }\n\n  /**\n   * Encuentra un tipo de documento por su ID en la base de datos.\n   * @param id El ID del tipo de documento a encontrar.\n   * @returns Una promesa que resuelve en el tipo de documento encontrado.\n   * @throws `NotFoundException` si el tipo de documento no existe.\n   */\n  findOneById(id: string): Promise {\n    return this.documentTypeRepository\n      .findOne({ where: { id } })\n      .then((result) => {\n        if (result) {\n          return result;\n        } else {\n          throw new NotFoundException(`El ID ${id} no existe en la base de datos`);\n        }\n      });\n  }\n\n  /**\n   * Encuentra todos los tipos de documento por su estado en la base de datos.\n   * @param state El estado de los tipos de documento a encontrar.\n   * @returns Una promesa que resuelve en un arreglo de todos los tipos de documento encontrados.\n   */\n  findByState(state: boolean): Promise {\n    return this.documentTypeRepository.find({ where: { state } });\n  }\n\n  /**\n   * Encuentra todos los tipos de documento por su nombre en la base de datos.\n   * @param name El nombre de los tipos de documento a encontrar.\n   * @returns Una promesa que resuelve en un arreglo de todos los tipos de documento encontrados.\n   */\n  findByName(name: string): Promise {\n    return this.documentTypeRepository.find({ where: { name } });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/DocumentTypeRepositoryInterface.html":{"url":"interfaces/DocumentTypeRepositoryInterface.html","title":"interface - DocumentTypeRepositoryInterface","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  DocumentTypeRepositoryInterface\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/data/persistence/repositories/interfaces/document-type-repository.interface.ts\n        \n\n\n            \n                Description\n            \n            \n                Interfaz para el repositorio de tipos de documento.\nExtiende la interfaz base de repositorio y define métodos adicionales específicos para los tipos de documento.\n\n            \n\n            \n                Extends\n            \n            \n                            BaseRepositoryInterface\n            \n\n        \n            Index\n            \n                \n                    \n                        \n                            Methods\n                        \n                    \n                    \n                        \n                            \n                                \n                                    \n                                        findByName\n                                    \n                                \n                                \n                                    \n                                        findByState\n                                    \n                                \n                            \n                        \n                    \n                \n            \n        \n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        findByName\n                        \n                    \n                \n            \n            \n                \nfindByName(name: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/data/persistence/repositories/interfaces/document-type-repository.interface.ts:30\n                        \n                    \n\n\n            \n                \n                        Encuentra tipos de documento por nombre.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                name\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Nombre del tipo de documento\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                Promesa que resuelve con un arreglo de tipos de documento con el nombre especificado\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findByState\n                        \n                    \n                \n            \n            \n                \nfindByState(state: boolean)\n                \n            \n\n\n                    \n                        \n                            Defined in src/data/persistence/repositories/interfaces/document-type-repository.interface.ts:21\n                        \n                    \n\n\n            \n                \n                        Encuentra tipos de documento por estado.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                state\n                                            \n                                                            boolean\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Estado del tipo de documento\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                Promesa que resuelve con un arreglo de tipos de documento con el estado especificado\n\n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { DocumentTypeEntity } from '../../entities';\nimport { BaseRepositoryInterface } from './base/';\n\n/**\n * Interfaz para el repositorio de tipos de documento.\n *\n * Extiende la interfaz base de repositorio y define métodos adicionales específicos para los tipos de documento.\n *\n * @export\n * @interface DocumentTypeRepositoryInterface\n * @extends {BaseRepositoryInterface} Interfaz base de repositorio para tipos de documento\n */\nexport interface DocumentTypeRepositoryInterface extends BaseRepositoryInterface {\n  /**\n   * Encuentra tipos de documento por estado.\n   *\n   * @param {boolean} state Estado del tipo de documento\n   * @returns {Promise} Promesa que resuelve con un arreglo de tipos de documento con el estado especificado\n   * @memberof DocumentTypeRepositoryInterface\n   */\n  findByState(state: boolean): Promise;\n\n  /**\n   * Encuentra tipos de documento por nombre.\n   *\n   * @param {string} name Nombre del tipo de documento\n   * @returns {Promise} Promesa que resuelve con un arreglo de tipos de documento con el nombre especificado\n   * @memberof DocumentTypeRepositoryInterface\n   */\n  findByName(name: string): Promise;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ExceptionFiltersFilter.html":{"url":"classes/ExceptionFiltersFilter.html","title":"class - ExceptionFiltersFilter","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ExceptionFiltersFilter\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/exception-filters/exception-filters.filter.ts\n        \n\n\n            \n                Description\n            \n            \n                Filtro de excepciones genérico\n\n            \n\n\n            \n                Implements\n            \n            \n                        ExceptionFilter\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                catch\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        catch\n                        \n                    \n                \n            \n            \n                \ncatch(exception: T, host: ArgumentsHost)\n                \n            \n\n\n                    \n                        \n                            Defined in src/common/exception-filters/exception-filters.filter.ts:20\n                        \n                    \n\n\n            \n                \n                        Método para manejar excepciones\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                exception\n                                            \n                                                        T\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Excepción capturada\n\n                                            \n                                        \n                                        \n                                                host\n                                            \n                                                        ArgumentsHost\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Contexto de los argumentos\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { ArgumentsHost, Catch, ExceptionFilter } from '@nestjs/common';\n\n/**\n * Filtro de excepciones genérico\n *\n * @template T Tipo de la excepción\n * @export\n * @class ExceptionFiltersFilter\n * @implements {ExceptionFilter}\n */\n@Catch()\nexport class ExceptionFiltersFilter implements ExceptionFilter {\n  /**\n   * Método para manejar excepciones\n   *\n   * @param {T} exception Excepción capturada\n   * @param {ArgumentsHost} host Contexto de los argumentos\n   * @memberof ExceptionFiltersFilter\n   */\n  catch(exception: T, host: ArgumentsHost) {}\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"guards/GuardsGuard.html":{"url":"guards/GuardsGuard.html","title":"guard - GuardsGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n    Guards\n    GuardsGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n        \n            \n            File\n            \n            \n                src/presentation/guards/guards.guard.ts\n            \n\n\n                \n                Description\n                \n                \n                    Guard para proteger rutas con autenticación JWT.\n\n                \n\n\n\n\n                \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                canActivate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n                \n    Constructor\n        \n            \n                \n                    \nconstructor(jwtService: JwtService)\n                    \n                \n                        \n                            \n                                Defined in src/presentation/guards/guards.guard.ts:8\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        jwtService\n                                                  \n                                                        \n                                                                    JwtService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n                \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        canActivate\n                        \n                    \n                \n            \n            \n                \n                        \n                    canActivate(context: ExecutionContext)\n                \n            \n\n\n                    \n                        \n                            Defined in src/presentation/guards/guards.guard.ts:16\n                        \n                    \n\n\n            \n                \n                        Método que determina si la solicitud tiene permiso para proceder.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                context\n                                            \n                                                        ExecutionContext\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    El contexto de ejecución que contiene la solicitud.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                Una promesa que resuelve con un booleano indicando si la solicitud está autorizada.\n\n                            \n                \n            \n        \n    \n\n        \n\n\n        \n            import { CanActivate, ExecutionContext, Injectable } from '@nestjs/common';\nimport { JwtService } from '@nestjs/jwt';\n\n/**\n * Guard para proteger rutas con autenticación JWT.\n */\n@Injectable()\nexport class GuardsGuard implements CanActivate {\n  constructor(private jwtService: JwtService) {}\n\n  /**\n   * Método que determina si la solicitud tiene permiso para proceder.\n   * @param context El contexto de ejecución que contiene la solicitud.\n   * @returns Una promesa que resuelve con un booleano indicando si la solicitud está autorizada.\n   */\n  async canActivate(context: ExecutionContext): Promise {\n    const request = context.switchToHttp().getRequest();\n    const authHeader = request.headers.authorization;\n\n    if (!authHeader || !authHeader.startsWith('access_token ')) {\n      return false;\n    }\n\n    const token = authHeader.split(' ')[1];\n\n    try {\n      const payload = this.jwtService.verify(token);\n      request.user = payload;\n      return true;\n    } catch (err) {\n      return false;\n    }\n  }\n}\n\n        \n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/InterceptorsInterceptor.html":{"url":"injectables/InterceptorsInterceptor.html","title":"injectable - InterceptorsInterceptor","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  InterceptorsInterceptor\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/presentation/interceptors/interceptors.interceptor.ts\n        \n\n\n            \n                Description\n            \n            \n                Interceptor para manejar la lógica previa y posterior a la ejecución de un controlador.\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                intercept\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        intercept\n                        \n                    \n                \n            \n            \n                \nintercept(context: ExecutionContext, next: CallHandler)\n                \n            \n\n\n                    \n                        \n                            Defined in src/presentation/interceptors/interceptors.interceptor.ts:20\n                        \n                    \n\n\n            \n                \n                        Intercepta una solicitud y permite ejecutar lógica antes y después del manejo del controlador.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                context\n                                            \n                                                        ExecutionContext\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    El contexto de ejecución que contiene la solicitud.\n\n                                            \n                                        \n                                        \n                                                next\n                                            \n                                                        CallHandler\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    El manejador de la llamada que permite continuar con la ejecución del siguiente interceptor o controlador.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Observable\n\n                        \n                            \n                                Un Observable que contiene la respuesta del controlador.\n\n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {\n  CallHandler,\n  ExecutionContext,\n  Injectable,\n  NestInterceptor,\n} from '@nestjs/common';\nimport { Observable } from 'rxjs';\n\n/**\n * Interceptor para manejar la lógica previa y posterior a la ejecución de un controlador.\n */\n@Injectable()\nexport class InterceptorsInterceptor implements NestInterceptor {\n  /**\n   * Intercepta una solicitud y permite ejecutar lógica antes y después del manejo del controlador.\n   * @param context El contexto de ejecución que contiene la solicitud.\n   * @param next El manejador de la llamada que permite continuar con la ejecución del siguiente interceptor o controlador.\n   * @returns Un Observable que contiene la respuesta del controlador.\n   */\n  intercept(context: ExecutionContext, next: CallHandler): Observable {\n    return next.handle();\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/MiddlewaresMiddleware.html":{"url":"injectables/MiddlewaresMiddleware.html","title":"injectable - MiddlewaresMiddleware","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  MiddlewaresMiddleware\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/presentation/middlewares/middlewares.middleware.ts\n        \n\n\n            \n                Description\n            \n            \n                Middleware que se ejecuta antes de los controladores para manipular las cabeceras de autorización.\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                use\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        use\n                        \n                    \n                \n            \n            \n                \nuse(req: Request, res: Response, next: NextFunction)\n                \n            \n\n\n                    \n                        \n                            Defined in src/presentation/middlewares/middlewares.middleware.ts:15\n                        \n                    \n\n\n            \n                \n                        Método que manipula la cabecera de autorización de la solicitud.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                req\n                                            \n                                                        Request\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    La solicitud HTTP.\n\n                                            \n                                        \n                                        \n                                                res\n                                            \n                                                        Response\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    La respuesta HTTP.\n\n                                            \n                                        \n                                        \n                                                next\n                                            \n                                                        NextFunction\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    La función que se llama para pasar el control al siguiente middleware o controlador.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, NestMiddleware } from '@nestjs/common';\nimport { Request, Response, NextFunction } from 'express';\n\n/**\n * Middleware que se ejecuta antes de los controladores para manipular las cabeceras de autorización.\n */\n@Injectable()\nexport class MiddlewaresMiddleware implements NestMiddleware {\n  /**\n   * Método que manipula la cabecera de autorización de la solicitud.\n   * @param req La solicitud HTTP.\n   * @param res La respuesta HTTP.\n   * @param next La función que se llama para pasar el control al siguiente middleware o controlador.\n   */\n  use(req: Request, res: Response, next: NextFunction) {\n    const authHeader = req.headers.authorization;\n\n    if (authHeader && authHeader.startsWith('access_token ')) {\n      const token = authHeader.substring(7);\n      req.headers['Authorization'] = `access_token ${token}`;\n    }\n\n    next();\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/PaginationDTO.html":{"url":"classes/PaginationDTO.html","title":"class - PaginationDTO","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  PaginationDTO\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/business/dtos/pagination.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                Data Transfer Object para la paginación.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                length\n                            \n                            \n                                    \n                                page\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        length\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNumberString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/business/dtos/pagination.dto.ts:20\n                        \n                    \n\n            \n                \n                    Longitud de los elementos en una página.\nDebe ser una cadena que representa un número.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        page\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNumberString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/business/dtos/pagination.dto.ts:32\n                        \n                    \n\n            \n                \n                    Número de página.\nDebe ser una cadena que representa un número.\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsNumberString } from 'class-validator';\n\n/**\n * Data Transfer Object para la paginación.\n *\n * @export\n * @class PaginationDTO\n */\nexport class PaginationDTO {\n  /**\n   * Longitud de los elementos en una página.\n   * \n   * Debe ser una cadena que representa un número.\n   *\n   * @type {number}\n   * @memberof PaginationDTO\n   * @decorator IsNumberString\n   */\n  @IsNumberString()\n  length: number;\n\n  /**\n   * Número de página.\n   * \n   * Debe ser una cadena que representa un número.\n   *\n   * @type {number}\n   * @memberof PaginationDTO\n   * @decorator IsNumberString\n   */\n  @IsNumberString()\n  page: number;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/PaginationModel.html":{"url":"interfaces/PaginationModel.html","title":"interface - PaginationModel","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  PaginationModel\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/data/models/pagination.model.ts\n        \n\n\n            \n                Description\n            \n            \n                Interfaz que define la estructura de datos para el modelo de paginación.\nEsta interfaz representa los datos necesarios para implementar la paginación en una lista de elementos.\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            length\n                                        \n                                \n                                \n                                        \n                                            page\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        length\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        length:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Longitud total de la lista de elementos\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        page\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        page:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Página actual\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        export interface PaginationModel {\n  /** Longitud total de la lista de elementos */\n  length: number;\n\n  /** Página actual */\n  page: number;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/PipesPipe.html":{"url":"injectables/PipesPipe.html","title":"injectable - PipesPipe","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  PipesPipe\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/presentation/pipes/pipes.pipe.ts\n        \n\n\n            \n                Description\n            \n            \n                Pipe de transformación de datos en NestJS.\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                transform\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        transform\n                        \n                    \n                \n            \n            \n                \ntransform(value: any, metadata: ArgumentMetadata)\n                \n            \n\n\n                    \n                        \n                            Defined in src/presentation/pipes/pipes.pipe.ts:14\n                        \n                    \n\n\n            \n                \n                        Método de transformación de datos.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                value\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    El valor que se va a transformar.\n\n                                            \n                                        \n                                        \n                                                metadata\n                                            \n                                                        ArgumentMetadata\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    La metadata del argumento que incluye detalles como el tipo de argumento.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                El valor transformado.\n\n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { ArgumentMetadata, Injectable, PipeTransform } from '@nestjs/common';\n\n/**\n * Pipe de transformación de datos en NestJS.\n */\n@Injectable()\nexport class PipesPipe implements PipeTransform {\n  /**\n   * Método de transformación de datos.\n   * @param value El valor que se va a transformar.\n   * @param metadata La metadata del argumento que incluye detalles como el tipo de argumento.\n   * @returns El valor transformado.\n   */\n  transform(value: any, metadata: ArgumentMetadata) {\n    return value;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/SecurityController.html":{"url":"controllers/SecurityController.html","title":"controller - SecurityController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  SecurityController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/presentation/controllers/security/security.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                security\n            \n\n\n            \n                Description\n            \n            \n                Controlador para gestionar las operaciones de seguridad como registro, inicio de sesión y cierre de sesión.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                logout\n                            \n                            \n                                    \n                                signIn\n                            \n                            \n                                    \n                                signUp\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        logout\n                        \n                    \n                \n            \n            \n                \n                        \n                    logout(body: literal type)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('logout')\n                \n            \n\n                    \n                        \n                            Defined in src/presentation/controllers/security/security.controller.ts:38\n                        \n                    \n\n\n            \n                \n                        Cierra la sesión de un usuario.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                body\n                                            \n                                                        literal type\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    El cuerpo de la solicitud que contiene el token JWT del usuario.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         boolean\n\n                        \n                            \n                                Un booleano que indica si el cierre de sesión fue exitoso.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        signIn\n                        \n                    \n                \n            \n            \n                \n                        \n                    signIn(customer: SignDTO)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('sign-in')\n                \n            \n\n                    \n                        \n                            Defined in src/presentation/controllers/security/security.controller.ts:28\n                        \n                    \n\n\n            \n                \n                        Inicia sesión de un usuario.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                customer\n                                            \n                                                            SignDTO\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Los datos de inicio de sesión del usuario.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                Una promesa que resuelve con el token JWT si el inicio de sesión es exitoso.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        signUp\n                        \n                    \n                \n            \n            \n                \n                        \n                    signUp(customer: CustomerDTO)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('sign-up')\n                \n            \n\n                    \n                        \n                            Defined in src/presentation/controllers/security/security.controller.ts:18\n                        \n                    \n\n\n            \n                \n                        Registra un nuevo usuario.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                customer\n                                            \n                                                            CustomerDTO\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Los datos del nuevo usuario.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                Una promesa que resuelve con la información del usuario registrado.\n\n                            \n                \n            \n        \n    \n    \n\n\n    \n        import { Body, Controller, Get, Post } from '@nestjs/common';\nimport { SecurityService } from '../../../business/services';\nimport { CustomerDTO, SignDTO } from '../../../business/dtos';\n\n/**\n * Controlador para gestionar las operaciones de seguridad como registro, inicio de sesión y cierre de sesión.\n */\n@Controller('security')\nexport class SecurityController {\n  constructor(private readonly securityService: SecurityService) {}\n\n  /**\n   * Registra un nuevo usuario.\n   * @param customer Los datos del nuevo usuario.\n   * @returns Una promesa que resuelve con la información del usuario registrado.\n   */\n  @Post('sign-up')\n  signUp(@Body() customer: CustomerDTO) {\n    return this.securityService.signUp(customer);\n  }\n\n  /**\n   * Inicia sesión de un usuario.\n   * @param customer Los datos de inicio de sesión del usuario.\n   * @returns Una promesa que resuelve con el token JWT si el inicio de sesión es exitoso.\n   */\n  @Post('sign-in')\n  signIn(@Body() customer: SignDTO) {\n    return this.securityService.signIn(customer);\n  }\n\n  /**\n   * Cierra la sesión de un usuario.\n   * @param body El cuerpo de la solicitud que contiene el token JWT del usuario.\n   * @returns Un booleano que indica si el cierre de sesión fue exitoso.\n   */\n  @Get('logout')\n  logout(@Body() body: { JWT: string }): boolean {\n    return this.securityService.signOut(body.JWT);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/SecurityService.html":{"url":"injectables/SecurityService.html","title":"injectable - SecurityService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  SecurityService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/business/services/security/security.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                signIn\n                            \n                            \n                                signOut\n                            \n                            \n                                    Async\n                                signUp\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(customerRepository: CustomerRepository, documentTypeRepository: DocumentTypeRepository, accountService: AccountService, jwtService: JwtService)\n                    \n                \n                        \n                            \n                                Defined in src/business/services/security/security.service.ts:24\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        customerRepository\n                                                  \n                                                        \n                                                                        CustomerRepository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        documentTypeRepository\n                                                  \n                                                        \n                                                                        DocumentTypeRepository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        accountService\n                                                  \n                                                        \n                                                                        AccountService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        jwtService\n                                                  \n                                                        \n                                                                    JwtService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        signIn\n                        \n                    \n                \n            \n            \n                \n                        \n                    signIn(user: SignDTO)\n                \n            \n\n\n                    \n                        \n                            Defined in src/business/services/security/security.service.ts:39\n                        \n                    \n\n\n            \n                \n                        Identificarse en el sistema\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                user\n                                            \n                                                            SignDTO\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                {string}\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        signOut\n                        \n                    \n                \n            \n            \n                \nsignOut(JWT: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/business/services/security/security.service.ts:100\n                        \n                    \n\n\n            \n                \n                        Salir del sistema\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                JWT\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         boolean\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        signUp\n                        \n                    \n                \n            \n            \n                \n                        \n                    signUp(user: CustomerDTO)\n                \n            \n\n\n                    \n                        \n                            Defined in src/business/services/security/security.service.ts:58\n                        \n                    \n\n\n            \n                \n                        Crear usuario en el sistema\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                user\n                                            \n                                                            CustomerDTO\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                {string}\n\n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {\n  Injectable,\n  InternalServerErrorException,\n  NotFoundException,\n  UnauthorizedException,\n} from '@nestjs/common';\nimport { JwtService } from '@nestjs/jwt';\n\n// Repositories\nimport {\n  CustomerRepository,\n  DocumentTypeRepository,\n} from '../../../data/persistence/repositories';\n\n// Services\nimport { AccountService } from '../account';\n\n// Entities\nimport { AccountDTO, CustomerDTO, SignDTO } from '../../dtos';\nimport { CustomerEntity } from '../../../data/persistence/entities';\n\n@Injectable()\nexport class SecurityService {\n  constructor(\n    private readonly customerRepository: CustomerRepository,\n    private readonly documentTypeRepository: DocumentTypeRepository,\n    private readonly accountService: AccountService,\n    private jwtService: JwtService,\n  ) {}\n\n  /**\n   * Identificarse en el sistema\n   *\n   * @param {CustomerModel} user\n   * @return {*}  {string}\n   * @memberof SecurityService\n   */\n  async signIn(user: SignDTO) {\n    const answer = await this.customerRepository.findOneByEmailAndPassword(\n      user.email,\n      user.password,\n    );\n    if (answer) {\n      const customer = await this.customerRepository.findOneByEmail(user.email);\n      const payload = { email: customer.email, sub: customer.id };\n      return { access_token: this.jwtService.sign(payload), id: customer.id };\n    } else throw new UnauthorizedException('Datos de identificación inválidos');\n  }\n\n  /**\n   * Crear usuario en el sistema\n   *\n   * @param {CustomerModel} user\n   * @return {*}  {string}\n   * @memberof SecurityService\n   */\n  async signUp(user: CustomerDTO) {\n    const newCustomer = new CustomerEntity();\n    newCustomer.documentType = await this.documentTypeRepository.findOneById(\n      user.documentTypeId,\n    );\n    newCustomer.document = user.document;\n    newCustomer.fullName = user.fullName;\n    newCustomer.email = user.email;\n    newCustomer.phone = user.phone;\n    newCustomer.password = user.password;\n    if (await this.customerRepository.existEmail(user.email)) {\n      throw new NotFoundException(\n        `El email ${user.email} ya  existe en base de datos`,\n      );\n    }\n\n    const customer = await this.customerRepository.register(newCustomer);\n\n    if (customer) {\n      const newAccount = new AccountDTO();\n      newAccount.customerId = customer.id;\n      newAccount.accountTypeId = 'ab27c9ac-a01c-4c22-a6d6-ce5ab3b79185';\n\n      const account = await this.accountService.createAccount(newAccount);\n      account.balance = 0;\n      if (account) {\n        const payload = { email: customer.email, sub: customer.id };\n        return {\n          access_token: this.jwtService.sign(payload),\n          account: account,\n        };\n      } else\n        throw new UnauthorizedException('Datos de identificación inválidos');\n    } else throw new InternalServerErrorException();\n  }\n\n  /**\n   * Salir del sistema\n   *\n   * @param {string} JWToken\n   * @memberof SecurityService\n   */\n  signOut(JWT: string): boolean {\n    if (this.jwtService.verify(JWT)) return true;\n\n    return false;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/SignDTO.html":{"url":"classes/SignDTO.html","title":"class - SignDTO","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  SignDTO\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/business/dtos/sign.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                Data Transfer Object para los datos de inicio de sesión.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                email\n                            \n                            \n                                    \n                                password\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/business/dtos/sign.dto.ts:20\n                        \n                    \n\n            \n                \n                    Correo electrónico del usuario.\nDebe ser una cadena.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/business/dtos/sign.dto.ts:32\n                        \n                    \n\n            \n                \n                    Contraseña del usuario.\nDebe ser una cadena.\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsString } from 'class-validator';\n\n/**\n * Data Transfer Object para los datos de inicio de sesión.\n *\n * @export\n * @class SignDTO\n */\nexport class SignDTO {\n  /**\n   * Correo electrónico del usuario.\n   * \n   * Debe ser una cadena.\n   *\n   * @type {string}\n   * @memberof SignDTO\n   * @decorator IsString\n   */\n  @IsString()\n  email: string;\n\n  /**\n   * Contraseña del usuario.\n   * \n   * Debe ser una cadena.\n   *\n   * @type {string}\n   * @memberof SignDTO\n   * @decorator IsString\n   */\n  @IsString()\n  password: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/TransferController.html":{"url":"controllers/TransferController.html","title":"controller - TransferController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  TransferController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/presentation/controllers/transfer/transfer.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                transfer\n            \n\n\n            \n                Description\n            \n            \n                Controlador para gestionar las transferencias.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    Async\n                                createTransfer\n                            \n                            \n                                    \n                                    Async\n                                deleteTransfer\n                            \n                            \n                                    \n                                    \n                                getHistory\n                            \n                            \n                                    \n                                    \n                                    Async\n                                getHistoryIn\n                            \n                            \n                                    \n                                    \n                                    Async\n                                getHistoryOut\n                            \n                            \n                                    \n                                    \n                                    Async\n                                selectTransfer\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Async\n                        createTransfer\n                        \n                    \n                \n            \n            \n                \n                        \n                    createTransfer(transfer: TransferDTO)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post()@UseGuards(GuardsGuard)\n                \n            \n\n                    \n                        \n                            Defined in src/presentation/controllers/transfer/transfer.controller.ts:29\n                        \n                    \n\n\n            \n                \n                        Crea una nueva transferencia.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                transfer\n                                            \n                                                            TransferDTO\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Los datos de la transferencia.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                Una promesa que resuelve con la entidad de la transferencia creada.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        deleteTransfer\n                        \n                    \n                \n            \n            \n                \n                        \n                    deleteTransfer(id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete(':id')\n                \n            \n\n                    \n                        \n                            Defined in src/presentation/controllers/transfer/transfer.controller.ts:50\n                        \n                    \n\n\n            \n                \n                        Elimina una transferencia por su ID.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    El ID de la transferencia.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                Una promesa que resuelve con la entidad de la transferencia eliminada.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        getHistory\n                        \n                    \n                \n            \n            \n                \n                        \n                    getHistory(body: literal type)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('history')@UseGuards(GuardsGuard)\n                \n            \n\n                    \n                        \n                            Defined in src/presentation/controllers/transfer/transfer.controller.ts:107\n                        \n                    \n\n\n            \n                \n                        Obtiene el historial completo de una cuenta.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                body\n                                            \n                                                        literal type\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    El cuerpo de la solicitud que contiene el ID de la cuenta, la paginación y el rango de datos.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                Una promesa que resuelve con una lista de entidades de transferencias.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Async\n                        getHistoryIn\n                        \n                    \n                \n            \n            \n                \n                        \n                    getHistoryIn(body: literal type)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('income')@UseGuards(GuardsGuard)\n                \n            \n\n                    \n                        \n                            Defined in src/presentation/controllers/transfer/transfer.controller.ts:63\n                        \n                    \n\n\n            \n                \n                        Obtiene el historial de ingresos de una cuenta.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                body\n                                            \n                                                        literal type\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    El cuerpo de la solicitud que contiene el ID de la cuenta, la paginación y el rango de datos.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                Una promesa que resuelve con una lista de entidades de transferencias de ingreso.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Async\n                        getHistoryOut\n                        \n                    \n                \n            \n            \n                \n                        \n                    getHistoryOut(body: literal type)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('outcome')@UseGuards(GuardsGuard)\n                \n            \n\n                    \n                        \n                            Defined in src/presentation/controllers/transfer/transfer.controller.ts:85\n                        \n                    \n\n\n            \n                \n                        Obtiene el historial de egresos de una cuenta.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                body\n                                            \n                                                        literal type\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    El cuerpo de la solicitud que contiene el ID de la cuenta, la paginación y el rango de datos.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                Una promesa que resuelve con una lista de entidades de transferencias de egreso.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Async\n                        selectTransfer\n                        \n                    \n                \n            \n            \n                \n                        \n                    selectTransfer(id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/select/:id')@UseGuards(GuardsGuard)\n                \n            \n\n                    \n                        \n                            Defined in src/presentation/controllers/transfer/transfer.controller.ts:40\n                        \n                    \n\n\n            \n                \n                        Selecciona una transferencia por su ID.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    El ID de la transferencia.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                Una promesa que resuelve con la entidad de la transferencia seleccionada.\n\n                            \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Body,\n  Controller,\n  Delete,\n  Get,\n  Param,\n  Post,\n  UseGuards,\n} from '@nestjs/common';\nimport { DataRangeDTO, PaginationDTO, TransferDTO } from 'src/business/dtos';\nimport { GuardsGuard } from 'src/presentation/guards/guards.guard';\nimport { TransferService } from '../../../business/services';\nimport { TransferEntity } from '../../../data/persistence/entities';\n\n/**\n * Controlador para gestionar las transferencias.\n */\n@Controller('transfer')\nexport class TransferController {\n  constructor(private readonly transferService: TransferService) {}\n\n  /**\n   * Crea una nueva transferencia.\n   * @param transfer Los datos de la transferencia.\n   * @returns Una promesa que resuelve con la entidad de la transferencia creada.\n   */\n  @Post()\n  @UseGuards(GuardsGuard)\n  async createTransfer(@Body() transfer: TransferDTO): Promise {\n    return this.transferService.createTransfer(transfer);\n  }\n\n  /**\n   * Selecciona una transferencia por su ID.\n   * @param id El ID de la transferencia.\n   * @returns Una promesa que resuelve con la entidad de la transferencia seleccionada.\n   */\n  @Get('/select/:id')\n  @UseGuards(GuardsGuard)\n  async selectTransfer(@Param('id') id: string): Promise {\n    return this.transferService.selectTransfer(id);\n  }\n\n  /**\n   * Elimina una transferencia por su ID.\n   * @param id El ID de la transferencia.\n   * @returns Una promesa que resuelve con la entidad de la transferencia eliminada.\n   */\n  @Delete(':id')\n  async deleteTransfer(@Param('id') id: string): Promise {\n    const transfer = await this.transferService.selectTransfer(id);\n    this.transferService.deleteTransfer(id);\n    return transfer;\n  }\n\n  /**\n   * Obtiene el historial de ingresos de una cuenta.\n   * @param body El cuerpo de la solicitud que contiene el ID de la cuenta, la paginación y el rango de datos.\n   * @returns Una promesa que resuelve con una lista de entidades de transferencias de ingreso.\n   */\n  @Post('income')\n  @UseGuards(GuardsGuard)\n  async getHistoryIn(\n    @Body()\n    body: {\n      accountId: string;\n      pagination: PaginationDTO;\n      dataRange?: DataRangeDTO;\n    },\n  ): Promise {\n    return this.transferService.getHistoryIn(\n      body.accountId,\n      body.pagination,\n      body.dataRange,\n    );\n  }\n\n  /**\n   * Obtiene el historial de egresos de una cuenta.\n   * @param body El cuerpo de la solicitud que contiene el ID de la cuenta, la paginación y el rango de datos.\n   * @returns Una promesa que resuelve con una lista de entidades de transferencias de egreso.\n   */\n  @Post('outcome')\n  @UseGuards(GuardsGuard)\n  async getHistoryOut(\n    @Body()\n    body: {\n      accountId: string;\n      pagination: PaginationDTO;\n      dataRange?: DataRangeDTO;\n    },\n  ): Promise {\n    return this.transferService.getHistoryOut(\n      body.accountId,\n      body.pagination,\n      body.dataRange,\n    );\n  }\n\n  /**\n   * Obtiene el historial completo de una cuenta.\n   * @param body El cuerpo de la solicitud que contiene el ID de la cuenta, la paginación y el rango de datos.\n   * @returns Una promesa que resuelve con una lista de entidades de transferencias.\n   */\n  @Post('history')\n  @UseGuards(GuardsGuard)\n  getHistory(\n    @Body()\n    body: {\n      accountId: string;\n      pagination: PaginationDTO;\n      dataRange?: DataRangeDTO;\n    },\n  ): Promise {\n    return this.transferService.getHistory(\n      body.accountId,\n      body.pagination,\n      body.dataRange,\n    );\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/TransferDTO.html":{"url":"classes/TransferDTO.html","title":"class - TransferDTO","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  TransferDTO\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/business/dtos/transfer.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                Data Transfer Object para representar una transferencia.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                amount\n                            \n                            \n                                    \n                                inComeId\n                            \n                            \n                                    \n                                outComeId\n                            \n                            \n                                    \n                                    \n                                reason\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        amount\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNumberString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/business/dtos/transfer.dto.ts:44\n                        \n                    \n\n            \n                \n                    Monto de la transferencia.\nDebe ser una cadena que representa un número.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        inComeId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNumberString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/business/dtos/transfer.dto.ts:32\n                        \n                    \n\n            \n                \n                    Identificador de la cuenta de destino.\nDebe ser una cadena que representa un número.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        outComeId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNumberString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/business/dtos/transfer.dto.ts:20\n                        \n                    \n\n            \n                \n                    Identificador de la cuenta de origen.\nDebe ser una cadena que representa un número.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        reason\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@MaxLength(500)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/business/dtos/transfer.dto.ts:58\n                        \n                    \n\n            \n                \n                    Razón o motivo de la transferencia.\nDebe ser una cadena con un máximo de 500 caracteres.\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsNumberString, IsString, MaxLength } from 'class-validator';\n\n/**\n * Data Transfer Object para representar una transferencia.\n *\n * @export\n * @class TransferDTO\n */\nexport class TransferDTO {\n  /**\n   * Identificador de la cuenta de origen.\n   * \n   * Debe ser una cadena que representa un número.\n   *\n   * @type {string}\n   * @memberof TransferDTO\n   * @decorator IsNumberString\n   */\n  @IsNumberString()\n  outComeId: string;\n\n  /**\n   * Identificador de la cuenta de destino.\n   * \n   * Debe ser una cadena que representa un número.\n   *\n   * @type {string}\n   * @memberof TransferDTO\n   * @decorator IsNumberString\n   */\n  @IsNumberString()\n  inComeId: string;\n\n  /**\n   * Monto de la transferencia.\n   * \n   * Debe ser una cadena que representa un número.\n   *\n   * @type {string}\n   * @memberof TransferDTO\n   * @decorator IsNumberString\n   */\n  @IsNumberString()\n  amount: string;\n\n  /**\n   * Razón o motivo de la transferencia.\n   * \n   * Debe ser una cadena con un máximo de 500 caracteres.\n   *\n   * @type {string}\n   * @memberof TransferDTO\n   * @decorator IsString\n   * @decorator MaxLength\n   */\n  @IsString()\n  @MaxLength(500)\n  reason: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/TransferEntity.html":{"url":"entities/TransferEntity.html","title":"entity - TransferEntity","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  TransferEntity\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/data/persistence/entities/transfer.entitty.ts\n        \n\n\n            \n                Description\n            \n            \n                Entidad para la transferencia de fondos entre cuentas\n\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                amount\n                            \n                            \n                                    \n                                dateTime\n                            \n                            \n                                    \n                                    Optional\n                                deletedAt\n                            \n                            \n                                    \n                                id\n                            \n                            \n                                    \n                                    \n                                inCome\n                            \n                            \n                                    \n                                    \n                                outCome\n                            \n                            \n                                    \n                                reason\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        amount\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 0\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({name: 'amount', type: 'numeric'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/data/persistence/entities/transfer.entitty.ts:61\n                        \n                    \n\n            \n                \n                    Monto de la transferencia\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        dateTime\n                        \n                    \n                \n            \n                \n                    \n                        Type :     number | Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({name: 'date_time', type: 'numeric'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/data/persistence/entities/transfer.entitty.ts:86\n                        \n                    \n\n            \n                \n                    Fecha y hora de la transferencia\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        deletedAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :     number | Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({name: 'deleted_at', type: 'timestamp', nullable: true, select: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/data/persistence/entities/transfer.entitty.ts:100\n                        \n                    \n\n            \n                \n                    Fecha de eliminación de la transferencia (si se elimina)\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Default value : uuid()\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({name: 'id', type: 'uuid', primary: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/data/persistence/entities/transfer.entitty.ts:29\n                        \n                    \n\n            \n                \n                    Identificador único de la transferencia\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        inCome\n                        \n                    \n                \n            \n                \n                    \n                        Type :         AccountEntity\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ManyToOne(undefined)@JoinColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/data/persistence/entities/transfer.entitty.ts:49\n                        \n                    \n\n            \n                \n                    Cuenta a donde llega el dinero\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        outCome\n                        \n                    \n                \n            \n                \n                    \n                        Type :         AccountEntity\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ManyToOne(undefined)@JoinColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/data/persistence/entities/transfer.entitty.ts:39\n                        \n                    \n\n            \n                \n                    Cuenta de donde sale el dinero\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        reason\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({name: 'reason', type: 'varchar', length: 100})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/data/persistence/entities/transfer.entitty.ts:74\n                        \n                    \n\n            \n                \n                    Motivo de la transferencia\n\n                \n            \n\n        \n    \n\n    \n\n\n    \n        import { Column, Entity, JoinColumn, ManyToOne } from 'typeorm';\nimport { v4 as uuid } from 'uuid';\nimport { TransferModel } from '../../models';\nimport { AccountEntity } from './';\n\n/**\n * Entidad para la transferencia de fondos entre cuentas\n *\n * @export\n * @class TransferEntity\n * @implements {TransferModel}\n */\n@Entity({\n  name: 'transfer',\n  schema: 'public',\n})\nexport class TransferEntity implements TransferModel {\n  /**\n   * Identificador único de la transferencia\n   *\n   * @type {string}\n   * @memberof TransferEntity\n   */\n  @Column({\n    name: 'id',\n    type: 'uuid',\n    primary: true,\n  })\n  id = uuid();\n\n  /**\n   * Cuenta de donde sale el dinero\n   *\n   * @type {AccountEntity}\n   * @memberof TransferEntity\n   */\n  @ManyToOne(() => AccountEntity)\n  @JoinColumn()\n  outCome: AccountEntity;\n\n  /**\n   * Cuenta a donde llega el dinero\n   *\n   * @type {AccountEntity}\n   * @memberof TransferEntity\n   */\n  @ManyToOne(() => AccountEntity)\n  @JoinColumn()\n  inCome: AccountEntity;\n\n  /**\n   * Monto de la transferencia\n   *\n   * @type {number}\n   * @memberof TransferEntity\n   */\n  @Column({\n    name: 'amount',\n    type: 'numeric',\n  })\n  amount = 0;\n\n  /**\n   * Motivo de la transferencia\n   *\n   * @type {string}\n   * @memberof TransferEntity\n   */\n  @Column({\n    name: 'reason',\n    type: 'varchar',\n    length: 100,\n  })\n  reason: string;\n\n  /**\n   * Fecha y hora de la transferencia\n   *\n   * @type {(number | Date)}\n   * @memberof TransferEntity\n   */\n  @Column({\n    name: 'date_time',\n    type: 'numeric',\n  })\n  dateTime: number | Date;\n\n  /**\n   * Fecha de eliminación de la transferencia (si se elimina)\n   *\n   * @type {(number | Date)}\n   * @memberof TransferEntity\n   */\n  @Column({\n    name: 'deleted_at',\n    type: 'timestamp',\n    nullable: true,\n    select: false,\n  })\n  deletedAt?: number | Date;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/TransferModel.html":{"url":"interfaces/TransferModel.html","title":"interface - TransferModel","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  TransferModel\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/data/models/transfer.model.ts\n        \n\n\n            \n                Description\n            \n            \n                Interfaz que define la estructura de datos para el modelo de transferencia.\nEsta interfaz representa los campos y tipos de datos asociados con una transferencia de fondos entre cuentas.\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            amount\n                                        \n                                \n                                \n                                        \n                                            dateTime\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            deletedAt\n                                        \n                                \n                                \n                                        \n                                            id\n                                        \n                                \n                                \n                                        \n                                            inCome\n                                        \n                                \n                                \n                                        \n                                            outCome\n                                        \n                                \n                                \n                                        \n                                            reason\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        amount\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        amount:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Monto de la transferencia\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        dateTime\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        dateTime:     Date | number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     Date | number\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Fecha y hora de la transferencia\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        deletedAt\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        deletedAt:     Date | number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     Date | number\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Fecha y hora en la que la transferencia fue eliminada (opcional)\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        id\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        id:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Identificador único de la transferencia\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        inCome\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        inCome:         AccountModel\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         AccountModel\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Cuenta de entrada de la transferencia\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        outCome\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        outCome:         AccountModel\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         AccountModel\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Cuenta de salida de la transferencia\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        reason\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        reason:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Razón o motivo de la transferencia\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import { AccountModel } from '.';\n\n/**\n * Interfaz que define la estructura de datos para el modelo de transferencia.\n * \n * @remarks\n * Esta interfaz representa los campos y tipos de datos asociados con una transferencia de fondos entre cuentas.\n * \n * @export\n * @interface TransferModel\n */\nexport interface TransferModel {\n  /** Identificador único de la transferencia */\n  id: string;\n\n  /** Cuenta de salida de la transferencia */\n  outCome: AccountModel;\n\n  /** Cuenta de entrada de la transferencia */\n  inCome: AccountModel;\n\n  /** Monto de la transferencia */\n  amount: number;\n\n  /** Razón o motivo de la transferencia */\n  reason: string;\n\n  /** Fecha y hora de la transferencia */\n  dateTime: Date | number;\n\n  /** Fecha y hora en la que la transferencia fue eliminada (opcional) */\n  deletedAt?: Date | number;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/TransferRepository.html":{"url":"injectables/TransferRepository.html","title":"injectable - TransferRepository","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  TransferRepository\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/data/persistence/repositories/transfer.repository.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                delete\n                            \n                            \n                                findAll\n                            \n                            \n                                findByDataRange\n                            \n                            \n                                findIncomeByDataRange\n                            \n                            \n                                    Async\n                                findOneById\n                            \n                            \n                                findOutcomeByDataRange\n                            \n                            \n                                    Private\n                                hardDelete\n                            \n                            \n                                register\n                            \n                            \n                                    Private\n                                    Async\n                                softDelete\n                            \n                            \n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(transferRepository: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/data/persistence/repositories/transfer.repository.ts:8\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        transferRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        delete\n                        \n                    \n                \n            \n            \n                \ndelete(id: string, soft?: boolean)\n                \n            \n\n\n                    \n                        \n                            Defined in src/data/persistence/repositories/transfer.repository.ts:46\n                        \n                    \n\n\n            \n                \n                        Elimina una transferencia de la base de datos.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    El ID de la transferencia a eliminar.\n\n                                            \n                                        \n                                        \n                                                soft\n                                            \n                                                            boolean\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                            \n                                                    Opcional. Indica si se debe realizar un borrado suave o no. Por defecto es true.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findAll\n                        \n                    \n                \n            \n            \n                \nfindAll()\n                \n            \n\n\n                    \n                        \n                            Defined in src/data/persistence/repositories/transfer.repository.ts:89\n                        \n                    \n\n\n            \n                \n                        Encuentra todas las transferencias en la base de datos.\n\n\n                        \n                            Returns :         Promise\n\n                        \n                            \n                                Una promesa que resuelve en un arreglo de todas las transferencias.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findByDataRange\n                        \n                    \n                \n            \n            \n                \nfindByDataRange(dateInit: Date | number, dateEnd: Date | number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/data/persistence/repositories/transfer.repository.ts:161\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                dateInit\n                                            \n                                                        Date | number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                dateEnd\n                                            \n                                                        Date | number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findIncomeByDataRange\n                        \n                    \n                \n            \n            \n                \nfindIncomeByDataRange(accountId: string, dateInit: Date | number, dateEnd: Date | number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/data/persistence/repositories/transfer.repository.ts:147\n                        \n                    \n\n\n            \n                \n                        Encuentra las transferencias de entrada por rango de fechas y cuenta en la base de datos.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                accountId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    El ID de la cuenta de entrada.\n\n                                            \n                                        \n                                        \n                                                dateInit\n                                            \n                                                        Date | number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    La fecha de inicio del rango.\n\n                                            \n                                        \n                                        \n                                                dateEnd\n                                            \n                                                        Date | number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    La fecha de fin del rango.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                Una promesa que resuelve en un arreglo de transferencias de entrada.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        findOneById\n                        \n                    \n                \n            \n            \n                \n                        \n                    findOneById(id: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/data/persistence/repositories/transfer.repository.ts:102\n                        \n                    \n\n\n            \n                \n                        Encuentra una transferencia por su ID en la base de datos.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    El ID de la transferencia a encontrar.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                Una promesa que resuelve en la transferencia encontrada.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findOutcomeByDataRange\n                        \n                    \n                \n            \n            \n                \nfindOutcomeByDataRange(accountId: string, dateInit: Date | number, dateEnd: Date | number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/data/persistence/repositories/transfer.repository.ts:126\n                        \n                    \n\n\n            \n                \n                        Encuentra las transferencias de salida por rango de fechas y cuenta en la base de datos.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                accountId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    El ID de la cuenta de salida.\n\n                                            \n                                        \n                                        \n                                                dateInit\n                                            \n                                                        Date | number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    La fecha de inicio del rango.\n\n                                            \n                                        \n                                        \n                                                dateEnd\n                                            \n                                                        Date | number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    La fecha de fin del rango.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                Una promesa que resuelve en un arreglo de transferencias de salida.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        hardDelete\n                        \n                    \n                \n            \n            \n                \n                        \n                    hardDelete(id: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/data/persistence/repositories/transfer.repository.ts:55\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        register\n                        \n                    \n                \n            \n            \n                \nregister(entity: TransferEntity)\n                \n            \n\n\n                    \n                        \n                            Defined in src/data/persistence/repositories/transfer.repository.ts:19\n                        \n                    \n\n\n            \n                \n                        Registra una nueva transferencia en la base de datos.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                entity\n                                            \n                                                            TransferEntity\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Los datos de la transferencia a registrar.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                Una promesa que resuelve en la transferencia registrada.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Async\n                        softDelete\n                        \n                    \n                \n            \n            \n                \n                        \n                    softDelete(id: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/data/persistence/repositories/transfer.repository.ts:61\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        update\n                        \n                    \n                \n            \n            \n                \nupdate(id: string, entity: TransferEntity)\n                \n            \n\n\n                    \n                        \n                            Defined in src/data/persistence/repositories/transfer.repository.ts:30\n                        \n                    \n\n\n            \n                \n                        Actualiza una transferencia existente en la base de datos.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    El ID de la transferencia a actualizar.\n\n                                            \n                                        \n                                        \n                                                entity\n                                            \n                                                            TransferEntity\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Los nuevos datos de la transferencia.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                Una promesa que resuelve en la transferencia actualizada.\n\n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, NotFoundException } from '@nestjs/common';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { Between, Repository } from 'typeorm';\nimport { TransferEntity } from '../entities';\nimport { TransferRepositoryInterface } from './interfaces';\n\n@Injectable()\nexport class TransferRepository implements TransferRepositoryInterface {\n  constructor(\n    @InjectRepository(TransferEntity)\n    private readonly transferRepository: Repository,\n  ) {}\n\n  /**\n   * Registra una nueva transferencia en la base de datos.\n   * @param entity Los datos de la transferencia a registrar.\n   * @returns Una promesa que resuelve en la transferencia registrada.\n   */\n  register(entity: TransferEntity): Promise {\n    return this.transferRepository.save(entity);\n  }\n\n  /**\n   * Actualiza una transferencia existente en la base de datos.\n   * @param id El ID de la transferencia a actualizar.\n   * @param entity Los nuevos datos de la transferencia.\n   * @returns Una promesa que resuelve en la transferencia actualizada.\n   * @throws `NotFoundException` si la transferencia no existe.\n   */\n  update(id: string, entity: TransferEntity): Promise {\n    return this.transferRepository.update(id, entity).then((result) => {\n      if (result.affected === 0) {\n        throw new NotFoundException(\n          `El ID ${id} no existe en la base de datos`,\n        );\n      }\n      return entity;\n    });\n  }\n\n  /**\n   * Elimina una transferencia de la base de datos.\n   * @param id El ID de la transferencia a eliminar.\n   * @param soft Opcional. Indica si se debe realizar un borrado suave o no. Por defecto es `true`.\n   */\n  delete(id: string, soft?: boolean) {\n    this.findOneById(id);\n    if (soft || soft === undefined) {\n      this.softDelete(id);\n    } else {\n      this.hardDelete(id);\n    }\n  }\n\n  private hardDelete(id: string) {\n    this.transferRepository.delete({\n      id,\n    });\n  }\n\n  private async softDelete(id: string) {\n    let newTransfer = new TransferEntity();\n    const transfer = await this.transferRepository\n      .findOne({\n        where: { id },\n      })\n      .then((result) => {\n        if (result) {\n          return result;\n        } else {\n          throw new NotFoundException(\n            `El ID ${id} no existe en la base de datos`,\n          );\n        }\n      });\n    newTransfer = {\n      ...newTransfer,\n      ...transfer,\n      id: transfer.id,\n    };\n    newTransfer.deletedAt = Date.now();\n    this.update(transfer.id, newTransfer);\n  }\n\n  /**\n   * Encuentra todas las transferencias en la base de datos.\n   * @returns Una promesa que resuelve en un arreglo de todas las transferencias.\n   */\n  findAll(): Promise {\n    return this.transferRepository.find({\n      where: { deletedAt: undefined },\n      relations: ['inCome', 'outCome'],\n    });\n  }\n\n  /**\n   * Encuentra una transferencia por su ID en la base de datos.\n   * @param id El ID de la transferencia a encontrar.\n   * @returns Una promesa que resuelve en la transferencia encontrada.\n   * @throws `NotFoundException` si la transferencia no existe.\n   */\n  async findOneById(id: string): Promise {\n    return this.transferRepository\n      .findOne({\n        where: { id, deletedAt: undefined },\n        relations: ['inCome', 'outCome'],\n      })\n      .then((result) => {\n        if (result) {\n          return result;\n        } else {\n          throw new NotFoundException(\n            `El ID ${id} no existe en la base de datos`,\n          );\n        }\n      });\n  }\n\n  /**\n   * Encuentra las transferencias de salida por rango de fechas y cuenta en la base de datos.\n   * @param accountId El ID de la cuenta de salida.\n   * @param dateInit La fecha de inicio del rango.\n   * @param dateEnd La fecha de fin del rango.\n   * @returns Una promesa que resuelve en un arreglo de transferencias de salida.\n   */\n  findOutcomeByDataRange(\n    accountId: string,\n    dateInit: Date | number,\n    dateEnd: Date | number,\n  ): Promise {\n    return this.transferRepository.find({\n      where: {\n        dateTime: Between(dateInit, dateEnd),\n        outCome: { id: accountId },\n      },\n      relations: ['inCome', 'outCome'],\n    });\n  }\n\n  /**\n   * Encuentra las transferencias de entrada por rango de fechas y cuenta en la base de datos.\n   * @param accountId El ID de la cuenta de entrada.\n   * @param dateInit La fecha de inicio del rango.\n   * @param dateEnd La fecha de fin del rango.\n   * @returns Una promesa que resuelve en un arreglo de transferencias de entrada.\n   */\n  findIncomeByDataRange(\n    accountId: string,\n    dateInit: Date | number,\n    dateEnd: Date | number,\n  ): Promise {\n    return this.transferRepository.find({\n      where: {\n        dateTime: Between(dateInit, dateEnd),\n        inCome: { id: accountId },\n      },\n      relations: ['inCome', 'outCome'],\n    });\n  }\n\n  findByDataRange(\n    dateInit: Date | number,\n    dateEnd: Date | number,\n  ): Promise {\n    return this.transferRepository.find({\n      where: {\n        dateTime: Between(dateInit, dateEnd),\n      },\n      relations: ['inCome', 'outCome'],\n    });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/TransferRepositoryInterface.html":{"url":"interfaces/TransferRepositoryInterface.html","title":"interface - TransferRepositoryInterface","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  TransferRepositoryInterface\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/data/persistence/repositories/interfaces/transfer-repository.interface.ts\n        \n\n\n            \n                Description\n            \n            \n                Interfaz para el repositorio de transferencias.\nExtiende la interfaz base de repositorio y define métodos adicionales específicos para las transferencias.\n\n            \n\n            \n                Extends\n            \n            \n                            BaseRepositoryInterface\n            \n\n        \n            Index\n            \n                \n                    \n                        \n                            Methods\n                        \n                    \n                    \n                        \n                            \n                                \n                                    \n                                        findAll\n                                    \n                                \n                                \n                                    \n                                        findIncomeByDataRange\n                                    \n                                \n                                \n                                    \n                                        findOneById\n                                    \n                                \n                                \n                                    \n                                        findOutcomeByDataRange\n                                    \n                                \n                            \n                        \n                    \n                \n            \n        \n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        findAll\n                        \n                    \n                \n            \n            \n                \nfindAll()\n                \n            \n\n\n                    \n                        \n                            Defined in src/data/persistence/repositories/interfaces/transfer-repository.interface.ts:20\n                        \n                    \n\n\n            \n                \n                        Encuentra todas las transferencias.\n\n\n                        \n                            Returns :         Promise\n\n                        \n                            \n                                Promesa que resuelve con un arreglo de todas las transferencias\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findIncomeByDataRange\n                        \n                    \n                \n            \n            \n                \nfindIncomeByDataRange(accountId: string, dateInit: Date | number, dateEnd: Date | number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/data/persistence/repositories/interfaces/transfer-repository.interface.ts:55\n                        \n                    \n\n\n            \n                \n                        Encuentra las transferencias de entrada para una cuenta dentro de un rango de fechas.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                accountId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    ID de la cuenta\n\n                                            \n                                        \n                                        \n                                                dateInit\n                                            \n                                                        Date | number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Fecha inicial del rango\n\n                                            \n                                        \n                                        \n                                                dateEnd\n                                            \n                                                        Date | number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Fecha final del rango\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                Promesa que resuelve con un arreglo de transferencias de entrada dentro del rango de fechas especificado\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findOneById\n                        \n                    \n                \n            \n            \n                \nfindOneById(id: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/data/persistence/repositories/interfaces/transfer-repository.interface.ts:29\n                        \n                    \n\n\n            \n                \n                        Encuentra una transferencia por su ID.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    ID de la transferencia a buscar\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                Promesa que resuelve con la transferencia encontrada\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findOutcomeByDataRange\n                        \n                    \n                \n            \n            \n                \nfindOutcomeByDataRange(accountId: string, dateInit: Date | number, dateEnd: Date | number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/data/persistence/repositories/interfaces/transfer-repository.interface.ts:40\n                        \n                    \n\n\n            \n                \n                        Encuentra las transferencias de salida para una cuenta dentro de un rango de fechas.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                accountId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    ID de la cuenta\n\n                                            \n                                        \n                                        \n                                                dateInit\n                                            \n                                                        Date | number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Fecha inicial del rango\n\n                                            \n                                        \n                                        \n                                                dateEnd\n                                            \n                                                        Date | number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Fecha final del rango\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                Promesa que resuelve con un arreglo de transferencias de salida dentro del rango de fechas especificado\n\n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { TransferEntity } from '../../entities';\nimport { BaseRepositoryInterface } from './base/';\n\n/**\n * Interfaz para el repositorio de transferencias.\n *\n * Extiende la interfaz base de repositorio y define métodos adicionales específicos para las transferencias.\n *\n * @export\n * @interface TransferRepositoryInterface\n * @extends {BaseRepositoryInterface} Interfaz base de repositorio para transferencias\n */\nexport interface TransferRepositoryInterface extends BaseRepositoryInterface {\n  /**\n   * Encuentra todas las transferencias.\n   *\n   * @returns {Promise} Promesa que resuelve con un arreglo de todas las transferencias\n   * @memberof TransferRepositoryInterface\n   */\n  findAll(): Promise;\n\n  /**\n   * Encuentra una transferencia por su ID.\n   *\n   * @param {string} id ID de la transferencia a buscar\n   * @returns {Promise} Promesa que resuelve con la transferencia encontrada\n   * @memberof TransferRepositoryInterface\n   */\n  findOneById(id: string): Promise;\n\n  /**\n   * Encuentra las transferencias de salida para una cuenta dentro de un rango de fechas.\n   *\n   * @param {string} accountId ID de la cuenta\n   * @param {(Date | number)} dateInit Fecha inicial del rango\n   * @param {(Date | number)} dateEnd Fecha final del rango\n   * @returns {Promise} Promesa que resuelve con un arreglo de transferencias de salida dentro del rango de fechas especificado\n   * @memberof TransferRepositoryInterface\n   */\n  findOutcomeByDataRange(\n    accountId: string,\n    dateInit: Date | number,\n    dateEnd: Date | number,\n  ): Promise;\n\n  /**\n   * Encuentra las transferencias de entrada para una cuenta dentro de un rango de fechas.\n   *\n   * @param {string} accountId ID de la cuenta\n   * @param {(Date | number)} dateInit Fecha inicial del rango\n   * @param {(Date | number)} dateEnd Fecha final del rango\n   * @returns {Promise} Promesa que resuelve con un arreglo de transferencias de entrada dentro del rango de fechas especificado\n   * @memberof TransferRepositoryInterface\n   */\n  findIncomeByDataRange(\n    accountId: string,\n    dateInit: Date | number,\n    dateEnd: Date | number,\n  ): Promise;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/TransferService.html":{"url":"injectables/TransferService.html","title":"injectable - TransferService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  TransferService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/business/services/transfer/transfer.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                createTransfer\n                            \n                            \n                                deleteTransfer\n                            \n                            \n                                    Async\n                                getHistory\n                            \n                            \n                                    Async\n                                getHistoryIn\n                            \n                            \n                                    Async\n                                getHistoryOut\n                            \n                            \n                                    Async\n                                selectTransfer\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(transferRepository: TransferRepository, accountRepository: AccountRepository, depositRepository: DepositRepository)\n                    \n                \n                        \n                            \n                                Defined in src/business/services/transfer/transfer.service.ts:15\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        transferRepository\n                                                  \n                                                        \n                                                                        TransferRepository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        accountRepository\n                                                  \n                                                        \n                                                                        AccountRepository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        depositRepository\n                                                  \n                                                        \n                                                                        DepositRepository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        createTransfer\n                        \n                    \n                \n            \n            \n                \n                        \n                    createTransfer(transfer: TransferDTO)\n                \n            \n\n\n                    \n                        \n                            Defined in src/business/services/transfer/transfer.service.ts:28\n                        \n                    \n\n\n            \n                \n                        Crear una transferencia entre cuentas del banco\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                transfer\n                                            \n                                                            TransferDTO\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                {TransferEntity}\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        deleteTransfer\n                        \n                    \n                \n            \n            \n                \ndeleteTransfer(transferId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/business/services/transfer/transfer.service.ts:167\n                        \n                    \n\n\n            \n                \n                        Borrar una transacción\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                transferId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        getHistory\n                        \n                    \n                \n            \n            \n                \n                        \n                    getHistory(accountId: string, pagination: PaginationModel, dataRange?: DataRangeModel)\n                \n            \n\n\n                    \n                        \n                            Defined in src/business/services/transfer/transfer.service.ts:130\n                        \n                    \n\n\n            \n                \n                        Obtener historial de transacciones de una cuenta\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                accountId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                pagination\n                                            \n                                                            PaginationModel\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                dataRange\n                                            \n                                                            DataRangeModel\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                {TransferEntity[]}\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        getHistoryIn\n                        \n                    \n                \n            \n            \n                \n                        \n                    getHistoryIn(accountId: string, pagination: PaginationModel, dataRange?: DataRangeModel)\n                \n            \n\n\n                    \n                        \n                            Defined in src/business/services/transfer/transfer.service.ts:95\n                        \n                    \n\n\n            \n                \n                        Obtener historial de transacciones de entrada en una cuenta\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                accountId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                pagination\n                                            \n                                                            PaginationModel\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                dataRange\n                                            \n                                                            DataRangeModel\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                {TransferEntity[]}\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        getHistoryOut\n                        \n                    \n                \n            \n            \n                \n                        \n                    getHistoryOut(accountId: string, pagination: PaginationModel, dataRange?: DataRangeModel)\n                \n            \n\n\n                    \n                        \n                            Defined in src/business/services/transfer/transfer.service.ts:60\n                        \n                    \n\n\n            \n                \n                        Obtener historial de transacciones de salida de una cuenta\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                accountId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                pagination\n                                            \n                                                            PaginationModel\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                dataRange\n                                            \n                                                            DataRangeModel\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                {TransferEntity[]}\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        selectTransfer\n                        \n                    \n                \n            \n            \n                \n                        \n                    selectTransfer(transferId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/business/services/transfer/transfer.service.ts:171\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                transferId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, NotFoundException } from '@nestjs/common';\nimport { TransferDTO } from 'src/business/dtos';\nimport {\n  DataRangeModel,\n  PaginationModel,\n  TransferModel\n} from '../../../data/models';\nimport { TransferEntity } from '../../../data/persistence/entities';\nimport {\n  AccountRepository,\n  DepositRepository,\n  TransferRepository\n} from '../../../data/persistence/repositories';\n@Injectable()\nexport class TransferService {\n  constructor(\n    private readonly transferRepository: TransferRepository,\n    private readonly accountRepository: AccountRepository,\n    private readonly depositRepository: DepositRepository,\n  ) {}\n  /**\n   * Crear una transferencia entre cuentas del banco\n   *\n   * @param {TransferModel} transfer\n   * @return {*}  {TransferEntity}\n   * @memberof TransferService\n   */\n  async createTransfer(transfer: TransferDTO): Promise {\n    const newTransfer = new TransferEntity();\n    const inCome = await this.accountRepository.findOneById(transfer.inComeId);\n    const outCome = await this.accountRepository.findOneById(\n      transfer.outComeId,\n    );\n    if (outCome.balance > Number(transfer.amount)) {\n      newTransfer.inCome = inCome;\n      newTransfer.outCome = outCome;\n      newTransfer.amount = Number(transfer.amount);\n      newTransfer.reason = transfer.reason;\n      outCome.balance = Number(outCome.balance) - Number(transfer.amount);\n      this.accountRepository.update(outCome.id, outCome);\n      this.accountRepository.update(outCome.id, outCome);\n      inCome.balance = Number(inCome.balance) +Number(transfer.amount);\n      this.accountRepository.update(inCome.id, inCome);\n      newTransfer.dateTime = Date.now();\n      return this.transferRepository.register(newTransfer);\n    } else {\n      throw new NotFoundException(`fondos insuficientes`);\n    }\n  }\n\n  /**\n   * Obtener historial de transacciones de salida de una cuenta\n   *\n   * @param {string} accountId\n   * @param {PaginationModel} pagination\n   * @param {DataRangeModel} [dataRange]\n   * @return {*}  {TransferEntity[]}\n   * @memberof TransferService\n   */\n  async getHistoryOut(\n    accountId: string,\n    pagination: PaginationModel,\n    dataRange?: DataRangeModel,\n  ): Promise {\n    if (dataRange) {\n      const array = (\n        await this.transferRepository.findOutcomeByDataRange(\n          accountId,\n          dataRange.startDate ?? 0,\n          dataRange.endDate ?? Date.now(),\n        )\n      ).filter(\n        (item) =>\n          item.outCome.id === accountId &&\n          item.amount > (dataRange.startAmount ?? 0) &&\n          item.amount  {\n    if (dataRange) {\n      const array = (\n        await this.transferRepository.findIncomeByDataRange(\n          accountId,\n          dataRange.startDate ?? 0,\n          dataRange.endDate ?? Date.now(),\n        )\n      ).filter(\n        (item) =>\n          item.inCome.id === accountId &&\n          item.amount > (dataRange.startAmount ?? 0) &&\n          item.amount  {\n    if (dataRange) {\n      const newArray = this.transferRepository.findByDataRange(\n        dataRange.startDate ?? 0,\n        dataRange.endDate ?? Date.now(),\n      );\n      const array = (await newArray).filter(\n        (item) =>\n          (item.inCome.id === accountId || item.outCome.id === accountId) &&\n          (item.amount >= Number(dataRange.startAmount) ?? 0) &&\n          (item.amount  item.inCome.id === accountId || item.outCome.id === accountId,\n      )\n      .slice(start, end);\n    return array;\n  }\n\n  /**\n   * Borrar una transacción\n   *\n   * @param {string} transferId\n   * @memberof TransferService\n   */\n  deleteTransfer(transferId: string): void {\n    this.transferRepository.delete(transferId);\n  }\n\n  async selectTransfer(transferId: string): Promise {\n    return await this.transferRepository.findOneById(transferId);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/TypeOrmExceptionFilter.html":{"url":"classes/TypeOrmExceptionFilter.html","title":"class - TypeOrmExceptionFilter","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  TypeOrmExceptionFilter\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/data/persistence/utils/exception-filters/typeorm.exception-filters.ts\n        \n\n\n            \n                Description\n            \n            \n                Clase que representa un filtro de excepciones para errores de TypeORM.\n\n            \n\n\n            \n                Implements\n            \n            \n                        ExceptionFilter\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                catch\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        catch\n                        \n                    \n                \n            \n            \n                \ncatch(exception: TypeORMError, host: ArgumentsHost)\n                \n            \n\n\n                    \n                        \n                            Defined in src/data/persistence/utils/exception-filters/typeorm.exception-filters.ts:14\n                        \n                    \n\n\n            \n                \n                        Método para manejar la excepción de TypeORM.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                exception\n                                            \n                                                        TypeORMError\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    La excepción capturada.\n\n                                            \n                                        \n                                        \n                                                host\n                                            \n                                                        ArgumentsHost\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    El contexto de los argumentos de la solicitud.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { ArgumentsHost, Catch, ExceptionFilter } from '@nestjs/common';\nimport { TypeORMError } from 'typeorm';\n\n/**\n * Clase que representa un filtro de excepciones para errores de TypeORM.\n */\n@Catch(TypeORMError)\nexport class TypeOrmExceptionFilter implements ExceptionFilter {\n  /**\n   * Método para manejar la excepción de TypeORM.\n   * @param exception La excepción capturada.\n   * @param host El contexto de los argumentos de la solicitud.\n   */\n  catch(exception: TypeORMError, host: ArgumentsHost) {\n    const response = host.switchToHttp().getResponse();\n    const message = exception.message;\n    const code: number = (exception as any).code;\n    const aditional = (exception as any).detail;\n\n    // Crear una respuesta personalizada para el error de TypeORM.\n    const customResponse = {\n      status: 500,\n      message: 'Ocurrió un error',\n      type: 'Internal Server Error',\n      errors: [{ message: message, detail: aditional }],\n      errorCode: code,\n      timestamp: new Date().toISOString(),\n    };\n\n    // Enviar la respuesta personalizada al cliente.\n    response.status(customResponse.status).json(customResponse);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/TypesOrmPostgresConfigService.html":{"url":"injectables/TypesOrmPostgresConfigService.html","title":"injectable - TypesOrmPostgresConfigService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  TypesOrmPostgresConfigService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/data/persistence/configs/types-orm-postgres-config.service.ts\n        \n\n\n            \n                Description\n            \n            \n                Servicio para la configuración de opciones de TypeORM para PostgreSQL\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                createTypeOrmOptions\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(configService: ConfigService)\n                    \n                \n                        \n                            \n                                Defined in src/data/persistence/configs/types-orm-postgres-config.service.ts:21\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        createTypeOrmOptions\n                        \n                    \n                \n            \n            \n                \ncreateTypeOrmOptions()\n                \n            \n\n\n                    \n                        \n                            Defined in src/data/persistence/configs/types-orm-postgres-config.service.ts:30\n                        \n                    \n\n\n            \n                \n                        Método para crear las opciones de configuración de TypeORM para PostgreSQL\n\n\n                        \n                            Returns :     TypeOrmModuleOptions\n\n                        \n                            \n                                Opciones de configuración de TypeORM\n\n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { ConfigService } from '@nestjs/config';\nimport { TypeOrmModuleOptions, TypeOrmOptionsFactory } from '@nestjs/typeorm';\nimport {\n  AccountEntity,\n  AccountTypeEntity,\n  CustomerEntity,\n  DepositEntity,\n  DocumentTypeEntity,\n  TransferEntity,\n} from '../entities';\n\n/**\n * Servicio para la configuración de opciones de TypeORM para PostgreSQL\n *\n * @export\n * @class TypesOrmPostgresConfigService\n * @implements {TypeOrmOptionsFactory}\n */\n@Injectable()\nexport class TypesOrmPostgresConfigService implements TypeOrmOptionsFactory {\n  constructor(private readonly configService: ConfigService) {}\n\n  /**\n   * Método para crear las opciones de configuración de TypeORM para PostgreSQL\n   *\n   * @returns {TypeOrmModuleOptions} Opciones de configuración de TypeORM\n   * @memberof TypesOrmPostgresConfigService\n   */\n  createTypeOrmOptions(): TypeOrmModuleOptions {\n    return {\n      type: 'postgres',\n      host: this.configService.get('DB_HOST'),\n      port: this.configService.get('DB_PORT'),\n      username: this.configService.get('DB_USER'),\n      password: this.configService.get('DB_PASSWORD'),\n      database: this.configService.get('DB_NAME'),\n      entities: [\n        AccountTypeEntity,\n        AccountEntity,\n        CustomerEntity,\n        DepositEntity,\n        DocumentTypeEntity,\n        TransferEntity,\n      ],\n      synchronize: true,\n      // logging: true,\n    };\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/UserController.html":{"url":"controllers/UserController.html","title":"controller - UserController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  UserController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/presentation/controllers/user/user.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                user\n            \n\n\n            \n                Description\n            \n            \n                Controlador para gestionar usuarios.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    Async\n                                deleteUser\n                            \n                            \n                                    \n                                    Async\n                                findAllUsers\n                            \n                            \n                                    \n                                    Async\n                                findAllUsersDeleted\n                            \n                            \n                                    \n                                    Async\n                                findUser\n                            \n                            \n                                    \n                                    Async\n                                findUserByEmail\n                            \n                            \n                                    \n                                    Async\n                                registerUser\n                            \n                            \n                                    \n                                    Async\n                                unsuscribeUser\n                            \n                            \n                                    \n                                    Async\n                                updateUser\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        deleteUser\n                        \n                    \n                \n            \n            \n                \n                        \n                    deleteUser(id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete(':id')\n                \n            \n\n                    \n                        \n                            Defined in src/presentation/controllers/user/user.controller.ts:92\n                        \n                    \n\n\n            \n                \n                        Elimina un usuario.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    El ID del usuario.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                Una promesa que resuelve con un booleano indicando si la operación fue exitosa.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        findAllUsers\n                        \n                    \n                \n            \n            \n                \n                        \n                    findAllUsers()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()\n                \n            \n\n                    \n                        \n                            Defined in src/presentation/controllers/user/user.controller.ts:30\n                        \n                    \n\n\n            \n                \n                        Obtiene todos los usuarios.\n\n\n                        \n                            Returns :         Promise\n\n                        \n                            \n                                Una promesa que resuelve con una lista de entidades de clientes.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        findAllUsersDeleted\n                        \n                    \n                \n            \n            \n                \n                        \n                    findAllUsersDeleted()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('deleted')\n                \n            \n\n                    \n                        \n                            Defined in src/presentation/controllers/user/user.controller.ts:39\n                        \n                    \n\n\n            \n                \n                        Obtiene todos los usuarios eliminados.\n\n\n                        \n                            Returns :         Promise\n\n                        \n                            \n                                Una promesa que resuelve con una lista de entidades de clientes eliminados.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        findUser\n                        \n                    \n                \n            \n            \n                \n                        \n                    findUser(id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get(':id')\n                \n            \n\n                    \n                        \n                            Defined in src/presentation/controllers/user/user.controller.ts:49\n                        \n                    \n\n\n            \n                \n                        Obtiene un usuario por su ID.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    El ID del usuario.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                Una promesa que resuelve con la entidad del cliente.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        findUserByEmail\n                        \n                    \n                \n            \n            \n                \n                        \n                    findUserByEmail(email: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('email/:email')\n                \n            \n\n                    \n                        \n                            Defined in src/presentation/controllers/user/user.controller.ts:59\n                        \n                    \n\n\n            \n                \n                        Obtiene un usuario por su correo electrónico.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                email\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    El correo electrónico del usuario.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                Una promesa que resuelve con la entidad del cliente.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        registerUser\n                        \n                    \n                \n            \n            \n                \n                        \n                    registerUser(customer: CustomerDTO)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post()\n                \n            \n\n                    \n                        \n                            Defined in src/presentation/controllers/user/user.controller.ts:69\n                        \n                    \n\n\n            \n                \n                        Registra un nuevo usuario.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                customer\n                                            \n                                                            CustomerDTO\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Los datos del cliente.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                Una promesa que resuelve con las entidades del cliente y de la cuenta.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        unsuscribeUser\n                        \n                    \n                \n            \n            \n                \n                        \n                    unsuscribeUser(id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Put('unsuscribe/:id')\n                \n            \n\n                    \n                        \n                            Defined in src/presentation/controllers/user/user.controller.ts:102\n                        \n                    \n\n\n            \n                \n                        Desuscribe a un usuario.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    El ID del usuario.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                Una promesa que resuelve con un booleano indicando si la operación fue exitosa.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        updateUser\n                        \n                    \n                \n            \n            \n                \n                        \n                    updateUser(id: string, customer: CustomerUpdateDTO)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Put(':id')\n                \n            \n\n                    \n                        \n                            Defined in src/presentation/controllers/user/user.controller.ts:81\n                        \n                    \n\n\n            \n                \n                        Actualiza un usuario existente.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    El ID del usuario.\n\n                                            \n                                        \n                                        \n                                                customer\n                                            \n                                                            CustomerUpdateDTO\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Los datos actualizados del cliente.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                Una promesa que resuelve con la entidad actualizada del cliente.\n\n                            \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Body,\n  Controller,\n  Delete,\n  Get,\n  Param,\n  Post,\n  Put,\n  UseGuards,\n} from '@nestjs/common';\nimport { CustomerUpdateDTO } from 'src/business/dtos/update-customer.dto';\nimport { GuardsGuard } from 'src/presentation/guards/guards.guard';\nimport { CustomerDTO } from '../../../business/dtos';\nimport { CustomerService } from '../../../business/services/customer/customer.service';\nimport { AccountEntity } from '../../../data/persistence/entities/account.entity';\nimport { CustomerEntity } from '../../../data/persistence/entities/customer.entity';\n\n/**\n * Controlador para gestionar usuarios.\n */\n@Controller('user')\nexport class UserController {\n  constructor(private readonly customerService: CustomerService) {}\n\n  /**\n   * Obtiene todos los usuarios.\n   * @returns Una promesa que resuelve con una lista de entidades de clientes.\n   */\n  @Get()\n  async findAllUsers(): Promise {\n    return this.customerService.findAll();\n  }\n\n  /**\n   * Obtiene todos los usuarios eliminados.\n   * @returns Una promesa que resuelve con una lista de entidades de clientes eliminados.\n   */\n  @Get('deleted')\n  async findAllUsersDeleted(): Promise {\n    return this.customerService.findAllDeleted();\n  }\n\n  /**\n   * Obtiene un usuario por su ID.\n   * @param id El ID del usuario.\n   * @returns Una promesa que resuelve con la entidad del cliente.\n   */\n  @Get(':id')\n  async findUser(@Param('id') id: string): Promise {\n    return this.customerService.getCustomerInfo(id);\n  }\n\n  /**\n   * Obtiene un usuario por su correo electrónico.\n   * @param email El correo electrónico del usuario.\n   * @returns Una promesa que resuelve con la entidad del cliente.\n   */\n  @Get('email/:email')\n  async findUserByEmail(@Param('email') email: string): Promise {\n    return this.customerService.getCustomerInfoByEmail(email);\n  }\n\n  /**\n   * Registra un nuevo usuario.\n   * @param customer Los datos del cliente.\n   * @returns Una promesa que resuelve con las entidades del cliente y de la cuenta.\n   */\n  @Post()\n  async registerUser(@Body() customer: CustomerDTO): Promise {\n    return this.customerService.newCustomer(customer);\n  }\n\n  /**\n   * Actualiza un usuario existente.\n   * @param id El ID del usuario.\n   * @param customer Los datos actualizados del cliente.\n   * @returns Una promesa que resuelve con la entidad actualizada del cliente.\n   */\n  @Put(':id')\n  // @UseGuards(GuardsGuard)\n  async updateUser(@Param('id') id: string, @Body() customer: CustomerUpdateDTO): Promise {\n    return this.customerService.updatedCustomer(id, customer);\n  }\n\n  /**\n   * Elimina un usuario.\n   * @param id El ID del usuario.\n   * @returns Una promesa que resuelve con un booleano indicando si la operación fue exitosa.\n   */\n  @Delete(':id')\n  // @UseGuards(GuardsGuard)\n  async deleteUser(@Param('id') id: string): Promise {\n    return this.customerService.deleteCustomer(id);\n  }\n\n  /**\n   * Desuscribe a un usuario.\n   * @param id El ID del usuario.\n   * @returns Una promesa que resuelve con un booleano indicando si la operación fue exitosa.\n   */\n  @Put('unsuscribe/:id')\n  async unsuscribeUser(@Param('id') id: string): Promise {\n    return this.customerService.unsuscribe(id);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                src/business/dtos/account.dto.ts\n            \n            class\n            AccountDTO\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                src/business/dtos/customer.dto.ts\n            \n            class\n            CustomerDTO\n            \n                100 %\n                (7/7)\n            \n        \n        \n            \n                \n                src/business/dtos/data-range.dto.ts\n            \n            class\n            DataRangeDTO\n            \n                100 %\n                (5/5)\n            \n        \n        \n            \n                \n                src/business/dtos/deposit.dto.ts\n            \n            class\n            DepositDTO\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                src/business/dtos/pagination.dto.ts\n            \n            class\n            PaginationDTO\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                src/business/dtos/sign.dto.ts\n            \n            class\n            SignDTO\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                src/business/dtos/transfer.dto.ts\n            \n            class\n            TransferDTO\n            \n                100 %\n                (5/5)\n            \n        \n        \n            \n                \n                src/business/dtos/update-customer.dto.ts\n            \n            class\n            CustomerUpdateDTO\n            \n                100 %\n                (5/5)\n            \n        \n        \n            \n                \n                src/business/services/account/account.service.ts\n            \n            injectable\n            AccountService\n            \n                66 %\n                (10/15)\n            \n        \n        \n            \n                \n                src/business/services/customer/customer.service.ts\n            \n            injectable\n            CustomerService\n            \n                81 %\n                (9/11)\n            \n        \n        \n            \n                \n                src/business/services/deposit/deposit.service.ts\n            \n            injectable\n            DepositService\n            \n                60 %\n                (3/5)\n            \n        \n        \n            \n                \n                src/business/services/security/secret.ts\n            \n            variable\n            jwtConstants\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/business/services/security/security.service.ts\n            \n            injectable\n            SecurityService\n            \n                60 %\n                (3/5)\n            \n        \n        \n            \n                \n                src/business/services/transfer/transfer.service.ts\n            \n            injectable\n            TransferService\n            \n                62 %\n                (5/8)\n            \n        \n        \n            \n                \n                src/common/decorators/decorators.decorator.ts\n            \n            variable\n            Decorators\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/common/exception-filters/exception-filters.filter.ts\n            \n            class\n            ExceptionFiltersFilter\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                src/data/models/account-type.mode.ts\n            \n            interface\n            AccountTypeModel\n            \n                100 %\n                (4/4)\n            \n        \n        \n            \n                \n                src/data/models/account.model.ts\n            \n            interface\n            AccountModel\n            \n                100 %\n                (7/7)\n            \n        \n        \n            \n                \n                src/data/models/customer.model.ts\n            \n            interface\n            CustomerModel\n            \n                100 %\n                (11/11)\n            \n        \n        \n            \n                \n                src/data/models/data-range.model.ts\n            \n            interface\n            DataRangeModel\n            \n                100 %\n                (5/5)\n            \n        \n        \n            \n                \n                src/data/models/deposit.model.ts\n            \n            interface\n            DepositModel\n            \n                100 %\n                (6/6)\n            \n        \n        \n            \n                \n                src/data/models/document-type.model.ts\n            \n            interface\n            DocumentTypeModel\n            \n                100 %\n                (4/4)\n            \n        \n        \n            \n                \n                src/data/models/pagination.model.ts\n            \n            interface\n            PaginationModel\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                src/data/models/transfer.model.ts\n            \n            interface\n            TransferModel\n            \n                100 %\n                (8/8)\n            \n        \n        \n            \n                \n                src/data/persistence/configs/types-orm-postgres-config.service.ts\n            \n            injectable\n            TypesOrmPostgresConfigService\n            \n                66 %\n                (2/3)\n            \n        \n        \n            \n                \n                src/data/persistence/entities/account-type.entity.ts\n            \n            entity\n            AccountTypeEntity\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/data/persistence/entities/account.entity.ts\n            \n            entity\n            AccountEntity\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/data/persistence/entities/account.entity.ts\n            \n            function\n            generateID\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/data/persistence/entities/customer.entity.ts\n            \n            entity\n            CustomerEntity\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/data/persistence/entities/deposit.entity.ts\n            \n            entity\n            DepositEntity\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/data/persistence/entities/document-type.entity.ts\n            \n            entity\n            DocumentTypeEntity\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/data/persistence/entities/transfer.entitty.ts\n            \n            entity\n            TransferEntity\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/data/persistence/repositories/account-type.repository.ts\n            \n            injectable\n            AccountTypeRepository\n            \n                88 %\n                (8/9)\n            \n        \n        \n            \n                \n                src/data/persistence/repositories/account.repository.ts\n            \n            injectable\n            AccountRepository\n            \n                75 %\n                (9/12)\n            \n        \n        \n            \n                \n                src/data/persistence/repositories/customer.repository.ts\n            \n            injectable\n            CustomerRepository\n            \n                88 %\n                (15/17)\n            \n        \n        \n            \n                \n                src/data/persistence/repositories/deposit.repository.ts\n            \n            injectable\n            DepositRepository\n            \n                63 %\n                (7/11)\n            \n        \n        \n            \n                \n                src/data/persistence/repositories/document-type.repository.ts\n            \n            injectable\n            DocumentTypeRepository\n            \n                77 %\n                (7/9)\n            \n        \n        \n            \n                \n                src/data/persistence/repositories/interfaces/account-repository.interface.ts\n            \n            interface\n            AccountRepositoryInterface\n            \n                100 %\n                (4/4)\n            \n        \n        \n            \n                \n                src/data/persistence/repositories/interfaces/account-type-repository.interface.ts\n            \n            interface\n            AccountTypeRepositoryInterface\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                src/data/persistence/repositories/interfaces/base/base-repositories.interface.ts\n            \n            interface\n            BaseRepositoryInterface\n            \n                100 %\n                (6/6)\n            \n        \n        \n            \n                \n                src/data/persistence/repositories/interfaces/customer-repository.interface.ts\n            \n            interface\n            CustomerRepositoryInterface\n            \n                100 %\n                (7/7)\n            \n        \n        \n            \n                \n                src/data/persistence/repositories/interfaces/deposit-repository.interface.ts\n            \n            interface\n            DepositRepositoryInterface\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                src/data/persistence/repositories/interfaces/document-type-repository.interface.ts\n            \n            interface\n            DocumentTypeRepositoryInterface\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                src/data/persistence/repositories/interfaces/transfer-repository.interface.ts\n            \n            interface\n            TransferRepositoryInterface\n            \n                100 %\n                (5/5)\n            \n        \n        \n            \n                \n                src/data/persistence/repositories/transfer.repository.ts\n            \n            injectable\n            TransferRepository\n            \n                58 %\n                (7/12)\n            \n        \n        \n            \n                \n                src/data/persistence/utils/exception-filters/typeorm.exception-filters.ts\n            \n            class\n            TypeOrmExceptionFilter\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                src/main.ts\n            \n            function\n            bootstrap\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/presentation/controllers/account/account.controller.ts\n            \n            controller\n            AccountController\n            \n                100 %\n                (13/13)\n            \n        \n        \n            \n                \n                src/presentation/controllers/deposit/deposit.controller.ts\n            \n            controller\n            DepositController\n            \n                100 %\n                (4/4)\n            \n        \n        \n            \n                \n                src/presentation/controllers/security/security.controller.ts\n            \n            controller\n            SecurityController\n            \n                100 %\n                (4/4)\n            \n        \n        \n            \n                \n                src/presentation/controllers/transfer/transfer.controller.ts\n            \n            controller\n            TransferController\n            \n                100 %\n                (7/7)\n            \n        \n        \n            \n                \n                src/presentation/controllers/user/user.controller.ts\n            \n            controller\n            UserController\n            \n                100 %\n                (9/9)\n            \n        \n        \n            \n                \n                src/presentation/guards/guards.guard.ts\n            \n            guard\n            GuardsGuard\n            \n                66 %\n                (2/3)\n            \n        \n        \n            \n                \n                src/presentation/interceptors/interceptors.interceptor.ts\n            \n            injectable\n            InterceptorsInterceptor\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                src/presentation/middlewares/middlewares.middleware.ts\n            \n            injectable\n            MiddlewaresMiddleware\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                src/presentation/pipes/pipes.pipe.ts\n            \n            injectable\n            PipesPipe\n            \n                100 %\n                (2/2)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            @nestjs/common : ^10.3.8\n        \n            @nestjs/config : ^3.2.2\n        \n            @nestjs/core : ^10.3.8\n        \n            @nestjs/jwt : ^10.2.0\n        \n            @nestjs/platform-express : ^10.3.8\n        \n            @nestjs/typeorm : ^10.0.2\n        \n            class-transformer : ^0.5.1\n        \n            class-validator : ^0.14.1\n        \n            passport-jwt : ^4.0.1\n        \n            pg : ^8.11.5\n        \n            reflect-metadata : ^0.2.2\n        \n            rxjs : ^7.8.1\n        \n            typeorm : ^0.3.20\n    \n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/functions.html":{"url":"miscellaneous/functions.html","title":"miscellaneous-functions - functions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Functions\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            bootstrap   (src/.../main.ts)\n                        \n                        \n                            generateID   (src/.../account.entity.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/main.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        bootstrap\n                        \n                    \n                \n            \n            \n                \nbootstrap()\n                \n            \n\n\n\n\n            \n                \n                        Función de inicio de la aplicación.\n\n\n                \n            \n        \n    \n    src/data/persistence/entities/account.entity.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        generateID\n                        \n                    \n                \n            \n            \n                \ngenerateID()\n                \n            \n\n\n\n\n            \n                \n                        Genera un identificador único para la cuenta\n\n\n                        \n                            Returns :         string\n\n                        \n                            \n                                ID generado\n\n                            \n                \n            \n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\n\n  \n\n\n  A progressive Node.js framework for building efficient and scalable server-side applications.\n    \n\n\n\n\n\n\n\n\n  \n    \n  \n\n  \n\nDescription\nNest framework TypeScript starter repository.\nInstallation\nExample :$ npm installRunning the app\nExample :# development\n$ npm run start\n\n# watch mode\n$ npm run start:dev\n\n# production mode\n$ npm run start:prodHow to deliver the workshop\nExample :# Title of the delivery\n[Workshop Week 1 - Day 1] - Nest (Estructura de proyecto)\n\n# Body of the delivery\n[Any short description]Workshop\nThe following are the guidelines that should be taken into account for the development of the workshop to be submitted:\n\nIdentify missing folders.\nCreate missing folders.\nCreate files corresponding to each folder.\n\nTo identify the missing folders, you can use the documentation in the following link:\nNest documentation.\nPlease use the information from the following link to create the corresponding files in each folder using the Nest CLI.\nImportant note\nDo not forget that for this workshop, you should make at least 2 commits properly documented (title and message body).\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n            \n                \n                    \n                        AppModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n  \n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AppModule\n\n\n\ncluster_AppModule_providers\n\n\n\n\nAccountRepository\n\nAccountRepository\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAccountRepository->AppModule\n\n\n\n\n\nAccountService\n\nAccountService\n\nAppModule -->\n\nAccountService->AppModule\n\n\n\n\n\nAccountTypeRepository\n\nAccountTypeRepository\n\nAppModule -->\n\nAccountTypeRepository->AppModule\n\n\n\n\n\nCustomerRepository\n\nCustomerRepository\n\nAppModule -->\n\nCustomerRepository->AppModule\n\n\n\n\n\nCustomerService\n\nCustomerService\n\nAppModule -->\n\nCustomerService->AppModule\n\n\n\n\n\nDepositRepository\n\nDepositRepository\n\nAppModule -->\n\nDepositRepository->AppModule\n\n\n\n\n\nDepositService\n\nDepositService\n\nAppModule -->\n\nDepositService->AppModule\n\n\n\n\n\nDocumentTypeRepository\n\nDocumentTypeRepository\n\nAppModule -->\n\nDocumentTypeRepository->AppModule\n\n\n\n\n\nSecurityService\n\nSecurityService\n\nAppModule -->\n\nSecurityService->AppModule\n\n\n\n\n\nTransferRepository\n\nTransferRepository\n\nAppModule -->\n\nTransferRepository->AppModule\n\n\n\n\n\nTransferService\n\nTransferService\n\nAppModule -->\n\nTransferService->AppModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n  \n\n    \n        \n            \n                \n                    \n                    \n                        1 Module\n                    \n                \n            \n        \n        \n            \n                \n                    \n                    5 Controllers\n                \n            \n        \n        \n            \n                \n                    \n                    6 Entities\n                \n            \n        \n        \n            \n                \n                    \n                    15 Injectables\n                \n            \n        \n        \n            \n                \n                    \n                    10 Classes\n                \n            \n        \n        \n            \n                \n                    \n                    1 Guard\n                \n            \n        \n        \n            \n                \n                    \n                    15 Interfaces\n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"properties.html":{"url":"properties.html","title":"package-properties - properties","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Properties\n    \n    \n        \n            Version : 0.0.1\n        \n            Description : \n        \n            License : UNLICENSED\n        \n            Author : \n    \n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/variables.html":{"url":"miscellaneous/variables.html","title":"miscellaneous-variables - variables","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Variables\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            Decorators   (src/.../decorators.decorator.ts)\n                        \n                        \n                            jwtConstants   (src/.../secret.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/common/decorators/decorators.decorator.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        Decorators\n                        \n                    \n                \n            \n                \n                    \n                        Default value : (...args: string[]) =>\n  SetMetadata('decorators', args)\n                    \n                \n\n            \n                \n                    Decorador para agregar metadatos a un controlador o método\n\n                \n            \n\n        \n    \n\n    src/business/services/security/secret.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        jwtConstants\n                        \n                    \n                \n            \n                \n                    \n                        Type :         object\n\n                    \n                \n                \n                    \n                        Default value : {\n  // La propiedad secret se asigna al valor de la variable de entorno JWT_SECRET si está definida;\n  // de lo contrario, se usa 'secretKey' como valor predeterminado.\n  secret: process.env.JWT_SECRET ?? 'secretKey',\n}\n                    \n                \n\n            \n                \n                    Este archivo exporta un objeto jwtConstants que contiene la clave secreta utilizada para firmar y verificar tokens JWT.\n\n                \n            \n\n        \n    \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
